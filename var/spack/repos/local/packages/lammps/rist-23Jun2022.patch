diff -urpN a/src/OPENMP/pair_lj_charmm_coul_long_omp.cpp b/src/OPENMP/pair_lj_charmm_coul_long_omp.cpp
--- a/src/OPENMP/pair_lj_charmm_coul_long_omp.cpp	2022-10-04 17:57:12.537075000 +0900
+++ b/src/OPENMP/pair_lj_charmm_coul_long_omp.cpp	2022-10-05 08:19:12.684484700 +0900
@@ -37,6 +37,148 @@ PairLJCharmmCoulLongOMP::PairLJCharmmCou
 }
 
 /* ---------------------------------------------------------------------- */
+//[RIST] template specialization: EVFLAG=0, EFLAG=0, NEWTON_PAIR=1
+template<>
+void PairLJCharmmCoulLongOMP::eval<0,0,1>(int iifrom, int iito, ThrData * const thr)
+{
+
+  const dbl3_t * _noalias const x = (dbl3_t *) atom->x[0];
+  dbl3_t * _noalias const f = (dbl3_t *) thr->get_f()[0];
+  const double * _noalias const q = atom->q;
+  const int * _noalias const type = atom->type;
+  const double * _noalias const special_coul = force->special_coul;
+  const double * _noalias const special_lj = force->special_lj;
+  const double qqrd2e = force->qqrd2e;
+  const double inv_denom_lj = 1.0/denom_lj;
+
+  const int * const ilist = list->ilist;
+  const int * const numneigh = list->numneigh;
+  const int * const * const firstneigh = list->firstneigh;
+  const int nlocal = atom->nlocal;
+
+  // loop over neighbors of my atoms
+
+  for (int ii = iifrom; ii < iito; ++ii) {
+
+    const int i = ilist[ii];
+    const int itype = type[i];
+    const double qtmp = q[i];
+    const double xtmp = x[i].x;
+    const double ytmp = x[i].y;
+    const double ztmp = x[i].z;
+    double fxtmp,fytmp,fztmp;
+    fxtmp=fytmp=fztmp=0.0;
+
+    const int * const jlist = firstneigh[i];
+    const int jnum = numneigh[i];
+    const double * _noalias const lj1i = lj1[itype];
+    const double * _noalias const lj2i = lj2[itype];
+    const double * _noalias const lj3i = lj3[itype];
+    const double * _noalias const lj4i = lj4[itype];
+
+    #pragma clang loop vectorize(assume_safety)
+    for (int jj = 0; jj < jnum; jj++) {
+      //double forcecoul, forcelj, evdwl, ecoul;
+      //forcecoul = forcelj = evdwl = ecoul = 0.0;
+      double forcecoul, forcelj;
+      forcecoul = forcelj = 0.0;
+
+      const int sbindex = sbmask(jlist[jj]);
+      const int j = jlist[jj] & NEIGHMASK;
+
+      const double delx = xtmp - x[j].x;
+      const double dely = ytmp - x[j].y;
+      const double delz = ztmp - x[j].z;
+      const double rsq = delx*delx + dely*dely + delz*delz;
+      const int jtype = type[j];
+
+      //if (rsq < cut_bothsq) { //cut_bothsq=MAX(cut_coulsq,cut_ljsq)
+        const double r2inv = 1.0/rsq;
+
+        if (rsq < cut_coulsq) {
+          if (!ncoultablebits || rsq <= tabinnersq) {
+            const double A1 =  0.254829592;
+            const double A2 = -0.284496736;
+            const double A3 =  1.421413741;
+            const double A4 = -1.453152027;
+            const double A5 =  1.061405429;
+            const double EWALD_F = 1.12837917;
+            const double INV_EWALD_P = 1.0/0.3275911;
+
+            const double r = sqrt(rsq);
+            const double grij = g_ewald * r;
+            const double expm2 = exp(-grij*grij);
+            const double t = INV_EWALD_P / (INV_EWALD_P + grij);
+            const double erfc = t * (A1+t*(A2+t*(A3+t*(A4+t*A5)))) * expm2;
+            const double prefactor = qqrd2e * qtmp*q[j]/r;
+            forcecoul = prefactor * (erfc + EWALD_F*grij*expm2);
+            //if (EFLAG) ecoul = prefactor*erfc;
+            //if (sbindex) { special_coul[0] = 1.0 (fixed)
+              const double adjust = (1.0-special_coul[sbindex])*prefactor;
+              forcecoul -= adjust;
+              //if (EFLAG) ecoul -= adjust;
+            //}
+          } else {
+            union_int_float_t rsq_lookup;
+            rsq_lookup.f = rsq;
+            const int itable = (rsq_lookup.i & ncoulmask) >> ncoulshiftbits;
+            const double fraction = (rsq_lookup.f - rtable[itable]) * drtable[itable];
+            const double table = ftable[itable] + fraction*dftable[itable];
+            forcecoul = qtmp*q[j] * table;
+            //if (EFLAG) ecoul = qtmp*q[j] * (etable[itable] + fraction*detable[itable]);
+            if (sbindex) {
+              const double table2 = ctable[itable] + fraction*dctable[itable];
+              const double prefactor = qtmp*q[j] * table2;
+              const double adjust = (1.0-special_coul[sbindex])*prefactor;
+              forcecoul -= adjust;
+              //if (EFLAG) ecoul -= adjust;
+            }
+          }
+        }
+
+        if (rsq < cut_ljsq) {
+          const double r6inv = r2inv*r2inv*r2inv;
+          forcelj = r6inv * (lj1i[jtype]*r6inv - lj2i[jtype]);
+          const double philj = r6inv*(lj3i[jtype]*r6inv-lj4i[jtype]);
+          //if (EFLAG) evdwl = philj;
+
+          if (rsq > cut_lj_innersq) {
+            const double drsq = cut_ljsq - rsq;
+            const double cut2 = (rsq - cut_lj_innersq) * drsq;
+            const double switch1 = drsq * (drsq*drsq + 3.0*cut2) * inv_denom_lj;
+            const double switch2 = 12.0*rsq * cut2 * inv_denom_lj;
+            forcelj = forcelj*switch1 + philj*switch2;
+            //if (EFLAG) evdwl *= switch1;
+          }
+
+          //if (sbindex) { //special_lj[0] = 1.0 (fixed)
+            const double factor_lj = special_lj[sbindex];
+            forcelj *= factor_lj;
+            //if (EFLAG) evdwl *= factor_lj;
+          //}
+        }
+        const double fpair = (forcecoul + forcelj) * r2inv;
+
+        fxtmp += delx*fpair;
+        fytmp += dely*fpair;
+        fztmp += delz*fpair;
+        //if (NEWTON_PAIR || j < nlocal) {
+          f[j].x -= delx*fpair;
+          f[j].y -= dely*fpair;
+          f[j].z -= delz*fpair;
+        //}
+
+        //if (EVFLAG) ev_tally_thr(this,i,j,nlocal,NEWTON_PAIR,
+        //                         evdwl,ecoul,fpair,delx,dely,delz,thr);
+      //}
+    } // End of jj-loop 
+    f[i].x += fxtmp;
+    f[i].y += fytmp;
+    f[i].z += fztmp;
+  }
+}
+
+/* ---------------------------------------------------------------------- */
 
 void PairLJCharmmCoulLongOMP::compute(int eflag, int vflag)
 {
diff -urpN a/src/OPENMP/pair_lj_cut_omp.cpp b/src/OPENMP/pair_lj_cut_omp.cpp
--- a/src/OPENMP/pair_lj_cut_omp.cpp	2022-10-04 17:57:12.765552000 +0900
+++ b/src/OPENMP/pair_lj_cut_omp.cpp	2022-10-05 08:20:15.880066100 +0900
@@ -72,6 +72,7 @@ void PairLJCutOMP::compute(int eflag, in
   } // end of omp parallel region
 }
 
+//[RIST] vectorize only if EVLFAG=EFLAG=0, NEWTON_PAIR=1
 template <int EVFLAG, int EFLAG, int NEWTON_PAIR>
 void PairLJCutOMP::eval(int iifrom, int iito, ThrData * const thr)
 {
@@ -110,6 +111,7 @@ void PairLJCutOMP::eval(int iifrom, int
     jnum = numneigh[i];
     fxtmp=fytmp=fztmp=0.0;
 
+    #pragma clang loop vectorize(assume_safety)
     for (jj = 0; jj < jnum; jj++) {
       j = jlist[jj];
       factor_lj = special_lj[sbmask(j)];
diff -urpN a/src/memory.cpp b/src/memory.cpp
--- a/src/memory.cpp	2022-10-04 17:57:11.990310700 +0900
+++ b/src/memory.cpp	2022-10-05 08:21:28.254708500 +0900
@@ -35,6 +35,15 @@
 #define LAMMPS_MEMALIGN 64
 #endif
 
+//[RIST] alignment for A64FX
+#if defined(__CLANG_FUJITSU) || defined(__FUJITSU)
+#if not defined(LAMMPS_MEMALIGN)
+#define LAMMPS_MEMALIGN 256
+#endif
+#include <cstring>
+#include <malloc.h>
+#endif
+
 using namespace LAMMPS_NS;
 
 /* ---------------------------------------------------------------------- */
@@ -72,6 +81,7 @@ void *Memory::smalloc(bigint nbytes, con
    safe realloc
 ------------------------------------------------------------------------- */
 
+//[RIST] aligned realloc for A64FX
 void *Memory::srealloc(void *ptr, bigint nbytes, const char *name)
 {
   if (nbytes == 0) {
@@ -98,6 +108,17 @@ void *Memory::srealloc(void *ptr, bigint
 #endif
     free(optr);
   }
+#elif defined(__CLANG_FUJITSU) || defined(__FUJITSU)
+#if defined(LAMMPS_MEMALIGN)
+  ptr = realloc(ptr, nbytes);
+  uintptr_t offset = ((uintptr_t)(const void *)(ptr)) % LAMMPS_MEMALIGN;
+  if (offset) {
+     void *optr = ptr;
+     ptr = smalloc(nbytes, name);
+     memcpy(ptr, optr, MIN(nbytes,malloc_usable_size(optr)));
+     free(optr);
+  }
+#endif
 #else
   ptr = realloc(ptr,nbytes);
 #endif
diff -urpN a/src/my_page.cpp b/src/my_page.cpp
--- a/src/my_page.cpp	2022-10-04 17:57:12.162143500 +0900
+++ b/src/my_page.cpp	2022-10-05 08:21:49.102249300 +0900
@@ -17,6 +17,13 @@
 #define LAMMPS_MEMALIGN 64
 #endif
 
+//[RIST] alignment for A64FX
+#if defined(__CLANG_FUJITSU) || defined(__FUJITSU)
+#if not defined(LAMMPS_MEMALIGN)
+#define LAMMPS_MEMALIGN 256
+#endif
+#endif
+
 using namespace LAMMPS_NS;
 
 /** \class LAMMPS_NS::MyPage
diff -urpN a/src/my_pool_chunk.cpp b/src/my_pool_chunk.cpp
--- a/src/my_pool_chunk.cpp	2022-10-04 17:57:12.349601400 +0900
+++ b/src/my_pool_chunk.cpp	2022-10-05 08:22:01.431979100 +0900
@@ -19,6 +19,13 @@
 #define LAMMPS_MEMALIGN 64
 #endif
 
+//[RIST] alignment for A64FX
+#if defined(__CLANG_FUJITSU) || defined(__FUJITSU)
+#if not defined(LAMMPS_MEMALIGN)
+#define LAMMPS_MEMALIGN 256
+#endif
+#endif
+
 using namespace LAMMPS_NS;
 
 /** \class LAMMPS_NS::MyPoolChunk
