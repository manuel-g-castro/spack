      SUBROUTINE LBMROP(IUT0,IUT5,IUT6,IERR,VSCALE,
     *                  UINLT,VINLT,WINLT,UWALL,VWALL,WWALL,
     *                  JCHGEO,MTFIX,NTFIX,LTFIX,TAUFIX,
     *                  NCHKFL,RHOSTP,NFLINT,JBOUN,LBTYPE,
     *                  JGEOM,FILEGM,MPG,HBOUN,IMODEL,CS,TAUMIN,
     *                  IWMODE,TAINLT,TAFREE,ICOLLI,FILEST,DGEOM,
     *                  IRFNF,MPBR,IWFUNC,IMODQ,EPSTRG,NP,ICALSS,
     *                  IINLTV,DBLAS,ICNSTD,
     *                  IWRTSF,INTSRF,IMVTRG,DTRG,FILESF,
     *                  MBLK,NBLK,NUMBLK,INTBLK,CORBLK,FILBLK,
     *                  JDUMP,PARDMP,JVISC,PARVIS,TAUTGT)
      IMPLICIT NONE
      INTEGER*4 IUT0,IUT5,IUT6,IERR,JCHGEO,JBOUN,LBTYPE(6),
     *          JGEOM,MPG,IWMODE,ICOLLI,IRFNF,MPBR,IWFUNC,IMODQ,
     *          NP ,IINLTV
      REAL*8    VSCALE,UINLT,VINLT,WINLT,UWALL,VWALL,WWALL,HBOUN,
     *          TAUMIN,TAINLT,TAFREE,DGEOM,EPSTRG,DBLAS
      CHARACTER*60 FILEGM,FILEST,FILESF
      CHARACTER*120 CBUF,CBUF2
C
CC [6] RELAXATION CONTROLL
      INTEGER*4 MTFIX,NTFIX,LTFIX(2,MTFIX) 
      REAL*8    TAUFIX(MTFIX) 
C  MTFIX       :MAX. NUMBER OF TAU-FIX INPUT
C  NTFIX       :     NUMBER OF TAU-FIX INPUT
C  LTFIX(1,I)  :SPECIFY DIRECTION OF TAU-FIX (1:X, 2:Y, 3:Z)
C  LTFIX(2,I)  :POSITION OF TAU-FIX CELL (1--> NC[X,Y,Z])
C  TAUFIX(I)   :RELAXATION COEF. TAU OF TAU-FIX CELL 
C
CC [7] CHECK FLOW
      INTEGER*4  NCHKFL
      REAL*8     RHOSTP
C   NCHKFL   :INTERVAL TO CHECK FLOW
C             NOTE THAT THE COMPUTATIONAL TIME TO CHECK FLOW IS ABOUT 100 
C             LONGER THAN FLOW COMPUTAITON. THERFORE, RECOMMENDED VALUE 
C             FOR NCHKFL IS LARGER THAN 100
C   RHOSTP   :COMPUTATION WILL BE STOPPED WHEN RHO IS LARGER THAN RHOSTP   
C
CC [8] FLOW OUTPUT CONTROLL
      INTEGER*4 NFLINT
C     NFLINT :GRID INTERVAL TO WRITE FLOW
C
C     NFLINT :GRID INTERVAL TO WRITE FLOW
C
C
C [10] VARIABLES FOR BLOCK
      INTEGER*4    MBLK, NBLK
      INTEGER*4    NUMBLK(3,MBLK),INTBLK(MBLK)
      REAL*8       CORBLK(6,MBLK)
      CHARACTER*60 FILBLK(MBLK)
C MBLK        : MAX. NUM. NUM OF BLOCK DATA (=200)
C NBLK        : NUM OF BLOCK DATA
C NUMBLK(:,:) : NUM OF POINTS IN EACH DIR. OF BLOCKS
C IANGLE(:)   : FLAG FOR ROTAING BLOCKS (NOT SUPPORTED IN THIS VERSION)
C               0: NOT RORATE (DEFUALT)
C               1: ROTATE BLOCKS ALONG Y=YROT, Z=ZROT
C               2: ROTATE BLOCKS ALONG Z=ZROT, X=XROT
C               3: ROTATE BLOCKS ALONG X=XROT, T=YROT
C ISTRAIN(:)  : FLAG FOR WTIRINT STRAIN TENSOR  (NOT SUPPORTED IN THIS VERSION)
C               0: NOT-WRITE (DEFUALT)
C               1: WRITE
C INTBLK(:)   : TIME INTERVAL FOR WRITING BLOCK DATA
C               0: OUTPUT ONLY FINALE FLOW FIELD
C               LARGER THAN 1:OUTPUT FLOW FIELD AT EVERY INTBLK STEP
C
C CORBLK(:,:) : BOUNDING BOX OF BLOCKS   
C               CORBLK([1,2,3],:) --> Xmin, Ymin, Zmin 
C               CORBLK([4,5,6],:) --> Xmax, Ymax, Zmax 
C ANGLE(:)    : ANGLE FOR ROTAING BLOCKS  (NOT SUPPORTED IN THIS VERSION)
C ROTCNT(:,:) : COORD. OF RORATION AXIS   (NOT SUPPORTED IN THIS VERSION)
C FILBLK(:)   : FILE NAME OF BLOCK DATA
C
C
C [11] VARIABLES FOR SURFACE
      INTEGER*4 IWRTSF,INTSRF,IMVTRG
      REAL*8    DTRG
C     IWRTSRF    : FLAG FOR WRITING GF-SURF FILE
C               0: NOT WRITE GF-SURF FILE (DEFAULT)
C               1:     WRITE GF-SURF FILE
C     INTSRF     : INTERVAL FOR WRITING GF-SURF FILE
C               0: WRITE GF-SURF FILE AT ONLY FINAL   STEP  
C     INTSRF.GT.0: WRITE GF-SURF FILE AT EVERY INTSRF STEP  
C     IMVTRG     : FLAG FOR MOVING TRIG-DATA
C               0: NOT MOVE TRID-DATA (DEFAULT)
C               1:     MOVE TRID-DATA
C     DTRG      : MOVING LENGTH NORMALIZED BY MINIMUM GRID LENGTH
C
C [12] VARIABLES FOR DUMPING REGION 
C
      INTEGER*4 JDUMP
      REAL*8    PARDMP(12)
C 
C JDUMP       : TYPE OF DUMPING REGION
C             : 0: NO DUMPING REGION
C             : 1: SPHERE
C             : 2: CYLINDER ALONG X-DIRECTION
C             : 3: CYLINDER ALONG X-DIRECTION
C             : 4: CYLINDER ALONG X-DIRECTION
C             :11: ELLIPSOID  
C
C IF JDUMP = 1,2,3 OR 4
C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 4)  : R1 OF DOUMPING REGION
C PARDMP( 5)  : R2 OF DOUMPING REGION
C PARDMP( 6)  : COEFICIENT OF DUMPING TERM (=ALPHA)
C PARDMP( 7)  : TARGET DENSITY  
C PARDMP( 8)  : TARGET VELOCITY-U
C PARDMP( 9)  : TARGET VELOCITY-V 
C PARDMP(10)  : TARGET VELOCITY-W
C
C IF JDUMP = 11
C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 4)  : RX    OF DOUMPING REGION
C PARDMP( 5)  : RY    OF DOUMPING REGION
C PARDMP( 6)  : RZ    OF DOUMPING REGION
C PARDMP( 7)  : RATIO OF DOUMPING REGION
C PARDMP( 8)  : COEFICIENT OF DUMPING TERM (=ALPHA)
C PARDMP( 9)  : TARGET DENSITY  
C PARDMP(10)  : TARGET VELOCITY-U
C PARDMP(11)  : TARGET VELOCITY-V 
C PARDMP(12)  : TARGET VELOCITY-W
C
CC [13] RELAXATION CONTROLL
CC
      INTEGER*4 JVISC
      REAL*8    PARVIS(8),TAUTGT
C JVISC       : TYPE OF DUMPING REGION
C             : 0: NO DUMPING REGION
C             : 1: SPHERE
C             : 2: CYLINDER ALONG X-DIRECTION
C             : 3: CYLINDER ALONG Y-DIRECTION
C             : 4: CYLINDER ALONG Z-DIRECTION
C             :11: ELLIPSOID  
C
C TAUTGT      : RELAXTION TIME AT VISCOUS REGION
C
C IF JVISC = 1,2,3 OR 4
C PARVIS( 1)  : X CORDINATE OF CENTER OF VISCOUS REGION 
C PARVIS( 2)  : Y CORDINATE OF CENTER OF VISCOUS REGION 
C PARVIS( 3)  : Z CORDINATE OF CENTER OF VISCOUS REGION 
C PARVIS( 4)  : R1 OF DOUMPING REGION
C PARVIS( 5)  : R2 OF DOUMPING REGION
C PARVIS( 6)  : ALPHA (=1.0)
C
C IF JVISC = 11
C PARVIS( 1)  : X CORDINATE OF CENTER OF VISCOUS REGION 
C PARVIS( 2)  : Y CORDINATE OF CENTER OF VISCOUS REGION 
C PARVIS( 3)  : Z CORDINATE OF CENTER OF VISCOUS REGION 
C PARVIS( 4)  : RX    OF DOUMPING REGION
C PARVIS( 5)  : RY    OF DOUMPING REGION
C PARVIS( 6)  : RZ    OF DOUMPING REGION
C PARVIS( 7)  : RATIO OF DOUMPING REGION
C PARVIS( 8)  : ALPHA (=1.0)
C
C [10] VARIABLES FOR TURBULENCR MODEL
      INTEGER*4 IMODEL,ICALSS,ICNSTD
      REAL*8    CS
C
C IMODEL=0: NON-SGS MODEL 
C IMODEL=1: STANDARD SMAGORINSKY MODEL
C ICALSS=0: CAL. STRAIN BY MACRO VARIAVLES
C ICALSS=1: CAL. STRAIN BY DISRIBUTION FUNCTAION (EXPLICIT)
C ICALSS=2: CAL. STRAIN BY DISRIBUTION FUNCTAION (IMPLICIT)
C
C ICNSTD=0: USE LOCAL   GRID SCALE FOR COMPUTING TURBULENT VISCOCITY  
C ICNSTD=1: USE MINIMUM GRID SCALE FOR COMPUTING TURBULENT VISCOCITY  

      INTEGER*4 MKEYWD
      PARAMETER ( MKEYWD =36 )
      CHARACTER*8 CKEYWD(MKEYWD)
      DATA CKEYWD( 1) / '#OPTIONS' /
      DATA CKEYWD( 2) / '#OPTIONE' /
      DATA CKEYWD( 3) / '#BC_INLT' /
      DATA CKEYWD( 4) / '#BC_MWAL' /
      DATA CKEYWD( 5) / '#CHK_GEO' /
      DATA CKEYWD( 6) / '#SET_TAU' /
      DATA CKEYWD( 7) / '#CHK_FLW' /
      DATA CKEYWD( 8) / '#WRT_INT' /
      DATA CKEYWD( 9) / '#BC_MAKE' /
      DATA CKEYWD(10) / '#BC_TYPE' /
      DATA CKEYWD(11) / '#RD_GEOM' /
      DATA CKEYWD(12) / '#SZ_GEOM' /
      DATA CKEYWD(13) / '#INTSECT' /
      DATA CKEYWD(14) / '#SGS_SSM' /
      DATA CKEYWD(15) / '#TAU_MIN' /
      DATA CKEYWD(16) / '#NOWRITE' /
      DATA CKEYWD(17) / '#TAUINLT' /
      DATA CKEYWD(18) / '#TAUFREE' /
      DATA CKEYWD(19) / '#COL_MDL' /
      DATA CKEYWD(20) / '#RD_TRIG' /
      DATA CKEYWD(21) / '#GEOMRSL' /
      DATA CKEYWD(22) / '#RF_FUNC' /
      DATA CKEYWD(23) / '#SZ_BOUN' /
      DATA CKEYWD(24) / '#NOWFUNC' /
      DATA CKEYWD(25) / '#SET_Q_1' /
      DATA CKEYWD(26) / '#EPS_TRG' /
      DATA CKEYWD(27) / '#NUM_VEL' /
      DATA CKEYWD(28) / '#CAL_STR' /
      DATA CKEYWD(29) / '#BLASIUS' /
      DATA CKEYWD(30) / '#CONST_D' /
      DATA CKEYWD(31) / '#WRT_SRF' /
      DATA CKEYWD(32) / '#INT_SRF' /
      DATA CKEYWD(33) / '#MV_TRIG' /
      DATA CKEYWD(34) / '#WRT_BLK' /
      DATA CKEYWD(35) / '#DUMPRGN' /
      DATA CKEYWD(36) / '#VISCRGN' /
C
      CHARACTER*14 CBTYPE(0:4)
      DATA CBTYPE(0) / ' NO B.C.      ' /
      DATA CBTYPE(1) / ' WALL         ' /
      DATA CBTYPE(2) / ' INLET        ' /
      DATA CBTYPE(3) / ' MOVING-WALL  ' /
      DATA CBTYPE(4) / ' FREE         ' /
C
      INTEGER*4 I,ICS,ICE,NC
C
C FOR BLOCK   
      INTEGER*4 NX,NY,NZ,INTVL
      REAL*8    X0,Y0,Z0,X1,Y1,Z1
      CHARACTER*5 FLBLK0
      CHARACTER*3 CINDEX
      DATA FLBLK0 /"BLCK."/ 
C
C
C      READ CONTROL PARAMETERS FOR OPTIONAL FUNCTIONS
C
      IERR = 0
      DO I=1,60
          FILEGM(I:I)=" "
          FILEST(I:I)=" "
          FILESF(I:I)=" "
      ENDDO
C
      NBLK=0 
C
   10 READ(IUT5,'(A120)',END=100) CBUF
      IF(CBUF(1:8).EQ.CKEYWD(1)) THEN
          WRITE(IUT6,*) ' LESROP: START READING OPTIONAL PARAMETERS '
      ELSE
          GO TO 10
      ENDIF
C
 1000 CONTINUE
C
      READ(IUT5,'(A120)') CBUF
C
      IF(CBUF(1:8).EQ.CKEYWD(3)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(3), '" IS DETECTED.'
C
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) UINLT,VINLT,WINLT
          WRITE(IUT6,*) ' LBMROP: UINLT=',UINLT
          WRITE(IUT6,*) ' LBMROP: VINLT=',VINLT
          WRITE(IUT6,*) ' LBMROP: WINLT=',WINLT
          UINLT=UINLT*VSCALE
          VINLT=VINLT*VSCALE
          WINLT=WINLT*VSCALE
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(4)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(4), '" IS DETECTED.'
C
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) UWALL,VWALL,WWALL
          WRITE(IUT6,*) ' LBMROP: UWALL=',UWALL
          WRITE(IUT6,*) ' LBMROP: VWALL=',VWALL
          WRITE(IUT6,*) ' LBMROP: WWALL=',WWALL
          UWALL=UWALL*VSCALE
          VWALL=VWALL*VSCALE
          WWALL=WWALL*VSCALE
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(5)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(5), '" IS DETECTED.'
          JCHGEO=1
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(6)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(6), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          NTFIX=NTFIX+1    
C
          IF(NTFIX.GT.MTFIX) THEN
              WRITE(IUT6,*) 'INSIFFICIENT MEMORY FOR LTFIX: STOP' 
              GOTO 9999
          ENDIF 
C
          READ(CBUF2,*) LTFIX(1,NTFIX),LTFIX(2,NTFIX),TAUFIX(NTFIX)
          WRITE(IUT6,*) ' LBMROP: LTFIX(1)=',LTFIX(1,NTFIX)
          WRITE(IUT6,*) ' LBMROP: LTFIX(2)=',LTFIX(2,NTFIX)
          WRITE(IUT6,*) ' LBMROP: TAUFIX  =',TAUFIX(NTFIX)
C
          IF(LTFIX(1,NTFIX).LT.1 .OR. LTFIX(1,NTFIX).GT.3) THEN
              WRITE(IUT6,*) 'LTFIX MUST BE 1, 2 OR 3 : STOP' 
              GOTO 9999
          ENDIF 
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(7)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(7), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) NCHKFL, RHOSTP
          WRITE(IUT6,*) ' LBMROP: NCHKFL=',NCHKFL
          WRITE(IUT6,*) ' LBMROP: RHOSTP=',RHOSTP
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(8)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(8), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) NFLINT
          WRITE(IUT6,*) ' LBMROP: NFLINT=',NFLINT
C
          IF(NFLINT.NE.2  .AND. NFLINT.NE.4 .AND. NFLINT.NE.8 .AND.
     *       NFLINT.NE.16 .AND. NFLINT.NE.32) THEN
             WRITE(IUT6,*) 'NFLINT MUST BE 2, 4, 8, 16 OR 32 : STOP'
              GOTO 9999
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(9)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(9), '" IS DETECTED.'
          JBOUN=2
          WRITE(IUT6,*) ' LBMROP: JBOUN =',JBOUN
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(10)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(10), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) (LBTYPE(I),I=1,6)
          WRITE(IUT6,*) ' LBMROP: BC TYPE AT -X IS',CBTYPE(LBTYPE(1))
          WRITE(IUT6,*) ' LBMROP: BC TYPE AT +X IS',CBTYPE(LBTYPE(2))
          WRITE(IUT6,*) ' LBMROP: BC TYPE AT -Y IS',CBTYPE(LBTYPE(3))
          WRITE(IUT6,*) ' LBMROP: BC TYPE AT +Y IS',CBTYPE(LBTYPE(4))
          WRITE(IUT6,*) ' LBMROP: BC TYPE AT -Z IS',CBTYPE(LBTYPE(5))
          WRITE(IUT6,*) ' LBMROP: BC TYPE AT +Z IS',CBTYPE(LBTYPE(6))
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(11)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(11), '" IS DETECTED.'
          WRITE(IUT6,*) 
     *    ' LBMROP:THIS OPTION IS NOT SUPPORTED SINCE VER-47.01.'
          IERR=1
          RETURN
C
          ICS=0
          ICE=0
          DO 2000 I=9,120
             IF (ICS.EQ.0.AND.CBUF(I:I).NE.' ') THEN
                ICS=I
                GOTO 2000
             ENDIF
             IF (ICS.GT.0.AND.CBUF(I:I).EQ.' ') THEN
                ICE=I-1
                GOTO 2010
             ENDIF
 2000     CONTINUE
 2010     CONTINUE
C
          NC=ICE-ICS+1
          FILEGM(1:NC) = CBUF(ICS:ICE)
          WRITE(IUT6,'(A34,A60)') 
     *    ' LBMROP: FILE-NAME OF GF-GEOM  : ', FILEGM
          JGEOM=1
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(12)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(12), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) MPG
          WRITE(IUT6,*) ' LBMROP: MPG =',MPG
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(13)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(13), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) HBOUN
          WRITE(IUT6,*) ' LBMROP: HBOUN =',HBOUN
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(14)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(14), '" IS DETECTED.'
          IMODEL=1
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) CS
          WRITE(IUT6,*) ' LBMROP: CS =',CS
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(15)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(15), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) TAUMIN
          IF(TAUMIN.LE.0.5D0) THEN
              WRITE(IUT6,*) 'TAU SHOULD BE LARGER THAN 0.5 '
              IERR=1
              RETURN
          ENDIF
          WRITE(IUT6,*) ' LBMROP: TAUMIN =',TAUMIN
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(16)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(16), '" IS DETECTED.'
          IWMODE=0
          WRITE(IUT6,*) ' LBMROP: IWMODE =',IWMODE
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(17)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(17), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) TAINLT
          IF(TAINLT.LE.0.5D0) THEN
              WRITE(IUT6,*) 'TAU SHOULD BE LARGER THAN 0.5 '
              IERR=1
              RETURN
          ENDIF
          WRITE(IUT6,*) ' LBMROP: TAINLT =',TAINLT
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(18)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(18), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) TAFREE
          IF(TAFREE.LE.0.5D0) THEN
              WRITE(IUT6,*) 'TAU SHOULD BE LARGER THAN 0.5 '
              IERR=1
              RETURN
          ENDIF
          WRITE(IUT6,*) ' LBMROP: TAFREE =',TAFREE
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(19)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(19), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) ICOLLI
          IF(ICOLLI.EQ.1) THEN  
          WRITE(IUT6,*) ' LBMROP: SRT IS SPECIFIED FOR COLLISON MODEL'
          ELSE IF(ICOLLI.EQ.2) THEN  
          WRITE(IUT6,*) ' LBMROP: MRT IS SPECIFIED FOR COLLISON MODEL'
          ELSE
          WRITE(IUT6,*) ' LBMROP: INVALID INPUT FOR COLLISON MODEL'
          IERR=1
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(20)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(20), '" IS DETECTED.'
C
          ICS=0
          ICE=0
          DO 2100 I=9,120
             IF (ICS.EQ.0.AND.CBUF(I:I).NE.' ') THEN
                ICS=I
                GOTO 2100
             ENDIF
             IF (ICS.GT.0.AND.CBUF(I:I).EQ.' ') THEN
                ICE=I-1
                GOTO 2110
             ENDIF
 2100     CONTINUE
 2110     CONTINUE
C
          NC=ICE-ICS+1
          FILEST(1:NC) = CBUF(ICS:ICE)
          WRITE(IUT6,'(A34,A60)') 
     *    ' LBMROP: FILE-NAME OF GF-TRIG  : ', FILEST
          JGEOM=2
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(21)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(21), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) DGEOM
          WRITE(IUT6,*) ' LBMROP: DGEOM =',DGEOM
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(22)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(22), '" IS DETECTED.'
          IRFNF=1
          WRITE(IUT6,*) ' LBMROP: IRFNF =',IRFNF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(23)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(23), '" IS DETECTED.'
          READ(CBUF2,*) MPBR
          WRITE(IUT6,*) ' LBMROP: MPBR =',MPBR
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(24)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(24), '" IS DETECTED.'
          IWFUNC=0
          WRITE(IUT6,*) ' LBMROP: IWFUNC =',IWFUNC
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(25)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(25), '" IS DETECTED.'
          IMODQ=1
          WRITE(IUT6,*) ' LBMROP: IMODQ =',IMODQ
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(26)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(26), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) EPSTRG
          WRITE(IUT6,*) ' LBMROP: EPSTRG =',EPSTRG
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(27)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(27), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) NP
          WRITE(IUT6,*) ' LBMROP: NP =',NP
          IF(NP.NE.15 .AND. NP.NE.27) THEN
              WRITE(IUT6,*) 'NP MUST BE 15 OR 27'
              IERR=1
              RETURN    
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(28)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(28), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) ICALSS
          WRITE(IUT6,*) ' LBMROP: ICALSS =',ICALSS
          IF(ICALSS.NE.0 .AND. ICALSS.NE.1 .AND. ICALSS.NE.2) THEN
              WRITE(IUT6,*) 'ICALSS MUST BE 0,1 OR 2'
              IERR=1
              RETURN    
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(29)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(29), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) IINLTV, DBLAS
          WRITE(IUT6,*) ' LBMROP: INLTV =',IINLTV
          WRITE(IUT6,*) ' LBMROP: DBLAS =',DBLAS
          IF(      IINLTV.NE.0 .AND. IINLTV.NE.1
     *       .AND. IINLTV.NE.2 .AND. IINLTV.NE.3) THEN
              WRITE(IUT6,*) 'IINLTV MUST BE 0,1,2, OR 3'
              IERR=1
              RETURN    
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(30)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(30), '" IS DETECTED.'
          ICNSTD=1
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(31)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(31), '" IS DETECTED.'
C
          ICS=0
          ICE=0
          DO 2200 I=9,120
             IF (ICS.EQ.0.AND.CBUF(I:I).NE.' ') THEN
                ICS=I
                GOTO 2200
             ENDIF
             IF (ICS.GT.0.AND.CBUF(I:I).EQ.' ') THEN
                ICE=I-1
                GOTO 2210
             ENDIF
 2200     CONTINUE
 2210     CONTINUE
          NC=ICE-ICS+1
          FILESF(1:NC) = CBUF(ICS:ICE)
          WRITE(IUT6,'(A34,A60)') 
     *    ' LBMROP: FILE-NAME OF GF-SURF  : ', FILESF
          IWRTSF=1
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(32)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(32), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) INTSRF
          WRITE(IUT6,*) ' LBMROP: INTSRF =',INTSRF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(33)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(33), '" IS DETECTED.'
          IMVTRG=1
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) DTRG
          WRITE(IUT6,*) ' LBMROP: DTRG =',DTRG
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(34)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(34), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) X0,Y0,Z0,X1,Y1,Z1,NX,NY,NZ,INTVL
          NBLK=NBLK+1
C
          IF(NBLK.LT.10) THEN
              WRITE(CINDEX,'("00",I1)') NBLK
          ELSE IF (NBLK.LE.99) THEN
              WRITE(CINDEX,'("0",I2)') NBLK
          ELSE IF (NBLK.LE.200) THEN
              WRITE(CINDEX,'(I3)') NBLK
          ELSE
              WRITE(IUT6,*) 'TOO MANY BLOCK DATA: ERROR STOP' 
              IERR=1
              RETURN
          ENDIF
C
          CORBLK(1,NBLK)=X0
          CORBLK(2,NBLK)=Y0
          CORBLK(3,NBLK)=Z0
          CORBLK(4,NBLK)=X1
          CORBLK(5,NBLK)=Y1
          CORBLK(6,NBLK)=Z1
          NUMBLK(1,NBLK)=NX
          NUMBLK(2,NBLK)=NY
          NUMBLK(3,NBLK)=NZ
          INTBLK(  NBLK)=INTVL
          FILBLK(NBLK)=FLBLK0(1:5)//CINDEX
          WRITE(IUT6,'(A21,3I8)')
     *    ' LBMROP:BLOCK DATA :',NBLK
          WRITE(IUT6,'(A21,6E13.5)')
     *    ' LBMROP:BLOCK DATA :',(CORBLK(I,NBLK),I=1,6)
          WRITE(IUT6,'(A21,3I8)')
     *    ' LBMROP:BLOCK DATA :',(NUMBLK(I,NBLK),I=1,3)
          WRITE(IUT6,'(A21,3I8)')
     *    ' LBMROP:BLOCK DATA :',INTBLK(NBLK)
          WRITE(IUT6,'(A21,A30)')
     *    ' LBMROP:BLOCK DATA :',FILBLK(NBLK)
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(35)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(35), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) JDUMP
          IF(JDUMP.GE.1 .AND. JDUMP.LE.4) THEN
              READ(CBUF2,*) JDUMP,(PARDMP(I),I=1,10)
          ELSE IF(JDUMP.EQ.11) THEN
              READ(CBUF2,*) JDUMP,(PARDMP(I),I=1,12)
          ELSE
              WRITE(IUT6,*) 'INVALID VALUE FOR JDUMP: STOP',JDUMP
              IERR=1
              RETURN
          ENDIF 
C
C IF JDUMP = 1,2,3 OR 4
C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 4)  : R1 OF DOUMPING REGION
C PARDMP( 5)  : R2 OF DOUMPING REGION
C PARDMP( 6)  : COEFICIENT OF DUMPING TERM (=ALPHA)
C PARDMP( 7)  : TARGET DENSITY  
C PARDMP( 8)  : TARGET VELOCITY-U
C PARDMP( 9)  : TARGET VELOCITY-V 
C PARDMP(10)  : TARGET VELOCITY-W
C
C IF JDUMP = 11
C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION 
C PARDMP( 4)  : RX    OF DOUMPING REGION
C PARDMP( 5)  : RY    OF DOUMPING REGION
C PARDMP( 6)  : RZ    OF DOUMPING REGION
C PARDMP( 7)  : RATIO OF DOUMPING REGION
C PARDMP( 8)  : COEFICIENT OF DUMPING TERM (=ALPHA)
C PARDMP( 9)  : TARGET DENSITY  
C PARDMP(10)  : TARGET VELOCITY-U
C PARDMP(11)  : TARGET VELOCITY-V 
C PARDMP(12)  : TARGET VELOCITY-W
          WRITE(IUT6,'(A17,I13  )') ' LBMROP: JDUMP :',JDUMP
          IF(JDUMP.GE.1 .AND. JDUMP.LE.4) THEN
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARDMP(1)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARDMP(2)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARDMP(3)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R1    :',PARDMP(4)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R2    :',PARDMP(5)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ALPHA :',PARDMP(6)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RHO   :',PARDMP(7)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: U0    :',PARDMP(8)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: V0    :',PARDMP(9)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: W0    :',PARDMP(10)
          PARDMP( 8)=PARDMP( 8)*VSCALE
          PARDMP( 9)=PARDMP( 9)*VSCALE
          PARDMP(10)=PARDMP(10)*VSCALE
          ELSE IF(JDUMP.EQ.11) THEN
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARDMP(1)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARDMP(2)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARDMP(3)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RX    :',PARDMP(4)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RY    :',PARDMP(5)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RZ    :',PARDMP(6)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RATIO :',PARDMP(7)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ALPHA :',PARDMP(8)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RHO   :',PARDMP(9)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: U0    :',PARDMP(10)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: V0    :',PARDMP(11)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: W0    :',PARDMP(12)
          PARDMP(10)=PARDMP(10)*VSCALE
          PARDMP(11)=PARDMP(11)*VSCALE
          PARDMP(12)=PARDMP(12)*VSCALE
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(36)) THEN
          WRITE(IUT6,*) ' LBMROP:'
          WRITE(IUT6,*) ' LBMROP: "',CKEYWD(36), '" IS DETECTED.'
          CBUF2 = CBUF(9:120)
          READ(CBUF2,*) JVISC
          IF(JVISC.GE.1 .AND. JVISC.LE.4) THEN
              READ(CBUF2,*) JVISC,(PARVIS(I),I=1,5),TAUTGT
              PARVIS(6)=1.0D0
          ELSE IF(JVISC.EQ.11) THEN
              READ(CBUF2,*) JVISC,(PARVIS(I),I=1,7),TAUTGT
              PARVIS(8)=1.0D0
          ELSE
              WRITE(IUT6,*) 'INVALID VALUE FOR JVISC: STOP',JVISC
              IERR=1
              RETURN
          ENDIF 
C
          WRITE(IUT6,'(A17,I13  )') ' LBMROP: JVISC :',JVISC
          IF(JVISC.GE.1 .AND. JVISC.LE.4) THEN
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARVIS(1)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARVIS(2)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARVIS(3)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R1    :',PARVIS(4)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R2    :',PARVIS(5)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: TAUTGT:',TAUTGT
          ELSE IF(JVISC.EQ.11) THEN
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARVIS(1)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARVIS(2)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARVIS(3)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RX    :',PARVIS(4)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RY    :',PARVIS(5)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RZ    :',PARVIS(6)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RATIO :',PARVIS(7)
          WRITE(IUT6,'(A17,F13.5)') ' LBMROP: TAUTGT:',TAUTGT
          ENDIF
      ENDIF
C
      IF(CBUF(1:8).EQ.CKEYWD(2)) THEN
          WRITE(IUT6,*) ' LESROP: END   READING OPTIONAL PARAMETERS'
      ELSE
          GO TO 1000
      ENDIF
C
      RETURN
C
  999 CONTINUE
C
  100 WRITE(IUT6,*) ' LBMROP: NO OPTIONAL PARAMETERS'
      RETURN
C
 9999 CONTINUE
      IERR=1
      RETURN
C
      END
