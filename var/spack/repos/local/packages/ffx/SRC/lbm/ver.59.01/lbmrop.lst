
 Fujitsu Fortran Version 4.8.1  Thu Nov 24 16:45:52 2022

 Compilation information
   Current directory : /vol0005/mdt2/home/u10588/SRC/lbm/ver.59.01
   Source file       : lbmrop.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0005/mdt2/home/u10588/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -Nlst=t -Cpp -Cfpp -c -I/opt/FJSVxtclanga/.common/MELI028/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI028/lib64 -Knointentopt
   Cpp options          : -I/vol0005/mdt2/home/u10588/FFB/include -I/include/mpi/fujitsu/ -Dcputime -I/opt/FJSVxtclanga/.common/MELI028/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI028/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=8 -D__FRT_patchlevel__=1 -D__FRT_version__="4.8.1" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Knoarray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nlibomp -Nline -Nlst -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "LBMROP"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE LBMROP(IUT0,IUT5,IUT6,IERR,VSCALE,
          2                          *                  UINLT,VINLT,WINLT,UWALL,VWALL,WWALL,
          3                          *                  JCHGEO,MTFIX,NTFIX,LTFIX,TAUFIX,
          4                          *                  NCHKFL,RHOSTP,NFLINT,JBOUN,LBTYPE,
          5                          *                  JGEOM,FILEGM,MPG,HBOUN,IMODEL,CS,TAUMIN,
          6                          *                  IWMODE,TAINLT,TAFREE,ICOLLI,FILEST,DGEOM,
          7                          *                  IRFNF,MPBR,IWFUNC,IMODQ,EPSTRG,NP,ICALSS,
          8                          *                  IINLTV,DBLAS,ICNSTD,
          9                          *                  IWRTSF,INTSRF,IMVTRG,DTRG,FILESF,
         10                          *                  MBLK,NBLK,NUMBLK,INTBLK,CORBLK,FILBLK,
         11                          *                  JDUMP,PARDMP,JVISC,PARVIS,TAUTGT)
         12                           IMPLICIT NONE
         13                           INTEGER*4 IUT0,IUT5,IUT6,IERR,JCHGEO,JBOUN,LBTYPE(6),
         14                          *          JGEOM,MPG,IWMODE,ICOLLI,IRFNF,MPBR,IWFUNC,IMODQ,
         15                          *          NP ,IINLTV
         16                           REAL*8    VSCALE,UINLT,VINLT,WINLT,UWALL,VWALL,WWALL,HBOUN,
         17                          *          TAUMIN,TAINLT,TAFREE,DGEOM,EPSTRG,DBLAS
         18                           CHARACTER*60 FILEGM,FILEST,FILESF
         19                           CHARACTER*120 CBUF,CBUF2
         20                     C
         21                     CC [6] RELAXATION CONTROLL
         22                           INTEGER*4 MTFIX,NTFIX,LTFIX(2,MTFIX)
         23                           REAL*8    TAUFIX(MTFIX)
         24                     C  MTFIX       :MAX. NUMBER OF TAU-FIX INPUT
         25                     C  NTFIX       :     NUMBER OF TAU-FIX INPUT
         26                     C  LTFIX(1,I)  :SPECIFY DIRECTION OF TAU-FIX (1:X, 2:Y, 3:Z)
         27                     C  LTFIX(2,I)  :POSITION OF TAU-FIX CELL (1--> NC[X,Y,Z])
         28                     C  TAUFIX(I)   :RELAXATION COEF. TAU OF TAU-FIX CELL
         29                     C
         30                     CC [7] CHECK FLOW
         31                           INTEGER*4  NCHKFL
         32                           REAL*8     RHOSTP
         33                     C   NCHKFL   :INTERVAL TO CHECK FLOW
         34                     C             NOTE THAT THE COMPUTATIONAL TIME TO CHECK FLOW IS ABOUT 100
         35                     C             LONGER THAN FLOW COMPUTAITON. THERFORE, RECOMMENDED VALUE
         36                     C             FOR NCHKFL IS LARGER THAN 100
         37                     C   RHOSTP   :COMPUTATION WILL BE STOPPED WHEN RHO IS LARGER THAN RHOSTP
         38                     C
         39                     CC [8] FLOW OUTPUT CONTROLL
         40                           INTEGER*4 NFLINT
         41                     C     NFLINT :GRID INTERVAL TO WRITE FLOW
         42                     C
         43                     C     NFLINT :GRID INTERVAL TO WRITE FLOW
         44                     C
         45                     C
         46                     C [10] VARIABLES FOR BLOCK
         47                           INTEGER*4    MBLK, NBLK
         48                           INTEGER*4    NUMBLK(3,MBLK),INTBLK(MBLK)
         49                           REAL*8       CORBLK(6,MBLK)
         50                           CHARACTER*60 FILBLK(MBLK)
         51                     C MBLK        : MAX. NUM. NUM OF BLOCK DATA (=200)
         52                     C NBLK        : NUM OF BLOCK DATA
         53                     C NUMBLK(:,:) : NUM OF POINTS IN EACH DIR. OF BLOCKS
         54                     C IANGLE(:)   : FLAG FOR ROTAING BLOCKS (NOT SUPPORTED IN THIS VERSION)
         55                     C               0: NOT RORATE (DEFUALT)
         56                     C               1: ROTATE BLOCKS ALONG Y=YROT, Z=ZROT
         57                     C               2: ROTATE BLOCKS ALONG Z=ZROT, X=XROT
         58                     C               3: ROTATE BLOCKS ALONG X=XROT, T=YROT
         59                     C ISTRAIN(:)  : FLAG FOR WTIRINT STRAIN TENSOR  (NOT SUPPORTED IN THIS VERSION)
         60                     C               0: NOT-WRITE (DEFUALT)
         61                     C               1: WRITE
         62                     C INTBLK(:)   : TIME INTERVAL FOR WRITING BLOCK DATA
         63                     C               0: OUTPUT ONLY FINALE FLOW FIELD
         64                     C               LARGER THAN 1:OUTPUT FLOW FIELD AT EVERY INTBLK STEP
         65                     C
         66                     C CORBLK(:,:) : BOUNDING BOX OF BLOCKS
         67                     C               CORBLK([1,2,3],:) --> Xmin, Ymin, Zmin
         68                     C               CORBLK([4,5,6],:) --> Xmax, Ymax, Zmax
         69                     C ANGLE(:)    : ANGLE FOR ROTAING BLOCKS  (NOT SUPPORTED IN THIS VERSION)
         70                     C ROTCNT(:,:) : COORD. OF RORATION AXIS   (NOT SUPPORTED IN THIS VERSION)
         71                     C FILBLK(:)   : FILE NAME OF BLOCK DATA
         72                     C
         73                     C
         74                     C [11] VARIABLES FOR SURFACE
         75                           INTEGER*4 IWRTSF,INTSRF,IMVTRG
         76                           REAL*8    DTRG
         77                     C     IWRTSRF    : FLAG FOR WRITING GF-SURF FILE
         78                     C               0: NOT WRITE GF-SURF FILE (DEFAULT)
         79                     C               1:     WRITE GF-SURF FILE
         80                     C     INTSRF     : INTERVAL FOR WRITING GF-SURF FILE
         81                     C               0: WRITE GF-SURF FILE AT ONLY FINAL   STEP
         82                     C     INTSRF.GT.0: WRITE GF-SURF FILE AT EVERY INTSRF STEP
         83                     C     IMVTRG     : FLAG FOR MOVING TRIG-DATA
         84                     C               0: NOT MOVE TRID-DATA (DEFAULT)
         85                     C               1:     MOVE TRID-DATA
         86                     C     DTRG      : MOVING LENGTH NORMALIZED BY MINIMUM GRID LENGTH
         87                     C
         88                     C [12] VARIABLES FOR DUMPING REGION
         89                     C
         90                           INTEGER*4 JDUMP
         91                           REAL*8    PARDMP(12)
         92                     C
         93                     C JDUMP       : TYPE OF DUMPING REGION
         94                     C             : 0: NO DUMPING REGION
         95                     C             : 1: SPHERE
         96                     C             : 2: CYLINDER ALONG X-DIRECTION
         97                     C             : 3: CYLINDER ALONG X-DIRECTION
         98                     C             : 4: CYLINDER ALONG X-DIRECTION
         99                     C             :11: ELLIPSOID
        100                     C
        101                     C IF JDUMP = 1,2,3 OR 4
        102                     C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION
        103                     C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION
        104                     C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION
        105                     C PARDMP( 4)  : R1 OF DOUMPING REGION
        106                     C PARDMP( 5)  : R2 OF DOUMPING REGION
        107                     C PARDMP( 6)  : COEFICIENT OF DUMPING TERM (=ALPHA)
        108                     C PARDMP( 7)  : TARGET DENSITY
        109                     C PARDMP( 8)  : TARGET VELOCITY-U
        110                     C PARDMP( 9)  : TARGET VELOCITY-V
        111                     C PARDMP(10)  : TARGET VELOCITY-W
        112                     C
        113                     C IF JDUMP = 11
        114                     C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION
        115                     C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION
        116                     C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION
        117                     C PARDMP( 4)  : RX    OF DOUMPING REGION
        118                     C PARDMP( 5)  : RY    OF DOUMPING REGION
        119                     C PARDMP( 6)  : RZ    OF DOUMPING REGION
        120                     C PARDMP( 7)  : RATIO OF DOUMPING REGION
        121                     C PARDMP( 8)  : COEFICIENT OF DUMPING TERM (=ALPHA)
        122                     C PARDMP( 9)  : TARGET DENSITY
        123                     C PARDMP(10)  : TARGET VELOCITY-U
        124                     C PARDMP(11)  : TARGET VELOCITY-V
        125                     C PARDMP(12)  : TARGET VELOCITY-W
        126                     C
        127                     CC [13] RELAXATION CONTROLL
        128                     CC
        129                           INTEGER*4 JVISC
        130                           REAL*8    PARVIS(8),TAUTGT
        131                     C JVISC       : TYPE OF DUMPING REGION
        132                     C             : 0: NO DUMPING REGION
        133                     C             : 1: SPHERE
        134                     C             : 2: CYLINDER ALONG X-DIRECTION
        135                     C             : 3: CYLINDER ALONG Y-DIRECTION
        136                     C             : 4: CYLINDER ALONG Z-DIRECTION
        137                     C             :11: ELLIPSOID
        138                     C
        139                     C TAUTGT      : RELAXTION TIME AT VISCOUS REGION
        140                     C
        141                     C IF JVISC = 1,2,3 OR 4
        142                     C PARVIS( 1)  : X CORDINATE OF CENTER OF VISCOUS REGION
        143                     C PARVIS( 2)  : Y CORDINATE OF CENTER OF VISCOUS REGION
        144                     C PARVIS( 3)  : Z CORDINATE OF CENTER OF VISCOUS REGION
        145                     C PARVIS( 4)  : R1 OF DOUMPING REGION
        146                     C PARVIS( 5)  : R2 OF DOUMPING REGION
        147                     C PARVIS( 6)  : ALPHA (=1.0)
        148                     C
        149                     C IF JVISC = 11
        150                     C PARVIS( 1)  : X CORDINATE OF CENTER OF VISCOUS REGION
        151                     C PARVIS( 2)  : Y CORDINATE OF CENTER OF VISCOUS REGION
        152                     C PARVIS( 3)  : Z CORDINATE OF CENTER OF VISCOUS REGION
        153                     C PARVIS( 4)  : RX    OF DOUMPING REGION
        154                     C PARVIS( 5)  : RY    OF DOUMPING REGION
        155                     C PARVIS( 6)  : RZ    OF DOUMPING REGION
        156                     C PARVIS( 7)  : RATIO OF DOUMPING REGION
        157                     C PARVIS( 8)  : ALPHA (=1.0)
        158                     C
        159                     C [10] VARIABLES FOR TURBULENCR MODEL
        160                           INTEGER*4 IMODEL,ICALSS,ICNSTD
        161                           REAL*8    CS
        162                     C
        163                     C IMODEL=0: NON-SGS MODEL
        164                     C IMODEL=1: STANDARD SMAGORINSKY MODEL
        165                     C ICALSS=0: CAL. STRAIN BY MACRO VARIAVLES
        166                     C ICALSS=1: CAL. STRAIN BY DISRIBUTION FUNCTAION (EXPLICIT)
        167                     C ICALSS=2: CAL. STRAIN BY DISRIBUTION FUNCTAION (IMPLICIT)
        168                     C
        169                     C ICNSTD=0: USE LOCAL   GRID SCALE FOR COMPUTING TURBULENT VISCOCITY
        170                     C ICNSTD=1: USE MINIMUM GRID SCALE FOR COMPUTING TURBULENT VISCOCITY
        171                     
        172                           INTEGER*4 MKEYWD
        173                           PARAMETER ( MKEYWD =36 )
        174                           CHARACTER*8 CKEYWD(MKEYWD)
        175                           DATA CKEYWD( 1) / '#OPTIONS' /
        176                           DATA CKEYWD( 2) / '#OPTIONE' /
        177                           DATA CKEYWD( 3) / '#BC_INLT' /
        178                           DATA CKEYWD( 4) / '#BC_MWAL' /
        179                           DATA CKEYWD( 5) / '#CHK_GEO' /
        180                           DATA CKEYWD( 6) / '#SET_TAU' /
        181                           DATA CKEYWD( 7) / '#CHK_FLW' /
        182                           DATA CKEYWD( 8) / '#WRT_INT' /
        183                           DATA CKEYWD( 9) / '#BC_MAKE' /
        184                           DATA CKEYWD(10) / '#BC_TYPE' /
        185                           DATA CKEYWD(11) / '#RD_GEOM' /
        186                           DATA CKEYWD(12) / '#SZ_GEOM' /
        187                           DATA CKEYWD(13) / '#INTSECT' /
        188                           DATA CKEYWD(14) / '#SGS_SSM' /
        189                           DATA CKEYWD(15) / '#TAU_MIN' /
        190                           DATA CKEYWD(16) / '#NOWRITE' /
        191                           DATA CKEYWD(17) / '#TAUINLT' /
        192                           DATA CKEYWD(18) / '#TAUFREE' /
        193                           DATA CKEYWD(19) / '#COL_MDL' /
        194                           DATA CKEYWD(20) / '#RD_TRIG' /
        195                           DATA CKEYWD(21) / '#GEOMRSL' /
        196                           DATA CKEYWD(22) / '#RF_FUNC' /
        197                           DATA CKEYWD(23) / '#SZ_BOUN' /
        198                           DATA CKEYWD(24) / '#NOWFUNC' /
        199                           DATA CKEYWD(25) / '#SET_Q_1' /
        200                           DATA CKEYWD(26) / '#EPS_TRG' /
        201                           DATA CKEYWD(27) / '#NUM_VEL' /
        202                           DATA CKEYWD(28) / '#CAL_STR' /
        203                           DATA CKEYWD(29) / '#BLASIUS' /
        204                           DATA CKEYWD(30) / '#CONST_D' /
        205                           DATA CKEYWD(31) / '#WRT_SRF' /
        206                           DATA CKEYWD(32) / '#INT_SRF' /
        207                           DATA CKEYWD(33) / '#MV_TRIG' /
        208                           DATA CKEYWD(34) / '#WRT_BLK' /
        209                           DATA CKEYWD(35) / '#DUMPRGN' /
        210                           DATA CKEYWD(36) / '#VISCRGN' /
        211                     C
        212                           CHARACTER*14 CBTYPE(0:4)
        213                           DATA CBTYPE(0) / ' NO B.C.      ' /
        214                           DATA CBTYPE(1) / ' WALL         ' /
        215                           DATA CBTYPE(2) / ' INLET        ' /
        216                           DATA CBTYPE(3) / ' MOVING-WALL  ' /
        217                           DATA CBTYPE(4) / ' FREE         ' /
        218                     C
        219                           INTEGER*4 I,ICS,ICE,NC
        220                     C
        221                     C FOR BLOCK
        222                           INTEGER*4 NX,NY,NZ,INTVL
        223                           REAL*8    X0,Y0,Z0,X1,Y1,Z1
        224                           CHARACTER*5 FLBLK0
        225                           CHARACTER*3 CINDEX
        226                           DATA FLBLK0 /"BLCK."/
        227                     C
        228                     C
        229                     C      READ CONTROL PARAMETERS FOR OPTIONAL FUNCTIONS
        230                     C
        231                           IERR = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.08, ITR: 12, MVE: 2, POL: S)
                              <<< Loop-information  End >>>
        232     1       4             DO I=1,60
        233     1       4                 FILEGM(I:I)=" "
        234     1       4                 FILEST(I:I)=" "
        235     1       4                 FILESF(I:I)=" "
        236     1       4             ENDDO
        237                     C
        238                           NBLK=0
        239                     C
        240                        10 READ(IUT5,'(A120)',END=100) CBUF
        241     1                     IF(CBUF(1:8).EQ.CKEYWD(1)) THEN
        242     1                         WRITE(IUT6,*) ' LESROP: START READING OPTIONAL PARAMETERS '
        243     1                     ELSE
        244     1                         GO TO 10
        245     1                     ENDIF
        246                     C
        247                      1000 CONTINUE
        248                     C
        249                           READ(IUT5,'(A120)') CBUF
        250                     C
        251     1                     IF(CBUF(1:8).EQ.CKEYWD(3)) THEN
        252     1                         WRITE(IUT6,*) ' LBMROP:'
        253     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(3), '" IS DETECTED.'
        254     1               C
        255     1                         CBUF2 = CBUF(9:120)
        256     1                         READ(CBUF2,*) UINLT,VINLT,WINLT
        257     1                         WRITE(IUT6,*) ' LBMROP: UINLT=',UINLT
        258     1                         WRITE(IUT6,*) ' LBMROP: VINLT=',VINLT
        259     1                         WRITE(IUT6,*) ' LBMROP: WINLT=',WINLT
        260     1                         UINLT=UINLT*VSCALE
        261     1                         VINLT=VINLT*VSCALE
        262     1                         WINLT=WINLT*VSCALE
        263     1                     ENDIF
        264                     C
        265     1                     IF(CBUF(1:8).EQ.CKEYWD(4)) THEN
        266     1                         WRITE(IUT6,*) ' LBMROP:'
        267     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(4), '" IS DETECTED.'
        268     1               C
        269     1                         CBUF2 = CBUF(9:120)
        270     1                         READ(CBUF2,*) UWALL,VWALL,WWALL
        271     1                         WRITE(IUT6,*) ' LBMROP: UWALL=',UWALL
        272     1                         WRITE(IUT6,*) ' LBMROP: VWALL=',VWALL
        273     1                         WRITE(IUT6,*) ' LBMROP: WWALL=',WWALL
        274     1                         UWALL=UWALL*VSCALE
        275     1                         VWALL=VWALL*VSCALE
        276     1                         WWALL=WWALL*VSCALE
        277     1                     ENDIF
        278                     C
        279     1                     IF(CBUF(1:8).EQ.CKEYWD(5)) THEN
        280     1                         WRITE(IUT6,*) ' LBMROP:'
        281     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(5), '" IS DETECTED.'
        282     1                         JCHGEO=1
        283     1                     ENDIF
        284                     C
        285     1                     IF(CBUF(1:8).EQ.CKEYWD(6)) THEN
        286     1                         WRITE(IUT6,*) ' LBMROP:'
        287     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(6), '" IS DETECTED.'
        288     1                         CBUF2 = CBUF(9:120)
        289     1                         NTFIX=NTFIX+1
        290     1               C
        291     2                         IF(NTFIX.GT.MTFIX) THEN
        292     2                             WRITE(IUT6,*) 'INSIFFICIENT MEMORY FOR LTFIX: STOP'
        293     2                             GOTO 9999
        294     2                         ENDIF
        295     1               C
        296     1                         READ(CBUF2,*) LTFIX(1,NTFIX),LTFIX(2,NTFIX),TAUFIX(NTFIX)
        297     1                         WRITE(IUT6,*) ' LBMROP: LTFIX(1)=',LTFIX(1,NTFIX)
        298     1                         WRITE(IUT6,*) ' LBMROP: LTFIX(2)=',LTFIX(2,NTFIX)
        299     1                         WRITE(IUT6,*) ' LBMROP: TAUFIX  =',TAUFIX(NTFIX)
        300     1               C
        301     2                         IF(LTFIX(1,NTFIX).LT.1 .OR. LTFIX(1,NTFIX).GT.3) THEN
        302     2                             WRITE(IUT6,*) 'LTFIX MUST BE 1, 2 OR 3 : STOP'
        303     2                             GOTO 9999
        304     2                         ENDIF
        305     1                     ENDIF
        306                     C
        307     1                     IF(CBUF(1:8).EQ.CKEYWD(7)) THEN
        308     1                         WRITE(IUT6,*) ' LBMROP:'
        309     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(7), '" IS DETECTED.'
        310     1                         CBUF2 = CBUF(9:120)
        311     1                         READ(CBUF2,*) NCHKFL, RHOSTP
        312     1                         WRITE(IUT6,*) ' LBMROP: NCHKFL=',NCHKFL
        313     1                         WRITE(IUT6,*) ' LBMROP: RHOSTP=',RHOSTP
        314     1                     ENDIF
        315                     C
        316     1                     IF(CBUF(1:8).EQ.CKEYWD(8)) THEN
        317     1                         WRITE(IUT6,*) ' LBMROP:'
        318     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(8), '" IS DETECTED.'
        319     1                         CBUF2 = CBUF(9:120)
        320     1                         READ(CBUF2,*) NFLINT
        321     1                         WRITE(IUT6,*) ' LBMROP: NFLINT=',NFLINT
        322     1               C
        323     2                         IF(NFLINT.NE.2  .AND. NFLINT.NE.4 .AND. NFLINT.NE.8 .AND.
        324     2                    *       NFLINT.NE.16 .AND. NFLINT.NE.32) THEN
        325     2                            WRITE(IUT6,*) 'NFLINT MUST BE 2, 4, 8, 16 OR 32 : STOP'
        326     2                             GOTO 9999
        327     2                         ENDIF
        328     1                     ENDIF
        329                     C
        330     1                     IF(CBUF(1:8).EQ.CKEYWD(9)) THEN
        331     1                         WRITE(IUT6,*) ' LBMROP:'
        332     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(9), '" IS DETECTED.'
        333     1                         JBOUN=2
        334     1                         WRITE(IUT6,*) ' LBMROP: JBOUN =',JBOUN
        335     1                     ENDIF
        336                     C
        337     1                     IF(CBUF(1:8).EQ.CKEYWD(10)) THEN
        338     1                         WRITE(IUT6,*) ' LBMROP:'
        339     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(10), '" IS DETECTED.'
        340     1                         CBUF2 = CBUF(9:120)
        341     1                         READ(CBUF2,*) (LBTYPE(I),I=1,6)
        342     1                         WRITE(IUT6,*) ' LBMROP: BC TYPE AT -X IS',CBTYPE(LBTYPE(1))
        343     1                         WRITE(IUT6,*) ' LBMROP: BC TYPE AT +X IS',CBTYPE(LBTYPE(2))
        344     1                         WRITE(IUT6,*) ' LBMROP: BC TYPE AT -Y IS',CBTYPE(LBTYPE(3))
        345     1                         WRITE(IUT6,*) ' LBMROP: BC TYPE AT +Y IS',CBTYPE(LBTYPE(4))
        346     1                         WRITE(IUT6,*) ' LBMROP: BC TYPE AT -Z IS',CBTYPE(LBTYPE(5))
        347     1                         WRITE(IUT6,*) ' LBMROP: BC TYPE AT +Z IS',CBTYPE(LBTYPE(6))
        348     1                     ENDIF
        349                     C
        350     1                     IF(CBUF(1:8).EQ.CKEYWD(11)) THEN
        351     1                         WRITE(IUT6,*) ' LBMROP:'
        352     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(11), '" IS DETECTED.'
        353     1                         WRITE(IUT6,*)
        354     1                    *    ' LBMROP:THIS OPTION IS NOT SUPPORTED SINCE VER-47.01.'
        355     1                         IERR=1
        356     1                         RETURN
        357     1               C
        358     1                         ICS=0
        359     1                         ICE=0
        360     2                         DO 2000 I=9,120
        361     3                            IF (ICS.EQ.0.AND.CBUF(I:I).NE.' ') THEN
        362     3                               ICS=I
        363     3                               GOTO 2000
        364     3                            ENDIF
        365     3                            IF (ICS.GT.0.AND.CBUF(I:I).EQ.' ') THEN
        366     3                               ICE=I-1
        367     3                               GOTO 2010
        368     3                            ENDIF
        369     2                2000     CONTINUE
        370     1                2010     CONTINUE
        371     1               C
        372     1                         NC=ICE-ICS+1
        373     1                         FILEGM(1:NC) = CBUF(ICS:ICE)
        374     1                         WRITE(IUT6,'(A34,A60)')
        375     1                    *    ' LBMROP: FILE-NAME OF GF-GEOM  : ', FILEGM
        376     1                         JGEOM=1
        377     1                     ENDIF
        378                     C
        379     1                     IF(CBUF(1:8).EQ.CKEYWD(12)) THEN
        380     1                         WRITE(IUT6,*) ' LBMROP:'
        381     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(12), '" IS DETECTED.'
        382     1                         CBUF2 = CBUF(9:120)
        383     1                         READ(CBUF2,*) MPG
        384     1                         WRITE(IUT6,*) ' LBMROP: MPG =',MPG
        385     1                     ENDIF
        386                     C
        387     1                     IF(CBUF(1:8).EQ.CKEYWD(13)) THEN
        388     1                         WRITE(IUT6,*) ' LBMROP:'
        389     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(13), '" IS DETECTED.'
        390     1                         CBUF2 = CBUF(9:120)
        391     1                         READ(CBUF2,*) HBOUN
        392     1                         WRITE(IUT6,*) ' LBMROP: HBOUN =',HBOUN
        393     1                     ENDIF
        394                     C
        395     1                     IF(CBUF(1:8).EQ.CKEYWD(14)) THEN
        396     1                         WRITE(IUT6,*) ' LBMROP:'
        397     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(14), '" IS DETECTED.'
        398     1                         IMODEL=1
        399     1                         CBUF2 = CBUF(9:120)
        400     1                         READ(CBUF2,*) CS
        401     1                         WRITE(IUT6,*) ' LBMROP: CS =',CS
        402     1                     ENDIF
        403                     C
        404     1                     IF(CBUF(1:8).EQ.CKEYWD(15)) THEN
        405     1                         WRITE(IUT6,*) ' LBMROP:'
        406     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(15), '" IS DETECTED.'
        407     1                         CBUF2 = CBUF(9:120)
        408     1                         READ(CBUF2,*) TAUMIN
        409     2                         IF(TAUMIN.LE.0.5D0) THEN
        410     2                             WRITE(IUT6,*) 'TAU SHOULD BE LARGER THAN 0.5 '
        411     2                             IERR=1
        412     2                             RETURN
        413     2                         ENDIF
        414     1                         WRITE(IUT6,*) ' LBMROP: TAUMIN =',TAUMIN
        415     1                     ENDIF
        416                     C
        417     1                     IF(CBUF(1:8).EQ.CKEYWD(16)) THEN
        418     1                         WRITE(IUT6,*) ' LBMROP:'
        419     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(16), '" IS DETECTED.'
        420     1                         IWMODE=0
        421     1                         WRITE(IUT6,*) ' LBMROP: IWMODE =',IWMODE
        422     1                     ENDIF
        423                     C
        424     1                     IF(CBUF(1:8).EQ.CKEYWD(17)) THEN
        425     1                         WRITE(IUT6,*) ' LBMROP:'
        426     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(17), '" IS DETECTED.'
        427     1                         CBUF2 = CBUF(9:120)
        428     1                         READ(CBUF2,*) TAINLT
        429     2                         IF(TAINLT.LE.0.5D0) THEN
        430     2                             WRITE(IUT6,*) 'TAU SHOULD BE LARGER THAN 0.5 '
        431     2                             IERR=1
        432     2                             RETURN
        433     2                         ENDIF
        434     1                         WRITE(IUT6,*) ' LBMROP: TAINLT =',TAINLT
        435     1                     ENDIF
        436                     C
        437     1                     IF(CBUF(1:8).EQ.CKEYWD(18)) THEN
        438     1                         WRITE(IUT6,*) ' LBMROP:'
        439     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(18), '" IS DETECTED.'
        440     1                         CBUF2 = CBUF(9:120)
        441     1                         READ(CBUF2,*) TAFREE
        442     2                         IF(TAFREE.LE.0.5D0) THEN
        443     2                             WRITE(IUT6,*) 'TAU SHOULD BE LARGER THAN 0.5 '
        444     2                             IERR=1
        445     2                             RETURN
        446     2                         ENDIF
        447     1                         WRITE(IUT6,*) ' LBMROP: TAFREE =',TAFREE
        448     1                     ENDIF
        449                     C
        450     1                     IF(CBUF(1:8).EQ.CKEYWD(19)) THEN
        451     1                         WRITE(IUT6,*) ' LBMROP:'
        452     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(19), '" IS DETECTED.'
        453     1                         CBUF2 = CBUF(9:120)
        454     1                         READ(CBUF2,*) ICOLLI
        455     2                         IF(ICOLLI.EQ.1) THEN
        456     2                         WRITE(IUT6,*) ' LBMROP: SRT IS SPECIFIED FOR COLLISON MODEL'
        457     2                         ELSE IF(ICOLLI.EQ.2) THEN
        458     2                         WRITE(IUT6,*) ' LBMROP: MRT IS SPECIFIED FOR COLLISON MODEL'
        459     2                         ELSE
        460     2                         WRITE(IUT6,*) ' LBMROP: INVALID INPUT FOR COLLISON MODEL'
        461     2                         IERR=1
        462     2                         ENDIF
        463     1                     ENDIF
        464                     C
        465     1                     IF(CBUF(1:8).EQ.CKEYWD(20)) THEN
        466     1                         WRITE(IUT6,*) ' LBMROP:'
        467     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(20), '" IS DETECTED.'
        468     1               C
        469     1                         ICS=0
        470     1                         ICE=0
        471     2                         DO 2100 I=9,120
        472     3                            IF (ICS.EQ.0.AND.CBUF(I:I).NE.' ') THEN
        473     3                               ICS=I
        474     3                               GOTO 2100
        475     3                            ENDIF
        476     3                            IF (ICS.GT.0.AND.CBUF(I:I).EQ.' ') THEN
        477     3                               ICE=I-1
        478     3                               GOTO 2110
        479     3                            ENDIF
        480     2                2100     CONTINUE
        481     1                2110     CONTINUE
        482     1               C
        483     1                         NC=ICE-ICS+1
        484     1                         FILEST(1:NC) = CBUF(ICS:ICE)
        485     1                         WRITE(IUT6,'(A34,A60)')
        486     1                    *    ' LBMROP: FILE-NAME OF GF-TRIG  : ', FILEST
        487     1                         JGEOM=2
        488     1                     ENDIF
        489                     C
        490     1                     IF(CBUF(1:8).EQ.CKEYWD(21)) THEN
        491     1                         WRITE(IUT6,*) ' LBMROP:'
        492     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(21), '" IS DETECTED.'
        493     1                         CBUF2 = CBUF(9:120)
        494     1                         READ(CBUF2,*) DGEOM
        495     1                         WRITE(IUT6,*) ' LBMROP: DGEOM =',DGEOM
        496     1                     ENDIF
        497                     C
        498     1                     IF(CBUF(1:8).EQ.CKEYWD(22)) THEN
        499     1                         WRITE(IUT6,*) ' LBMROP:'
        500     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(22), '" IS DETECTED.'
        501     1                         IRFNF=1
        502     1                         WRITE(IUT6,*) ' LBMROP: IRFNF =',IRFNF
        503     1                     ENDIF
        504                     C
        505     1                     IF(CBUF(1:8).EQ.CKEYWD(23)) THEN
        506     1                         WRITE(IUT6,*) ' LBMROP:'
        507     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(23), '" IS DETECTED.'
        508     1                         READ(CBUF2,*) MPBR
        509     1                         WRITE(IUT6,*) ' LBMROP: MPBR =',MPBR
        510     1                     ENDIF
        511                     C
        512     1                     IF(CBUF(1:8).EQ.CKEYWD(24)) THEN
        513     1                         WRITE(IUT6,*) ' LBMROP:'
        514     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(24), '" IS DETECTED.'
        515     1                         IWFUNC=0
        516     1                         WRITE(IUT6,*) ' LBMROP: IWFUNC =',IWFUNC
        517     1                     ENDIF
        518                     C
        519     1                     IF(CBUF(1:8).EQ.CKEYWD(25)) THEN
        520     1                         WRITE(IUT6,*) ' LBMROP:'
        521     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(25), '" IS DETECTED.'
        522     1                         IMODQ=1
        523     1                         WRITE(IUT6,*) ' LBMROP: IMODQ =',IMODQ
        524     1                     ENDIF
        525                     C
        526     1                     IF(CBUF(1:8).EQ.CKEYWD(26)) THEN
        527     1                         WRITE(IUT6,*) ' LBMROP:'
        528     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(26), '" IS DETECTED.'
        529     1                         CBUF2 = CBUF(9:120)
        530     1                         READ(CBUF2,*) EPSTRG
        531     1                         WRITE(IUT6,*) ' LBMROP: EPSTRG =',EPSTRG
        532     1                     ENDIF
        533                     C
        534     1                     IF(CBUF(1:8).EQ.CKEYWD(27)) THEN
        535     1                         WRITE(IUT6,*) ' LBMROP:'
        536     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(27), '" IS DETECTED.'
        537     1                         CBUF2 = CBUF(9:120)
        538     1                         READ(CBUF2,*) NP
        539     1                         WRITE(IUT6,*) ' LBMROP: NP =',NP
        540     2                         IF(NP.NE.15 .AND. NP.NE.27) THEN
        541     2                             WRITE(IUT6,*) 'NP MUST BE 15 OR 27'
        542     2                             IERR=1
        543     2                             RETURN
        544     2                         ENDIF
        545     1                     ENDIF
        546                     C
        547     1                     IF(CBUF(1:8).EQ.CKEYWD(28)) THEN
        548     1                         WRITE(IUT6,*) ' LBMROP:'
        549     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(28), '" IS DETECTED.'
        550     1                         CBUF2 = CBUF(9:120)
        551     1                         READ(CBUF2,*) ICALSS
        552     1                         WRITE(IUT6,*) ' LBMROP: ICALSS =',ICALSS
        553     2                         IF(ICALSS.NE.0 .AND. ICALSS.NE.1 .AND. ICALSS.NE.2) THEN
        554     2                             WRITE(IUT6,*) 'ICALSS MUST BE 0,1 OR 2'
        555     2                             IERR=1
        556     2                             RETURN
        557     2                         ENDIF
        558     1                     ENDIF
        559                     C
        560     1                     IF(CBUF(1:8).EQ.CKEYWD(29)) THEN
        561     1                         WRITE(IUT6,*) ' LBMROP:'
        562     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(29), '" IS DETECTED.'
        563     1                         CBUF2 = CBUF(9:120)
        564     1                         READ(CBUF2,*) IINLTV, DBLAS
        565     1                         WRITE(IUT6,*) ' LBMROP: INLTV =',IINLTV
        566     1                         WRITE(IUT6,*) ' LBMROP: DBLAS =',DBLAS
        567     2                         IF(      IINLTV.NE.0 .AND. IINLTV.NE.1
        568     2                    *       .AND. IINLTV.NE.2 .AND. IINLTV.NE.3) THEN
        569     2                             WRITE(IUT6,*) 'IINLTV MUST BE 0,1,2, OR 3'
        570     2                             IERR=1
        571     2                             RETURN
        572     2                         ENDIF
        573     1                     ENDIF
        574                     C
        575     1                     IF(CBUF(1:8).EQ.CKEYWD(30)) THEN
        576     1                         WRITE(IUT6,*) ' LBMROP:'
        577     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(30), '" IS DETECTED.'
        578     1                         ICNSTD=1
        579     1                     ENDIF
        580                     C
        581     1                     IF(CBUF(1:8).EQ.CKEYWD(31)) THEN
        582     1                         WRITE(IUT6,*) ' LBMROP:'
        583     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(31), '" IS DETECTED.'
        584     1               C
        585     1                         ICS=0
        586     1                         ICE=0
        587     2                         DO 2200 I=9,120
        588     3                            IF (ICS.EQ.0.AND.CBUF(I:I).NE.' ') THEN
        589     3                               ICS=I
        590     3                               GOTO 2200
        591     3                            ENDIF
        592     3                            IF (ICS.GT.0.AND.CBUF(I:I).EQ.' ') THEN
        593     3                               ICE=I-1
        594     3                               GOTO 2210
        595     3                            ENDIF
        596     2                2200     CONTINUE
        597     1                2210     CONTINUE
        598     1                         NC=ICE-ICS+1
        599     1                         FILESF(1:NC) = CBUF(ICS:ICE)
        600     1                         WRITE(IUT6,'(A34,A60)')
        601     1                    *    ' LBMROP: FILE-NAME OF GF-SURF  : ', FILESF
        602     1                         IWRTSF=1
        603     1                     ENDIF
        604                     C
        605     1                     IF(CBUF(1:8).EQ.CKEYWD(32)) THEN
        606     1                         WRITE(IUT6,*) ' LBMROP:'
        607     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(32), '" IS DETECTED.'
        608     1                         CBUF2 = CBUF(9:120)
        609     1                         READ(CBUF2,*) INTSRF
        610     1                         WRITE(IUT6,*) ' LBMROP: INTSRF =',INTSRF
        611     1                     ENDIF
        612                     C
        613     1                     IF(CBUF(1:8).EQ.CKEYWD(33)) THEN
        614     1                         WRITE(IUT6,*) ' LBMROP:'
        615     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(33), '" IS DETECTED.'
        616     1                         IMVTRG=1
        617     1                         CBUF2 = CBUF(9:120)
        618     1                         READ(CBUF2,*) DTRG
        619     1                         WRITE(IUT6,*) ' LBMROP: DTRG =',DTRG
        620     1                     ENDIF
        621                     C
        622     1                     IF(CBUF(1:8).EQ.CKEYWD(34)) THEN
        623     1                         WRITE(IUT6,*) ' LBMROP:'
        624     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(34), '" IS DETECTED.'
        625     1                         CBUF2 = CBUF(9:120)
        626     1                         READ(CBUF2,*) X0,Y0,Z0,X1,Y1,Z1,NX,NY,NZ,INTVL
        627     1                         NBLK=NBLK+1
        628     1               C
        629     2                         IF(NBLK.LT.10) THEN
        630     2                             WRITE(CINDEX,'("00",I1)') NBLK
        631     2                         ELSE IF (NBLK.LE.99) THEN
        632     2                             WRITE(CINDEX,'("0",I2)') NBLK
        633     2                         ELSE IF (NBLK.LE.200) THEN
        634     2                             WRITE(CINDEX,'(I3)') NBLK
        635     2                         ELSE
        636     2                             WRITE(IUT6,*) 'TOO MANY BLOCK DATA: ERROR STOP'
        637     2                             IERR=1
        638     2                             RETURN
        639     2                         ENDIF
        640     1               C
        641     1                         CORBLK(1,NBLK)=X0
        642     1                         CORBLK(2,NBLK)=Y0
        643     1                         CORBLK(3,NBLK)=Z0
        644     1                         CORBLK(4,NBLK)=X1
        645     1                         CORBLK(5,NBLK)=Y1
        646     1                         CORBLK(6,NBLK)=Z1
        647     1                         NUMBLK(1,NBLK)=NX
        648     1                         NUMBLK(2,NBLK)=NY
        649     1                         NUMBLK(3,NBLK)=NZ
        650     1                         INTBLK(  NBLK)=INTVL
        651     1                         FILBLK(NBLK)=FLBLK0(1:5)//CINDEX
        652     1                         WRITE(IUT6,'(A21,3I8)')
        653     1                    *    ' LBMROP:BLOCK DATA :',NBLK
        654     1                         WRITE(IUT6,'(A21,6E13.5)')
        655     1                    *    ' LBMROP:BLOCK DATA :',(CORBLK(I,NBLK),I=1,6)
        656     1                         WRITE(IUT6,'(A21,3I8)')
        657     1                    *    ' LBMROP:BLOCK DATA :',(NUMBLK(I,NBLK),I=1,3)
        658     1                         WRITE(IUT6,'(A21,3I8)')
        659     1                    *    ' LBMROP:BLOCK DATA :',INTBLK(NBLK)
        660     1                         WRITE(IUT6,'(A21,A30)')
        661     1                    *    ' LBMROP:BLOCK DATA :',FILBLK(NBLK)
        662     1                     ENDIF
        663                     C
        664     1                     IF(CBUF(1:8).EQ.CKEYWD(35)) THEN
        665     1                         WRITE(IUT6,*) ' LBMROP:'
        666     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(35), '" IS DETECTED.'
        667     1                         CBUF2 = CBUF(9:120)
        668     1                         READ(CBUF2,*) JDUMP
        669     2                         IF(JDUMP.GE.1 .AND. JDUMP.LE.4) THEN
        670     2                             READ(CBUF2,*) JDUMP,(PARDMP(I),I=1,10)
        671     2                         ELSE IF(JDUMP.EQ.11) THEN
        672     2                             READ(CBUF2,*) JDUMP,(PARDMP(I),I=1,12)
        673     2                         ELSE
        674     2                             WRITE(IUT6,*) 'INVALID VALUE FOR JDUMP: STOP',JDUMP
        675     2                             IERR=1
        676     2                             RETURN
        677     2                         ENDIF
        678     1               C
        679     1               C IF JDUMP = 1,2,3 OR 4
        680     1               C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION
        681     1               C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION
        682     1               C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION
        683     1               C PARDMP( 4)  : R1 OF DOUMPING REGION
        684     1               C PARDMP( 5)  : R2 OF DOUMPING REGION
        685     1               C PARDMP( 6)  : COEFICIENT OF DUMPING TERM (=ALPHA)
        686     1               C PARDMP( 7)  : TARGET DENSITY
        687     1               C PARDMP( 8)  : TARGET VELOCITY-U
        688     1               C PARDMP( 9)  : TARGET VELOCITY-V
        689     1               C PARDMP(10)  : TARGET VELOCITY-W
        690     1               C
        691     1               C IF JDUMP = 11
        692     1               C PARDMP( 1)  : X CORDINATE OF CENTER OF DUMPING REGION
        693     1               C PARDMP( 2)  : Y CORDINATE OF CENTER OF DUMPING REGION
        694     1               C PARDMP( 3)  : Z CORDINATE OF CENTER OF DUMPING REGION
        695     1               C PARDMP( 4)  : RX    OF DOUMPING REGION
        696     1               C PARDMP( 5)  : RY    OF DOUMPING REGION
        697     1               C PARDMP( 6)  : RZ    OF DOUMPING REGION
        698     1               C PARDMP( 7)  : RATIO OF DOUMPING REGION
        699     1               C PARDMP( 8)  : COEFICIENT OF DUMPING TERM (=ALPHA)
        700     1               C PARDMP( 9)  : TARGET DENSITY
        701     1               C PARDMP(10)  : TARGET VELOCITY-U
        702     1               C PARDMP(11)  : TARGET VELOCITY-V
        703     1               C PARDMP(12)  : TARGET VELOCITY-W
        704     1                         WRITE(IUT6,'(A17,I13  )') ' LBMROP: JDUMP :',JDUMP
        705     2                         IF(JDUMP.GE.1 .AND. JDUMP.LE.4) THEN
        706     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARDMP(1)
        707     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARDMP(2)
        708     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARDMP(3)
        709     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R1    :',PARDMP(4)
        710     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R2    :',PARDMP(5)
        711     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ALPHA :',PARDMP(6)
        712     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RHO   :',PARDMP(7)
        713     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: U0    :',PARDMP(8)
        714     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: V0    :',PARDMP(9)
        715     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: W0    :',PARDMP(10)
        716     2                         PARDMP( 8)=PARDMP( 8)*VSCALE
        717     2                         PARDMP( 9)=PARDMP( 9)*VSCALE
        718     2                         PARDMP(10)=PARDMP(10)*VSCALE
        719     2                         ELSE IF(JDUMP.EQ.11) THEN
        720     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARDMP(1)
        721     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARDMP(2)
        722     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARDMP(3)
        723     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RX    :',PARDMP(4)
        724     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RY    :',PARDMP(5)
        725     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RZ    :',PARDMP(6)
        726     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RATIO :',PARDMP(7)
        727     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ALPHA :',PARDMP(8)
        728     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RHO   :',PARDMP(9)
        729     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: U0    :',PARDMP(10)
        730     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: V0    :',PARDMP(11)
        731     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: W0    :',PARDMP(12)
        732     2                         PARDMP(10)=PARDMP(10)*VSCALE
        733     2                         PARDMP(11)=PARDMP(11)*VSCALE
        734     2                         PARDMP(12)=PARDMP(12)*VSCALE
        735     2                         ENDIF
        736     1                     ENDIF
        737                     C
        738     1                     IF(CBUF(1:8).EQ.CKEYWD(36)) THEN
        739     1                         WRITE(IUT6,*) ' LBMROP:'
        740     1                         WRITE(IUT6,*) ' LBMROP: "',CKEYWD(36), '" IS DETECTED.'
        741     1                         CBUF2 = CBUF(9:120)
        742     1                         READ(CBUF2,*) JVISC
        743     2                         IF(JVISC.GE.1 .AND. JVISC.LE.4) THEN
        744     2                             READ(CBUF2,*) JVISC,(PARVIS(I),I=1,5),TAUTGT
        745     2                             PARVIS(6)=1.0D0
        746     2                         ELSE IF(JVISC.EQ.11) THEN
        747     2                             READ(CBUF2,*) JVISC,(PARVIS(I),I=1,7),TAUTGT
        748     2                             PARVIS(8)=1.0D0
        749     2                         ELSE
        750     2                             WRITE(IUT6,*) 'INVALID VALUE FOR JVISC: STOP',JVISC
        751     2                             IERR=1
        752     2                             RETURN
        753     2                         ENDIF
        754     1               C
        755     1                         WRITE(IUT6,'(A17,I13  )') ' LBMROP: JVISC :',JVISC
        756     2                         IF(JVISC.GE.1 .AND. JVISC.LE.4) THEN
        757     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARVIS(1)
        758     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARVIS(2)
        759     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARVIS(3)
        760     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R1    :',PARVIS(4)
        761     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: R2    :',PARVIS(5)
        762     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: TAUTGT:',TAUTGT
        763     2                         ELSE IF(JVISC.EQ.11) THEN
        764     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: XC    :',PARVIS(1)
        765     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: YC    :',PARVIS(2)
        766     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: ZC    :',PARVIS(3)
        767     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RX    :',PARVIS(4)
        768     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RY    :',PARVIS(5)
        769     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RZ    :',PARVIS(6)
        770     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: RATIO :',PARVIS(7)
        771     2                         WRITE(IUT6,'(A17,F13.5)') ' LBMROP: TAUTGT:',TAUTGT
        772     2                         ENDIF
        773     1                     ENDIF
        774                     C
        775     1                     IF(CBUF(1:8).EQ.CKEYWD(2)) THEN
        776     1                         WRITE(IUT6,*) ' LESROP: END   READING OPTIONAL PARAMETERS'
        777     1                     ELSE
        778     1                         GO TO 1000
        779     1                     ENDIF
        780                     C
        781                           RETURN
        782                     C
        783                       999 CONTINUE
        784                     C
        785                       100 WRITE(IUT6,*) ' LBMROP: NO OPTIONAL PARAMETERS'
        786                           RETURN
        787                     C
        788                      9999 CONTINUE
        789                           IERR=1
        790                           RETURN
        791                     C
        792                           END

 Diagnostic messages: program name(LBMROP)
   jwd2008i-i  "lbmrop.f", line 1: Dummy argument 'IUT0' not used in this subprogram.
   jwd5123p-i  "lbmrop.f", line 232: DO loop is not parallelized: a character or structure type data was found in the loop.
   jwd6165s-i  "lbmrop.f", line 232: SIMD conversion cannot be applied to DO loop: one or more data with character type or derived type were found in the DO loop.
   jwd8204o-i  "lbmrop.f", line 232: This loop is software pipelined.
   jwd8205o-i  "lbmrop.f", line 232: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 12.
   jwd5132p-i  "lbmrop.f", line 240: Loop is not parallelized: cannot parallelize DO WHILE constructs, DO UNTIL constructs, or loops by IF/GO TO statements.
   jwd6132s-i  "lbmrop.f", line 240: SIMD conversion cannot be applied to DO WHILE constructs, DO UNTIL constructs, or loops by IF/GO TO statements.
   jwd5132p-i  "lbmrop.f", line 247: Loop is not parallelized: cannot parallelize DO WHILE constructs, DO UNTIL constructs, or loops by IF/GO TO statements.
   jwd1309i-i  "lbmrop.f", line 358: Statement unreachable.
   jwd5131p-i  "lbmrop.f", line 471: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "lbmrop.f", line 471: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "lbmrop.f", line 471: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5131p-i  "lbmrop.f", line 587: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "lbmrop.f", line 587: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "lbmrop.f", line 587: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.

 Procedure information
   Lines      : 792
   Statements : 541
   Stack(byte): 26448
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 792
   Total statements : 541
   Total stack(byte): 26448
   Total prefetch num: 0

