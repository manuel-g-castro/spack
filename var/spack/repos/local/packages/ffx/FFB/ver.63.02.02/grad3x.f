      SUBROUTINE GRAD3X(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *                  JSET,ICAVI,
     *                  ME,MP,N1,N2,NE,NP,NEX,NODE,IEATTR,IPATTR,
     *                  S,DNXYZP,CM,X,Y,Z,OMEGA,TIMER,ADIAG,
     *                  NFRAME,UFRAME,VFRAME,WFRAME,
     *                  IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
     *                  NPFIX,LPFIX,LEFIX,
     *                  NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
     *                  NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
     *                  COVER1,COVER2,COVER3,
     *                  NPSND,LPSND,NPTSND,
     *                  NPRCV,LPRCV,NPTRCV,IPSET,IPSRC,
     *                  FXYZ,RX,RY,MWRK,WRKN,
     *                  NMRF,IFATTR,OMGMRF,AMRF,
     *                  IVOF,IMASS,RHO3D,NSP,NS,LOCAL,
     *                  NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
     *                  NFFREE,LFFREE,NPFREE,LPFREE,
     *                  XPFREE,YPFREE,ZPFREE,
     *                  NESET,NESND,NERCV,NBESET,LBESET,
     *                  LESET1,LESET2,LESET3,
     *                  EOVER1,EOVER2,EOVER3,
     *                  LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
     *                  SN,SNESET,OSBCOE,XNESET,YNESET,ZNESET,
     *                  SOSP,SOSWRK,WRKOS1,WRKOS2,
     *                  MEP,NEP,IENP,JENP,
     *                  IUT0,IERR,NUMVALID,LSTVALID)
      IMPLICIT NONE
C
CCCC  [INPUT:LOOP]
      INTEGER*4 MCOLOR,MCPART
      INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
C
CCCC  [INPUT]
      INTEGER*4 JSET,ICAVI,
     *          ME,MP,N1,N2,NE,NP,NEX(8),NODE(N2,NE),
     *          NFRAME,IEATTR(NE),IPATTR(NP),IUT0
      INTEGER*4 MEP,NEP(NP),IENP(MEP,NP),JENP(MEP,NP)
      REAL*4    S(ME),DNXYZP(MEP,3,NP),CM(NP),
     *          X(NP),Y(NP),Z(NP),OMEGA,TIMER,ADIAG(NP), 
     *          UFRAME(NFRAME),VFRAME(NFRAME),WFRAME(NFRAME)
C
CCC [INPUT:INTER CONNECT NODES]
      INTEGER*4 IPART,NDOM,MBPDOM,
     *          LDOM(NDOM),NBPDOM(NDOM),
     *          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM)
C
CCCC  [INPUT:OVERSET NODE DATA]
      INTEGER*4  NPSET,NPSND,NPRCV,
     *           LPSET1(NPSET),LPSET2(NPSET),
     *           LPSET3(NPSET),LPSET4(NPSET),
     *           LPSND(NDOM),NPTSND(NDOM),LPRCV(NDOM),NPTRCV(NDOM),
     *           IPSET(MBPDOM,NDOM),IPSRC(MBPDOM,NDOM)
      REAL*4     COVER1(NPSET),COVER2(NPSET),COVER3(NPSET)
C
CCCC  [INPUT:OVERSET ELEMENT DATA]
      INTEGER*4 NESET,NESND,NERCV,NBESET,LBESET(2,NBESET),
     *          LESET1(NESET),LESET2(NESET),LESET3(NESET),
     *          LESND(NDOM),NETSND(NDOM),LERCV(NDOM),NETRCV(NDOM),
     *          IESET(MBPDOM,NDOM),IESRC(MBPDOM,NDOM)
      REAL*4    EOVER1(NESET),EOVER2(NESET),EOVER3(NESET),
     *          SN(N1,NE),SNESET(N1,NE),OSBCOE(NP),
     *          XNESET(NBESET),YNESET(NBESET),ZNESET(NBESET),
     *          SOSP(NP),SOSWRK(NE),WRKOS1(NE),WRKOS2(NE)
C
CCC [INPUT:B.C. NODES]
      INTEGER*4 NPFIX,LPFIX(NPFIX),LEFIX(NE),
     *          NPSYMT,LPSYMT(NPSYMT)
      REAL*4    XPSYMT(NPSYMT),YPSYMT(NPSYMT),ZPSYMT(NPSYMT)
C
C     [INPUT:VOF]
      INTEGER*4 IVOF,IMASS,NFACE,NSP,NS,NFINLT,NFFREE,NPFREE
      INTEGER*4 LOCAL,LFACE,LFINLT,LFFREE,LPFREE(NPFREE)
      REAL*4    RHO3D(NE),AVEC,FFA,
     *          XPFREE(NPFREE),YPFREE(NPFREE),ZPFREE(NPFREE)
C
C     [INPUT:MRF]
      INTEGER*4 NMRF
      INTEGER*4 IFATTR(*)
      REAL*4    OMGMRF(NMRF),AMRF(3,NMRF)
C
CCC [OUTPUT]
      INTEGER*4 IERR
      REAL*4    FXYZ(3,NP)
C
CCC [WORK]    
      REAL*4    RX(0:N2,ME),RY(0:N2,ME)
      INTEGER*4 MWRK
      REAL*4    WRKN(MWRK,9)
C
CCC [LOCAL]    
      INTEGER*4 NETET,NEPRD,NEWED,NEHEX,
     *          ICOLOR,ICPART,IEE,IES,
     *          IP1,IP2,IP3,IP4,IP5,IP6,IP7,IP8,
     *          MAXBUF,IP,IE,IBP,I,J,IPL,IETYPE,IS,IBE
      REAL*4    SWRK,COEF,DU,DPX,DPY,DPZ,COEF1,COEF2,FXBUF,FYBUF,FZBUF
C
      INTEGER*4 IMODE,IMODEO,IDIM
      DATA IMODE   / 1 /
      DATA IMODEO  / 0 /
      DATA IDIM    / 3 /
C
      CHARACTER*60 ERMSGC
     & /' ## SUBROUTINE GRAD3X: FATAL      ERROR REPORT   ; RETURNED' /
C
      INTEGER*4 LOCALT(4,6,4)
      DATA LOCALT /
     *     1,2,4,0,  2,3,4,0,  3,1,4,0,  1,3,2,0,  0,0,0,0,  0,0,0,0, ! TET
     *     1,2,5,0,  2,3,5,0,  3,4,5,0,  4,1,5,0,  1,4,3,2,  0,0,0,0, ! PYR
     *     1,3,2,0,  4,5,6,0,  1,2,5,4,  2,3,6,5,  3,1,4,6,  0,0,0,0, ! PRS
     *     1,5,8,4,  2,3,7,6,  1,2,6,5,  3,4,8,7,  1,4,3,2,  5,6,7,8  ! HEX
     *           /
C
      INTEGER*4 LSTVALID(MP)
      INTEGER*4 NUMVALID
C
C     CAL. GRADIENT OF SCALAR VARIABLE 
C     THIS ROUTINE SUPPORTS OVERSET NODES AND MID NODES.
C 
C     WRITTEN BY Y.YAMADE 2012.07.18
C
C
C     ARGUMENT LISTINGS
C
C (1) INPUT
C INT *4 MLOOP        ; MAX. NUMBER OF COLORS
C INT *4 NLOOP        ; NUMBER OF COLORS
C INT *4 LLOOP(I,4)   ; ADRESS OF COLOR LOOPS
C INT *4 JSET         ; OVERSET FLAG (0:OFF,LARGER THAN 1:ON)
C INT *4 ME           ; MAX. NUMBER OF TOTAL ELEMENTS
C INT *4 N            ; =8
C INT *4 N1           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS OF THE 
C INT *4 NE           ; NUMBER OF ELEMENTS
C INT *4 NP           ; NUMBER OF NODES
C INT *4 NEX       (I); INCLUDES NUMBER OF ELEMENTS AND NUMBER OF LOCAL NODES
C INT *4 NE           ; NUMBER OF ELEMENTS
C INT *4 NP           ; NUMBER OF NODES
C INT *4 NODE   (I,IE); NODE TABLE
C INT *4 NFRAME       ; NUMBER OF FRAMES
C INT *4 IEATTR   (IE); ELEMENT ATTIRBUTE DATA (-1:ROTATING, 0:STATIC)
C INT *4 IPATTR   (IP); NODE    ATTIRBUTE DATA (-1:ROTATING, 0:STATIC)
C INT *4 IUT0         ; FILE NUMBER TO REPORT ERROR OCCURENCE
C REAL*4 S        (IP); INPUT DATA 
C REAL*4 DNX    (I,IE); INTEGRATED ELEMENT VECTOR OF NX
C REAL*4 DNY    (I,IE); INTEGRATED ELEMENT VECTOR OF NY
C REAL*4 DNZ    (I,IE); INTEGRATED ELEMENT VECTOR OF NZ
C REAL*4 CM       (IP); INVERSED LUMPED MASS MATRIX
C REAL*4 X        (IP); X-CORDINATE
C REAL*4 Y        (IP); Y-CORDINATE
C REAL*4 OMEGA        ; ANGULAR MOMENTUM
C REAL*4 TIMER        ; CURRENT TIME
C REAL*4 ADIAG    (NP); DIAGONAL TERM IN MOMENTUM EQ. (IN STEADY MODE)
C REAL*4 UFRAME (1,IF); X-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
C REAL*4 VFRAME (1,IF); Y-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
C REAL*4 WFRAME (1,IF); Z-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
C REAL*4 UFRAME (2,IF); X-DIR. ACCELERAION OF TRANSLATING FRAME 'IF'
C REAL*4 VFRAME (2,IF); Y-DIR. ACCELERAION OF TRANSLATING FRAME 'IF'
C REAL*4 WFRAME (2,IF); Z-DIR. ACCELERAION OF TRANSLATING FRAME 'IF'
C
C === B.C.-[1] ===    ; INTERCONNECT B.C.
C INT *4 IPART        ; SUB-DOMAIN NUMBER THAT THIS TASK SHOULD TAKE/IS
C                       TAKING CARE OF. IPART BEING SET ZERO MEANS THAT
C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL 
C                       MODE.
C INT *4 NDOM         ; NUMBER OF THE NERIBERING SUB-DOMAINS
C INT*4  MBPDOM       ; THE MAXIMUM NUMBER OF THE INTER-CONNECT 
C                       BOUNDARY NODES FOR ONE NEIBERING SUB-DOMAIN
C INT *4 LDOM   (IDOM); NEIBERING SUB-DOMAIN NUMBER
C INT *4 NBPDOM (IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
C                       SHARING WITH THE IDOM'TH NEIBERING SUB-DOMAIN,
C                       LDOM(IDOM)
C INT *4 IPSLF(I,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
C                       CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
C                       NEIBERING SUB-DOMAIN, LDOM(IDOM)
C INT *4 IPSND(I,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
C                       SUB-DOMAIN THAT IS RECEIVING THE CALLING
C                       TASK'S RESIDUALS.
C
C === B.C.-[2] ===    ; GRADIENT-ZETO B.C.
C INT *4 NPFIX        ; NUMBER OF FIX BOUNDARY NODES
C INT *4 LPFIX    (IB); FIX BOUNDARY NODES
C
C === B.C.-[3] ===    ; SYMMETRIC B.C.
C INT *4 NPSYMT       ; NUMBER OF SYMMETRIC BOUNDARY NODES
C INT *4 LPSYMT   (IB); SYMMETRIC BOUNDARY NODES
C REAL*4 XPSYMT   (IB); X-DIR COMPONENT OF SYMMETRIC NODE NORMAL VECTOR
C REAL*4 YPSYMT   (IB); Y-DIR COMPONENT OF SYMMETRIC NODE NORMAL VECTOR
C REAL*4 ZPSYMT   (IB); Z-DIR COMPONENT OF SYMMETRIC NODE NORMAL VECTOR
C
C === B.C.-[4] ===    ; OVERSET B.C.
C INT *4 NPSET        : NUMBER OF OVERSET BOUNDARY NODES
C INT *4 NPSND        ; NUMBER OF DOMAINS TO SEND OVERSET NODE VALUE
C INT *4 NPRCV        ; NUMBER OF DOMAINS TO RECEIVE OVERSET NODE VALUE
C INT *4 LPSET1  (IBP); OVERSET BOUNDARY NODES
C INT *4 LPSET2  (IBP); ELEMENT NUMBER TO CALCULATE OVERSET VALUES
C INT *4 LPSET3  (IBP); DOMAIN NUMBER TO SEND/RECEIVE OVERSET VALUES
C                   0 --- CALCULATE AND SET OVERSET VALUE WITHIN THE
C                         SELF-DOMAIN
C          (POS. INT.)--- SEND    OVERSET VALUE TO   DOMAIN  LPSET3(IB)
C                         AFTER CALCULATING IT WITHIN THE SELF-DOMAIN
C          (NEG. INT.)--- RECEIVE OVERSET VALUE FROM DOMAIN -LPSET3(IB)
C
C INT *4 LPSND  (IDOM); DOMAIN NUMBER     TO SEND OVERSET NODE VALUE
C INT *4 NPTSND (IDOM); NUMBER OF OVERSET NODE POINTS TO SEND TO
C                     ; DOMAIN 'LPSND(IDOM)'  
C INT *4 LPRCV  (IDOM); DOMAIN NUMBER     TO RECEIVE OVERSET NODE VALUE
C INT *4 NPTRCV (IDOM); NUMBER OF OVERSET POINTS TO RECEIVE FROM
C                       DOMAIN 'LPRCV(IDOM)'
C INT *4 IPSET(IPT,IDOM); OVERSET NODE NUMBER IN THE DOMAIN RECEIVING
C                         THE OVERSET VALUES.
C INT *4 IPSRC(IPT,IDOM); INDICATES POSITION IN THE OVERSET-VALUES
C                         PASSING ARRAYS WHEN OVERSET NODE DATA
C                         ARE COMPILED SEQUENTIALLY
C REAL*4  COVER1 (IBP); LOCAL COORDINATE IN INTERPOLATING ELEMENT
C REAL*4  COVER2 (IBP); LOCAL COORDINATE IN INTERPOLATING ELEMENT
C REAL*4  COVER3 (IBP); LOCAL COORDINATE IN INTERPOLATING ELEMENT
C
C (2) OUTPUT
C REAL*4 FX       (IP); X-COMPONET OF GRADIENT OF S
C REAL*4 FY       (IP); Y-COMPONET OF GRADIENT OF S
C REAL*4 FZ       (IP); Z-COMPONET OF GRADIENT OF S
C INT *4 IERR         ; RETURN CODE TO REPORT ERROR OCCURRENCE
C                   0 --- NORMAL TERMINATION
C                   1 --- A FATAL ERROR HAS OCCURRED
C
C (3) WORK
C REAL*4 RX     (I,IE); WORK REGION PASSED FOR CALLAP
C REAL*4 RY     (I,IE); WORK REGION PASSED FOR CALLAP
C
      IERR=0
      MAXBUF = NE*(N2+1)
C
      NETET=NEX(1)
      NEPRD=NEX(2)
      NEWED=NEX(3)
      NEHEX=NEX(4)
C
      CALL USTSTA(81)
#ifndef __AIX__
!ocl CACHE_SECTOR_SIZE(1,11)
!ocl CACHE_SUBSECTOR_ASSIGN(S)
#endif
      DO 1000 IP = 1 , NP 
          FXBUF=0.0E0
          FYBUF=0.0E0
          FZBUF=0.0E0
          DO 1100 I = 1 , 8
              IE=IENP(I,IP)
              SWRK = S(IE)
              FXBUF=FXBUF-SWRK*DNXYZP(I,1,IP)
              FYBUF=FYBUF-SWRK*DNXYZP(I,2,IP)
              FZBUF=FZBUF-SWRK*DNXYZP(I,3,IP)
 1100     CONTINUE
          FXYZ(1,IP)=FXBUF*CM(IP)
          FXYZ(2,IP)=FYBUF*CM(IP)
          FXYZ(3,IP)=FZBUF*CM(IP)
 1000 CONTINUE

      CALL USTEND(81)
C
      CALL USTSTA(82)
c!ocl norecurrence(FXYZ)      
      DO 1200 J=1,NUMVALID
         IP = LSTVALID(J)
         FXBUF=0.0E0
         FYBUF=0.0E0
         FZBUF=0.0E0
         DO 1300 I=9,NEP(IP)
            IE=IENP(I,IP)
            SWRK = S(IE)
            FXBUF=FXBUF-SWRK*DNXYZP(I,1,IP)
            FYBUF=FYBUF-SWRK*DNXYZP(I,2,IP)
            FZBUF=FZBUF-SWRK*DNXYZP(I,3,IP)
 1300    CONTINUE
         FXYZ(1,IP)=FXYZ(1,IP)+FXBUF*CM(IP)
         FXYZ(2,IP)=FXYZ(2,IP)+FYBUF*CM(IP)
         FXYZ(3,IP)=FXYZ(3,IP)+FZBUF*CM(IP)
 1200 ENDDO
      CALL USTEND(82)
C
C
C
C OVERSET ELEMENT PRESSURE 
C
      IF(JSET.GE.1) THEN
          DO 2011 IE=1,NE
             IF (IVOF.GE.1.OR.ICAVI.GE.1) THEN
                SOSWRK(IE) = S(IE)/RHO3D(IE)
             ELSE
                SOSWRK(IE) = S(IE)
             ENDIF
 2011     CONTINUE
          CALL NDLEX2 (MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *                 NODE,ME,NP,NE,NP,N1,N2,NEX,SN,
     *                IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     *                SOSWRK,SOSP,CM,IUT0,IERR,RX,RY,MAXBUF,LEFIX)
C
          CALL OVRSTE(IPART,NESET,N1,N2,ME,NE,NP,NEX,NODE,SOSWRK,SOSP,
     *                LESET1,LESET2,LESET3,
     *                EOVER1,EOVER2,EOVER3,
     *                NDOM,MBPDOM,NESND,NERCV,
     *                LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
     *                WRKOS1,WRKOS2,RX,RY,IUT0,IERR)
           DO 2012 IBE=1,NBESET
               IE=LBESET(1,IBE)
               IS=LBESET(2,IBE)
C
               IF(     NODE(8,IE).GE.1) THEN ! HEX
                   IETYPE = 4
               ELSE IF(NODE(6,IE).GE.1) THEN ! PRS
                   IETYPE = 3
               ELSE IF(NODE(5,IE).GE.1) THEN ! PYR
                   IETYPE = 2
               ELSE                          ! TET
                   IETYPE = 1
               ENDIF   
C
               DO 2013 I=1,4
                   IPL= LOCALT(I,IS,IETYPE)
                   IP = NODE(IPL,IE)
                   IF(IP.EQ.0) GOTO 2013
                   DPX=-SOSWRK(IE)*XNESET(IBE)*SNESET(IPL,IBE) 
                   DPY=-SOSWRK(IE)*YNESET(IBE)*SNESET(IPL,IBE) 
                   DPZ=-SOSWRK(IE)*ZNESET(IBE)*SNESET(IPL,IBE) 
                   WRKN(IP,4)=WRKN(IP,4)+DPX
                   WRKN(IP,5)=WRKN(IP,5)+DPY
                   WRKN(IP,6)=WRKN(IP,6)+DPZ
 2013          CONTINUE
 2012      CONTINUE
C
      ENDIF
C
       
      CALL USTSTA(83)
C
C SUPERIMPOSE NEIBERING ELEMENT CONTRIBUTIONS
C
      CALL DDCOMY(IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     *            FXYZ,NP,IUT0,IERR,RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
      CALL USTEND(83)
C
      CALL USTSTA(84)
C
      DO 2100 IP=1,NP
C          FXYZ(1,IP)=FXYZ(1,IP)*CM(IP)
C          FXYZ(2,IP)=FXYZ(2,IP)*CM(IP)
C          FXYZ(3,IP)=FXYZ(3,IP)*CM(IP)
 2100 CONTINUE
C
!ocl norecurrence(FXYZ)
      DO 3000 IBP=1,NPFIX
          IP=LPFIX(IBP)
          FXYZ(1,IP)=0.0E0
          FXYZ(2,IP)=0.0E0
          FXYZ(3,IP)=0.0E0
 3000 CONTINUE
C
!ocl norecurrence(FXYZ)      
      DO 3100 IBP = 1 , NPSYMT
            COEF= XPSYMT(IBP)*FXYZ(1,LPSYMT(IBP))
     *           +YPSYMT(IBP)*FXYZ(2,LPSYMT(IBP))
     *           +ZPSYMT(IBP)*FXYZ(3,LPSYMT(IBP))
            FXYZ(1,LPSYMT(IBP)) = FXYZ(1,LPSYMT(IBP))-COEF*XPSYMT(IBP)
            FXYZ(2,LPSYMT(IBP)) = FXYZ(2,LPSYMT(IBP))-COEF*YPSYMT(IBP)
            FXYZ(3,LPSYMT(IBP)) = FXYZ(3,LPSYMT(IBP))-COEF*ZPSYMT(IBP)
 3100 CONTINUE
      CALL USTEND(84)
C
      IF (IVOF.GE.1.OR.ICAVI.GE.1) THEN
!ocl norecurrence(FXYZ)
         DO 3200 IBP = 1, NPFREE
            COEF= XPFREE(IBP)*FXYZ(1,LPFREE(IBP))
     *           +YPFREE(IBP)*FXYZ(2,LPFREE(IBP))
     *           +ZPFREE(IBP)*FXYZ(3,LPFREE(IBP))
            FXYZ(1,LPFREE(IBP)) = FXYZ(1,LPFREE(IBP))-COEF*XPFREE(IBP)
            FXYZ(2,LPFREE(IBP)) = FXYZ(2,LPFREE(IBP))-COEF*YPFREE(IBP)
            FXYZ(3,LPFREE(IBP)) = FXYZ(3,LPFREE(IBP))-COEF*ZPFREE(IBP)            
 3200    CONTINUE
      ENDIF
C
C     
CCYY   D. OVERSET NODAL VELOCITIES
C
C
      IF(JSET.GE.1) THEN
C
          DO 3310 IP=1,NP
             WRKN(IP,1)=FXYZ(1,IP)
             WRKN(IP,2)=FXYZ(2,IP)
             WRKN(IP,3)=FXYZ(3,IP)
 3310     CONTINUE
          CALL OVRST3(IMODEO,IPART,NPSET,N1,N2,ME,NE,NP,NEX,NODE,
     *                X,Y,Z,OMEGA,TIMER,
     *                NFRAME,IEATTR,IPATTR,UFRAME,VFRAME,WFRAME,
     *                WRKN(1,1),WRKN(1,2),WRKN(1,3),
     *                LPSET1,LPSET2,LPSET3,LPSET4,
     *                COVER1,COVER2,COVER3,
     *                NDOM,MBPDOM,NPSND,NPRCV,
     *                LPSND,NPTSND,LPRCV,NPTRCV,IPSET,IPSRC,
     *                WRKN(1,4),WRKN(1,5),WRKN(1,6),
     *                WRKN(1,7),WRKN(1,8),WRKN(1,9),
     *                RX,RY,NMRF,IFATTR,OMGMRF,AMRF,IUT0,IERR)
          DO 3320 IP=1,NP
             COEF1=OSBCOE(IP)
             COEF2=1.0E0-COEF1
             FXYZ(1,IP)=COEF1*WRKN(IP,1)+COEF2*FXYZ(1,IP)
             FXYZ(2,IP)=COEF1*WRKN(IP,2)+COEF2*FXYZ(2,IP)
             FXYZ(3,IP)=COEF1*WRKN(IP,3)+COEF2*FXYZ(3,IP)
 3320     CONTINUE
      ENDIF
C
C
CCHY  MODIFY THE FLOW RATE AT OVERSET BOUNDARY
C     MODIFY THE VELOCITY AT THE FLOW-RATE CHECKING SURFACE.
C

      IF (IVOF.GE.1.AND.IMASS.EQ.1) THEN
C
         DO 4000 IP=1,NP
            WRKN(IP,1)=FXYZ(1,IP)
            WRKN(IP,2)=FXYZ(2,IP)
            WRKN(IP,3)=FXYZ(3,IP)
 4000    CONTINUE
         CALL CALDLU(IPART,NE,NP,NFACE,N2,NSP,NS,NODE,
     *               LOCAL,LFACE,NFINLT,NFFREE,LFINLT,LFFREE,
     *               WRKN(1,1),WRKN(1,2),WRKN(1,3),AVEC,FFA,DU,IERR)
         DO 4100 IBP=1,NPFREE
            IP=LPFREE(IBP)
            FXYZ(1,IP)=FXYZ(1,IP)+DU*XPFREE(IBP)
            FXYZ(2,IP)=FXYZ(2,IP)+DU*YPFREE(IBP)
            FXYZ(3,IP)=FXYZ(3,IP)+DU*ZPFREE(IBP)
 4100    CONTINUE
      ENDIF
C
      RETURN
      END
