
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:15 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : ovrst3.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "OVRST3"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE OVRST3(IMODE,IPART,NPSET,N1,N2,ME,NE,NP,NEX,NODE,
          2                          *                  X,Y,Z,OMEGA,TIMER,
          3                          *                  NFRAME,IEATTR,IPATTR,UFRAME,VFRAME,WFRAME,
          4                          *                  U,V,W,
          5                          *                  LPSET1,LPSET2,LPSET3,LPSET4,
          6                          *                  COVER1,COVER2,COVER3,
          7                          *                  NDOM,MBPDOM,NPSND,NPRCV,
          8                          *                  LPSND,NPTSND,LPRCV,NPTRCV,IPSET,IPSRC,
          9                          *                  WRK01,WRK02,WRK03,UG,VG,WG,RX,RY,
         10                          *                  NMRF,IFATTR,OMGMRF,AMRF,IUT0,IERR)
         11                           IMPLICIT NONE
         12                     C
         13                     C[INPUT]
         14                           INTEGER*4 IMODE,IPART,NPSET,N1,N2,ME,NE,NP,NEX(12)
         15                           INTEGER*4 NODE(N2,NE),NFRAME,IEATTR(NE),IPATTR(NP),
         16                          *          NDOM,MBPDOM,NPSND,NPRCV,
         17                          *          LPSND(NDOM),NPTSND(NDOM),
         18                          *          LPRCV(NDOM),NPTRCV(NDOM),
         19                          *          IPSET(MBPDOM,NDOM),IPSRC(MBPDOM,NDOM),
         20                          *          LPSET1(NPSET),LPSET2(NPSET),LPSET3(NPSET),
         21                          *          LPSET4(NPSET)
         22                     C
         23                           REAL*4    OMEGA,TIMER,X(NP),Y(NP),Z(NP)
         24                           REAL*4    UFRAME(2,NFRAME),VFRAME(2,NFRAME),WFRAME(2,NFRAME)
         25                           REAL*4    COVER1(NPSET),COVER2(NPSET),COVER3(NPSET)
         26                           INTEGER*4 IUT0
         27                     C     [INPUT:MRF]
         28                           INTEGER*4 NMRF
         29                           INTEGER*4 IFATTR(*)
         30                           REAL*4    OMGMRF(NMRF),AMRF(3,NMRF)
         31                     C
         32                     C[INPUT-OUTPUT]
         33                           REAL*4    U(NP),V(NP),W(NP)
         34                     C
         35                     C[OUTPUT]
         36                           INTEGER*4 IERR
         37                     C
         38                     C[WORK]
         39                           REAL*4    WRK01(NP),WRK02(NP),WRK03(NP),
         40                          *          UG(NP),VG(NP),WG(NP),RX(N1,ME),RY(N1,ME)
         41                     C[LOCAL]
         42                           INTEGER*4 IBP,ISEND,IE,IFRME,IFRMP,IDIM,MAXBUF,NB,
         43                          *          NETET,NEPRD,NEWED,NEHEX,NTET,NPRD,NWED,NHEX,
         44                          *          IP,IP1,IP2,IP3,IP4,IP5,IP6,IP7,IP8
         45                           REAL*4    GP,EP,TP,T1,T2,T3,T4,T5,T6,T7,T8,TH,UR,VR,
         46                          *          COSTH,SINTH,COEF,
         47                          *          O1,O2,XBUF,YBUF,C0,S0,C1,S1,C2,S2,
         48                          *          UR1,VR1,WR1,UR2,VR2,WR2,UR3,VR3,WR3,
         49                          *          XR1,YR1,ZR1
         50                     C
         51                           CHARACTER*60 ERMSGC
         52                          & /' ## SUBROUTINE OVRST3: FATAL      ERROR REPORT   ; RETURNED' /
         53                     C
         54                     C
         55     1                     IF(IMODE.EQ.1) THEN
         56     1                         COEF=1.0E0
         57     1                     ELSE
         58     1                         COEF=0.0E0
         59     1                     ENDIF
         60                     C
         61                           MAXBUF = NE*N1
         62                     C
         63                           NETET=NEX(1)
         64                           NEPRD=NEX(2)
         65                           NEWED=NEX(3)
         66                           NEHEX=NEX(4)
         67                     C
         68                           NTET=NEX(5)
         69                           NPRD=NEX(6)
         70                           NWED=NEX(7)
         71                           NHEX=NEX(8)
         72                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 16
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSET3
                              <<< Loop-information  End >>>
         73     1  pp    s            DO 1000 IBP = 1 , NPSET
         74     1   p    m                ISEND = LPSET3(IBP)
         75     1   p    s                IF(ISEND.LT.0) GO TO 1000
         76     1               C
         77     1   p    s                IE = LPSET2(IBP)
         78     1   p    s                GP = COVER1(IBP)
         79     1   p    s                EP = COVER2(IBP)
         80     1   p    s                TP = COVER3(IBP)
         81     1               CCYY---
         82     2   p    s                IF(IE.EQ.0) THEN
         83     2   p    m                    WRK01(IBP)=0.0E0
         84     2   p    s                    WRK02(IBP)=0.0E0
         85     2   p    s                    WRK03(IBP)=0.0E0
         86     2   p    s                    UG   (IBP)=0.0E0
         87     2   p    s                    VG   (IBP)=0.0E0
         88     2   p    s                    WG   (IBP)=0.0E0
         89     2   p    s                    GOTO 1000
         90     2   p    s                ENDIF
         91     1               CCYY---
         92     1               C
         93     2   p    s                IF(NODE(NHEX,IE).NE.0) THEN
         94     2   p    s                    IP1=NODE(1,IE)
         95     2   p    s                    IP2=NODE(2,IE)
         96     2   p    s                    IP3=NODE(3,IE)
         97     2   p    s                    IP4=NODE(4,IE)
         98     2   p    s                    IP5=NODE(5,IE)
         99     2   p    s                    IP6=NODE(6,IE)
        100     2   p    s                    IP7=NODE(7,IE)
        101     2   p    s                    IP8=NODE(8,IE)
        102     2   p    s                    T1=0.125E0*(1.-GP)*(1.-EP)*(1.-TP)
        103     2   p    s                    T2=0.125E0*(1.+GP)*(1.-EP)*(1.-TP)
        104     2   p    s                    T3=0.125E0*(1.+GP)*(1.+EP)*(1.-TP)
        105     2   p    s                    T4=0.125E0*(1.-GP)*(1.+EP)*(1.-TP)
        106     2   p    s                    T5=0.125E0*(1.-GP)*(1.-EP)*(1.+TP)
        107     2   p    s                    T6=0.125E0*(1.+GP)*(1.-EP)*(1.+TP)
        108     2   p    s                    T7=0.125E0*(1.+GP)*(1.+EP)*(1.+TP)
        109     2   p    s                    T8=0.125E0*(1.-GP)*(1.+EP)*(1.+TP)
        110     2   p    s                 WRK01(IBP)=T1*X(IP1)+T2*X(IP2)+T3*X(IP3)+T4*X(IP4)
        111     2                    *               +T5*X(IP5)+T6*X(IP6)+T7*X(IP7)+T8*X(IP8)
        112     2   p    s                 WRK02(IBP)=T1*Y(IP1)+T2*Y(IP2)+T3*Y(IP3)+T4*Y(IP4)
        113     2                    *               +T5*Y(IP5)+T6*Y(IP6)+T7*Y(IP7)+T8*Y(IP8)
        114     2   p    s                 WRK03(IBP)=T1*Z(IP1)+T2*Z(IP2)+T3*Z(IP3)+T4*Z(IP4)
        115     2                    *               +T5*Z(IP5)+T6*Z(IP6)+T7*Z(IP7)+T8*Z(IP8)
        116     2   p    s                    UG(IBP)=T1*U(IP1)+T2*U(IP2)+T3*U(IP3)+T4*U(IP4)
        117     2                    *               +T5*U(IP5)+T6*U(IP6)+T7*U(IP7)+T8*U(IP8)
        118     2   p    s                    VG(IBP)=T1*V(IP1)+T2*V(IP2)+T3*V(IP3)+T4*V(IP4)
        119     2                    *               +T5*V(IP5)+T6*V(IP6)+T7*V(IP7)+T8*V(IP8)
        120     2   p    s                    WG(IBP)=T1*W(IP1)+T2*W(IP2)+T3*W(IP3)+T4*W(IP4)
        121     2                    *               +T5*W(IP5)+T6*W(IP6)+T7*W(IP7)+T8*W(IP8)
        122     2   p    s                ELSE IF(NODE(NWED,IE).NE.0) THEN
        123     2   p    s                    IP1=NODE(1,IE)
        124     2   p    s                    IP2=NODE(2,IE)
        125     2   p    s                    IP3=NODE(3,IE)
        126     2   p    s                    IP4=NODE(4,IE)
        127     2   p    s                    IP5=NODE(5,IE)
        128     2   p    s                    IP6=NODE(6,IE)
        129     2   p    s                    T1=0.5E0*GP        *(1.-TP)
        130     2   p    s                    T2=0.5E0*EP        *(1.-TP)
        131     2   p    s                    T3=0.5E0*(1.-GP-EP)*(1.-TP)
        132     2   p    s                    T4=0.5E0*GP        *(1.+TP)
        133     2   p    s                    T5=0.5E0*EP        *(1.+TP)
        134     2   p    s                    T6=0.5E0*(1.-GP-EP)*(1.+TP)
        135     2   p    s                 WRK01(IBP)=T1*X(IP1)+T2*X(IP2)+T3*X(IP3)+T4*X(IP4)
        136     2                    *               +T5*X(IP5)+T6*X(IP6)
        137     2   p    s                 WRK02(IBP)=T1*Y(IP1)+T2*Y(IP2)+T3*Y(IP3)+T4*Y(IP4)
        138     2                    *               +T5*Y(IP5)+T6*Y(IP6)
        139     2   p    s                 WRK03(IBP)=T1*Z(IP1)+T2*Z(IP2)+T3*Z(IP3)+T4*Z(IP4)
        140     2                    *               +T5*Z(IP5)+T6*Z(IP6)
        141     2   p    s                   UG(IBP)=T1*U(IP1)+T2*U(IP2)+T3*U(IP3)+T4*U(IP4)
        142     2                    *              +T5*U(IP5)+T6*U(IP6)
        143     2   p    s                   VG(IBP)=T1*V(IP1)+T2*V(IP2)+T3*V(IP3)+T4*V(IP4)
        144     2                    *              +T5*V(IP5)+T6*V(IP6)
        145     2   p    s                   WG(IBP)=T1*W(IP1)+T2*W(IP2)+T3*W(IP3)+T4*W(IP4)
        146     2                    *              +T5*W(IP5)+T6*W(IP6)
        147     2   p    s                ELSE IF(NODE(NPRD,IE).NE.0) THEN
        148     2   p    s                    IP1=NODE(1,IE)
        149     2   p    s                    IP2=NODE(2,IE)
        150     2   p    s                    IP3=NODE(3,IE)
        151     2   p    s                    IP4=NODE(4,IE)
        152     2   p    s                    IP5=NODE(5,IE)
        153     2   p    s                    T1=GP
        154     2   p    s                    T2=EP
        155     2   p    s                    T3=TP
        156     2   p    s                    T4=1.0E0-(T1+T2+T3)
        157     2   p    s                    T1=0.25E0*((1.-GP)*(1.-EP)-TP+GP*EP*TP/(1.-TP))
        158     2   p    s                    T2=0.25E0*((1.+GP)*(1.-EP)-TP-GP*EP*TP/(1.-TP))
        159     2   p    s                    T3=0.25E0*((1.+GP)*(1.+EP)-TP+GP*EP*TP/(1.-TP))
        160     2   p    s                    T4=0.25E0*((1.-GP)*(1.+EP)-TP-GP*EP*TP/(1.-TP))
        161     2   p    s                    T5= TP
        162     2   p    s                 WRK01(IBP)=T1*X(IP1)+T2*X(IP2)+T3*X(IP3)+T4*X(IP4)
        163     2                    *               +T5*X(IP5)
        164     2   p    s                 WRK02(IBP)=T1*Y(IP1)+T2*Y(IP2)+T3*Y(IP3)+T4*Y(IP4)
        165     2                    *               +T5*Y(IP5)
        166     2   p    s                 WRK03(IBP)=T1*Z(IP1)+T2*Z(IP2)+T3*Z(IP3)+T4*Z(IP4)
        167     2                    *               +T5*Z(IP5)
        168     2   p    s                    UG(IBP)=T1*U(IP1)+T2*U(IP2)+T3*U(IP3)+T4*U(IP4)
        169     2                    *               +T5*U(IP5)
        170     2   p    s                    VG(IBP)=T1*V(IP1)+T2*V(IP2)+T3*V(IP3)+T4*V(IP4)
        171     2                    *               +T5*V(IP5)
        172     2   p    s                    WG(IBP)=T1*W(IP1)+T2*W(IP2)+T3*W(IP3)+T4*W(IP4)
        173     2                    *               +T5*W(IP5)
        174     2   p    s                ELSE IF(NODE(NTET,IE).NE.0) THEN
        175     2   p    s                    IP1=NODE(1,IE)
        176     2   p    s                    IP2=NODE(2,IE)
        177     2   p    s                    IP3=NODE(3,IE)
        178     2   p    s                    IP4=NODE(4,IE)
        179     2   p    s                    T1=GP
        180     2   p    s                    T2=EP
        181     2   p    s                    T3=TP
        182     2   p    s                    T4=1.0E0-(GP+EP+TP)
        183     2   p    s                 WRK01(IBP)=T1*X(IP1)+T2*X(IP2)+T3*X(IP3)+T4*X(IP4)
        184     2   p    s                 WRK02(IBP)=T1*Y(IP1)+T2*Y(IP2)+T3*Y(IP3)+T4*Y(IP4)
        185     2   p    s                 WRK03(IBP)=T1*Z(IP1)+T2*Z(IP2)+T3*Z(IP3)+T4*Z(IP4)
        186     2   p    s                    UG(IBP)=T1*U(IP1)+T2*U(IP2)+T3*U(IP3)+T4*U(IP4)
        187     2   p    s                    VG(IBP)=T1*V(IP1)+T2*V(IP2)+T3*V(IP3)+T4*V(IP4)
        188     2   p    s                    WG(IBP)=T1*W(IP1)+T2*W(IP2)+T3*W(IP3)+T4*W(IP4)
        189     2               CC        ELSE
        190     2               CC            WRITE(IUT0,*)'FRCT1X:INVALID NODE TABLE:ERROR'
        191     2               CC            IERR=1
        192     2               CC            RETURN
        193     2   p    s                ENDIF
        194     1               C
        195     1   p    v       1000 CONTINUE
        196                     C
        197                     C         CONVERT INTERPOLATED VELOCITIES FOR STATIONARY REFERENCE FRAME
        198                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 18
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSET3
                              <<< Loop-information  End >>>
        199     1  pp    s            DO 2000 IBP = 1 , NPSET
        200     1   p    v                ISEND = LPSET3(IBP)
        201     1   p    s                IF(ISEND.LT.0) GO TO 2000
        202     1               C
        203     1   p    s                IE    = LPSET2(IBP)
        204     1   p    s                IFRME = IEATTR(IE)
        205     1               CCYYTMP--
        206     1               CC        IFRMP = IFATTR(LPSET4(IBP))
        207     1   p    s                IFRMP = 0
        208     1               CCYYTMP--
        209     1               CCCC
        210     1               CCCC NOTE THAT
        211     1               CCC  IFRME IS FRAME-OF-REFERENCE-ID AT PARANTS ELEMENTS
        212     1               CCC  IFRMP IS FRAME-OF-REFERENCE-ID AT CHILD   NODES.
        213     1               C
        214     1   p    s                O1=OMEGA
        215     2   p    s                IF(IFRME.GE.-1) THEN
        216     2   p    s                    O2=0.0E0
        217     2   p    s                    C0=0.0E0
        218     2   p    s                    S0=0.0E0
        219     2   p    s                ELSE
        220     2   p    s                    O2=OMGMRF(  -IFRME)
        221     2   p    s                    XBUF=AMRF(1,-IFRME)
        222     2   p    s                    YBUF=AMRF(2,-IFRME)
        223     2   p    s                    C0=XBUF/SQRT(XBUF*XBUF+YBUF*YBUF)
        224     2   p    s                    S0=YBUF/SQRT(XBUF*XBUF+YBUF*YBUF)
        225     2   p    s                ENDIF
        226     1   p    s                C1  = COS(O1*TIMER)
        227     1   p    s                S1  = SIN(O1*TIMER)
        228     1   p    s                C2  = COS(O2*TIMER)
        229     1   p    s                S2  = SIN(O2*TIMER)
        230     1               C
        231     2   p    s                IF(IFRME.EQ.-1.AND.IFRMP.GE.-1) THEN
        232     2               C
        233     2               CC            [ADD ROTATIONAL COMPONENTS]
        234     2   p    s                    UR = UG(IBP)-O1*WRK02(IBP)*COEF
        235     2   p    s                    VR = VG(IBP)+O1*WRK01(IBP)*COEF
        236     2               C
        237     2               CC            [ROTATE VELOCITIES AROUND X-AXIS WITH THE ANGLE A1]
        238     2   p    s                    UG(IBP) = C1*UR-S1*VR
        239     2   p    s                    VG(IBP) = S1*UR+C1*VR
        240     2   p    s                ENDIF
        241     1               C
        242     2   p    s                IF(IFRME.LT.-1) THEN
        243     2               C
        244     2               CC            [ROTATE COORDINATES AROUND Z-AXIS]
        245     2   p    s                    XR1= C0*WRK01(IBP)+S0*WRK02(IBP)
        246     2   p    s                    YR1=-S0*WRK01(IBP)+C0*WRK02(IBP)
        247     2   p    s                    ZR1=    WRK03(IBP)
        248     2               C
        249     2               CC            [ROTATE VELOCITIES AROUND Z-AXIS WITH THE ANGLE -A0]
        250     2   p    s                    UR2= C0*UG(IBP)+S0*VG(IBP)
        251     2   p    s                    VR2=-S0*UG(IBP)+C0*VG(IBP)
        252     2   p    s                    WR2=    WG(IBP)
        253     2               C
        254     2               CC            [ADD ROTATIONAL COMPONENTS]
        255     2   p    s                    UR2=UR2
        256     2   p    s                    VR2=VR2-O2*ZR1*COEF
        257     2   p    s                    WR2=WR2+O2*YR1*COEF
        258     2               C
        259     2               CC            [ROTATE VELOCITIES AROUND X-AXIS WITH THE ANGLE A2]
        260     2   p    s                    UR3=   UR2
        261     2   p    s                    VR3=C2*VR2-S2*WR2
        262     2   p    s                    WR3=S2*VR2+C2*WR2
        263     2               C
        264     2               CC            [ROTATE VELOCITIES AROUND Z-AXIS WITH THE ANGLE A0]
        265     2   p    s                    UG(IBP) = C0*UR3-S0*VR3
        266     2   p    s                    VG(IBP) = S0*UR3+C0*VR3
        267     2   p    s                    WG(IBP) =    WR3
        268     2   p    s                ENDIF
        269     1               C
        270     2   p    s                IF(IFRME.GE. 1) THEN
        271     2   p    s                    UG(IBP) = UG(IBP)+UFRAME(1,IFRME)
        272     2   p    s                    VG(IBP) = VG(IBP)+VFRAME(1,IFRME)
        273     2   p    s                    WG(IBP) = WG(IBP)+WFRAME(1,IFRME)
        274     2   p    s                ENDIF
        275     1   p    v       2000 CONTINUE
        276                     C
        277                     C PERFORM SELF-DOMAIN VELOCITY OVERSETS
        278                     C
        279                           NB = 0
        280                     !ocl norecurrence(U,V,W)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSET3
                              <<< Loop-information  End >>>
        281     1        s            DO 3000 IBP = 1 , NPSET
        282     1        v                ISEND = LPSET3(IBP)
        283     1        v                IF(ISEND.LT.0) GOTO 3000
        284     1               C
        285     1        v                IP = LPSET1(IBP)
        286     1               C
        287     2        v                IF(ISEND.EQ.0) THEN
        288     2        v                    U(IP) = UG(IBP)
        289     2        v                    V(IP) = VG(IBP)
        290     2        v                    W(IP) = WG(IBP)
        291     2        v                ELSE
        292     2        m                    NB = NB+1
        293     2        s                    WRK01(NB) = UG(IBP)
        294     2        s                    WRK02(NB) = VG(IBP)
        295     2        s                    WRK03(NB) = WG(IBP)
        296     2        v                ENDIF
        297     1        v       3000 CONTINUE
        298                     C
        299                     C PERFORM INTER-DOMAIN VELOCITY OVERSETS
        300                     C
        301     1                     IF(IPART.GE.1) THEN
        302     1                         IDIM=3
        303     1                         CALL DDSET3(NPSND,LPSND,NPTSND,IPSET,IPSRC,
        304     1                    *                WRK01,WRK02,WRK03,NB,
        305     1                    *                NPRCV,LPRCV,NPTRCV,U,V,W,NP,
        306     1                    *                IDIM,MBPDOM,IUT0,IERR,RX,RY,MAXBUF)
        307     2                         IF(IERR.NE.0) THEN
        308     2                             WRITE(IUT0,*)
        309     2                             WRITE(IUT0,*) ERMSGC
        310     2                             RETURN
        311     2                         ENDIF
        312     1                     ENDIF
        313                     C
        314                     C CONVERT OVERSET VELOCITIES FOR THE OWN REFERENCE FRAME
        315                     C
        316                     !ocl norecurrence(U,V,W)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 18
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSET3
                              <<< Loop-information  End >>>
        317     1  pp    s            DO 4000 IBP = 1 , NPSET
        318     1   p    v                ISEND = LPSET3(IBP)
        319     1   p    s                IF(ISEND.GE.1) GO TO 4000
        320     1               C
        321     1   p    s                IP    = LPSET1(IBP)
        322     1               CCYYTMP--
        323     1               CC        IFRME = IFATTR(LPSET4(IBP))
        324     1   p    s                IFRME = 0
        325     1               CCYYTMP--
        326     1   p    s                IFRMP = IPATTR(IP)
        327     1               CCCC
        328     1               CCCC NOTE THAT
        329     1               CCC  IFRME IS FRAME-OF-REFERENCE-ID AT PARANTS ELEMENTS
        330     1               CCC  IFRMP IS FRAME-OF-REFERENCE-ID AT CHILD   NODES.
        331     1               C
        332     1   p    s                TH     = OMEGA*TIMER
        333     1   p    s                COSTH  = COS(TH)
        334     1   p    s                SINTH  = SIN(TH)
        335     1   p    s                O1=OMEGA
        336     2   p    s                IF(IFRMP.GE.-1) THEN
        337     2   p    s                    O2=0.0E0
        338     2   p    s                    C0=0.0E0
        339     2   p    s                    S0=0.0E0
        340     2   p    s                ELSE
        341     2   p    s                    O2=OMGMRF(  -IFRMP)
        342     2   p    s                    XBUF=AMRF(1,-IFRMP)
        343     2   p    s                    YBUF=AMRF(2,-IFRMP)
        344     2   p    s                    C0=XBUF/SQRT(XBUF*XBUF+YBUF*YBUF)
        345     2   p    s                    S0=YBUF/SQRT(XBUF*XBUF+YBUF*YBUF)
        346     2   p    s                ENDIF
        347     1   p    s                C1  = COS(O1*TIMER)
        348     1   p    s                S1  = SIN(O1*TIMER)
        349     1   p    s                C2  = COS(O2*TIMER)
        350     1   p    s                S2  = SIN(O2*TIMER)
        351     1               C
        352     2   p    s                IF(IFRMP.EQ.-1.AND.IFRME.GE.-1) THEN
        353     2               CC            [ROTATE VELOCITIES AROUND X-AXIS WITH THE ANGLE A1]
        354     2   p    s                    UR    = C1*U(IP)+S1*V(IP)
        355     2   p    s                    VR    =-S1*U(IP)+C1*V(IP)
        356     2               C
        357     2               CC            [ADD ROTATIONAL COMPONENTS]
        358     2   p    s                    U(IP) = UR+O1*Y(IP)*COEF
        359     2   p    s                    V(IP) = VR-O1*X(IP)*COEF
        360     2   p    s                ENDIF
        361     1               C
        362     2   p    s                IF(IFRMP.LT.-1) THEN
        363     2               C
        364     2               CC            [ROTATE COORDINATES AROUND Z-AXIS]
        365     2   p    s                    XR1= C0*X(IP)+S0*Y(IP)
        366     2   p    s                    YR1=-S0*X(IP)+C0*Y(IP)
        367     2   p    s                    ZR1=    Z(IP)
        368     2               C
        369     2               CC            [ROTATE VELOCITIES AROUND Z-AXIS WITH THE ANGLE -A0]
        370     2   p    s                    UR2= C0*U(IP)+S0*V(IP)
        371     2   p    s                    VR2=-S0*U(IP)+C0*V(IP)
        372     2   p    s                    WR2=    W(IP)
        373     2               C
        374     2               CC            [ROTATE VELOCITIES AROUND X-AXIS WITH THE ANGLE A2]
        375     2   p    s                    UR3=UR2
        376     2   p    s                    VR3= C2*VR2+S2*WR2
        377     2   p    s                    WR3=-S2*VR2+C2*WR2
        378     2               C
        379     2               CC            [ADD ROTATIONAL COMPONENTS]
        380     2   p    s                    UR3=UR3
        381     2   p    s                    VR3=VR3-O2*ZR1*COEF
        382     2   p    s                    WR3=WR3+O2*YR1*COEF
        383     2               C
        384     2               CC            [ROTATE VELOCITIES AROUND Z-AXIS WITH THE ANGLE A0]
        385     2   p    s                    U(IP) = C0*UR3-S0*VR3
        386     2   p    s                    V(IP) = S0*UR3+C0*VR3
        387     2   p    s                    W(IP) =    WR3
        388     2   p    s                ENDIF
        389     1               C
        390     2   p    s                IF(IFRMP.GE. 1) THEN
        391     2   p    s                    U(IP) = U(IP)-UFRAME(1,IFRMP)
        392     2   p    s                    V(IP) = V(IP)-VFRAME(1,IFRMP)
        393     2   p    s                    W(IP) = W(IP)-WFRAME(1,IFRMP)
        394     2   p    s                ENDIF
        395     1   p    v       4000 CONTINUE
        396                     C
        397                           RETURN
        398                           END

 Diagnostic messages: program name(OVRST3)
   jwd8220o-i  "ovrst3.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd2008i-i  "ovrst3.f", line 15: この仮引数'LPSET4'は、副プログラム中で使用されていません。
   jwd2008i-i  "ovrst3.f", line 29: この仮引数'IFATTR'は、副プログラム中で使用されていません。
   jwd2006i-i  "ovrst3.f", line 45: この名前'WR1'は、宣言だけされていて引用されていません。
   jwd2006i-i  "ovrst3.f", line 45: この名前'VR1'は、宣言だけされていて引用されていません。
   jwd2006i-i  "ovrst3.f", line 45: この名前'UR1'は、宣言だけされていて引用されていません。
   jwd5001p-i  "ovrst3.f", line 73: このDOループを並列化しました。(名前:IBP)
   jwd6229s-i  "ovrst3.f", line 73: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "ovrst3.f", line 73: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "ovrst3.f", line 102: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 103: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 104: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 105: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 106: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 107: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 108: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 109: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 110: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 112: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 114: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 116: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 118: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 120: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 131: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 134: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 135: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 137: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 139: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 141: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 143: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 145: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 157: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 158: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 159: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 160: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 162: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 164: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 166: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 168: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 170: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 172: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 182: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 183: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 184: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 185: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 186: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 187: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 188: 多項式の演算順序を変更しました。
   jwd5001p-i  "ovrst3.f", line 199: このDOループを並列化しました。(名前:IBP)
   jwd6229s-i  "ovrst3.f", line 199: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "ovrst3.f", line 199: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "ovrst3.f", line 234: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 235: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 256: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 257: 多項式の演算順序を変更しました。
   jwd5228p-i  "ovrst3.f", line 281: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "ovrst3.f", line 281: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "ovrst3.f", line 281: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5001p-i  "ovrst3.f", line 317: このDOループを並列化しました。(名前:IBP)
   jwd6229s-i  "ovrst3.f", line 317: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "ovrst3.f", line 317: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "ovrst3.f", line 355: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 358: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 359: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 371: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 381: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst3.f", line 382: 多項式の演算順序を変更しました。

 Procedure information
   Lines      : 398
   Statements : 259
   Stack(byte): 1680
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 398
   Total statements : 259
   Total stack(byte): 1680
   Total prefetch num: 0

