
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:01 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : findnw.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "FINDNW"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE FINDNW(IFNDNW,MLST,ME,NE,NP,N2,NEX,NS,NSP,N2D,
          2                          *                  X,Y,Z,MPWLAD,
          3                          *                  LPWALL,NPWALL,
          4                          *                  LEWALL,NEWALL,XNWALL,YNWALL,ZNWALL,
          5                          *                  LEWLAD,NEWLAD,LPWLAE,LPWLAD,NPWLAD,
          6                          *                  DPWLAD,
          7                          *                  LOCAL,NODE,
          8                          *                  LWORK,LWRK01,
          9                          *                  IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,
         10                          *                  MBPDOM,WRK01,RX,RY,MAXBUF,
         11                          *                  IUT0,IUT6,IERR)
         12                     C
         13                           IMPLICIT NONE
         14                     C
         15                           INTEGER*4 IFNDNW,MLST,ME,NE,NP,N2,NEX,NS,NSP,N2D,
         16                          *          MPWLAD,LPWALL,NPWALL,LEWALL,NEWALL,
         17                          *          LEWLAD,NEWLAD,LPWLAE,LPWLAD,NPWLAD,
         18                          *          LOCAL,NODE,LWORK,LWRK01,
         19                          *          IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,
         20                          *          MBPDOM,MAXBUF,IUT0,IUT6,IERR
         21                     C
         22                           REAL*4    X,Y,Z,XNWALL,YNWALL,ZNWALL,DPWLAD,WRK01,
         23                          *          RX,RY,XWG,YWG,ZWG,D
         24                     C
         25                           INTEGER*4 IP,IEWLAD,I,IPWALL,IS,IE,J,IEW,IETYPE,IEWALL,IPWLAD,
         26                          *          IPW1,IPW2,IPW3,IPW4,IWRK,IWRKL
         27                     C
         28                           REAL*4    XNWLAD,YNWLAD,ZNWLAD
         29                     C
         30                           DIMENSION LOCAL(NSP,NS,4),NODE(N2,NE),NEX(8),
         31                          *          LPWALL(NPWALL),
         32                          *          LEWALL(MLST,NEWALL),LEWLAD(NEWLAD),
         33                          *          LPWLAE(7,NEWLAD),LPWLAD(MPWLAD),DPWLAD(MPWLAD),
         34                          *          XNWALL(NEWALL),YNWALL(NEWALL),ZNWALL(NEWALL),
         35                          *          X(NP),Y(NP),Z(NP),
         36                          *          XNWLAD(NPWLAD),YNWLAD(NPWLAD),ZNWLAD(NPWLAD),
         37                          *          LWORK(NP),LWRK01(NP),IWRKL(8),
         38                          *          LDOM(NDOM),NBPDOM(NDOM),
         39                          *          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM),
         40                          *          WRK01(*),RX(0:N2,ME),RY(0:N2,ME)
         41                     C
         42                           IERR = 0
         43                     C
         44                           IF (IFNDNW.EQ.1) GOTO 1000
         45                     C
         46                     C //CLEAR LISTS
         47                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK01, LWORK
                              <<< Loop-information  End >>>
         48     1  pp   2v            DO 100 IP = 1, NP
         49     1   p   2v                LWORK(IP) = 0
         50     1   p   2v                LWRK01(IP) = 0
         51     1   p   2v        100 CONTINUE
         52                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1600
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPWLAE
                              <<< Loop-information  End >>>
         53     1  pp   4v            DO 101 IEWLAD = 1, NEWLAD
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<< Loop-information  End >>>
         54     2   p   4                 DO 102 I = 1, 7
         55     2   p   4v                    LPWLAE(I,IEWLAD) = 0
         56     2   p   4v        102     CONTINUE
         57     1   p             101 CONTINUE
         58                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.83, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPWALL
                              <<< Loop-information  End >>>
         59     1   s   4v            DO 103 IPWALL = 1, NPWALL
         60     1   m   4v                LWORK(LPWALL(IPWALL)) = 1
         61     1   p   4v       103  CONTINUE
         62                     C
         63                     C //SEARCH AND REGISTER WALL-ADJECENT NODES
         64                     C
         65                           NPWLAD = 0
         66                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEWLAD
                              <<< Loop-information  End >>>
         67     1                     DO 110 IEWLAD = 1, NEWLAD
         68     1                         IE = LEWLAD(IEWLAD)
         69     1               C
         70     1               C         // LOCAL WALL-ADJACENT NODE INDEX (1-7(MAX))
         71     1                         J=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
         72     2       f                 DO 120 I = 1, 8
         73     2               C
         74     2       f                     IP = NODE(I,IE)
         75     2               C
         76     3       f                     IF(IP.LT.1) THEN
         77     3               C             //EXCEEDED LOCAL NODE NUMBER -> GOTO NEXT LEWLAD
         78     3       f                         GOTO 121
         79     3       f                     ENDIF
         80     2               C
         81     3       f                     IF(LWORK(IP).EQ.0) THEN
         82     3               C             //NOT WALL-NODES -> WALL-ADJACENT NODE!
         83     3       f                         J=J+1
         84     4       f                         IF(LWRK01(IP).EQ.0) THEN
         85     4               C                 //NOT REGISTERD IN LPWLAD
         86     4       f                             NPWLAD = NPWLAD + 1
         87     4       f                             LPWLAD(NPWLAD) = IP
         88     4       f                             LWRK01(IP) = NPWLAD
         89     4       f                             LPWLAE(J,IEWLAD) = NPWLAD
         90     4       f                         ELSE
         91     4               C                 //ALREADY REGISTERD IN LPWLAD
         92     4       f                             LPWLAE(J,IEWLAD)=LWRK01(IP)
         93     4       f                         ENDIF
         94     3               C
         95     3       f                     ENDIF
         96     2               C
         97     2       f         120     CONTINUE
         98     1                 121     CONTINUE
         99     1               C
        100     1                 110 CONTINUE
        101                     C
        102                      1000 CONTINUE
        103                     C
        104                     C // CALCULATE WALL-DISTANCE
        105                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPWLAD, DPWLAD
                              <<< Loop-information  End >>>
        106     1                      DO 200 IEWALL = 1 , NEWALL
        107     1                         IEW  = LEWALL(1,IEWALL)
        108     1                         IS   = LEWALL(2,IEWALL)
        109     2                         IF(     NODE(8,IEW).GE.1) THEN ! HEX
        110     2                            IETYPE = 4
        111     2                         ELSE IF(NODE(6,IEW).GE.1) THEN ! PRS
        112     2                            IETYPE = 3
        113     2                         ELSE IF(NODE(5,IEW).GE.1) THEN ! PYR
        114     2                            IETYPE = 2
        115     2                         ELSE                           ! TET
        116     2                            IETYPE = 1
        117     2                         ENDIF
        118     2                         IF(LOCAL(4,IS,IETYPE).GE.1) THEN      ! QUADRILATERAL
        119     2                            IPW1 = NODE(LOCAL(1,IS,IETYPE),IEW)
        120     2                            IPW2 = NODE(LOCAL(2,IS,IETYPE),IEW)
        121     2                            IPW3 = NODE(LOCAL(3,IS,IETYPE),IEW)
        122     2                            IPW4 = NODE(LOCAL(4,IS,IETYPE),IEW)
        123     2                            XWG = ( X(IPW1)+X(IPW2)+X(IPW3)+X(IPW4) )/4.0E0
        124     2                            YWG = ( Y(IPW1)+Y(IPW2)+Y(IPW3)+Y(IPW4) )/4.0E0
        125     2                            ZWG = ( Z(IPW1)+Z(IPW2)+Z(IPW3)+Z(IPW4) )/4.0E0
        126     2                         ELSE                                  ! TRIANGLE
        127     2                            IPW1 = NODE(LOCAL(1,IS,IETYPE),IEW)
        128     2                            IPW2 = NODE(LOCAL(2,IS,IETYPE),IEW)
        129     2                            IPW3 = NODE(LOCAL(3,IS,IETYPE),IEW)
        130     2                            XWG = ( X(IPW1)+X(IPW2)+X(IPW3) )/3.0E0
        131     2                            YWG = ( Y(IPW1)+Y(IPW2)+Y(IPW3) )/3.0E0
        132     2                            ZWG = ( Z(IPW1)+Z(IPW2)+Z(IPW3) )/3.0E0
        133     2                         ENDIF
        134     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 471
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.60, ITR: 192, MVE: 2)
                              <<<    UNSWITCHING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DPWLAD, LPWLAD
                              <<< Loop-information  End >>>
        135     2  pp   2v                DO 210 IPWLAD = 1 , NPWLAD
        136     2   p   2v                    IP=LPWLAD(IPWLAD)
        137     2   p   2v                    D = (X(IP)-XWG)*XNWALL(IEWALL)
        138     2                    *           +(Y(IP)-YWG)*YNWALL(IEWALL)
        139     2                    *           +(Z(IP)-ZWG)*ZNWALL(IEWALL)
        140     3   p   2v                    IF(IEWALL.EQ.1.OR.D.LE.DPWLAD(IPWLAD).AND.D.GT.0.0E0)
        141     3                    *          THEN
        142     3   p   2v                        DPWLAD(IPWLAD) = D
        143     3   p   2v                    ENDIF
        144     2   p   2v        210     CONTINUE
        145     1                 200 CONTINUE
        146                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK01
                              <<< Loop-information  End >>>
        147     1  pp   4v            DO 300 IP=1, NP
        148     1   p   4v                WRK01(IP)=0.0
        149     1   p   4v       300  CONTINUE
        150                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 256, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DPWLAD, LPWLAD
                              <<< Loop-information  End >>>
        151     1   s   2v            DO 310 IPWLAD = 1, NPWLAD
        152     1   m   2v                WRK01(LPWLAD(IPWLAD)) = - DPWLAD(IPWLAD)
        153     1   p   2v       310  CONTINUE
        154                     C
        155                           IDUM=1
        156                           CALL DDCMAX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,
        157                          *         MBPDOM,WRK01,WRK01,WRK01,NP,IUT0,IERR,RX,RY,MAXBUF)
        158                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 889
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 480, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPWLAD, DPWLAD
                              <<< Loop-information  End >>>
        159     1  pp   2v            DO 320 IPWLAD = 1, NPWLAD
        160     1   p   2v                DPWLAD(IPWLAD) = - WRK01(LPWLAD(IPWLAD))
        161     1   p   2v       320  CONTINUE
        162                     C
        163                     CCTT DEBUG WRITE
        164                     C      DO 330 IEWLAD = 1, NEWLAD
        165                     C          WRITE(IUT6,'(8I10.8)') LPWLAE(1,IEWLAD), LPWLAE(2,IEWLAD),
        166                     C     *         LPWLAE(3,IEWLAD), LPWLAE(4,IEWLAD), LPWLAE(5,IEWLAD),
        167                     C     *         LPWLAE(6,IEWLAD), LPWLAE(7,IEWLAD), LEWLAD(IEWLAD)
        168                     C 330  CONTINUE
        169                     C
        170                     CCTT
        171                     C
        172                           RETURN
        173                           END

 Diagnostic messages: program name(FINDNW)
   jwd2008i-i  "findnw.f", line 1: この仮引数'IUT6'は、副プログラム中で使用されていません。
   jwd2008i-i  "findnw.f", line 1: この仮引数'N2D'は、副プログラム中で使用されていません。
   jwd8220o-i  "findnw.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "findnw.f", line 25: この名前'IWRK'は、宣言だけされていて引用されていません。
   jwd2006i-i  "findnw.f", line 30: この名前'ZNWLAD'は、宣言だけされていて引用されていません。
   jwd2006i-i  "findnw.f", line 30: この名前'YNWLAD'は、宣言だけされていて引用されていません。
   jwd2006i-i  "findnw.f", line 30: この名前'XNWLAD'は、宣言だけされていて引用されていません。
   jwd2006i-i  "findnw.f", line 30: この名前'IWRKL'は、宣言だけされていて引用されていません。
   jwd2008i-i  "findnw.f", line 30: この仮引数'NEX'は、副プログラム中で使用されていません。
   jwd5001p-i  "findnw.f", line 48: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "findnw.f", line 48: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "findnw.f", line 48: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "findnw.f", line 48: ループを展開数2回でアンローリングしました。
   jwd6002s-i  "findnw.f", line 53: このDOループをSIMD化しました。
   jwd8663o-i  "findnw.f", line 53: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "findnw.f", line 53: ループを展開数4回でアンローリングしました。
   jwd5002p-i  "findnw.f", line 54: このDOループを並列化しました。
   jwd8330o-i  "findnw.f", line 55: 多重DOループをDO変数IEWLAD,...,Iで1重化しました。
   jwd6001s-i  "findnw.f", line 59: このDOループをSIMD化しました。(名前:IPWALL)
   jwd8204o-i  "findnw.f", line 59: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "findnw.f", line 59: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5228p-i  "findnw.f", line 60: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd5202p-i  "findnw.f", line 67: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NPWLAD)
   jwd5208p-i  "findnw.f", line 67: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LPWLAD)
   jwd5208p-i  "findnw.f", line 67: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LWRK01)
   jwd5133p-i  "findnw.f", line 67: このDOループは構造が複雑なため、並列化できません。
   jwd8670o-i  "findnw.f", line 67: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5131p-i  "findnw.f", line 72: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "findnw.f", line 72: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8203o-i  "findnw.f", line 72: ループをフルアンローリングしました。
   jwd5208p-i  "findnw.f", line 106: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:DPWLAD)
   jwd8209o-i  "findnw.f", line 123: 多項式の演算順序を変更しました。
   jwd8209o-i  "findnw.f", line 124: 多項式の演算順序を変更しました。
   jwd8209o-i  "findnw.f", line 125: 多項式の演算順序を変更しました。
   jwd8206o-i  "findnw.f", line 130: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "findnw.f", line 131: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "findnw.f", line 132: 除算を逆数の乗算に変更しました。
   jwd8321o-i  "findnw.f", line 135: ループをループアンスイッチングしました。
   jwd5001p-i  "findnw.f", line 135: このDOループを並列化しました。(名前:IPWLAD)
   jwd6001s-i  "findnw.f", line 135: このDOループをSIMD化しました。(名前:IPWLAD)
   jwd8204o-i  "findnw.f", line 135: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "findnw.f", line 135: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "findnw.f", line 137: 多項式の演算順序を変更しました。
   jwd5001p-i  "findnw.f", line 147: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "findnw.f", line 147: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "findnw.f", line 147: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "findnw.f", line 147: ループを展開数4回でアンローリングしました。
   jwd6001s-i  "findnw.f", line 151: このDOループをSIMD化しました。(名前:IPWLAD)
   jwd8204o-i  "findnw.f", line 151: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "findnw.f", line 151: ループの繰返し数が256回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5228p-i  "findnw.f", line 152: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd5001p-i  "findnw.f", line 159: このDOループを並列化しました。(名前:IPWLAD)
   jwd6001s-i  "findnw.f", line 159: このDOループをSIMD化しました。(名前:IPWLAD)
   jwd8204o-i  "findnw.f", line 159: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "findnw.f", line 159: ループの繰返し数が480回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。

 Procedure information
   Lines      : 173
   Statements : 94
   Stack(byte): 2864
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 173
   Total statements : 94
   Total stack(byte): 2864
   Total prefetch num: 0

