
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:52:59 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : dyna3d.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "DYNA3D"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE : DYNA3D                                                C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         11                     C                                                                      C
         12                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         13                     C                                                                      C
         14                     C  PERFORMANCE OPTIMIZATION                                            C
         15                     C                                                                      C
         16                     C                                       MODIFIED BY RIST               C
         17                     C======================================================================C
         18                           SUBROUTINE DYNA3D(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
         19                          *                  VISC,ALFDYN,GAMDYN,NAVDYN,FILTER,U,V,W,
         20                          *                  DNXI,DNYI,DNZI,SN,CM,
         21                          *                  NODE,ME,MELM,NE,NP,N1,N2,NEX,
         22                          *                  IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
         23                          *                  CS,AML,AMM,S,UI,UIJ,SIJN,SIJ,SSIJ,
         24                          *                  RX,RY,RZ,FX,FY,FZ,
         25                          *                  WRK00,WRK01,WRK02,WRK03,
         26                          *                  IVOF,NEFLD2,LEFLD2,LEFIX,
         27                          *                  EAP3,NODP,IENP,MEP,MP,NEP,
         28                          *                  IUT0,IERR)
         29                     C
         30                           IMPLICIT NONE
         31                     C
         32                           INTEGER*4 MCOLOR,MCPART
         33                           INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
         34                           INTEGER*4 IPE,K
         35                     C
         36                           REAL*4    VISC(NE),ALFDYN,GAMDYN
         37                           INTEGER*4 NAVDYN,ME,MELM,NE,NP,N1,N2,NEX(8),MEP,MP,IUT0,IERR
         38                           INTEGER*4 NODE(N2,NE)
         39                     C
         40                           REAL*4    FILTER(NE),U(NP+1),V(NP+1),W(NP+1),
         41                          *          DNXI(N1,NE),DNYI(N1,NE),DNZI(N1,NE),
         42                          *          SN(N1,NE),CM(NP)
         43                     C
         44                           INTEGER*4 IPART,NDOM,MBPDOM,
         45                          *          LDOM(NDOM),NBPDOM(NDOM),
         46                          *          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM)
         47                     C
         48                           REAL*4    CS(NE),AML(MP),AMM(MP),S(MP),
         49                          *          UI(3,MP),UIJ(6,MP),SIJN(6,MP),SIJ (6,MP),SSIJ(6,MP)
         50                     C
         51                           REAL*4    RX(N1,NE),RY(N1,NE),RZ(N1,NE),
         52                          *          FX(NP),FY(NP),FZ(NP)
         53                     C
         54                           REAL*4    EAP3(6,N2,MEP,NP)
         55                           INTEGER*4 NODP(N2,MEP,NP),IENP(MEP,MP),NEP(MP)
         56                     C
         57                     C
         58                           CHARACTER*60 ERMSGC
         59                          & /' ## SUBROUTINE DYNA3D: FATAL      ERROR REPORT   ; RETURNED' /
         60                     C
         61                           REAL*4 CLEAR,EPS
         62                           DATA CLEAR  / 0.15   /
         63                           DATA EPS    / 1.0E-2 /
         64                     C
         65                           INTEGER*4 ITIMEI,ISTEP,JPRESS
         66                           REAL*4    WRK00(NP),WRK01(NP),WRK02(NP),WRK03(NP)
         67                     C
         68                           INTEGER*4 IP,IE,IB,I,J,IELM,ICOLOR,ICPART,IES,IEE,IDUM,IAVDYN,
         69                          *          IELM1,IELM2,IELM3,IELM4,IELM5,IELM6,IELM7,IELM8,
         70                          *          MAXBUF,IP1,NN
         71                           REAL*4    ALF2,GAM2,DUEIE,DVEIE,DWEIE,FXIE,FYIE,FZIE,UKK,
         72                          *          AMLE,AMME,SE,SGS,
         73                          *          D1,RX1,RY1,RZ1
         74                     C
         75                     C     [INPUT:VOF]
         76                           INTEGER*4 IVOF,NEFLD2,LEFLD2(NEFLD2),LEFIX(NE)
         77                     C
         78                     C      COMPUTE SMAGIRINSKY CONSTANT BY DYNAMIC PROCEDURE PROPOSED
         79                     C     BY GERMANO AND LILLY
         80                     C         ( 3-D CALCULATION : SINGLE WORD VERSION )
         81                     C
         82                     C
         83                     C     NOTE ; IN-DOMAIN NOR INTER-DOMAIN CYCLIC BOUNDARY CONDITIONS HAVE
         84                     C           NOT BEEN SUPPORTED YET.
         85                     C
         86                     C
         87                     C     ARGUMENT LISTINGS
         88                     C       (1) INPUT
         89                     C          VISC        ; MOLECULAR VISCOSITY (USED TO CLEAR CS VALUES)
         90                     C          ALFDYN      ; RATIO OF WIDTH OF TEST-FILTERED GRID FILTER TO
         91                     C                       THAT OF GRID FILTER
         92                     C          GAMDYN      ; RATIO OF WIDTH OF TEST FILTER TO THAT OF GRID
         93                     C                       FILTER.
         94                     C          NAVDYN      ; NUMBER OF TEST-FILTER OPERATIONS APPLIED FOR
         95                     C                       AVERAGING LOCAL SMAGORINSKY CONSTANT
         96                     C          FILTER  (IE); ELEMENT GRID FILTER WIDTH
         97                     C
         98                     C          U       (IP); X-DIR. VELOCITY COMPONENT
         99                     C          V       (IP); Y-DIR. VELOCITY COMPONENT
        100                     C          W       (IP); Z-DIR. VELOCITY COMPONENT
        101                     C
        102                     C          DNXI  (I,IE); ELEMENT CENTER VALUE OF NX
        103                     C          DNYI  (I,IE); ELEMENT CENTER VALUE OF NY
        104                     C          DNZI  (I,IE); ELEMENT CENTER VALUE OF NZ
        105                     C          SN    (I,IE); INTEGRATED ELEMENT VECTOR OF N
        106                     C          CM      (IP); LUMPED MASS MATRIX
        107                     C
        108                     C          NODE  (I,IE); NODE NO. TABLE BASED ON ELEMENT
        109                     C          IENP(IEP,IP); ADJACENT ELEMENT NUMBER TO NODE IP
        110                     C                      ( IF NEP(IP).LT.MEP , THEN IENP(NEP(IP)+1,IP),
        111                     C                       IENP(MEP,IP) MUST BE SET TO AN IMAGINARY
        112                     C                       ELEMENT NO. BETWEEN NE+1,ME.)
        113                     C          JENP(IEP,IP); LOCAL NODE NUMBER OF IP IN ELEMENT IENP(IEP,IP)
        114                     C          NEP     (IP); NUMBER OF ADJACENT ELEMENTS TO NODE IP
        115                     C          ME          ; MAX. NUMBER OF TOTAL ELEMENTS
        116                     C          MEP         ; FIRST DIMENSION SIZE OF ARRAY IENP,JENP
        117                     C          NE          ; NUMBER OF TOTAL ELEMENTS
        118                     C          NP          ; NUMBER OF TOTAL    NODES
        119                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT ( = 8 )
        120                     C
        121                     C          IPART       ; SUB-DOMAIN NUMBER THAT THIS TASK SHOULD TAKE/IS
        122                     C                       TAKING CARE OF. IPART BEING SET ZERO MEANS THAT
        123                     C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL
        124                     C                       MODE.
        125                     C
        126                     C          LDOM  (IDOM); NEIBERING SUB-DOMAIN NUMBER
        127                     C          NBPDOM(IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
        128                     C                       SHARING WITH THE IDOM'TH NEIBERING SUB-DOMAIN,
        129                     C                       LDOM(IDOM)
        130                     C          NDOM        ; NUMBER OF THE NERIBERING SUB-DOMAINS
        131                     C          IPSLF (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        132                     C                           CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
        133                     C                           NEIBERING SUB-DOMAIN, LDOM(IDOM)
        134                     C          IPSND (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        135                     C                           SUB-DOMAIN THAT IS RECEIVING THE CALLING
        136                     C                           TASK'S RESIDUALS.
        137                     C          MBPDOM      ; THE MAXIMUM NUMBER OF THE INTER-CONNECT
        138                     C                       BOUNDARY NODES FOR ONE NEIBERING SUB-DOMAIN
        139                     C
        140                     C          IUT0        ; FILE NUMBER TO REPORT ERROR OCCURENCE
        141                     C
        142                     C       (2) OUTPUT
        143                     C          CS      (IE); ELEMENT SMAGORINSKY CONSTANT
        144                     C          AML     (IP); LEAST-SQUARE AVERAGED LEONARD STRESS
        145                     C          AMM     (IP); LEAST-SQUARE AVERAGED MODELED REYNOLDS STRESS
        146                     C          S       (IP); TEST-FILTERED STRAIN VELOCITY TENSOR MAGNITUDE
        147                     C          UI    (3,IP); TEST-FILTERED VELOCITIES
        148                     C          UIJ   (6,IP); TEST-FILTERED VELOCITY CORRELATIONS
        149                     C          SIJN  (6,IP); NODAL STRAIN VELOCITY TENSOR
        150                     C          SIJ   (6,IP); TEST-FILTERED STRAIN VELOCITY TENSOR
        151                     C          SSIJ  (6,IP); TEST-FILTERED STRAIN VELOCITY TENSOR MULTIPLIED
        152                     C                       BY ITS MAGNITUDE
        153                     C
        154                     C          IERR        ; RETURN CODE TO REPORT ERROR OCCURENCE
        155                     C                   0 --- NORMAL TERMINATION
        156                     C                   1 --- A FATAL ERROR HAS OCCURED
        157                     C
        158                     C       (4) WORK
        159                     C          RX    (I,IE); HOLDS X-DIR. ELEMENT RESIDUAL
        160                     C          RY    (I,IE); HOLDS Y-DIR. ELEMENT RESIDUAL
        161                     C          RZ    (I,IE); HOLDS Z-DIR. ELEMENT RESIDUAL
        162                     C          FX      (IP); HOLDS X-DIR. NODE    RESIDUAL
        163                     C          FY      (IP); HOLDS Y-DIR. NODE    RESIDUAL
        164                     C          FZ      (IP); HOLDS Z-DIR. NODE    RESIDUAL
        165                     C          DUE     (IE); HOLDS ELEMENT VELOCITY GRADIENT
        166                     C          DVE     (IE); HOLDS ELEMENT VELOCITY GRADIENT
        167                     C          DWE     (IE); HOLDS ELEMENT VELOCITY GRADIENT
        168                     C
        169                     C
        170                     C >>>> ADDED VARIABLES BY RIST FOR PERFORMANCE OPTIMIZATION <<<<
        171                     C       INPUT
        172                     C
        173                     C
        174                           IP=NP+1
        175                           U  (IP)=0.0E0
        176                           V  (IP)=0.0E0
        177                           W  (IP)=0.0E0
        178                           AMM(IP)=0.0E0
        179                           AML(IP)=0.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
        180     1   s    v            DO I=1,6
        181     1   p    v                SIJN(I,IP)=0.0E0
        182     1   p    v            ENDDO
        183                     C
        184                           ALF2   = ALFDYN*ALFDYN
        185                           GAM2   = GAMDYN*GAMDYN
        186                     C
        187                           MAXBUF = NE*N2
        188                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<< Loop-information  End >>>
        189     1  pp   4v            DO 5000 IE=1,NE
        190     1   p   4v               LEFIX(IE)=0
        191     1   p   4v       5000 CONTINUE
        192                     C
        193     1                     IF (IVOF.EQ.1) THEN
        194     1               !ocl norecurrence(LEFIX)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.83, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFLD2
                              <<< Loop-information  End >>>
        195     2  pp   4v               DO 5100 IB=1,NEFLD2
        196     2   p   4v                  LEFIX(LEFLD2(IB))=1
        197     2   p   4v       5100    CONTINUE
        198     1                     ENDIF
        199                     C
        200                     C
        201                     C
        202                     C COMPUTE NODAL VALUE OF STRAIN VELOCITY TENSOR
        203                     C
        204                     C
        205                     C  (1) DIAGONAL TERMS
        206                     C
        207                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        208     1  pp   2v            DO 100 IP = 1 , NP
        209     1   p   2v                FX(IP) = 0.E0
        210     1   p   2v                FY(IP) = 0.E0
        211     1   p   2v                FZ(IP) = 0.E0
        212     1   p   2v        100 CONTINUE
        213                     C
        214     1                     DO 220  ICOLOR=1,NCOLOR(4)
        215     1               !ocl norecurrence(FX,FY,FZ)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        216     2  pp                 DO 210 ICPART=1,NCPART(ICOLOR,4)
        217     2   p                     IES=LLOOP(ICPART  ,ICOLOR,4)
        218     2   p                     IEE=LLOOP(ICPART+1,ICOLOR,4)-1
        219     2               !ocl nosimd
        220     2               !ocl noswp
        221     2               !CDIR NODEP
        222     2               *POPTION INDEP(FX,FY,FZ)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<< Loop-information  End >>>
        223     3   p                     DO 200 IE = IES , IEE
        224     3   p                         IF (LEFIX(IE).EQ.1) GOTO 200
        225     3   p                         DUEIE =  DNXI(1,IE)*U(NODE(1,IE))+DNXI(5,IE)*U(NODE(5,IE))
        226     3                    &                +DNXI(2,IE)*U(NODE(2,IE))+DNXI(6,IE)*U(NODE(6,IE))
        227     3                    &                +DNXI(3,IE)*U(NODE(3,IE))+DNXI(7,IE)*U(NODE(7,IE))
        228     3                    &                +DNXI(4,IE)*U(NODE(4,IE))+DNXI(8,IE)*U(NODE(8,IE))
        229     3               C
        230     3   p                         DVEIE =  DNYI(1,IE)*V(NODE(1,IE))+DNYI(5,IE)*V(NODE(5,IE))
        231     3                    &                +DNYI(2,IE)*V(NODE(2,IE))+DNYI(6,IE)*V(NODE(6,IE))
        232     3                    &                +DNYI(3,IE)*V(NODE(3,IE))+DNYI(7,IE)*V(NODE(7,IE))
        233     3                    &                +DNYI(4,IE)*V(NODE(4,IE))+DNYI(8,IE)*V(NODE(8,IE))
        234     3               C
        235     3   p                         DWEIE =  DNZI(1,IE)*W(NODE(1,IE))+DNZI(5,IE)*W(NODE(5,IE))
        236     3                    &                +DNZI(2,IE)*W(NODE(2,IE))+DNZI(6,IE)*W(NODE(6,IE))
        237     3                    &                +DNZI(3,IE)*W(NODE(3,IE))+DNZI(7,IE)*W(NODE(7,IE))
        238     3                    &                +DNZI(4,IE)*W(NODE(4,IE))+DNZI(8,IE)*W(NODE(8,IE))
        239     3               C
        240     3   p                         FX(NODE(1,IE)) = FX(NODE(1,IE))+DUEIE*SN(1,IE)
        241     3   p                         FX(NODE(2,IE)) = FX(NODE(2,IE))+DUEIE*SN(2,IE)
        242     3   p                         FX(NODE(3,IE)) = FX(NODE(3,IE))+DUEIE*SN(3,IE)
        243     3   p                         FX(NODE(4,IE)) = FX(NODE(4,IE))+DUEIE*SN(4,IE)
        244     3   p                         FX(NODE(5,IE)) = FX(NODE(5,IE))+DUEIE*SN(5,IE)
        245     3   p                         FX(NODE(6,IE)) = FX(NODE(6,IE))+DUEIE*SN(6,IE)
        246     3   p                         FX(NODE(7,IE)) = FX(NODE(7,IE))+DUEIE*SN(7,IE)
        247     3   p                         FX(NODE(8,IE)) = FX(NODE(8,IE))+DUEIE*SN(8,IE)
        248     3               C
        249     3   p                         FY(NODE(1,IE)) = FY(NODE(1,IE))+DVEIE*SN(1,IE)
        250     3   p                         FY(NODE(2,IE)) = FY(NODE(2,IE))+DVEIE*SN(2,IE)
        251     3   p                         FY(NODE(3,IE)) = FY(NODE(3,IE))+DVEIE*SN(3,IE)
        252     3   p                         FY(NODE(4,IE)) = FY(NODE(4,IE))+DVEIE*SN(4,IE)
        253     3   p                         FY(NODE(5,IE)) = FY(NODE(5,IE))+DVEIE*SN(5,IE)
        254     3   p                         FY(NODE(6,IE)) = FY(NODE(6,IE))+DVEIE*SN(6,IE)
        255     3   p                         FY(NODE(7,IE)) = FY(NODE(7,IE))+DVEIE*SN(7,IE)
        256     3   p                         FY(NODE(8,IE)) = FY(NODE(8,IE))+DVEIE*SN(8,IE)
        257     3               C
        258     3   p                         FZ(NODE(1,IE)) = FZ(NODE(1,IE))+DWEIE*SN(1,IE)
        259     3   p                         FZ(NODE(2,IE)) = FZ(NODE(2,IE))+DWEIE*SN(2,IE)
        260     3   p                         FZ(NODE(3,IE)) = FZ(NODE(3,IE))+DWEIE*SN(3,IE)
        261     3   p                         FZ(NODE(4,IE)) = FZ(NODE(4,IE))+DWEIE*SN(4,IE)
        262     3   p                         FZ(NODE(5,IE)) = FZ(NODE(5,IE))+DWEIE*SN(5,IE)
        263     3   p                         FZ(NODE(6,IE)) = FZ(NODE(6,IE))+DWEIE*SN(6,IE)
        264     3   p                         FZ(NODE(7,IE)) = FZ(NODE(7,IE))+DWEIE*SN(7,IE)
        265     3   p                         FZ(NODE(8,IE)) = FZ(NODE(8,IE))+DWEIE*SN(8,IE)
        266     3   p             200     CONTINUE
        267     2   p             210 CONTINUE
        268     1                 220 CONTINUE
        269                     C
        270                     C
        271                           IDUM = 3
        272                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        273                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        274     1                     IF(IERR.NE.0) THEN
        275     1                         WRITE(IUT0,*)
        276     1                         WRITE(IUT0,*) ERMSGC
        277     1                         RETURN
        278     1                     ENDIF
        279                     C
        280                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 534
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.14, ITR: 96, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FX, FZ, SIJN, CM, FY
                              <<< Loop-information  End >>>
        281     1  pp    v            DO 300 IP = 1 , NP
        282     1   p    v                SIJN(1,IP) = CM(IP)*FX(IP)
        283     1   p    v                SIJN(2,IP) = CM(IP)*FY(IP)
        284     1   p    v                SIJN(3,IP) = CM(IP)*FZ(IP)
        285     1   p    v        300 CONTINUE
        286                     C
        287                     C
        288                     C  (2) OFF-DIAGONAL TERMS
        289                     C
        290                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        291     1  pp   2v            DO 400 IP = 1 , NP
        292     1   p   2v                FX(IP) = 0.E0
        293     1   p   2v                FY(IP) = 0.E0
        294     1   p   2v                FZ(IP) = 0.E0
        295     1   p   2v        400 CONTINUE
        296                     C
        297     1                     DO 520  ICOLOR=1,NCOLOR(4)
        298     1               !ocl norecurrence(FX,FY,FZ)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        299     2  pp                 DO 510 ICPART=1,NCPART(ICOLOR,4)
        300     2   p                     IES=LLOOP(ICPART  ,ICOLOR,4)
        301     2   p                     IEE=LLOOP(ICPART+1,ICOLOR,4)-1
        302     2               !ocl nosimd
        303     2               !ocl noswp
        304     2               !CDIR NODEP
        305     2               *POPTION INDEP(FX,FY,FZ)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 0
                              <<<      SIMD&FP   : SPILL 25  FILL 38
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        306     3   p                     DO 500 IE = IES , IEE
        307     3   p                         IF (LEFIX(IE).EQ.1) GOTO 500
        308     3   p                         DUEIE  = DNZI(1,IE)*V(NODE(1,IE))+DNYI(1,IE)*W(NODE(1,IE))
        309     3                    &                +DNZI(2,IE)*V(NODE(2,IE))+DNYI(2,IE)*W(NODE(2,IE))
        310     3                    &                +DNZI(3,IE)*V(NODE(3,IE))+DNYI(3,IE)*W(NODE(3,IE))
        311     3                    &                +DNZI(4,IE)*V(NODE(4,IE))+DNYI(4,IE)*W(NODE(4,IE))
        312     3                    &                +DNZI(5,IE)*V(NODE(5,IE))+DNYI(5,IE)*W(NODE(5,IE))
        313     3                    &                +DNZI(6,IE)*V(NODE(6,IE))+DNYI(6,IE)*W(NODE(6,IE))
        314     3                    &                +DNZI(7,IE)*V(NODE(7,IE))+DNYI(7,IE)*W(NODE(7,IE))
        315     3                    &                +DNZI(8,IE)*V(NODE(8,IE))+DNYI(8,IE)*W(NODE(8,IE))
        316     3               C
        317     3   p                         DVEIE  = DNXI(1,IE)*W(NODE(1,IE))+DNZI(1,IE)*U(NODE(1,IE))
        318     3                    &                +DNXI(2,IE)*W(NODE(2,IE))+DNZI(2,IE)*U(NODE(2,IE))
        319     3                    &                +DNXI(3,IE)*W(NODE(3,IE))+DNZI(3,IE)*U(NODE(3,IE))
        320     3                    &                +DNXI(4,IE)*W(NODE(4,IE))+DNZI(4,IE)*U(NODE(4,IE))
        321     3                    &                +DNXI(5,IE)*W(NODE(5,IE))+DNZI(5,IE)*U(NODE(5,IE))
        322     3                    &                +DNXI(6,IE)*W(NODE(6,IE))+DNZI(6,IE)*U(NODE(6,IE))
        323     3                    &                +DNXI(7,IE)*W(NODE(7,IE))+DNZI(7,IE)*U(NODE(7,IE))
        324     3                    &                +DNXI(8,IE)*W(NODE(8,IE))+DNZI(8,IE)*U(NODE(8,IE))
        325     3               C
        326     3   p                         DWEIE  = DNYI(1,IE)*U(NODE(1,IE))+DNXI(1,IE)*V(NODE(1,IE))
        327     3                    &                +DNYI(2,IE)*U(NODE(2,IE))+DNXI(2,IE)*V(NODE(2,IE))
        328     3                    &                +DNYI(3,IE)*U(NODE(3,IE))+DNXI(3,IE)*V(NODE(3,IE))
        329     3                    &                +DNYI(4,IE)*U(NODE(4,IE))+DNXI(4,IE)*V(NODE(4,IE))
        330     3                    &                +DNYI(5,IE)*U(NODE(5,IE))+DNXI(5,IE)*V(NODE(5,IE))
        331     3                    &                +DNYI(6,IE)*U(NODE(6,IE))+DNXI(6,IE)*V(NODE(6,IE))
        332     3                    &                +DNYI(7,IE)*U(NODE(7,IE))+DNXI(7,IE)*V(NODE(7,IE))
        333     3                    &                +DNYI(8,IE)*U(NODE(8,IE))+DNXI(8,IE)*V(NODE(8,IE))
        334     3   p                         FX(NODE(1,IE)) = FX(NODE(1,IE))+DUEIE*SN(1,IE)
        335     3   p                         FX(NODE(2,IE)) = FX(NODE(2,IE))+DUEIE*SN(2,IE)
        336     3   p                         FX(NODE(3,IE)) = FX(NODE(3,IE))+DUEIE*SN(3,IE)
        337     3   p                         FX(NODE(4,IE)) = FX(NODE(4,IE))+DUEIE*SN(4,IE)
        338     3   p                         FX(NODE(5,IE)) = FX(NODE(5,IE))+DUEIE*SN(5,IE)
        339     3   p                         FX(NODE(6,IE)) = FX(NODE(6,IE))+DUEIE*SN(6,IE)
        340     3   p                         FX(NODE(7,IE)) = FX(NODE(7,IE))+DUEIE*SN(7,IE)
        341     3   p                         FX(NODE(8,IE)) = FX(NODE(8,IE))+DUEIE*SN(8,IE)
        342     3               C
        343     3   p                         FY(NODE(1,IE)) = FY(NODE(1,IE))+DVEIE*SN(1,IE)
        344     3   p                         FY(NODE(2,IE)) = FY(NODE(2,IE))+DVEIE*SN(2,IE)
        345     3   p                         FY(NODE(3,IE)) = FY(NODE(3,IE))+DVEIE*SN(3,IE)
        346     3   p                         FY(NODE(4,IE)) = FY(NODE(4,IE))+DVEIE*SN(4,IE)
        347     3   p                         FY(NODE(5,IE)) = FY(NODE(5,IE))+DVEIE*SN(5,IE)
        348     3   p                         FY(NODE(6,IE)) = FY(NODE(6,IE))+DVEIE*SN(6,IE)
        349     3   p                         FY(NODE(7,IE)) = FY(NODE(7,IE))+DVEIE*SN(7,IE)
        350     3   p                         FY(NODE(8,IE)) = FY(NODE(8,IE))+DVEIE*SN(8,IE)
        351     3               C
        352     3   p                         FZ(NODE(1,IE)) = FZ(NODE(1,IE))+DWEIE*SN(1,IE)
        353     3   p                         FZ(NODE(2,IE)) = FZ(NODE(2,IE))+DWEIE*SN(2,IE)
        354     3   p                         FZ(NODE(3,IE)) = FZ(NODE(3,IE))+DWEIE*SN(3,IE)
        355     3   p                         FZ(NODE(4,IE)) = FZ(NODE(4,IE))+DWEIE*SN(4,IE)
        356     3   p                         FZ(NODE(5,IE)) = FZ(NODE(5,IE))+DWEIE*SN(5,IE)
        357     3   p                         FZ(NODE(6,IE)) = FZ(NODE(6,IE))+DWEIE*SN(6,IE)
        358     3   p                         FZ(NODE(7,IE)) = FZ(NODE(7,IE))+DWEIE*SN(7,IE)
        359     3   p                         FZ(NODE(8,IE)) = FZ(NODE(8,IE))+DWEIE*SN(8,IE)
        360     3   p             500     CONTINUE
        361     2   p             510 CONTINUE
        362     1                 520 CONTINUE
        363                     C
        364                     C
        365                           IDUM = 3
        366                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        367                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        368     1                     IF(IERR.NE.0) THEN
        369     1                         WRITE(IUT0,*)
        370     1                         WRITE(IUT0,*) ERMSGC
        371     1                         RETURN
        372     1                     ENDIF
        373                     C
        374                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 485
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.57, ITR: 128, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      SIJN, FZ, FY, CM, FX
                              <<< Loop-information  End >>>
        375     1  pp    v            DO 600 IP = 1 , NP
        376     1   p    v                SIJN(4,IP) = 0.5E0*CM(IP)*FX(IP)
        377     1   p    v                SIJN(5,IP) = 0.5E0*CM(IP)*FY(IP)
        378     1   p    v                SIJN(6,IP) = 0.5E0*CM(IP)*FZ(IP)
        379     1   p    v        600 CONTINUE
        380                     C
        381                     C
        382                     C
        383                     C COMPUTE CONTRACTION OF STRAIN VELOCITY TENSOR
        384                     C
        385                     C
        386                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 314
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.37, ITR: 176, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      SIJN, S
                              <<< Loop-information  End >>>
        387     1  pp    v            DO 700 IP = 1 , NP
        388     1   p    v                S(IP) = SQRT(2.E0*SIJN(1,IP)*SIJN(1,IP)
        389     1                    &                +2.E0*SIJN(2,IP)*SIJN(2,IP)
        390     1                    &                +2.E0*SIJN(3,IP)*SIJN(3,IP)
        391     1                    &                +4.E0*SIJN(4,IP)*SIJN(4,IP)
        392     1                    &                +4.E0*SIJN(5,IP)*SIJN(5,IP)
        393     1                    &                +4.E0*SIJN(6,IP)*SIJN(6,IP))
        394     1   p    v        700 CONTINUE
        395                     C
        396                     C
        397                     C
        398                     C TEST-FILTER VELOCITY VECTOR
        399                     C
        400                     C
        401                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        402     1   p    v            DO 810 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        403     2  pp   2                 DO 800 IE = 1 , NE
        404     2   p   2v                    RX(I,IE) = 0.E0
        405     2   p   2v                    RY(I,IE) = 0.E0
        406     2   p   2v                    RZ(I,IE) = 0.E0
        407     2   p   2         800     CONTINUE
        408     1   p   2v        810 CONTINUE
        409                     C
        410     1                     DO 1020 IP=1,NP
        411     1                         RX1 = 0.E0
        412     1                         RY1 = 0.E0
        413     1                         RZ1 = 0.E0
        414     2                         DO 1010 IPE=1,NEP(IP)
        415     2                             IE =IENP(IPE,IP)
        416     2                             IF (LEFIX(IE).EQ.1) GOTO 1010
        417     2                             NN = NEX(8)
        418     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 411
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        419     3  pp    v                    DO 1000 K=1,NN
        420     3   p    v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        421     3                    *                            + EAP3(2,K,IPE,IP)
        422     3                    *                            + EAP3(3,K,IPE,IP))
        423     3               C
        424     3   p    v                        IP1=NODP(K,IPE,IP)
        425     3   p    v                        RX1=RX1-D1*U(IP1)
        426     3   p    v                        RY1=RY1-D1*V(IP1)
        427     3   p    v                        RZ1=RZ1-D1*W(IP1)
        428     3   p    v       1000         CONTINUE
        429     2               C
        430     2                1010     CONTINUE
        431     1               C
        432     1                         FX(IP) = RX1
        433     1                         FY(IP) = RY1
        434     1                         FZ(IP) = RZ1
        435     1                1020 CONTINUE
        436                     C
        437                     C
        438                           IDUM = 3
        439                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        440                          *           FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        441     1                     IF(IERR.NE.0) THEN
        442     1                         WRITE(IUT0,*)
        443     1                         WRITE(IUT0,*) ERMSGC
        444     1                         RETURN
        445     1                     ENDIF
        446                     C
        447                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 356
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.44, ITR: 112, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UI, FZ, FY, CM, V, W, FX, U
                              <<< Loop-information  End >>>
        448     1  pp    v            DO 1100 IP = 1 , NP
        449     1   p    v                UI(1,IP) = U(IP)+GAM2/24.E0*CM(IP)*FX(IP)
        450     1   p    v                UI(2,IP) = V(IP)+GAM2/24.E0*CM(IP)*FY(IP)
        451     1   p    v                UI(3,IP) = W(IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        452     1   p    v       1100 CONTINUE
        453                     C
        454                     C
        455                     C
        456                     C TEST-FILTER VELOCITY CORRELATION TENSOR
        457                     C
        458                     C
        459                     C  (1) DIAGONAL TERMS
        460                     C
        461                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        462     1   p    v            DO 1210 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        463     2  pp   2                 DO 1200 IE = 1 , NE
        464     2   p   2v                    RX(I,IE) = 0.E0
        465     2   p   2v                    RY(I,IE) = 0.E0
        466     2   p   2v                    RZ(I,IE) = 0.E0
        467     2   p   2        1200     CONTINUE
        468     1   p   2v       1210 CONTINUE
        469                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        470     1  pp   2v            DO 1300 IP = 1 , NP
        471     1   p   2v                FX(IP) = 0.E0
        472     1   p   2v                FY(IP) = 0.E0
        473     1   p   2v                FZ(IP) = 0.E0
        474     1   p   2v       1300 CONTINUE
        475                     C
        476     1                     DO 1430 IP=1,NP
        477     1                         RX1 = 0.E0
        478     1                         RY1 = 0.E0
        479     1                         RZ1 = 0.E0
        480     2                         DO 1420 IPE=1,NEP(IP)
        481     2                             IE =IENP(IPE,IP)
        482     2                             IF (LEFIX(IE).EQ.1) GOTO 1420
        483     2                             NN = NEX(8)
        484     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 381
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        485     3  pp    v                    DO 1410 K=1,NN
        486     3   p    v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        487     3                    *                            + EAP3(2,K,IPE,IP)
        488     3                    *                            + EAP3(3,K,IPE,IP))
        489     3               C
        490     3   p    v                        IP1  = NODP(K,IPE,IP)
        491     3   p    v                        FXIE = U(IP1)*U(IP1)
        492     3   p    v                        FYIE = V(IP1)*V(IP1)
        493     3   p    v                        FZIE = W(IP1)*W(IP1)
        494     3               C
        495     3   p    v                        RX1=RX1-D1*FXIE
        496     3   p    v                        RY1=RY1-D1*FYIE
        497     3   p    v                        RZ1=RZ1-D1*FZIE
        498     3   p    v       1410         CONTINUE
        499     2               C
        500     2                1420     CONTINUE
        501     1               C
        502     1                         FX(IP) = RX1
        503     1                         FY(IP) = RY1
        504     1                         FZ(IP) = RZ1
        505     1                1430 CONTINUE
        506                     C
        507                     C
        508                           IDUM = 3
        509                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        510                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        511     1                     IF(IERR.NE.0) THEN
        512     1                         WRITE(IUT0,*)
        513     1                         WRITE(IUT0,*) ERMSGC
        514     1                         RETURN
        515     1                     ENDIF
        516                     C
        517                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 334
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.77, ITR: 112, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      W, FZ, CM, FY, V, UIJ, U, FX
                              <<< Loop-information  End >>>
        518     1  pp    v            DO 1500 IP = 1 , NP
        519     1   p    v                UIJ(1,IP) = U(IP)*U(IP)+GAM2/24.E0*CM(IP)*FX(IP)
        520     1   p    v                UIJ(2,IP) = V(IP)*V(IP)+GAM2/24.E0*CM(IP)*FY(IP)
        521     1   p    v                UIJ(3,IP) = W(IP)*W(IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        522     1   p    v       1500 CONTINUE
        523                     C
        524                     C
        525                     C  (2) OFF-DIAGONAL TERMS
        526                     C
        527                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        528     1   p    v            DO 1610 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        529     2  pp   2                 DO 1600 IE = 1 , NE
        530     2   p   2v                    RX(I,IE) = 0.E0
        531     2   p   2v                    RY(I,IE) = 0.E0
        532     2   p   2v                    RZ(I,IE) = 0.E0
        533     2   p   2        1600     CONTINUE
        534     1   p   2v       1610 CONTINUE
        535                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        536     1  pp   2v            DO 1700 IP = 1 , NP
        537     1   p   2v                FX(IP) = 0.E0
        538     1   p   2v                FY(IP) = 0.E0
        539     1   p   2v                FZ(IP) = 0.E0
        540     1   p   2v       1700 CONTINUE
        541                     C
        542     1                     DO 1830 IP=1,NP
        543     1                         RX1 = 0.E0
        544     1                         RY1 = 0.E0
        545     1                         RZ1 = 0.E0
        546     2                         DO 1820 IPE=1,NEP(IP)
        547     2                             IE =IENP(IPE,IP)
        548     2                             IF (LEFIX(IE).EQ.1) GOTO 1820
        549     2                             NN = NEX(8)
        550     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 381
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        551     3  pp    v                    DO 1810 K=1,NN
        552     3   p    v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        553     3                    *                            + EAP3(2,K,IPE,IP)
        554     3                    *                            + EAP3(3,K,IPE,IP))
        555     3               C
        556     3   p    v                        IP1  = NODP(K,IPE,IP)
        557     3   p    v                        FXIE = V(IP1)*W(IP1)
        558     3   p    v                        FYIE = W(IP1)*U(IP1)
        559     3   p    v                        FZIE = U(IP1)*V(IP1)
        560     3               C
        561     3   p    v                        RX1=RX1-D1*FXIE
        562     3   p    v                        RY1=RY1-D1*FYIE
        563     3   p    v                        RZ1=RZ1-D1*FZIE
        564     3   p    v       1810         CONTINUE
        565     2               C
        566     2                1820     CONTINUE
        567     1               C
        568     1                         FX(IP) = RX1
        569     1                         FY(IP) = RY1
        570     1                         FZ(IP) = RZ1
        571     1                1830 CONTINUE
        572                     C
        573                     C
        574                           IDUM = 3
        575                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        576                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        577     1                     IF(IERR.NE.0) THEN
        578     1                         WRITE(IUT0,*)
        579     1                         WRITE(IUT0,*) ERMSGC
        580     1                         RETURN
        581     1                     ENDIF
        582                     C
        583                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 334
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.77, ITR: 112, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CM, FY, U, W, V, FZ, UIJ, FX
                              <<< Loop-information  End >>>
        584     1  pp    v            DO 1900 IP = 1 , NP
        585     1   p    v                UIJ(4,IP) = V(IP)*W(IP)+GAM2/24.E0*CM(IP)*FX(IP)
        586     1   p    v                UIJ(5,IP) = W(IP)*U(IP)+GAM2/24.E0*CM(IP)*FY(IP)
        587     1   p    v                UIJ(6,IP) = U(IP)*V(IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        588     1   p    v       1900 CONTINUE
        589                     C
        590                     C
        591                     C
        592                     C TEST-FILTER STRAIN VELOCITY TENSOR
        593                     C
        594                     C
        595                     C  (1) DIAGONAL TERMS
        596                     C
        597                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        598     1   p    v            DO 2010 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        599     2  pp   2                 DO 2000 IE = 1 , NE
        600     2   p   2v                    RX(I,IE) = 0.E0
        601     2   p   2v                    RY(I,IE) = 0.E0
        602     2   p   2v                    RZ(I,IE) = 0.E0
        603     2   p   2        2000     CONTINUE
        604     1   p   2v       2010 CONTINUE
        605                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        606     1  pp   2v            DO 2100 IP = 1 , NP
        607     1   p   2v                FX(IP) = 0.E0
        608     1   p   2v                FY(IP) = 0.E0
        609     1   p   2v                FZ(IP) = 0.E0
        610     1   p   2v       2100 CONTINUE
        611                     C
        612     1                     DO 2230 IP=1,NP
        613     1                         RX1 = 0.E0
        614     1                         RY1 = 0.E0
        615     1                         RZ1 = 0.E0
        616     2                         DO 2220 IPE=1,NEP(IP)
        617     2                             IE =IENP(IPE,IP)
        618     2                             IF (LEFIX(IE).EQ.1) GOTO 2220
        619     2                             NN = NEX(8)
        620     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 400
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        621     3  pp    v                    DO 2210 K=1,NN
        622     3   p    v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        623     3                    *                            + EAP3(2,K,IPE,IP)
        624     3                    *                            + EAP3(3,K,IPE,IP))
        625     3               C
        626     3   p    v                        IP1  = NODP(K,IPE,IP)
        627     3   p    v                        FXIE = SIJN(1,IP1)
        628     3   p    v                        FYIE = SIJN(2,IP1)
        629     3   p    v                        FZIE = SIJN(3,IP1)
        630     3               C
        631     3   p    v                        RX1=RX1-D1*FXIE
        632     3   p    v                        RY1=RY1-D1*FYIE
        633     3   p    v                        RZ1=RZ1-D1*FZIE
        634     3   p    v       2210         CONTINUE
        635     2               C
        636     2                2220     CONTINUE
        637     1               C
        638     1                         FX(IP) = RX1
        639     1                         FY(IP) = RY1
        640     1                         FZ(IP) = RZ1
        641     1                2230 CONTINUE
        642                     C
        643                     C
        644                           IDUM = 3
        645                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        646                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        647     1                     IF(IERR.NE.0) THEN
        648     1                         WRITE(IUT0,*)
        649     1                         WRITE(IUT0,*) ERMSGC
        650     1                         RETURN
        651     1                     ENDIF
        652                     C
        653                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 356
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.58, ITR: 96, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FY, FX, SIJN, FZ, SIJ, CM
                              <<< Loop-information  End >>>
        654     1  pp    v            DO 2300 IP = 1 , NP
        655     1   p    v                SIJ(1,IP) = SIJN(1,IP)+GAM2/24.E0*CM(IP)*FX(IP)
        656     1   p    v                SIJ(2,IP) = SIJN(2,IP)+GAM2/24.E0*CM(IP)*FY(IP)
        657     1   p    v                SIJ(3,IP) = SIJN(3,IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        658     1   p    v       2300 CONTINUE
        659                     C
        660                     C
        661                     C  (2) OFF-DIAGONAL TERMS
        662                     C
        663                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        664     1   p    v            DO 2410 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        665     2  pp   2                 DO 2400 IE = 1 , NE
        666     2   p   2v                    RX(I,IE) = 0.E0
        667     2   p   2v                    RY(I,IE) = 0.E0
        668     2   p   2v                    RZ(I,IE) = 0.E0
        669     2   p   2        2400     CONTINUE
        670     1   p   2v       2410 CONTINUE
        671                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        672     1  pp   2v            DO 2500 IP = 1 , NP
        673     1   p   2v                FX(IP) = 0.E0
        674     1   p   2v                FY(IP) = 0.E0
        675     1   p   2v                FZ(IP) = 0.E0
        676     1   p   2v       2500 CONTINUE
        677                     C
        678     1                     DO 2630 IP=1,NP
        679     2                         DO 2620 IPE=1,NEP(IP)
        680     2                             IE =IENP(IPE,IP)
        681     2                             IF (LEFIX(IE).EQ.1) GOTO 2620
        682     2                             RX1 = 0.E0
        683     2                             RY1 = 0.E0
        684     2                             RZ1 = 0.E0
        685     2                             NN = NEX(8)
        686     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 400
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        687     3  pp    v                    DO 2610 K=1,NN
        688     3   p    v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        689     3                    *                            + EAP3(2,K,IPE,IP)
        690     3                    *                            + EAP3(3,K,IPE,IP))
        691     3               C
        692     3   p    v                        IP1  = NODP(K,IPE,IP)
        693     3   p    v                        FXIE = SIJN(4,IP1)
        694     3   p    v                        FYIE = SIJN(5,IP1)
        695     3   p    v                        FZIE = SIJN(6,IP1)
        696     3               C
        697     3   p    v                        RX1=RX1-D1*FXIE
        698     3   p    v                        RY1=RY1-D1*FYIE
        699     3   p    v                        RZ1=RZ1-D1*FZIE
        700     3   p    v       2610         CONTINUE
        701     2               C
        702     2                2620     CONTINUE
        703     1               C
        704     1                         FX(IP) = RX1
        705     1                         FY(IP) = RY1
        706     1                         FZ(IP) = RZ1
        707     1                2630 CONTINUE
        708                     C
        709                     C
        710                           IDUM = 3
        711                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        712                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        713     1                     IF(IERR.NE.0) THEN
        714     1                         WRITE(IUT0,*)
        715     1                         WRITE(IUT0,*) ERMSGC
        716     1                         RETURN
        717     1                     ENDIF
        718                     C
        719                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 356
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.58, ITR: 96, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FY, FX, SIJN, FZ, SIJ, CM
                              <<< Loop-information  End >>>
        720     1  pp    v            DO 2700 IP = 1 , NP
        721     1   p    v                SIJ(4,IP) = SIJN(4,IP)+GAM2/24.E0*CM(IP)*FX(IP)
        722     1   p    v                SIJ(5,IP) = SIJN(5,IP)+GAM2/24.E0*CM(IP)*FY(IP)
        723     1   p    v                SIJ(6,IP) = SIJN(6,IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        724     1   p    v       2700 CONTINUE
        725                     C
        726                     C
        727                     C
        728                     C TEST-FILTER STRAIN VELOCITY TENSOR MULTIPLIED BY ITS MAGNITUDE
        729                     C
        730                     C
        731                     C  (1) DIAGONAL TERMS
        732                     C
        733                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        734     1   p    v            DO 2810 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        735     2  pp   2                 DO 2800 IE = 1 , NE
        736     2   p   2v                    RX(I,IE) = 0.E0
        737     2   p   2v                    RY(I,IE) = 0.E0
        738     2   p   2v                    RZ(I,IE) = 0.E0
        739     2   p   2        2800     CONTINUE
        740     1   p   2v       2810 CONTINUE
        741                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        742     1  pp                 DO 3030 IP=1,NP
        743     1   p                     RX1 = 0.E0
        744     1   p                     RY1 = 0.E0
        745     1   p                     RZ1 = 0.E0
        746     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODP, EAP3
                              <<< Loop-information  End >>>
        747     2   p                     DO 3020 IPE=1,NEP(IP)
        748     2   p                         IE =IENP(IPE,IP)
        749     2   p                         IF (LEFIX(IE).EQ.1) GOTO 3020
        750     2   p                         NN = NEX(8)
        751     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.85, ITR: 128, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP3, NODP
                              <<< Loop-information  End >>>
        752     3   p   2v                    DO 3010 K=1,NN
        753     3   p   2v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        754     3                    *                            + EAP3(2,K,IPE,IP)
        755     3                    *                            + EAP3(3,K,IPE,IP))
        756     3               C
        757     3   p   2v                        IP1  = NODP(K,IPE,IP)
        758     3   p   2v                        FXIE = S(IP)*SIJN(1,IP1)
        759     3   p   2v                        FYIE = S(IP)*SIJN(2,IP1)
        760     3   p   2v                        FZIE = S(IP)*SIJN(3,IP1)
        761     3               C
        762     3   p   2v                        RX1=RX1-D1*FXIE
        763     3   p   2v                        RY1=RY1-D1*FYIE
        764     3   p   2v                        RZ1=RZ1-D1*FZIE
        765     3   p   2v       3010         CONTINUE
        766     2               C
        767     2   p            3020     CONTINUE
        768     1               C
        769     1   p                     FX(IP) = RX1
        770     1   p                     FY(IP) = RY1
        771     1   p                     FZ(IP) = RZ1
        772     1   p            3030 CONTINUE
        773                     C
        774                     C
        775                           IDUM = 3
        776                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        777                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        778     1                     IF(IERR.NE.0) THEN
        779     1                         WRITE(IUT0,*)
        780     1                         WRITE(IUT0,*) ERMSGC
        781     1                         RETURN
        782     1                     ENDIF
        783                     C
        784                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 314
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.76, ITR: 128, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      SIJN, S, CM, FZ, FY, FX, SSIJ
                              <<< Loop-information  End >>>
        785     1  pp    v            DO 3100 IP = 1 , NP
        786     1   p    v               SSIJ(1,IP) = S(IP)*SIJN(1,IP)+GAM2/24.E0*CM(IP)*FX(IP)
        787     1   p    v               SSIJ(2,IP) = S(IP)*SIJN(2,IP)+GAM2/24.E0*CM(IP)*FY(IP)
        788     1   p    v               SSIJ(3,IP) = S(IP)*SIJN(3,IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        789     1   p    v       3100 CONTINUE
        790                     C
        791                     C
        792                     C  (2) OFF-DIAGONAL TERMS
        793                     C
        794                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RZ, RY, RX
                              <<< Loop-information  End >>>
        795     1   p    v            DO 3210 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
        796     2  pp   2                 DO 3200 IE = 1 , NE
        797     2   p   2v                    RX(I,IE) = 0.E0
        798     2   p   2v                    RY(I,IE) = 0.E0
        799     2   p   2v                    RZ(I,IE) = 0.E0
        800     2   p   2        3200     CONTINUE
        801     1   p   2v       3210 CONTINUE
        802                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FZ, FY, FX
                              <<< Loop-information  End >>>
        803     1  pp   2v            DO 3300 IP = 1 , NP
        804     1   p   2v                FX(IP) = 0.E0
        805     1   p   2v                FY(IP) = 0.E0
        806     1   p   2v                FZ(IP) = 0.E0
        807     1   p   2v       3300 CONTINUE
        808                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        809     1  pp                 DO 3430 IP=1,NP
        810     1   p                     RX1 = 0.E0
        811     1   p                     RY1 = 0.E0
        812     1   p                     RZ1 = 0.E0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODP, EAP3
                              <<< Loop-information  End >>>
        813     2   p                     DO 3420 IPE=1,NEP(IP)
        814     2   p                         IE =IENP(IPE,IP)
        815     2   p                         IF (LEFIX(IE).EQ.1) GOTO 3420
        816     2   p                         NN = NEX(8)
        817     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.85, ITR: 128, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP3, NODP
                              <<< Loop-information  End >>>
        818     3   p   2v                    DO 3410 K=1,NN
        819     3   p   2v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        820     3                    *                            + EAP3(2,K,IPE,IP)
        821     3                    *                            + EAP3(3,K,IPE,IP))
        822     3               C
        823     3   p   2v                        IP1  = NODP(K,IPE,IP)
        824     3   p   2v                        FXIE = S(IP)*SIJN(4,IP1)
        825     3   p   2v                        FYIE = S(IP)*SIJN(5,IP1)
        826     3   p   2v                        FZIE = S(IP)*SIJN(6,IP1)
        827     3               C
        828     3   p   2v                        RX1=RX1-D1*FXIE
        829     3   p   2v                        RY1=RY1-D1*FYIE
        830     3   p   2v                        RZ1=RZ1-D1*FZIE
        831     3   p   2v       3410         CONTINUE
        832     2               C
        833     2   p            3420     CONTINUE
        834     1   p                     FX(IP) = RX1
        835     1   p                     FY(IP) = RY1
        836     1   p                     FZ(IP) = RZ1
        837     1   p            3430 CONTINUE
        838                     C
        839                     C
        840                           IDUM = 3
        841                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        842                          *            FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        843     1                     IF(IERR.NE.0) THEN
        844     1                         WRITE(IUT0,*)
        845     1                         WRITE(IUT0,*) ERMSGC
        846     1                         RETURN
        847     1                     ENDIF
        848                     C
        849                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 314
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.76, ITR: 128, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      SIJN, S, CM, FZ, FY, FX, SSIJ
                              <<< Loop-information  End >>>
        850     1  pp    v            DO 3500 IP = 1 , NP
        851     1   p    v                SSIJ(4,IP)=S(IP)*SIJN(4,IP)+GAM2/24.E0*CM(IP)*FX(IP)
        852     1   p    v                SSIJ(5,IP)=S(IP)*SIJN(5,IP)+GAM2/24.E0*CM(IP)*FY(IP)
        853     1   p    v                SSIJ(6,IP)=S(IP)*SIJN(6,IP)+GAM2/24.E0*CM(IP)*FZ(IP)
        854     1   p    v       3500 CONTINUE
        855                     C
        856                     C
        857                     C
        858                     C COMPUTE CONTRACTION OF TEST-FILTERED STRAIN VELOCITY TENSOR
        859                     C
        860                     C
        861                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 314
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.37, ITR: 176, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      SIJ, S
                              <<< Loop-information  End >>>
        862     1  pp    v            DO 3600 IP = 1 , NP
        863     1   p    v                S(IP) = SQRT(2.E0*SIJ(1,IP)*SIJ(1,IP)
        864     1                    &                +2.E0*SIJ(2,IP)*SIJ(2,IP)
        865     1                    &                +2.E0*SIJ(3,IP)*SIJ(3,IP)
        866     1                    &                +4.E0*SIJ(4,IP)*SIJ(4,IP)
        867     1                    &                +4.E0*SIJ(5,IP)*SIJ(5,IP)
        868     1                    &                +4.E0*SIJ(6,IP)*SIJ(6,IP))
        869     1   p    v       3600 CONTINUE
        870                     C
        871                     C
        872                     C
        873                     C LEAST-SQUARE AVERAGE LEONARD STRESS TENSOR AND SGS STRESS TENSOR
        874                     C
        875                     C
        876                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 115
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.50, ITR: 48, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UI, UIJ, SIJ, SSIJ, S, AMM, AML
                              <<< Loop-information  End >>>
        877     1  pp    v            DO 3700 IP = 1 , NP
        878     1   p    v                UKK     = 0.333333E0*(UIJ(1,IP)-UI(1,IP)*UI(1,IP)
        879     1                    &                         +UIJ(2,IP)-UI(2,IP)*UI(2,IP)
        880     1                    &                         +UIJ(3,IP)-UI(3,IP)*UI(3,IP))
        881     1               C
        882     1   p    v                AML(IP) = (SSIJ(1,IP)-ALF2*S(IP)*SIJ(1,IP))
        883     1                    &             *( UIJ(1,IP)-UI(1,IP)*UI(1,IP)-UKK)
        884     1                    &             +(SSIJ(2,IP)-ALF2*S(IP)*SIJ(2,IP))
        885     1                    &             *( UIJ(2,IP)-UI(2,IP)*UI(2,IP)-UKK)
        886     1                    &             +(SSIJ(3,IP)-ALF2*S(IP)*SIJ(3,IP))
        887     1                    &             *( UIJ(3,IP)-UI(3,IP)*UI(3,IP)-UKK)
        888     1                    &        +2.E0*(SSIJ(4,IP)-ALF2*S(IP)*SIJ(4,IP))
        889     1                    &             *( UIJ(4,IP)-UI(2,IP)*UI(3,IP))
        890     1                    &        +2.E0*(SSIJ(5,IP)-ALF2*S(IP)*SIJ(5,IP))
        891     1                    &             *( UIJ(5,IP)-UI(3,IP)*UI(1,IP))
        892     1                    &        +2.E0*(SSIJ(6,IP)-ALF2*S(IP)*SIJ(6,IP))
        893     1                    &             *( UIJ(6,IP)-UI(1,IP)*UI(2,IP))
        894     1               C
        895     1   p    v                AMM(IP) = (SSIJ(1,IP)-ALF2*S(IP)*SIJ(1,IP))**2
        896     1                    &             +(SSIJ(2,IP)-ALF2*S(IP)*SIJ(2,IP))**2
        897     1                    &             +(SSIJ(3,IP)-ALF2*S(IP)*SIJ(3,IP))**2
        898     1                    &        +2.E0*(SSIJ(4,IP)-ALF2*S(IP)*SIJ(4,IP))**2
        899     1                    &        +2.E0*(SSIJ(5,IP)-ALF2*S(IP)*SIJ(5,IP))**2
        900     1                    &        +2.E0*(SSIJ(6,IP)-ALF2*S(IP)*SIJ(6,IP))**2
        901     1   p    v       3700 CONTINUE
        902                     C
        903                     C
        904                     C
        905                     C RECURSIVELY TEST-FILTER LEAST-SQUARE AVERAGED LEONARD STRESS
        906                     C AND SGS STRESS FOR AVERAGING PURPOSE
        907                     C
        908                     C
        909                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CM, FY, FX, AMM, AML
                              <<< Loop-information  End >>>
        910     1                     DO 3820 IAVDYN = 1 , NAVDYN
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 3)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RY, RX
                              <<< Loop-information  End >>>
        911     2   p    v                DO 3810 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<< Loop-information  End >>>
        912     3  pp   2                     DO 3800 IE = 1 , NE
        913     3   p   2v                        RX(I,IE) = 0.E0
        914     3   p   2v                        RY(I,IE) = 0.E0
        915     3   p   2        3800         CONTINUE
        916     2   p   2v       3810     CONTINUE
        917     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FY, FX
                              <<< Loop-information  End >>>
        918     2  pp   2v            DO 3900 IP = 1 , NP
        919     2   p   2v                FX(IP) = 0.E0
        920     2   p   2v                FY(IP) = 0.E0
        921     2   p   2v       3900 CONTINUE
        922     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        923     2  pp                 DO 4030 IP=1,NP
        924     2   p                     RX1 = 0.E0
        925     2   p                     RY1 = 0.E0
        926     3   p                     DO 4020 IPE=1,NEP(IP)
        927     3   p                         IE =IENP(IPE,IP)
        928     3   p                         IF (LEFIX(IE).EQ.1) GOTO 4020
        929     3   p                         NN = NEX(8)
        930     3               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODP, EAP3
                              <<< Loop-information  End >>>
        931     4   p   8v                    DO 4010 K=1,NN
        932     4   p   8v                        D1=FILTER(IE)**2*(EAP3(1,K,IPE,IP)
        933     4                    *                            + EAP3(2,K,IPE,IP)
        934     4                    *                            + EAP3(3,K,IPE,IP))
        935     4               C
        936     4   p   8v                        IP1  = NODP(K,IPE,IP)
        937     4   p   8v                        FXIE = AML(IP1)
        938     4   p   8v                        FYIE = AMM(IP1)
        939     4               
        940     4   p   8v                        RX1=RX1-D1*FXIE
        941     4   p   8v                        RY1=RY1-D1*FYIE
        942     4   p   8v       4010         CONTINUE
        943     3               C
        944     3   p            4020     CONTINUE
        945     2   p                     FX(IP) = RX1
        946     2   p                     FY(IP) = RY1
        947     2   p            4030 CONTINUE
        948     1               C
        949     1               C
        950     1                         IDUM = 2
        951     1                         CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        952     1                    *                FX,FY,FZ,NP,IUT0,IERR,RX,RY,MAXBUF)
        953     2                         IF(IERR.NE.0) THEN
        954     2                             WRITE(IUT0,*)
        955     2                             WRITE(IUT0,*) ERMSGC
        956     2                             RETURN
        957     2                         ENDIF
        958     1               C
        959     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 500
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.40, ITR: 176, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FX, CM, AMM, AML, FY
                              <<< Loop-information  End >>>
        960     2  pp    v                DO 4100 IP = 1 , NP
        961     2   p    v                    AML(IP) = AML(IP)+GAM2/24.E0*CM(IP)*FX(IP)
        962     2   p    v                    AMM(IP) = AMM(IP)+GAM2/24.E0*CM(IP)*FY(IP)
        963     2   p    v       4100     CONTINUE
        964     1                3820 CONTINUE
        965                     C
        966                     C
        967                     C
        968                     C COMPUTE ELEMENT SMAGORINSKY CONSTANT
        969                     C
        970                     C
        971                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 100
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.26, ITR: 80, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER, CS
                              <<< Loop-information  End >>>
        972     1  pp    v            DO 4200 IE = 1 , NE
        973     1   p    v                AMLE = 0.125E0*(AML(NODE(1,IE))+AML(NODE(5,IE))
        974     1                    &                   +AML(NODE(2,IE))+AML(NODE(6,IE))
        975     1                    &                   +AML(NODE(3,IE))+AML(NODE(7,IE))
        976     1                    &                   +AML(NODE(4,IE))+AML(NODE(8,IE)))
        977     1               C
        978     1   p    v                AMME = 0.125E0*(AMM(NODE(1,IE))+AMM(NODE(5,IE))
        979     1                    &                   +AMM(NODE(2,IE))+AMM(NODE(6,IE))
        980     1                    &                   +AMM(NODE(3,IE))+AMM(NODE(7,IE))
        981     1                    &                   +AMM(NODE(4,IE))+AMM(NODE(8,IE)))
        982     1               C
        983     2   p    v                IF(AMLE.GT.0.E0 .AND. AMME.GT.0.E0) THEN
        984     2   p    v                    CS(IE) = SQRT(0.5E0*AMLE/AMME)/FILTER(IE)
        985     2   p    v                ELSE
        986     2   p    v                    CS(IE) = 0.E0
        987     2   p    v                ENDIF
        988     1   p    v       4200 CONTINUE
        989                     C
        990                     C
        991                     C
        992                     C FINALLY, CLEAR ELEMENT SMAGORINSKY CONSTANT DOMINATED BY
        993                     C THE ROUND-OFF ERRORS
        994                     C
        995                     C
        996                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 164
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.31, ITR: 160, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER, VISC, CS
                              <<< Loop-information  End >>>
        997     1  pp    v            DO 4300 IE = 1 , NE
        998     1   p    v                SE = 0.125E0*(S(NODE(1,IE))+S(NODE(5,IE))
        999     1                    &                 +S(NODE(2,IE))+S(NODE(6,IE))
       1000     1                    &                 +S(NODE(3,IE))+S(NODE(7,IE))
       1001     1                    &                 +S(NODE(4,IE))+S(NODE(8,IE)))
       1002     1               C
       1003     1   p    v                SGS = CLEAR*CLEAR*FILTER(IE)*FILTER(IE)*SE
       1004     1   p    v                IF(SGS .LT. EPS*VISC(IE)) CS(IE) = 0.E0
       1005     1   p    v       4300 CONTINUE
       1006                     C
       1007                           RETURN
       1008                           END

 Diagnostic messages: program name(DYNA3D)
   jwd2008i-i  "dyna3d.f", line 18: この仮引数'MELM'は、副プログラム中で使用されていません。
   jwd2008i-i  "dyna3d.f", line 18: この仮引数'ME'は、副プログラム中で使用されていません。
   jwd8220o-i  "dyna3d.f", line 18: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "dyna3d.f", line 65: この名前'JPRESS'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 65: この名前'ISTEP'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 65: この名前'ITIMEI'は、宣言だけされていて引用されていません。
   jwd2008i-i  "dyna3d.f", line 66: この仮引数'WRK03'は、副プログラム中で使用されていません。
   jwd2008i-i  "dyna3d.f", line 66: この仮引数'WRK02'は、副プログラム中で使用されていません。
   jwd2008i-i  "dyna3d.f", line 66: この仮引数'WRK01'は、副プログラム中で使用されていません。
   jwd2008i-i  "dyna3d.f", line 66: この仮引数'WRK00'は、副プログラム中で使用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM8'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM7'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM6'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM5'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM4'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM3'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM2'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM1'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'IELM'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dyna3d.f", line 68: この名前'J'は、宣言だけされていて引用されていません。
   jwd5143p-i  "dyna3d.f", line 180: DOループの繰返し数が少ないため、このDOループは並列化できません。
   jwd6001s-i  "dyna3d.f", line 180: このDOループをSIMD化しました。(名前:I)
   jwd5001p-i  "dyna3d.f", line 189: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "dyna3d.f", line 189: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "dyna3d.f", line 189: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 189: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "dyna3d.f", line 195: このDOループを並列化しました。(名前:IB)
   jwd6001s-i  "dyna3d.f", line 195: このDOループをSIMD化しました。(名前:IB)
   jwd8204o-i  "dyna3d.f", line 195: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 195: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "dyna3d.f", line 208: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 208: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 208: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 208: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "dyna3d.f", line 216: このDOループを並列化しました。(名前:ICPART)
   jwd6156s-i  "dyna3d.f", line 223: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8209o-i  "dyna3d.f", line 230: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 235: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 281: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 281: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 281: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 281: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "dyna3d.f", line 291: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 291: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 291: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 291: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "dyna3d.f", line 299: このDOループを並列化しました。(名前:ICPART)
   jwd6156s-i  "dyna3d.f", line 306: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8209o-i  "dyna3d.f", line 308: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 317: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 326: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 375: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 375: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 375: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 375: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 376: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 377: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 378: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 387: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 387: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 387: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 387: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 388: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 402: ループを入れ換えました。(行:403)
   jwd6001s-i  "dyna3d.f", line 402: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 402: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 403: ループを入れ換えました。(行:402)
   jwd5001p-i  "dyna3d.f", line 403: このDOループを並列化しました。(名前:IE)
   jwd5202p-i  "dyna3d.f", line 414: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RZ1)
   jwd5202p-i  "dyna3d.f", line 414: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RY1)
   jwd5202p-i  "dyna3d.f", line 414: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RX1)
   jwd5004p-i  "dyna3d.f", line 419: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6004s-i  "dyna3d.f", line 419: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8209o-i  "dyna3d.f", line 420: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 424: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 448: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 448: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 448: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 448: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 449: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 449: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 450: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 450: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 451: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 451: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 462: ループを入れ換えました。(行:463)
   jwd6001s-i  "dyna3d.f", line 462: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 462: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 463: ループを入れ換えました。(行:462)
   jwd5001p-i  "dyna3d.f", line 463: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 470: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 470: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 470: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 470: ループを展開数2回でアンローリングしました。
   jwd5202p-i  "dyna3d.f", line 480: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RZ1)
   jwd5202p-i  "dyna3d.f", line 480: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RY1)
   jwd5202p-i  "dyna3d.f", line 480: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RX1)
   jwd5004p-i  "dyna3d.f", line 485: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6004s-i  "dyna3d.f", line 485: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8209o-i  "dyna3d.f", line 486: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 490: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 518: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 518: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 518: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 518: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 519: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 519: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 520: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 520: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 521: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 521: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 528: ループを入れ換えました。(行:529)
   jwd6001s-i  "dyna3d.f", line 528: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 528: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 529: ループを入れ換えました。(行:528)
   jwd5001p-i  "dyna3d.f", line 529: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 536: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 536: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 536: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 536: ループを展開数2回でアンローリングしました。
   jwd5202p-i  "dyna3d.f", line 546: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RZ1)
   jwd5202p-i  "dyna3d.f", line 546: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RY1)
   jwd5202p-i  "dyna3d.f", line 546: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RX1)
   jwd5004p-i  "dyna3d.f", line 551: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6004s-i  "dyna3d.f", line 551: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8209o-i  "dyna3d.f", line 552: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 556: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 584: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 584: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 584: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 584: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 585: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 585: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 586: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 586: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 587: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 587: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 598: ループを入れ換えました。(行:599)
   jwd6001s-i  "dyna3d.f", line 598: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 598: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 599: ループを入れ換えました。(行:598)
   jwd5001p-i  "dyna3d.f", line 599: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 606: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 606: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 606: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 606: ループを展開数2回でアンローリングしました。
   jwd5202p-i  "dyna3d.f", line 616: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RZ1)
   jwd5202p-i  "dyna3d.f", line 616: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RY1)
   jwd5202p-i  "dyna3d.f", line 616: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RX1)
   jwd5004p-i  "dyna3d.f", line 621: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6004s-i  "dyna3d.f", line 621: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8209o-i  "dyna3d.f", line 622: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 626: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 654: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 654: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 654: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 654: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 655: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 655: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 656: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 656: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 657: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 657: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 664: ループを入れ換えました。(行:665)
   jwd6001s-i  "dyna3d.f", line 664: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 664: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 665: ループを入れ換えました。(行:664)
   jwd5001p-i  "dyna3d.f", line 665: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 672: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 672: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 672: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 672: ループを展開数2回でアンローリングしました。
   jwd5202p-i  "dyna3d.f", line 678: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RZ1)
   jwd5202p-i  "dyna3d.f", line 678: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RY1)
   jwd5202p-i  "dyna3d.f", line 678: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RX1)
   jwd5202p-i  "dyna3d.f", line 679: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RZ1)
   jwd5202p-i  "dyna3d.f", line 679: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RY1)
   jwd5202p-i  "dyna3d.f", line 679: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:RX1)
   jwd5004p-i  "dyna3d.f", line 687: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6004s-i  "dyna3d.f", line 687: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8209o-i  "dyna3d.f", line 688: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 692: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 720: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 720: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 720: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 720: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 721: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 721: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 722: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 722: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 723: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 723: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 734: ループを入れ換えました。(行:735)
   jwd6001s-i  "dyna3d.f", line 734: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 734: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 735: ループを入れ換えました。(行:734)
   jwd5001p-i  "dyna3d.f", line 735: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 742: このDOループを並列化しました。(名前:IP)
   jwd6004s-i  "dyna3d.f", line 752: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8204o-i  "dyna3d.f", line 752: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 752: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 753: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 757: 多項式の演算順序を変更しました。
   jwd8208o-i  "dyna3d.f", line 762: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd8208o-i  "dyna3d.f", line 763: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd5001p-i  "dyna3d.f", line 785: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 785: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 785: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 785: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 786: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 786: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 787: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 787: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 788: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 788: 多項式の演算順序を変更しました。
   jwd8211o-i  "dyna3d.f", line 795: ループを入れ換えました。(行:796)
   jwd6001s-i  "dyna3d.f", line 795: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 795: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 796: ループを入れ換えました。(行:795)
   jwd5001p-i  "dyna3d.f", line 796: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 803: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 803: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 803: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 803: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "dyna3d.f", line 809: このDOループを並列化しました。(名前:IP)
   jwd6004s-i  "dyna3d.f", line 818: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8204o-i  "dyna3d.f", line 818: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 818: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 819: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 823: 多項式の演算順序を変更しました。
   jwd8208o-i  "dyna3d.f", line 828: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd8208o-i  "dyna3d.f", line 829: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd5001p-i  "dyna3d.f", line 850: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 850: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 850: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 850: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 851: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 851: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 852: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 852: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 853: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 853: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 862: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 862: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 862: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 862: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 863: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 877: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 877: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 877: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 877: ループの繰返し数が48回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 878: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 882: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 895: 多項式の演算順序を変更しました。
   jwd5131p-i  "dyna3d.f", line 910: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd8211o-i  "dyna3d.f", line 911: ループを入れ換えました。(行:912)
   jwd6001s-i  "dyna3d.f", line 911: このDOループをSIMD化しました。(名前:I)
   jwd8663o-i  "dyna3d.f", line 911: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8211o-i  "dyna3d.f", line 912: ループを入れ換えました。(行:911)
   jwd5001p-i  "dyna3d.f", line 912: このDOループを並列化しました。(名前:IE)
   jwd5001p-i  "dyna3d.f", line 918: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 918: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dyna3d.f", line 918: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dyna3d.f", line 918: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "dyna3d.f", line 923: このDOループを並列化しました。(名前:IP)
   jwd6004s-i  "dyna3d.f", line 931: リダクション演算を含むDOループをSIMD化しました。(名前:K)
   jwd8666o-i  "dyna3d.f", line 931: 浮動小数点レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "dyna3d.f", line 931: ループを展開数8回でアンローリングしました。
   jwd8209o-i  "dyna3d.f", line 932: 多項式の演算順序を変更しました。
   jwd8209o-i  "dyna3d.f", line 936: 多項式の演算順序を変更しました。
   jwd8208o-i  "dyna3d.f", line 940: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd5001p-i  "dyna3d.f", line 960: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dyna3d.f", line 960: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "dyna3d.f", line 960: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 960: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "dyna3d.f", line 961: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 961: 多項式の演算順序を変更しました。
   jwd8206o-i  "dyna3d.f", line 962: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "dyna3d.f", line 962: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 972: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "dyna3d.f", line 972: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "dyna3d.f", line 972: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 972: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 978: 多項式の演算順序を変更しました。
   jwd5001p-i  "dyna3d.f", line 997: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "dyna3d.f", line 997: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "dyna3d.f", line 997: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dyna3d.f", line 997: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "dyna3d.f", line 1003: 多項式の演算順序を変更しました。

 Procedure information
   Lines      : 1008
   Statements : 534
   Stack(byte): 211440
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 1008
   Total statements : 534
   Total stack(byte): 211440
   Total prefetch num: 0

