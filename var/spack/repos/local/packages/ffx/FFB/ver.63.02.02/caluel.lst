
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:52:55 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : caluel.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "CALUEL"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE CALUEL(N2,NE,NP,NEX,NODE,
          2                          *                  U,V,W,UE,VE,WE,IUT6,IERR)
          3                           IMPLICIT NONE
          4                     C
          5                           INTEGER*4 N2,NE,NP,NEX(12)
          6                           INTEGER*4 NODE(N2,NE)
          7                           INTEGER*4 IUT6,IERR
          8                           REAL*4    U(NP),V(NP),W(NP),UE(NE),VE(NE),WE(NE)
          9                     C
         10                           INTEGER*4 NETET,NEPRD,NEWED,NEHEX,
         11                          *          IE,IES1,IEE1,IES2,IEE2,IES3,IEE3,IES4,IEE4,
         12                          *          IP1,IP2,IP3,IP4,IP5,IP6,IP7,IP8
         13                           REAL*4    COEF
         14                     C
         15                     #ifdef USE_TIMER
         16                           real*8 ts0, te0
         17                     
         18                           include 'timer.h'
         19                           include 'mpif.h'
         20                     
         21                           ncaluel = ncaluel + 1
         22                           tstart = MPI_WTIME()
         23                     #endif
         24                           IERR=0
         25                     C
         26                           NETET=NEX(1)
         27                           NEPRD=NEX(2)
         28                           NEWED=NEX(3)
         29                           NEHEX=NEX(4)
         30                     C
         31                     C   == TET. ==
         32                           IES1=1
         33                           IEE1=NETET
         34                     C
         35                     C   == PYRAMID ==
         36                           IES2=NETET+1
         37                           IEE2=NETET+NEPRD
         38                     C
         39                     C   == WEDGE ==
         40                           IES3=NETET+NEPRD+1
         41                           IEE3=NETET+NEPRD+NEWED
         42                     C
         43                     C   == HEX. ==
         44                           IES4=NETET+NEPRD+NEWED+1
         45                           IEE4=NETET+NEPRD+NEWED+NEHEX
         46                     C
         47                           COEF=1.0E0/4.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 184
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.48, ITR: 80, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WE, VE, UE
                              <<< Loop-information  End >>>
         48     1  pp    v            DO 210 IE = IES1 , IEE1
         49     1   p    v                IP1=NODE(1,IE)
         50     1   p    v                IP2=NODE(2,IE)
         51     1   p    v                IP3=NODE(3,IE)
         52     1   p    v                IP4=NODE(4,IE)
         53     1   p    v                UE(IE) = COEF*(U(IP1)+U(IP2)+U(IP3)+U(IP4))
         54     1   p    v                VE(IE) = COEF*(V(IP1)+V(IP2)+V(IP3)+V(IP4))
         55     1   p    v                WE(IE) = COEF*(W(IP1)+W(IP2)+W(IP3)+W(IP4))
         56     1   p    v        210 CONTINUE
         57                     C
         58                           COEF=1.0E0/5.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 153
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.79, ITR: 80, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WE, VE, UE
                              <<< Loop-information  End >>>
         59     1  pp    v            DO 220 IE = IES2 , IEE2
         60     1   p    v                IP1=NODE(1,IE)
         61     1   p    v                IP2=NODE(2,IE)
         62     1   p    v                IP3=NODE(3,IE)
         63     1   p    v                IP4=NODE(4,IE)
         64     1   p    v                IP5=NODE(5,IE)
         65     1   p    v                UE(IE) = COEF*(U(IP1)+U(IP2)+U(IP3)+U(IP4)
         66     1                    *                  +U(IP5))
         67     1   p    v                VE(IE) = COEF*(V(IP1)+V(IP2)+V(IP3)+V(IP4)
         68     1                    *                  +V(IP5))
         69     1   p    v                WE(IE) = COEF*(W(IP1)+W(IP2)+W(IP3)+W(IP4)
         70     1                    *                  +W(IP5))
         71     1   p    v        220 CONTINUE
         72                     C
         73                           COEF=1.0E0/6.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 131
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.60, ITR: 64, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WE, VE, UE
                              <<< Loop-information  End >>>
         74     1  pp    v            DO 230 IE = IES3 , IEE3
         75     1   p    v                IP1=NODE(1,IE)
         76     1   p    v                IP2=NODE(2,IE)
         77     1   p    v                IP3=NODE(3,IE)
         78     1   p    v                IP4=NODE(4,IE)
         79     1   p    v                IP5=NODE(5,IE)
         80     1   p    v                IP6=NODE(6,IE)
         81     1   p    v                UE(IE) = COEF*(U(IP1)+U(IP2)+U(IP3)+U(IP4)
         82     1                    *                  +U(IP5)+U(IP6))
         83     1   p    v                VE(IE) = COEF*(V(IP1)+V(IP2)+V(IP3)+V(IP4)
         84     1                    *                  +V(IP5)+V(IP6))
         85     1   p    v                WE(IE) = COEF*(W(IP1)+W(IP2)+W(IP3)+W(IP4)
         86     1                    *                  +W(IP5)+W(IP6))
         87     1   p    v       230   CONTINUE
         88                     C
         89                           COEF=1.0E0/8.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 101
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.43, ITR: 64, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WE, VE, UE
                              <<< Loop-information  End >>>
         90     1  pp    v            DO 240 IE = IES4 , IEE4
         91     1   p    v                IP1=NODE(1,IE)
         92     1   p    v                IP2=NODE(2,IE)
         93     1   p    v                IP3=NODE(3,IE)
         94     1   p    v                IP4=NODE(4,IE)
         95     1   p    v                IP5=NODE(5,IE)
         96     1   p    v                IP6=NODE(6,IE)
         97     1   p    v                IP7=NODE(7,IE)
         98     1   p    v                IP8=NODE(8,IE)
         99     1   p    v                UE(IE) = COEF*(U(IP1)+U(IP2)+U(IP3)+U(IP4)
        100     1                    *                  +U(IP5)+U(IP6)+U(IP7)+U(IP8))
        101     1   p    v                VE(IE) = COEF*(V(IP1)+V(IP2)+V(IP3)+V(IP4)
        102     1                    *                  +V(IP5)+V(IP6)+V(IP7)+V(IP8))
        103     1   p    v                WE(IE) = COEF*(W(IP1)+W(IP2)+W(IP3)+W(IP4)
        104     1                    *                  +W(IP5)+W(IP6)+W(IP7)+W(IP8))
        105     1   p    v       240  CONTINUE
        106                     C
        107                     #ifdef USE_TIMER
        108                           tend = MPI_WTIME()
        109                           tcaluel = tcaluel + (tend - tstart)
        110                     #endif
        111                           RETURN
        112                           END

 Diagnostic messages: program name(CALUEL)
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 24: この名前'nclrcrs'は、INCLUDE内で宣言だけされていて引用されていません。
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 25: この名前'tclrcrs'は、INCLUDE内で宣言だけされていて引用されていません。
   jwd2008i-i  "caluel.f", line 1: この仮引数'IUT6'は、副プログラム中で使用されていません。
   jwd8220o-i  "caluel.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "caluel.f", line 16: この名前'te0'は、宣言だけされていて引用されていません。
   jwd2006i-i  "caluel.f", line 16: この名前'ts0'は、宣言だけされていて引用されていません。
   jwd5001p-i  "caluel.f", line 48: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "caluel.f", line 48: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "caluel.f", line 48: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "caluel.f", line 48: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "caluel.f", line 53: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 54: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 55: 多項式の演算順序を変更しました。
   jwd5001p-i  "caluel.f", line 59: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "caluel.f", line 59: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "caluel.f", line 59: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "caluel.f", line 59: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "caluel.f", line 65: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 67: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 69: 多項式の演算順序を変更しました。
   jwd5001p-i  "caluel.f", line 74: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "caluel.f", line 74: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "caluel.f", line 74: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "caluel.f", line 74: ループの繰返し数が64回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "caluel.f", line 81: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 83: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 85: 多項式の演算順序を変更しました。
   jwd5001p-i  "caluel.f", line 90: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "caluel.f", line 90: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "caluel.f", line 90: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "caluel.f", line 90: ループの繰返し数が64回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "caluel.f", line 99: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 101: 多項式の演算順序を変更しました。
   jwd8209o-i  "caluel.f", line 103: 多項式の演算順序を変更しました。

 Procedure information
   Lines      : 4271
   Statements : 3395
   Stack(byte): 832
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 4271
   Total statements : 3395
   Total stack(byte): 832
   Total prefetch num: 0

