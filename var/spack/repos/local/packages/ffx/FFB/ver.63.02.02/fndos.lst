
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:01 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : fndos.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "FNDOS"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE FNDOS(N,NEG,NE,LIST,TINY,
          2                          *                 NP,NEX,X,Y,Z,NODE,IFRM,LEFRM,
          3                          *                 XP,YP,ZP,XMINE,YMINE,ZMINE,XMAXE,YMAXE,ZMAXE,
          4                          *                 EN,GP,EP,TP,ERR,IUT0,IERR)
          5                           IMPLICIT NONE
          6                     C
          7                     ***** DEFINE ARGUMENTS *****
          8                           INTEGER N,NEG,NE,NP,NEX,NODE,IFRM,LEFRM(NEG)
          9                           INTEGER LIST(NE)
         10                           REAL X,Y,Z
         11                           REAL XP,YP,ZP,
         12                          *     XMINE(NEG),YMINE(NEG),ZMINE(NEG),
         13                          *     XMAXE(NEG),YMAXE(NEG),ZMAXE(NEG)
         14                     
         15                           INTEGER EN
         16                           REAL GP,EP,TP,ERR
         17                     C
         18                           DIMENSION NODE(N,NEG),NEX(8),X(NP),Y(NP),Z(NP)
         19                     C
         20                     ***** OBJECTS *****
         21                           INTEGER JHEX,JWED,JPRD,JTET
         22                           INTEGER IFOUND
         23                           REAL XI(3),DXI(3),XPV(3),XQV(3),DX(3),X1,X2,X3
         24                           REAL XE(3,8),NN(8),PSI(3,8),J(3,3),INVJ(3,3)
         25                           INTEGER IUT0,IERR
         26                           INTEGER IN,IE,IE0,IP,IT
         27                           INTEGER ITMAX
         28                           INTEGER II,JJ,KK
         29                     
         30                           REAL*4 TINY,DD,DDX,DDY,DDZ
         31                           REAL*4 TMP,DETJ
         32                           REAL*4 ERR1,ERR2,ERR3
         33                           REAL*4 XBUF,YBUF,ZBUF
         34                     C
         35                           INTEGER NTMP,NHEX,NPRD,NWED,NTET
         36                     C
         37                     ***** DATA *****
         38                           DATA IFOUND  /0/
         39                           DATA ITMAX  /10/
         40                     C
         41                           DATA DD   /1.0E-1/
         42                     C
         43                           IFOUND=0
         44                           IERR =0
         45                     C
         46                           NTET=NEX(5)
         47                           NPRD=NEX(6)
         48                           NWED=NEX(7)
         49                           NHEX=NEX(8)
         50                     C
         51                     ***** MAKE XPV  *****
         52                           XBUF=XP
         53                           YBUF=YP
         54                           ZBUF=ZP
         55                     C
         56                     ************************
         57                     ***** ELEMENT LOOP *****
         58                     ************************
         59     1                     DO 1000 IE0=1,NE
         60     1               C
         61     1                         IE=LIST(IE0)
         62     1               C
         63     1                         XPV(1) = XBUF
         64     1                         XPV(2) = YBUF
         65     1                         XPV(3) = ZBUF
         66     1               C
         67     1                         IF(LEFRM(IE).NE.IFRM) GOTO 1000
         68     1               C
         69     1                         DDX=XMAXE(IE)-XMINE(IE)
         70     1                         DDY=YMAXE(IE)-YMINE(IE)
         71     1                         DDZ=ZMAXE(IE)-ZMINE(IE)
         72     1                         IF(     (XPV(1).LT.XMINE(IE)-DDX)
         73     1                    *       .OR. (XPV(1).GT.XMAXE(IE)+DDX)
         74     1                    *       .OR. (XPV(2).LT.YMINE(IE)-DDY)
         75     1                    *       .OR. (XPV(2).GT.YMAXE(IE)+DDY)
         76     1                    *       .OR. (XPV(3).LT.ZMINE(IE)-DDZ)
         77     1                    *       .OR. (XPV(3).GT.ZMAXE(IE)+DDZ) )
         78     1                    *    GOTO 1000
         79     1               C
         80     1               ***** DETERMIN ELEMENT TYPE *****
         81     1                         JHEX=0
         82     1                         JWED=0
         83     1                         JPRD=0
         84     1                         JTET=0
         85     2                         IF(NODE(NHEX,IE).NE.0) THEN
         86     2                             JHEX=1
         87     2                             XI(1)=0.0
         88     2                             XI(2)=0.0
         89     2                             XI(3)=0.0
         90     2                             NTMP=NHEX
         91     2                         ELSE IF(NODE(NWED,IE).NE.0) THEN
         92     2                             JWED=1
         93     2                             XI(1)=1./3.
         94     2                             XI(2)=1./3.
         95     2                             XI(3)=0.0
         96     2                             NTMP=NWED
         97     2                         ELSE IF(NODE(NPRD,IE).NE.0) THEN
         98     2                             JPRD=1
         99     2                             XI(1)=0.0
        100     2                             XI(2)=0.0
        101     2                             XI(3)=1./4.
        102     2                             NTMP=NPRD
        103     2                         ELSE IF(NODE(NTET,IE).NE.0) THEN
        104     2                             JTET=1
        105     2                             XI(1)=1./4.
        106     2                             XI(2)=1./4.
        107     2                             XI(3)=1./4.
        108     2                             NTMP=NTET
        109     2                         ELSE
        110     2                             WRITE(IUT0,*)'INVALID NODE TABLE:ERROR'
        111     2                             IERR=1
        112     2                             RETURN
        113     2                         ENDIF
        114     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 500
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE, (unknown)
                              <<< Loop-information  End >>>
        115     2   s   2v                DO 1100 II=1,NTMP
        116     2   p   2v                    XE(1,II) =X(NODE(II,IE))
        117     2   p   2v                    XE(2,II) =Y(NODE(II,IE))
        118     2   p   2v                    XE(3,II) =Z(NODE(II,IE))
        119     2   p   2v       1100     CONTINUE
        120     1               C
        121     1               ************HEX************
        122     2                         DO 1200 IT=1,ITMAX
        123     3                             IF( JHEX.EQ.1 ) THEN
        124     3                                  NN(1)=0.125*(1.-XI(1))*(1.-XI(2))*(1.-XI(3))
        125     3                                  NN(2)=0.125*(1.+XI(1))*(1.-XI(2))*(1.-XI(3))
        126     3                                  NN(3)=0.125*(1.+XI(1))*(1.+XI(2))*(1.-XI(3))
        127     3                                  NN(4)=0.125*(1.-XI(1))*(1.+XI(2))*(1.-XI(3))
        128     3                                  NN(5)=0.125*(1.-XI(1))*(1.-XI(2))*(1.+XI(3))
        129     3                                  NN(6)=0.125*(1.+XI(1))*(1.-XI(2))*(1.+XI(3))
        130     3                                  NN(7)=0.125*(1.+XI(1))*(1.+XI(2))*(1.+XI(3))
        131     3                                  NN(8)=0.125*(1.-XI(1))*(1.+XI(2))*(1.+XI(3))
        132     3                             ELSE IF(JWED.EQ.1) THEN
        133     3                                  NN(1)=0.5*XI(1)           *(1.-XI(3))
        134     3                                  NN(2)=0.5*XI(2)           *(1.-XI(3))
        135     3                                  NN(3)=0.5*(1.-XI(1)-XI(2))*(1.-XI(3))
        136     3                                  NN(4)=0.5*XI(1)           *(1.+XI(3))
        137     3                                  NN(5)=0.5*XI(2)           *(1.+XI(3))
        138     3                                  NN(6)=0.5*(1.-XI(1)-XI(2))*(1.+XI(3))
        139     3                             ELSE IF(JPRD.EQ.1) THEN
        140     3                                  X1=XI(1)
        141     3                                  X2=XI(2)
        142     3                                  X3=XI(3)
        143     3                                  NN(1)=0.25*((1.-X1)*(1.-X2)-X3+X1*X2*X3/(1.-X3))
        144     3                                  NN(2)=0.25*((1.+X1)*(1.-X2)-X3-X1*X2*X3/(1.-X3))
        145     3                                  NN(3)=0.25*((1.+X1)*(1.+X2)-X3+X1*X2*X3/(1.-X3))
        146     3                                  NN(4)=0.25*((1.-X1)*(1.+X2)-X3-X1*X2*X3/(1.-X3))
        147     3                                  NN(5)= X3
        148     3                             ELSE IF(JTET.EQ.1) THEN
        149     3                                  NN(1)=1.-XI(1)-XI(2)-XI(3)
        150     3                                  NN(2)=XI(1)
        151     3                                  NN(3)=XI(2)
        152     3                                  NN(4)=XI(3)
        153     3                             ENDIF
        154     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 4
                              <<< Loop-information  End >>>
        155     3  pp                         DO 1300 II=1,3
        156     3   p                             TMP=0.
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NN, XE
                              <<< Loop-information  End >>>
        157     4   p   8v                         DO 1310 JJ=1,NTMP
        158     4   p   8v                             TMP =TMP +XE(II,JJ)*NN(JJ)
        159     4   p   8v       1310              CONTINUE
        160     3   p                              XQV(II)=TMP
        161     3   p                              DX (II)=XPV(II)-TMP
        162     3   p            1300         CONTINUE
        163     2               C
        164     3                             IF( JHEX.EQ.1 ) THEN
        165     3                                 PSI(1,1)=-0.125*(1.-XI(2))*(1.-XI(3))
        166     3                                 PSI(1,2)=+0.125*(1.-XI(2))*(1.-XI(3))
        167     3                                 PSI(1,3)=+0.125*(1.+XI(2))*(1.-XI(3))
        168     3                                 PSI(1,4)=-0.125*(1.+XI(2))*(1.-XI(3))
        169     3                                 PSI(1,5)=-0.125*(1.-XI(2))*(1.+XI(3))
        170     3                                 PSI(1,6)=+0.125*(1.-XI(2))*(1.+XI(3))
        171     3                                 PSI(1,7)=+0.125*(1.+XI(2))*(1.+XI(3))
        172     3                                 PSI(1,8)=-0.125*(1.+XI(2))*(1.+XI(3))
        173     3               C
        174     3                                 PSI(2,1)=-0.125*(1.-XI(3))*(1.-XI(1))
        175     3                                 PSI(2,2)=-0.125*(1.-XI(3))*(1.+XI(1))
        176     3                                 PSI(2,3)=+0.125*(1.-XI(3))*(1.+XI(1))
        177     3                                 PSI(2,4)=+0.125*(1.-XI(3))*(1.-XI(1))
        178     3                                 PSI(2,5)=-0.125*(1.+XI(3))*(1.-XI(1))
        179     3                                 PSI(2,6)=-0.125*(1.+XI(3))*(1.+XI(1))
        180     3                                 PSI(2,7)=+0.125*(1.+XI(3))*(1.+XI(1))
        181     3                                 PSI(2,8)=+0.125*(1.+XI(3))*(1.-XI(1))
        182     3               C
        183     3                                 PSI(3,1)=-0.125*(1.-XI(1))*(1.-XI(2))
        184     3                                 PSI(3,2)=-0.125*(1.+XI(1))*(1.-XI(2))
        185     3                                 PSI(3,3)=-0.125*(1.+XI(1))*(1.+XI(2))
        186     3                                 PSI(3,4)=-0.125*(1.-XI(1))*(1.+XI(2))
        187     3                                 PSI(3,5)=+0.125*(1.-XI(1))*(1.-XI(2))
        188     3                                 PSI(3,6)=+0.125*(1.+XI(1))*(1.-XI(2))
        189     3                                 PSI(3,7)=+0.125*(1.+XI(1))*(1.+XI(2))
        190     3                                 PSI(3,8)=+0.125*(1.-XI(1))*(1.+XI(2))
        191     3                             ELSE IF(JWED.EQ.1) THEN
        192     3                                 PSI(1,1)=+0.5*(1.-XI(3))
        193     3                                 PSI(1,2)=0.
        194     3                                 PSI(1,3)=-0.5*(1.-XI(3))
        195     3                                 PSI(1,4)=+0.5*(1.+XI(3))
        196     3                                 PSI(1,5)=0.
        197     3                                 PSI(1,6)=-0.5*(1.+XI(3))
        198     3               C
        199     3                                 PSI(2,1)=0.
        200     3                                 PSI(2,2)=+0.5*(1.-XI(3))
        201     3                                 PSI(2,3)=-0.5*(1.-XI(3))
        202     3                                 PSI(2,4)=0.
        203     3                                 PSI(2,5)=+0.5*(1.+XI(3))
        204     3                                 PSI(2,6)=-0.5*(1.+XI(3))
        205     3               C
        206     3                                 PSI(3,1)=-0.5*XI(1)
        207     3                                 PSI(3,2)=-0.5*XI(2)
        208     3                                 PSI(3,3)=-0.5*(1.-XI(1)-XI(2))
        209     3                                 PSI(3,4)=+0.5*XI(1)
        210     3                                 PSI(3,5)=+0.5*XI(2)
        211     3                                 PSI(3,6)=+0.5*(1.-XI(1)-XI(2))
        212     3                             ELSE IF(JPRD.EQ.1) THEN
        213     3                                 PSI(1,1)=0.25*( -1. +XI(2)/(1.-XI(3)) )
        214     3                                 PSI(1,2)=0.25*( +1. -XI(2)/(1.-XI(3)) )
        215     3                                 PSI(1,3)=0.25*( +1. +XI(2)/(1.-XI(3)) )
        216     3                                 PSI(1,4)=0.25*( -1. -XI(2)/(1.-XI(3)) )
        217     3                                 PSI(1,5)=0.
        218     3               C
        219     3                                 PSI(2,1)=0.25*( -1. +XI(1)/(1.-XI(3)) )
        220     3                                 PSI(2,2)=0.25*( -1. -XI(1)/(1.-XI(3)) )
        221     3                                 PSI(2,3)=0.25*( +1. +XI(1)/(1.-XI(3)) )
        222     3                                 PSI(2,4)=0.25*( +1. -XI(1)/(1.-XI(3)) )
        223     3                                 PSI(2,5)=0.
        224     3               C
        225     3                                 PSI(3,1)=0.25*( -1. +XI(1)*XI(2)/(1.-XI(3))**2 )
        226     3                                 PSI(3,2)=0.25*( -1. -XI(1)*XI(2)/(1.-XI(3))**2 )
        227     3                                 PSI(3,3)=0.25*( -1. +XI(1)*XI(2)/(1.-XI(3))**2 )
        228     3                                 PSI(3,4)=0.25*( -1. -XI(1)*XI(2)/(1.-XI(3))**2 )
        229     3                                 PSI(3,5)=1.
        230     3                             ELSE IF(JTET.EQ.1) THEN
        231     3                                 PSI(1,1)=-1.0
        232     3                                 PSI(1,2)= 1.0
        233     3                                 PSI(1,3)= 0.0
        234     3                                 PSI(1,4)= 0.0
        235     3               C
        236     3                                 PSI(2,1)=-1.0
        237     3                                 PSI(2,2)= 0.0
        238     3                                 PSI(2,3)= 1.0
        239     3                                 PSI(2,4)= 0.0
        240     3               C
        241     3                                 PSI(3,1)=-1.0
        242     3                                 PSI(3,2)= 0.0
        243     3                                 PSI(3,3)= 0.0
        244     3                                 PSI(3,4)= 1.0
        245     3                             ENDIF
        246     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        247     3  pp                         DO 1400 II=1,3
        248     4   p                             DO 1410 JJ=1,3
        249     4   p                                 TMP=0.
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      PSI, XE
                              <<< Loop-information  End >>>
        250     5   p   8v                            DO 1420 KK=1,NTMP
        251     5   p   8v                                TMP =TMP +PSI(II,KK)*XE(JJ,KK)
        252     5   p   8v       1420                 CONTINUE
        253     4   p                                 J(II,JJ)=TMP
        254     4   p            1410             CONTINUE
        255     3   p            1400         CONTINUE
        256     2               C
        257     2                             DETJ =J(1,1)*J(2,2)*J(3,3) -J(1,1)*J(2,3)*J(3,2)
        258     2                    *             +J(1,2)*J(2,3)*J(3,1) -J(1,2)*J(2,1)*J(3,3)
        259     2                    *             +J(1,3)*J(2,1)*J(3,2) -J(1,3)*J(2,2)*J(3,1)
        260     2                             INVJ(1,1) =(J(2,2)*J(3,3)-J(2,3)*J(3,2))/DETJ
        261     2                             INVJ(1,2) =(J(1,3)*J(3,2)-J(1,2)*J(3,3))/DETJ
        262     2                             INVJ(1,3) =(J(1,2)*J(2,3)-J(1,3)*J(2,2))/DETJ
        263     2                             INVJ(2,1) =(J(2,3)*J(3,1)-J(2,1)*J(3,3))/DETJ
        264     2                             INVJ(2,2) =(J(1,1)*J(3,3)-J(1,3)*J(3,1))/DETJ
        265     2                             INVJ(2,3) =(J(1,3)*J(2,1)-J(1,1)*J(2,3))/DETJ
        266     2                             INVJ(3,1) =(J(2,1)*J(3,2)-J(2,2)*J(3,1))/DETJ
        267     2                             INVJ(3,2) =(J(1,2)*J(3,1)-J(1,1)*J(3,2))/DETJ
        268     2                             INVJ(3,3) =(J(1,1)*J(2,2)-J(1,2)*J(2,1))/DETJ
        269     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        270     3       f                     DO 1500 II=1,3
        271     3       f                         TMP=0.
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        272     4       f                         DO 1510 JJ=1,3
        273     4       f                             TMP =TMP +INVJ(JJ,II)*DX(JJ)
        274     4       f        1510             CONTINUE
        275     3       f                         DXI(II)=TMP
        276     3       f                          XI(II)=XI(II)+DXI(II)
        277     3       f        1500         CONTINUE
        278     2               C
        279     3                             IF( JHEX.EQ.1
        280     3                    *         .AND. (XI(1).GE.-1-TINY)
        281     3                    *         .AND. (XI(1).LE.+1+TINY)
        282     3                    *         .AND. (XI(2).GE.-1-TINY)
        283     3                    *         .AND. (XI(2).LE.+1+TINY)
        284     3                    *         .AND. (XI(3).GE.-1-TINY)
        285     3                    *         .AND. (XI(3).LE.+1+TINY) ) THEN
        286     3                                 IFOUND=1
        287     3                             ELSE IF(JWED.EQ.1
        288     3                    *         .AND. (XI(1).GE. 0-TINY)
        289     3                    *         .AND. (XI(1).LE.+1+TINY)
        290     3                    *         .AND. (XI(2).GE. 0-TINY)
        291     3                    *         .AND. (XI(2).LE.+1+TINY)
        292     3                    *         .AND. (XI(3).GE.-1-TINY)
        293     3                    *         .AND. (XI(3).LE.+1+TINY)
        294     3                    *         .AND. (XI(1)+XI(2).LE.+1+TINY) ) THEN
        295     3                                 IFOUND=1
        296     3                             ELSE IF(JPRD.EQ.1
        297     3                    *         .AND. (XI(1).GE.-1.+XI(3)-TINY)
        298     3                    *         .AND. (XI(1).LE. 1.-XI(3)+TINY)
        299     3                    *         .AND. (XI(2).GE.-1.+XI(3)-TINY)
        300     3                    *         .AND. (XI(2).LE. 1.-XI(3)+TINY)
        301     3                    *         .AND. (XI(3).GE. 0.-TINY)
        302     3                    *         .AND. (XI(3).LE. 1.+TINY) ) THEN
        303     3                                 IFOUND=1
        304     3                             ELSE IF(JTET.EQ.1
        305     3                    *         .AND. (XI(1).GE.0.-TINY)
        306     3                    *         .AND. (XI(1).LE.1.+TINY)
        307     3                    *         .AND. (XI(2).GE.0.-TINY)
        308     3                    *         .AND. (XI(2).LE.1.+TINY)
        309     3                    *         .AND. (XI(3).GE.0.-TINY)
        310     3                    *         .AND. (XI(3).LE.1.+TINY)
        311     3                    *         .AND. (XI(1)+XI(2)+XI(3).LE.1+TINY) ) THEN
        312     3                                 IFOUND=1
        313     3                             ENDIF
        314     2               C
        315     2               ***** CHECK FOUND *****
        316     3                         IF( IFOUND.EQ.1 ) THEN
        317     3                             EN =IE
        318     3                             GP =XI(1)
        319     3                             EP =XI(2)
        320     3                             TP =XI(3)
        321     3               C
        322     4                             IF( JHEX.EQ.1 ) THEN
        323     4                                 ERR1=ABS(GP)-1.E0
        324     4                                 ERR2=ABS(EP)-1.E0
        325     4                                 ERR3=ABS(TP)-1.E0
        326     4                             ELSE IF(JWED.EQ.1 ) THEN
        327     4                                 ERR1=(ABS(GP-0.5E0)-0.5E0)/2.0E0
        328     4                                 ERR2=(ABS(EP-0.5E0)-0.5E0)/2.0E0
        329     4                                 ERR3=ABS(TP)-1.E0
        330     4                             ELSE IF(JPRD.EQ.1 ) THEN
        331     4                                 ERR1=ABS(GP)-1.E0
        332     4                                 ERR2=ABS(EP)-1.E0
        333     4                                 ERR3=(ABS(TP-0.5E0)-0.5E0)/2.0E0
        334     4                             ELSE IF(JTET.EQ.1 ) THEN
        335     4                                 ERR1=(ABS(GP-0.5E0)-0.5E0)/2.0E0
        336     4                                 ERR2=(ABS(EP-0.5E0)-0.5E0)/2.0E0
        337     4                                 ERR3=(ABS(TP-0.5E0)-0.5E0)/2.0E0
        338     4                             ENDIF
        339     3               C
        340     3                             ERR = AMAX1(ERR1,ERR2,ERR3,0.E0)
        341     3               CCYYMOD---
        342     3               CCCCCC   NOTE THAT
        343     3               CCCCCC   LOCAL COORDINATE IS ROTAED TO KEEP CONSISTENCY WIHT
        344     3               CCCCCC   OVERSET DATA GENERATED BY SETSIT. INTERPOLATION DONE
        345     3               CCCCCC   IN THE SOLVER 'LES3X' IS CONSISTENT THE GP, EP, TP BELLOWC
        346     3               CCCCCC                              (Y. YAMADE 2010.05.20)
        347     4                             IF (JTET.EQ.1) THEN
        348     4                             GP=1.0E0-XI(1)-XI(2)-XI(3)
        349     4                             EP=XI(1)
        350     4                             TP=XI(2)
        351     4                             ENDIF
        352     3               CCYYMOD---
        353     3               C
        354     3               CC            ERR=0.0
        355     3                             RETURN
        356     3                         ENDIF
        357     2               C
        358     2                1200     CONTINUE
        359     1                1000 CONTINUE
        360                     C
        361                     *********************
        362                     ***** NOT FOUND *****
        363                     *********************
        364                           EN=0
        365                           ERR=1.0
        366                           RETURN
        367                     C
        368                           RETURN
        369                           END

 Diagnostic messages: program name(FNDOS)
   jwd8220o-i  "fndos.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "fndos.f", line 26: この名前'IP'は、宣言だけされていて引用されていません。
   jwd2006i-i  "fndos.f", line 26: この名前'IN'は、宣言だけされていて引用されていません。
   jwd5131p-i  "fndos.f", line 59: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5143p-i  "fndos.f", line 115: DOループの繰返し数が少ないため、このDOループは並列化できません。
   jwd6001s-i  "fndos.f", line 115: このDOループをSIMD化しました。(名前:II)
   jwd8674o-i  "fndos.f", line 115: ループの繰返し数が96回より小さく、最適化の効果を得られないため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "fndos.f", line 115: ループを展開数2回でアンローリングしました。
   jwd5131p-i  "fndos.f", line 122: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd8209o-i  "fndos.f", line 124: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 125: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 126: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 127: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 128: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 129: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 130: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 131: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 135: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 138: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 143: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 144: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 145: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 146: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 149: 多項式の演算順序を変更しました。
   jwd5006p-i  "fndos.f", line 155: 並列化したループの繰返し数が3回のため、4並列以上の並列効果は得られません。
   jwd5001p-i  "fndos.f", line 155: このDOループを並列化しました。(名前:II)
   jwd6004s-i  "fndos.f", line 157: リダクション演算を含むDOループをSIMD化しました。(名前:JJ)
   jwd8674o-i  "fndos.f", line 157: ループの繰返し数が384回より小さく、最適化の効果を得られないため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "fndos.f", line 157: ループを展開数8回でアンローリングしました。
   jwd8208o-i  "fndos.f", line 158: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd8209o-i  "fndos.f", line 206: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 207: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 208: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 214: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 216: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 220: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 222: 多項式の演算順序を変更しました。
   jwd5006p-i  "fndos.f", line 247: 並列化したループの繰返し数が3回のため、4並列以上の並列効果は得られません。
   jwd5001p-i  "fndos.f", line 247: このDOループを並列化しました。(名前:II)
   jwd6004s-i  "fndos.f", line 250: リダクション演算を含むDOループをSIMD化しました。(名前:KK)
   jwd8674o-i  "fndos.f", line 250: ループの繰返し数が384回より小さく、最適化の効果を得られないため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "fndos.f", line 250: ループを展開数8回でアンローリングしました。
   jwd8208o-i  "fndos.f", line 251: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd8209o-i  "fndos.f", line 257: 多項式の演算順序を変更しました。
   jwd8206o-i  "fndos.f", line 260: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 261: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 262: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 263: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 264: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 265: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 266: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 267: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "fndos.f", line 268: 除算を逆数の乗算に変更しました。
   jwd8203o-i  "fndos.f", line 270: ループをフルアンローリングしました。
   jwd8203o-i  "fndos.f", line 272: ループをフルアンローリングしました。
   jwd8209o-i  "fndos.f", line 296: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 340: 多項式の演算順序を変更しました。
   jwd8209o-i  "fndos.f", line 348: 多項式の演算順序を変更しました。
   jwd1309i-i  "fndos.f", line 368: この文は実行されません。

 Procedure information
   Lines      : 369
   Statements : 269
   Stack(byte): 1808
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 369
   Total statements : 269
   Total stack(byte): 1808
   Total prefetch num: 0

