
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:34 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : ndlex2.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "NDLEX2"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE NDLEX2
          2                          *   (MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
          3                          *    NODE,ME,MP,NE,NP,N1,N2,NEX,SN,
          4                          *    IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
          5                          *    VALELM,VALNOD,CM,IUT0,IERR,BUFSND,BUFRCV,MAXBUF,LEFIX)
          6                     C
          7                           IMPLICIT NONE
          8                     CCCC  [INPUT:LOOP]
          9                           INTEGER*4 MCOLOR,MCPART
         10                           INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
         11                     C
         12                           INTEGER*4 ME,MP,NE,NP,N1,N2
         13                           INTEGER*4 NODE(N2,NE),NEX(8)
         14                           REAL*4 SN (N1,ME)
         15                           INTEGER*4 IPART,NDOM,MBPDOM
         16                           INTEGER*4 LDOM(NDOM),NBPDOM(NDOM)
         17                           INTEGER*4 IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM)
         18                           REAL*4 VALELM(ME),VALNOD(NP),CM(NP)
         19                           INTEGER*4 IUT0,IERR,MAXBUF
         20                           REAL*4 BUFSND(MAXBUF),BUFRCV(MAXBUF)
         21                           INTEGER*4 LEFIX(NE)
         22                     C
         23                           CHARACTER*60 ERMSGC
         24                          & /' ## SUBROUTINE NODLEX: FATAL      ERROR REPORT   ; RETURNED' /
         25                     C
         26                           INTEGER*4 NETET,NEPRD,NEWED,NEHEX
         27                           INTEGER*4 NTET, NPRD, NWED, NHEX
         28                     C
         29                           INTEGER*4 I,IE,IP,IDUM,
         30                          *          ICOLOR,ICPART,IEE,IES,
         31                          *          IP1,IP2,IP3,IP4,IP5,IP6,IP7,IP8
         32                     C
         33                     C     * START *
         34                     C
         35                           NETET=NEX(1)
         36                           NEPRD=NEX(2)
         37                           NEWED=NEX(3)
         38                           NEHEX=NEX(4)
         39                           NE   =NETET+NEPRD+NEWED+NEHEX
         40                     C
         41                           NTET =NEX(5)
         42                           NPRD =NEX(6)
         43                           NWED =NEX(7)
         44                           NHEX =NEX(8)
         45                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      VALNOD
                              <<< Loop-information  End >>>
         46     1  pp   4v            DO 300 IP=1,NP
         47     1   p   4v               VALNOD(IP)=0.0E0
         48     1   p   4v       300  CONTINUE
         49                     C
         50                     C
         51                     C     *** VALNOD = N * VALELM ***
         52                     C
         53                     C     * TET *
         54     1                     DO 1111 ICOLOR=1,NCOLOR(1)
         55     1               !ocl norecurrence(VALNOD)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
         56     2  pp                 DO 1110 ICPART=1,NCPART(ICOLOR,1)
         57     2   p                     IES=LLOOP(ICPART  ,ICOLOR,1)
         58     2   p                     IEE=LLOOP(ICPART+1,ICOLOR,1)-1
         59     2               !ocl nosimd
         60     2               !ocl noswp
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<< Loop-information  End >>>
         61     3   p                    DO 1100 IE=IES,IEE
         62     3   p                       IF (LEFIX(IE).EQ.1) GOTO 1100
         63     3   p                       IP1 = NODE(1,IE)
         64     3   p                       IP2 = NODE(2,IE)
         65     3   p                       IP3 = NODE(3,IE)
         66     3   p                       IP4 = NODE(4,IE)
         67     3   p                       VALNOD(IP1) = VALNOD(IP1) + SN(1,IE)*VALELM(IE)
         68     3   p                       VALNOD(IP2) = VALNOD(IP2) + SN(2,IE)*VALELM(IE)
         69     3   p                       VALNOD(IP3) = VALNOD(IP3) + SN(3,IE)*VALELM(IE)
         70     3   p                       VALNOD(IP4) = VALNOD(IP4) + SN(4,IE)*VALELM(IE)
         71     3   p            1100    CONTINUE
         72     2   p            1110 CONTINUE
         73     1                1111 CONTINUE
         74                     C
         75                     C     * PYRAMID *
         76     1                     DO 1211 ICOLOR=1,NCOLOR(2)
         77     1               !ocl norecurrence(VALNOD)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
         78     2  pp                 DO 1210 ICPART=1,NCPART(ICOLOR,2)
         79     2   p                     IES=LLOOP(ICPART  ,ICOLOR,2)
         80     2   p                     IEE=LLOOP(ICPART+1,ICOLOR,2)-1
         81     2               !ocl nosimd
         82     2               !ocl noswp
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<< Loop-information  End >>>
         83     3   p                    DO 1200 IE=IES,IEE
         84     3   p                       IF (LEFIX(IE).EQ.1) GOTO 1200
         85     3   p                       IP1 = NODE(1,IE)
         86     3   p                       IP2 = NODE(2,IE)
         87     3   p                       IP3 = NODE(3,IE)
         88     3   p                       IP4 = NODE(4,IE)
         89     3   p                       IP5 = NODE(5,IE)
         90     3   p                       VALNOD(IP1) = VALNOD(IP1) + SN(1,IE)*VALELM(IE)
         91     3   p                       VALNOD(IP2) = VALNOD(IP2) + SN(2,IE)*VALELM(IE)
         92     3   p                       VALNOD(IP3) = VALNOD(IP3) + SN(3,IE)*VALELM(IE)
         93     3   p                       VALNOD(IP4) = VALNOD(IP4) + SN(4,IE)*VALELM(IE)
         94     3   p                       VALNOD(IP5) = VALNOD(IP5) + SN(5,IE)*VALELM(IE)
         95     3   p            1200    CONTINUE
         96     2   p            1210 CONTINUE
         97     1                1211 CONTINUE
         98                     C
         99                     C     * WEDGE *
        100     1                     DO 1311 ICOLOR=1,NCOLOR(3)
        101     1               !ocl norecurrence(VALNOD)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        102     2  pp                 DO 1310 ICPART=1,NCPART(ICOLOR,3)
        103     2   p                     IES=LLOOP(ICPART  ,ICOLOR,3)
        104     2   p                     IEE=LLOOP(ICPART+1,ICOLOR,3)-1
        105     2               !ocl nosimd
        106     2               !ocl noswp
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<< Loop-information  End >>>
        107     3   p                    DO 1300 IE=IES,IEE
        108     3   p                       IF (LEFIX(IE).EQ.1) GOTO 1300
        109     3   p                       IP1 = NODE(1,IE)
        110     3   p                       IP2 = NODE(2,IE)
        111     3   p                       IP3 = NODE(3,IE)
        112     3   p                       IP4 = NODE(4,IE)
        113     3   p                       IP5 = NODE(5,IE)
        114     3   p                       IP6 = NODE(6,IE)
        115     3   p                       VALNOD(IP1) = VALNOD(IP1) + SN(1,IE)*VALELM(IE)
        116     3   p                       VALNOD(IP2) = VALNOD(IP2) + SN(2,IE)*VALELM(IE)
        117     3   p                       VALNOD(IP3) = VALNOD(IP3) + SN(3,IE)*VALELM(IE)
        118     3   p                       VALNOD(IP4) = VALNOD(IP4) + SN(4,IE)*VALELM(IE)
        119     3   p                       VALNOD(IP5) = VALNOD(IP5) + SN(5,IE)*VALELM(IE)
        120     3   p                       VALNOD(IP6) = VALNOD(IP6) + SN(6,IE)*VALELM(IE)
        121     3   p            1300    CONTINUE
        122     2   p            1310 CONTINUE
        123     1                1311 CONTINUE
        124                     C
        125                     C     * HEX *
        126     1                     DO 1411 ICOLOR=1,NCOLOR(4)
        127     1               !ocl norecurrence(VALNOD)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        128     2  pp                 DO 1410 ICPART=1,NCPART(ICOLOR,4)
        129     2   p                     IES=LLOOP(ICPART  ,ICOLOR,4)
        130     2   p                     IEE=LLOOP(ICPART+1,ICOLOR,4)-1
        131     2               !ocl nosimd
        132     2               !ocl noswp
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFIX
                              <<< Loop-information  End >>>
        133     3   p                    DO 1400 IE=IES,IEE
        134     3   p                       IF (LEFIX(IE).EQ.1) GOTO 1400
        135     3   p                       IP1 = NODE(1,IE)
        136     3   p                       IP2 = NODE(2,IE)
        137     3   p                       IP3 = NODE(3,IE)
        138     3   p                       IP4 = NODE(4,IE)
        139     3   p                       IP5 = NODE(5,IE)
        140     3   p                       IP6 = NODE(6,IE)
        141     3   p                       IP7 = NODE(7,IE)
        142     3   p                       IP8 = NODE(8,IE)
        143     3   p                       VALNOD(IP1) = VALNOD(IP1) + SN(1,IE)*VALELM(IE)
        144     3   p                       VALNOD(IP2) = VALNOD(IP2) + SN(2,IE)*VALELM(IE)
        145     3   p                       VALNOD(IP3) = VALNOD(IP3) + SN(3,IE)*VALELM(IE)
        146     3   p                       VALNOD(IP4) = VALNOD(IP4) + SN(4,IE)*VALELM(IE)
        147     3   p                       VALNOD(IP5) = VALNOD(IP5) + SN(5,IE)*VALELM(IE)
        148     3   p                       VALNOD(IP6) = VALNOD(IP6) + SN(6,IE)*VALELM(IE)
        149     3   p                       VALNOD(IP7) = VALNOD(IP7) + SN(7,IE)*VALELM(IE)
        150     3   p                       VALNOD(IP8) = VALNOD(IP8) + SN(8,IE)*VALELM(IE)
        151     3   p            1400    CONTINUE
        152     2   p            1410 CONTINUE
        153     1                1411 CONTINUE
        154                     C
        155                     C
        156                     C     *** DATA COMMUNICATION ***
        157                     C
        158                     C
        159                           IDUM=1
        160                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        161                          &            VALNOD,VALNOD,VALNOD,NP,IUT0,IERR,
        162                          &            BUFSND,BUFRCV,MAXBUF)
        163     1                     IF(IERR.NE.0) THEN
        164     1                        WRITE(IUT0,*)
        165     1                        WRITE(IUT0,*) ERMSGC
        166     1                        RETURN
        167     1                     END IF
        168                     C
        169                     C
        170                     C     *** INVERSE MASS MATRIX ***
        171                     C
        172                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 384, MVE: 7)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CM, VALNOD
                              <<< Loop-information  End >>>
        173     1  pp   2v            DO 2000 IP=1,NP
        174     1   p   2v               VALNOD(IP)=VALNOD(IP)*CM(IP)
        175     1   p   2v       2000 CONTINUE
        176                     C
        177                           RETURN
        178                           END

 Diagnostic messages: program name(NDLEX2)
   jwd2008i-i  "ndlex2.f", line 1: この仮引数'MP'は、副プログラム中で使用されていません。
   jwd2006i-i  "ndlex2.f", line 29: この名前'I'は、宣言だけされていて引用されていません。
   jwd5001p-i  "ndlex2.f", line 46: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "ndlex2.f", line 46: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "ndlex2.f", line 46: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "ndlex2.f", line 46: ループを展開数4回でアンローリングしました。
   jwd5208p-i  "ndlex2.f", line 54: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:VALNOD)
   jwd5001p-i  "ndlex2.f", line 56: このDOループを並列化しました。(名前:ICPART)
   jwd6156s-i  "ndlex2.f", line 61: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd5208p-i  "ndlex2.f", line 76: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:VALNOD)
   jwd5001p-i  "ndlex2.f", line 78: このDOループを並列化しました。(名前:ICPART)
   jwd6156s-i  "ndlex2.f", line 83: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd5208p-i  "ndlex2.f", line 100: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:VALNOD)
   jwd5001p-i  "ndlex2.f", line 102: このDOループを並列化しました。(名前:ICPART)
   jwd6156s-i  "ndlex2.f", line 107: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd5208p-i  "ndlex2.f", line 126: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:VALNOD)
   jwd5001p-i  "ndlex2.f", line 128: このDOループを並列化しました。(名前:ICPART)
   jwd6156s-i  "ndlex2.f", line 133: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd5001p-i  "ndlex2.f", line 173: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "ndlex2.f", line 173: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "ndlex2.f", line 173: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "ndlex2.f", line 173: ループの繰返し数が384回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。

 Procedure information
   Lines      : 178
   Statements : 124
   Stack(byte): 2912
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 178
   Total statements : 124
   Total stack(byte): 2912
   Total prefetch num: 0

