
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:41 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : dd_mpi.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "DDINIT"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    DD_MPI                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                     C
         14                     C      GENERIC TO MPI FORTRAN INTERFACE FOR DOMAIN-DECOMPOSITION
         15                     C     PROGRAMMING MODEL
         16                     C                        AUTHOR: C. KATO, MERL, HITACHI, LTD.
         17                     C                        DATE FIRST WRITTEN : FEBRUARY 20TH, 1998
         18                     C                        DATE       MODIFIED: APRIL    14TH, 2001
         19                     C                            (-PRECEXP OPTION IMPLEMENTED)
         20                     C                        DATE LAST  MODIFIED: MARCH     7TH, 2003
         21                     C                            (ENTRIES DDCOM1 AND DDCOM2 ADDED)
         22                     C
         23                     C
         24                           SUBROUTINE DDINIT(NPART,IPART)
         25                           IMPLICIT REAL*4(A-H,O-Z)
         26                     C
         27                           INCLUDE 'mpif.h'
         28                     C
         29                     C
         30                     C      INITIALIZE A PARALLEL TASK FOR DOMAIN-DECOMPOSITION PROGRAMMING
         31                     C     MODEL
         32                     C                            ( MPI VERSION )
         33                     C
         34                     C
         35                     C NOTE 1; THIS SUBROUTINE QUERIES THE TASK NUMBER (I.E. TASK ID) OF THE
         36                     C       CALLING TASK, THE NUMBER OF TASKS WHICH ARE SHARING THE PROGRAM
         37                     C       RUN. THE NUMBER OF SUB-DOMAINS AND THE SUB-DOMAIN NUMBER
         38                     C       THAT THE CALLING TASK SHOULD TAKE CARE OF, WILL BE RETURNED TO
         39                     C       THE CALLING TASK, AFTER BEING SET TO THE NUMBER OF TASKS, AND
         40                     C       THE TASK NUMBER PLUS ONE, RESPECTIVELY.
         41                     C
         42                     C NOTE 2; THE NUMBER OF TASKS TO SHARE A PARTICULAR RUN IS DETERMINED AT
         43                     C       RUN TIME BY THE PARALLEL ENVIRONMENT, WHILE THE NUMBER OF
         44                     C       SUB-DOMAINS IS THE SAME AS THE NUMBER OF SUB-DOMAIN FILES WHICH
         45                     C       HAVE BEEN PREPARED BEFORE THE RUN. THEREFORE, IN SOME CASES,
         46                     C       THE NUMBER OF TASKS MIGHT DIFFER FROM THE ACTUAL NUMBER OF
         47                     C       SUB-DOMAINS, ALTHOUGH THEY MUST BE THE SAME TO RUN A MEANINGFUL
         48                     C       COMPUTATION. NOTE THAT THIS SUBROUTINE DOES NOT CHECK THE
         49                     C       CONSISTENCY OF THESE VALUES.
         50                     C
         51                     C NOTE 3; A TASK NUMBER (I.E. TASK ID) IS A UNIQUE NUMBER FROM 0 TO ONE
         52                     C       MINUS THE TOTAL NUMBER OF TASKS, ASSIGNED BY THE SYSTEM AT RUN
         53                     C       TIME. THUS, THE SUB-DOMAIN NUMBER IS ALSO A UNIQUE NUMBER
         54                     C       FROM 1 TO THE NUMBER OF SUB-DOMAINS.
         55                     C
         56                     C NOTE 4; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
         57                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
         58                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
         59                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
         60                     C
         61                     C
         62                     C     ARGUMENT LISTINGS
         63                     C       (1) INPUT
         64                     C          ( NONE )
         65                     C
         66                     C       (2) OUTPUT
         67                     C INT *4   NPART       ; TOTAL NUMBER OF SUB-DOMAINS
         68                     C INT *4   IPART       ; SUB-DOMAIN NUMBER THAT THE CALLING TASK SHOULD
         69                     C                       TAKE CARE OF
         70                     C
         71                     C
         72                           CALL MPI_INIT(IERR)
         73                           CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NTASK,IERR)
         74                           CALL MPI_COMM_RANK(MPI_COMM_WORLD,ITASK,IERR)
         75                     C
         76                           NPART = NTASK
         77                           IPART = ITASK+1
         78                     C
         79                     C
         80                           RETURN
         81                           END

 Procedure information
   Lines      : 4110
   Statements : 3266
   Stack(byte): 368
   Prefetch num: 0

 External subroutine subprogram "DDEXIT"
  (line-no.)(nest)(optimize)
         82                           SUBROUTINE DDEXIT
         83                           IMPLICIT REAL*4(A-H,O-Z)
         84                     C
         85                           INCLUDE 'mpif.h'
         86                     C
         87                     C
         88                     C      EXIT FROM PARALLEL EXECUTIONS
         89                     C                            ( MPI VERSION )
         90                     C
         91                     C
         92                     C NOTE ; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
         93                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
         94                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
         95                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
         96                     C
         97                     C
         98                     C     ARGUMENT LISTINGS
         99                     C       (1) INPUT
        100                     C          ( NONE )
        101                     C
        102                     C       (2) OUTPUT
        103                     C          ( NONE )
        104                     C
        105                     C
        106                           CALL MPI_FINALIZE(IERR)
        107                     C
        108                     C
        109                           RETURN
        110                           END

 Procedure information
   Lines      : 4058
   Statements : 3262
   Stack(byte): 368
   Prefetch num: 0

 External subroutine subprogram "DDSYNC"
  (line-no.)(nest)(optimize)
        111                           SUBROUTINE DDSYNC
        112                           IMPLICIT REAL*4(A-H,O-Z)
        113                     C
        114                           INCLUDE 'mpif.h'
        115                     #ifdef USE_TIMER
        116                           include 'timer.h'
        117                     
        118                           real*8 ts0, te0
        119                     
        120                           nddsync = nddsync + 1
        121                           tstart = MPI_WTIME()
        122                     #endif
        123                     C
        124                     C
        125                     C      IMPLEMENT BARRIER SYNCHRONIZATION AMONG THE GROUP OF ALL TASKS
        126                     C                            ( MPI VERSION )
        127                     C
        128                     C
        129                     C NOTE ; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
        130                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
        131                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
        132                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
        133                     C
        134                     C
        135                     C     ARGUMENT LISTINGS
        136                     C       (1) INPUT
        137                     C          ( NONE )
        138                     C
        139                     C       (2) OUTPUT
        140                     C          ( NONE )
        141                     C
        142                     C
        143                           CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
        144                     C
        145                     C
        146                     #ifdef USE_TIMER
        147                           tend = MPI_WTIME()
        148                           tddsync = tddsync +(tend - tstart)
        149                     #endif
        150                           RETURN
        151                           END

 Diagnostic messages: program name(DDSYNC)
   jwd2006i-i  "dd_mpi.f", line 118: この名前'te0'は、宣言だけされていて引用されていません。
   jwd2006i-i  "dd_mpi.f", line 118: この名前'ts0'は、宣言だけされていて引用されていません。
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 24: この名前'nclrcrs'は、INCLUDE内で宣言だけされていて引用されていません。
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 25: この名前'tclrcrs'は、INCLUDE内で宣言だけされていて引用されていません。

 Procedure information
   Lines      : 4200
   Statements : 3330
   Stack(byte): 368
   Prefetch num: 0

 External subroutine subprogram "DDSTOP"
  (line-no.)(nest)(optimize)
        152                     C
        153                     C
        154                           SUBROUTINE DDSTOP(IPART,IUT0)
        155                           IMPLICIT REAL*4(A-H,O-Z)
        156                     C
        157                           INCLUDE 'mpif.h'
        158                     C
        159                           CHARACTER*60 ERMSGB
        160                          & / ' ## SUBROUTINE DDSTOP: FATAL      ERROR REPORTED ; STOPPING' /
        161                           CHARACTER*60 EREXP1
        162                          & / ' A SUB-DOMAIN COMPUTATION HAS BEEN ABNORMALLY TERMINATED AT' /
        163                     C
        164                     C
        165                     C      STOP ALL THE RUNNING PARALLEL TASKS FOR DOMAIN-DECOMPOSITION
        166                     C     PROGRAMMING MODEL
        167                     C                            ( MPI VERSION )
        168                     C
        169                     C
        170                     C NOTE 1; IF AN ERROR CONDITION HAS BEEN DETECTED IN SOME TASK RUNNING
        171                     C       IN PARALLEL, ALL THE TASKS SHARING THAT PARTICULAR RUN SHOULD BE
        172                     C       APPROPRIATELY STOPPED. THIS SUBROUTINE TERMINATES ALL THE
        173                     C       RUNNING TASKS AND CANCELS THE PARALLEL JOB.
        174                     C
        175                     C NOTE 2; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
        176                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
        177                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
        178                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
        179                     C
        180                     C
        181                     C     ARGUMENT LISTINGS
        182                     C       (1) INPUT
        183                     C INT *4   IPART       ; SUB-DOMAIN NUMBER THAT THE CALLING TASK IS
        184                     C                       TAKING CARE OF
        185                     C INT *4   IUT0        ; FILE NUMBER TO WRITE ERROR MESSAGE
        186                     C
        187                     C       (2) OUTPUT
        188                     C          ( NONE )
        189                     C
        190                     C
        191                           WRITE(IUT0,*) ERMSGB
        192                           WRITE(IUT0,*) EREXP1, IPART
        193                           CALL MPI_ABORT(MPI_COMM_WORLD,IPART,IERR)
        194                     C
        195                           RETURN
        196                           END

 Procedure information
   Lines      : 4074
   Statements : 3266
   Stack(byte): 592
   Prefetch num: 0

 External subroutine subprogram "DDCOM0"
  (line-no.)(nest)(optimize)
        197                     C
        198                     C
        199                           SUBROUTINE DDCOM0(LPINT1,LPINT2,LPINT3,NPINT,MDOM,MBPDOM,
        200                          *                  LDOM,NBPDOM,NDOM,IPSLF,IPSND,IUT0,IERR)
        201                           IMPLICIT REAL*4(A-H,O-Z)
        202                           DIMENSION LPINT1(NPINT),LPINT2(NPINT),LPINT3(NPINT),
        203                          1          LDOM(MDOM),NBPDOM(MDOM),
        204                          2          IPSLF(MBPDOM,MDOM),IPSND(MBPDOM,MDOM)
        205                     C
        206                     C
        207                           CHARACTER*60 ERMSGB
        208                          & / ' ## SUBROUTINE DDCOM0: FATAL     ERROR OCCURRENCE; RETURNED' /
        209                           CHARACTER*60 EREXP1
        210                          & / ' DIMENSION SIZE OF PASSED LIST ARRAYS IS NOT SUFFICIENT    ' /
        211                     C
        212                     C
        213                     C      SET UP NEIGHBORING DOMAIN LISTS FOR DOMAIN-DECOMPOSITION
        214                     C     PROGRAMMING MODEL
        215                     C
        216                     C
        217                     C     ARGUMENT LISTINGS
        218                     C       (1) INPUT
        219                     C INT *4   LPINT1 (IBP)     ; INTER-CONNECT BOUNDARY NODES
        220                     C INT *4   LPINT2 (IBP)     ; NEIGHBORING SUB-DOMAIN NUMBERS
        221                     C INT *4   LPINT3 (IBP)     ; NODE NUMBER IN THE NEIGHBORING SUB-DOMAINS
        222                     C INT *4   NPINT            ; NUMBER OF INTER-CONNECT BOUNDARY NODES
        223                     C
        224                     C INT *4   MDOM             ; MAX. NUMBER OF THE NEIGHBORING SUB-DOMAINS
        225                     C INT *4   MBPDOM           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
        226                     C                            OF THE PASSED ARRAYS 'IPSLF' AND 'IPSND'
        227                     C                            (I.E. THE MAXIMUM NUMBER OF THE
        228                     C                             INTER-CONNECT BOUNDARY NODES FOR A
        229                     C                             NEIGHBORING SUB-DOMAIN)
        230                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
        231                     C
        232                     C       (2) OUTPUT
        233                     C INT *4   LDOM      (IDOM) ; NEIGHBORING SUB-DOMAIN NUMBER
        234                     C INT *4   NBPDOM    (IDOM) ; NUMBER OF INTER-CONNECT BOUNDARY NODES
        235                     C                            SHARING WITH THE IDOM'TH NEIGHBORING
        236                     C                            SUB-DOMAIN, LDOM(IDOM)
        237                     C INT *4   NDOM             ; NUMBER OF THE NEIGHBORING SUB-DOMAINS
        238                     C INT *4   IPSLF (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        239                     C                            CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
        240                     C                            NEIGHBORING SUB-DOMAIN, LDOM(IDOM)
        241                     C INT *4   IPSND (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        242                     C                            SUB-DOMAIN THAT IS RECEIVING THE CALLING
        243                     C                            TASK'S RESIDUALS.
        244                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
        245                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
        246                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
        247                     C
        248                     C
        249                           IERR = 0
        250                     C
        251                     C
        252                     C
        253                     C SET INITIAL VALUES
        254                     C
        255                     C
        256                     C
        257                           NDOM = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NBPDOM
                              <<< Loop-information  End >>>
        258     1  pp   4v            DO 100 IDOM = 1 , MDOM
        259     1   p   4v                NBPDOM(IDOM) = 0
        260     1   p   4v        100 CONTINUE
        261                     C
        262                     C
        263                     C
        264                     C SET NEIGHBORING DOMAIN LISTS
        265                     C
        266                     C
        267                     C
        268     1                     DO 230 IPINT = 1 , NPINT
        269     1                         IFNEW = LPINT2(IPINT)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM
                              <<< Loop-information  End >>>
        270     2                         DO 210 ICHK = 1 , NDOM
        271     3                             IF(LDOM(ICHK).EQ.IFNEW) THEN
        272     3                                 IDOM = ICHK
        273     3                                 GO TO 220
        274     3                             ENDIF
        275     2                 210     CONTINUE
        276     1                         NDOM = NDOM+1
        277     1                         IDOM = NDOM
        278     1               C
        279     2                         IF(NDOM.GT.MDOM) THEN
        280     2                             WRITE(IUT0,*) ERMSGB
        281     2                             WRITE(IUT0,*) EREXP1
        282     2                             IERR = 1
        283     2                             RETURN
        284     2                         ENDIF
        285     1               C
        286     1                         LDOM(NDOM) = IFNEW
        287     1               C
        288     1                 220     CONTINUE
        289     1                         NBPDOM(IDOM) = NBPDOM(IDOM)+1
        290     1               C
        291     2                         IF(NBPDOM(IDOM).GT.MBPDOM) THEN
        292     2                             WRITE(IUT0,*) ERMSGB
        293     2                             WRITE(IUT0,*) EREXP1
        294     2                             IERR = 1
        295     2                             RETURN
        296     2                         ENDIF
        297     1               C
        298     1                         IPSLF(NBPDOM(IDOM),IDOM) = LPINT1(IPINT)
        299     1                         IPSND(NBPDOM(IDOM),IDOM) = LPINT3(IPINT)
        300     1                 230 CONTINUE
        301                     C
        302                     C
        303                           RETURN
        304                           END

 Diagnostic messages: program name(DDCOM0)
   jwd5001p-i  "dd_mpi.f", line 258: このDOループを並列化しました。(名前:IDOM)
   jwd6001s-i  "dd_mpi.f", line 258: このDOループをSIMD化しました。(名前:IDOM)
   jwd8663o-i  "dd_mpi.f", line 258: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dd_mpi.f", line 258: ループを展開数4回でアンローリングしました。
   jwd5131p-i  "dd_mpi.f", line 268: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5131p-i  "dd_mpi.f", line 270: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 270: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "dd_mpi.f", line 270: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。

 Procedure information
   Lines      : 108
   Statements : 40
   Stack(byte): 1152
   Prefetch num: 0

 External subroutine subprogram "DDCOM1"
  (line-no.)(nest)(optimize)
        305                     C
        306                     C
        307                           SUBROUTINE DDCOM1(LPINT1,NPINT,NUMIP,NP,IUT0,IERR)
        308                           IMPLICIT REAL*4(A-H,O-Z)
        309                           DIMENSION LPINT1(NPINT),NUMIP(NP)
        310                     C
        311                     C
        312                           CHARACTER*60 ERMSGB
        313                          & / ' ## SUBROUTINE DDCOM1: FATAL     ERROR OCCURRENCE; RETURNED' /
        314                           CHARACTER*60 EREXP1
        315                          & / ' SPECIFIED NODE NUMBER IS OUT OF RANGE                     ' /
        316                     C
        317                     C
        318                     C      CALCULATE NUMBER OF NEIGHBORING DOMAINS THAT EACH NODE BELONGS TO
        319                     C     FOR DOMAIN-DECOMPOSITION PROGRAMMING MODEL
        320                     C
        321                     C
        322                     C     ARGUMENT LISTINGS
        323                     C       (1) INPUT
        324                     C INT *4   LPINT1 (IBP)     ; INTER-CONNECT BOUNDARY NODES
        325                     C INT *4   NPINT            ; NUMBER OF INTER-CONNECT BOUNDARY NODES
        326                     C INT *4   NP               ; NUMBER OF TOTAL    NODES
        327                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
        328                     C
        329                     C       (2) OUTPUT
        330                     C INT *4   NUMIP  (IP)      ; NUMBER OF NEIGHBORING DOMAINS THAT NODE
        331                     C                            'IP' BELONG TO
        332                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
        333                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
        334                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
        335                     C
        336                     C
        337                           IERR = 0
        338                     C
        339                     C
        340                     C
        341                     C SET INITIAL VALUES
        342                     C
        343                     C
        344                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NUMIP
                              <<< Loop-information  End >>>
        345     1  pp   4v            DO 100 IP = 1 , NP
        346     1   p   4v                NUMIP(IP) = 0
        347     1   p   4v        100 CONTINUE
        348                     C
        349                     C
        350                     C
        351                     C CALCULATE NUMBER OF NEIGHBORING DOMAINS THAT NODE 'IP' BELONGS TO
        352                     C
        353                     C
        354                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPINT1
                              <<< Loop-information  End >>>
        355     1                     DO 110 IPINT = 1 , NPINT
        356     1                         IP = LPINT1(IPINT)
        357     1               C
        358     2                         IF(IP.LT.1 .OR. IP.GT.NP) THEN
        359     2                             WRITE(IUT0,*) ERMSGB
        360     2                             WRITE(IUT0,*) EREXP1
        361     2                             IERR = 1
        362     2                             RETURN
        363     2                         ENDIF
        364     1               C
        365     1                         NUMIP(IP) = NUMIP(IP)+1
        366     1                 110 CONTINUE
        367                     C
        368                     C
        369                           RETURN
        370                           END

 Diagnostic messages: program name(DDCOM1)
   jwd5001p-i  "dd_mpi.f", line 345: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dd_mpi.f", line 345: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dd_mpi.f", line 345: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dd_mpi.f", line 345: ループを展開数4回でアンローリングしました。
   jwd5131p-i  "dd_mpi.f", line 355: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 355: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "dd_mpi.f", line 355: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。

 Procedure information
   Lines      : 66
   Statements : 21
   Stack(byte): 928
   Prefetch num: 0

 External subroutine subprogram "DDCOM2"
  (line-no.)(nest)(optimize)
        371                     C
        372                     C
        373                           SUBROUTINE DDCOM2(SEND,RECV)
        374                           IMPLICIT REAL*4(A-H,O-Z)
        375                     C
        376                           INCLUDE 'mpif.h'
        377                     C
        378                     #ifdef cputime
        379                           INTEGER*4 NUMALL
        380                           REAL*4 DTALLA,DTALLR
        381                           COMMON /CPUALL/ NUMALL,DTALLA,DTALLR
        382                           REAL*4 DTCPU,TBUF1,TBUF2
        383                     #endif
        384                     #ifdef USE_TIMER
        385                           include 'timer.h'
        386                     #endif
        387                     C
        388                     C
        389                     C      SUM UP A SINGLE SCALAR AMONG ALL THE PARTICIPATING TASKS FOR
        390                     C     DOMAIN-DECOMPOSITION PROGRAMMING MODEL
        391                     C
        392                     C                            ( MPI VERSION )
        393                     C
        394                     C
        395                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
        396                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
        397                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
        398                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
        399                     C
        400                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
        401                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
        402                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
        403                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
        404                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
        405                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
        406                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
        407                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
        408                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
        409                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
        410                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
        411                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
        412                     C
        413                     C
        414                     C     ARGUMENT LISTINGS
        415                     C       (1) INPUT
        416                     C REAL*4   SEND             ; SCALAR VARIABLE TO SUM UP
        417                     C
        418                     C       (2) OUTPUT
        419                     C REAL*4   RECV             ; SCALAR VARIABLE SUMMED UP AMONG ALL TASKS
        420                     C
        421                     C
        422                     #ifdef cputime
        423                           NUMALL=NUMALL+1
        424                           CALL CPU_TIME( TBUF1 )
        425                     #endif
        426                     
        427                     #ifdef PRECEXP
        428                           CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL8,MPI_SUM,
        429                          &                   MPI_COMM_WORLD,IERR)
        430                     #else
        431                           CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL ,MPI_SUM,
        432                          &                   MPI_COMM_WORLD,IERR)
        433                     #endif
        434                     
        435                     #ifdef cputime
        436                           CALL CPU_TIME( TBUF2 )
        437                           DTCPU=TBUF2-TBUF1
        438                           DTALLA=DTALLA+DTCPU
        439                           DTALLR=DTALLR+DTCPU*DTCPU
        440                     #endif
        441                     C
        442                           RETURN
        443                           END

 Diagnostic messages: program name(DDCOM2)
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 24: この名前'nclrcrs'は、INCLUDE内で宣言だけされていて引用されていません。
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 25: この名前'tclrcrs'は、INCLUDE内で宣言だけされていて引用されていません。
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 129: この名前'tend'は、INCLUDE内で宣言だけされていて引用されていません。
   jwd2003i-i  "/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include/timer.h", line 129: この名前'tstart'は、INCLUDE内で宣言だけされていて引用されていません。

 Procedure information
   Lines      : 4232
   Statements : 3335
   Stack(byte): 400
   Prefetch num: 0

 External subroutine subprogram "DDALLD"
  (line-no.)(nest)(optimize)
        444                     C
        445                     CCTT SUBROUTINE DDCOM2 END
        446                     C
        447                     CCTT SUBROUTINE DDALLD BEGIN
        448                     C
        449                           SUBROUTINE DDALLD(SEND,RECV,IFLAG,IUT0,IERR)
        450                           IMPLICIT REAL*4(A-H,O-Z)
        451                     C
        452                           INCLUDE 'mpif.h'
        453                     C
        454                     #ifdef cputime
        455                           INTEGER*4 NUMALL
        456                           REAL*4 DTALLA,DTALLR
        457                           COMMON /CPUALL/ NUMALL,DTALLA,DTALLR
        458                           REAL*4 DTCPU,TBUF1,TBUF2
        459                     #endif
        460                     C
        461                           CHARACTER*60 ERMSGB
        462                          & / ' ## SUBROUTINE DDALLD: FATAL   ERROR OCCURENCE; RETURNED ' /
        463                           CHARACTER*60 ERMSG1
        464                          & / ' ILLIGAL OPERATION NUMBER IS GIVEN ' /
        465                     C
        466                     C
        467                     C      SUM UP A SINGLE SCALAR AMONG ALL THE PARTICIPATING TASKS FOR
        468                     C     DOMAIN-DECOMPOSITION PROGRAMMING MODEL
        469                     C
        470                     C                            ( MPI VERSION )
        471                     C
        472                     C
        473                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
        474                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
        475                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
        476                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
        477                     C
        478                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
        479                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
        480                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
        481                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
        482                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
        483                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
        484                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
        485                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
        486                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
        487                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
        488                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
        489                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
        490                     C
        491                     C
        492                     C     ARGUMENT LISTINGS
        493                     C       (1) INPUT
        494                     C REAL*4   SEND             ; SCALAR VARIABLE TO SUM UP
        495                     C INTEGER  IFLAG            ; OPERATION DISCRIMINATER
        496                     C                             1: OP=MPI_SUM
        497                     C                             2: OP=MPI_MAX
        498                     C                             3: OP=MPI_MIN
        499                     C
        500                     C       (2) OUTPUT
        501                     C REAL*4   RECV             ; SCALAR VARIABLE SUMMED UP AMONG ALL TASKS
        502                     C
        503                     C
        504                     #ifdef cputime
        505                           NUMALL=NUMALL+1
        506                           CALL CPU_TIME( TBUF1 )
        507                     #endif
        508                     C
        509     1                     IF(IFLAG.EQ.1) THEN
        510     1               C
        511     1               #ifdef PRECEXP
        512     1                         CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL8,MPI_SUM,
        513     1                    &                       MPI_COMM_WORLD,IERR)
        514     1               #else
        515     1                         CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL ,MPI_SUM,
        516     1                    &                       MPI_COMM_WORLD,IERR)
        517     1               #endif
        518     1               C
        519     1                     ELSE IF (IFLAG.EQ.2) THEN
        520     1               C
        521     1               #ifdef PRECEXP
        522     1                         CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL8,MPI_MAX,
        523     1                    &                       MPI_COMM_WORLD,IERR)
        524     1               #else
        525     1                         CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL ,MPI_MAX,
        526     1                    &                       MPI_COMM_WORLD,IERR)
        527     1               #endif
        528     1               C
        529     1                     ELSE IF (IFLAG.EQ.3) THEN
        530     1               C
        531     1               #ifdef PRECEXP
        532     1                         CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL8,MPI_MIN,
        533     1                    &                       MPI_COMM_WORLD,IERR)
        534     1               #else
        535     1                         CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL ,MPI_MIN,
        536     1                    &                       MPI_COMM_WORLD,IERR)
        537     1               #endif
        538     1               C
        539     1                     ELSE
        540     1                         WRITE(IUT0,*) ERMSGB
        541     1                         WRITE(IUT0,*) ERMSG1
        542     1                         IERR=1
        543     1                         RETURN
        544     1                     ENDIF
        545                     C
        546                     #ifdef cputime
        547                           CALL CPU_TIME( TBUF2 )
        548                           DTCPU=TBUF2-TBUF1
        549                           DTALLA=DTALLA+DTCPU
        550                           DTALLR=DTALLR+DTCPU*DTCPU
        551                     #endif
        552                     C
        553                           RETURN
        554                           END

 Procedure information
   Lines      : 4140
   Statements : 3285
   Stack(byte): 592
   Prefetch num: 0

 External subroutine subprogram "DDCOM3"
  (line-no.)(nest)(optimize)
        555                     C
        556                     CCTT SUBROUTINE DDALLD END
        557                     C
        558                     CCTT SUBROUTINE DDCOM3 BEGIN
        559                     C
        560                           SUBROUTINE DDCOM3(IPART,IDIM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        561                          *                  FX,FY,FZ,NP,IUT0,IERR,BUFSND,BUFRCV,MAXBUF)
        562                           IMPLICIT REAL*4(A-H,O-Z)
        563                           DIMENSION LDOM(NDOM),NBPDOM(NDOM),IPSLF(MBPDOM,NDOM),
        564                          1          IPSND(MBPDOM,NDOM), FX(NP),FY(NP),FZ(NP),
        565                          2          BUFSND(MAXBUF),BUFRCV(MAXBUF)
        566                     C
        567                           INCLUDE 'mpif.h'
        568                     C
        569                           PARAMETER ( MAXDOM = 10000 )
        570                           INTEGER*4 MSGIDS(MAXDOM),MSGSTS(MPI_STATUS_SIZE,MAXDOM)
        571                     C
        572                     C
        573                           CHARACTER*60 ERMSGB
        574                          & / ' ## SUBROUTINE DDCOM3: FATAL     ERROR OCCURRENCE; RETURNED' /
        575                           CHARACTER*60 EREXP1
        576                          & / ' DIMENSION SIZE OF INTERNAL      ARRAYS IS NOT SUFFICIENT  ' /
        577                           CHARACTER*60 EREXP2
        578                          & / ' DIMENSION SIZE OF PASSED BUFFER ARRAYS IS NOT SUFFICIENT  ' /
        579                           CHARACTER*60 EREXP3
        580                          & / ' RECEIVED NODE NUMBER IS OUT OF THE GLOBAL NODE NUMBER     ' /
        581                     C
        582                     C
        583                     C      EXCHANGE X, Y, AND Z RESIDUALS AMONG THE NEIGHBORING SUB-DOMAINS
        584                     C     AND SUPERIMPOSE THE EXCHANGED RESIDUALS TO THE CALLING TASK'S
        585                     C     RESIDUALS, FOR DOMAIN-DECOMPOSITION PROGRAMMING MODEL
        586                     C
        587                     C                            ( MPI VERSION )
        588                     C
        589                     C
        590                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
        591                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
        592                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
        593                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
        594                     C
        595                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
        596                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
        597                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
        598                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
        599                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
        600                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
        601                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
        602                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
        603                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
        604                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
        605                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
        606                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
        607                     C
        608                     C
        609                     C     ARGUMENT LISTINGS
        610                     C       (1) INPUT
        611                     C INT *4   IPART       ; SUB-DOMAIN NUMBER THAT THE CALLING TASK IS
        612                     C                       TAKING CARE OF
        613                     C           NOTES ; ARGUMENT 'IPART' IS NOT CURRENTLY USED. IT IS
        614                     C                  RETAINED FOR A POSSIBLE FUTURE USE.
        615                     C INT *4   IDIM             ; SPACE DIMENSION ( 1, 2, OR 3 )
        616                     C INT *4   LDOM      (IDOM) ; NEIGHBORING SUB-DOMAIN NUMBER
        617                     C INT *4   NBPDOM    (IDOM) ; NUMBER OF INTER-CONNECT BOUNDARY NODES
        618                     C                            SHARING WITH THE IDOM'TH NEIGHBORING
        619                     C                            SUB-DOMAIN, LDOM(IDOM)
        620                     C INT *4   NDOM             ; NUMBER OF THE NEIGHBORING SUB-DOMAINS
        621                     C INT *4   IPSLF (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        622                     C                            CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
        623                     C                            NEIGHBORING SUB-DOMAIN, LDOM(IDOM)
        624                     C INT *4   IPSND (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        625                     C                            SUB-DOMAIN THAT IS RECEIVING THE CALLING
        626                     C                            TASK'S RESIDUALS.
        627                     C INT *4   MBPDOM           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
        628                     C                            OF THE PASSED ARRAYS 'IPSLF' AND 'IPSND'
        629                     C                            (I.E. THE MAXIMUM NUMBER OF THE
        630                     C                             INTER-CONNECT BOUNDARY NODES FOR A
        631                     C                             NEIGHBORING SUB-DOMAIN)
        632                     C INT *4   NP               ; NUMBER OF THE TOTAL NODES IN THE CALLING
        633                     C                            TASK'S SUB-DOMAIN
        634                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
        635                     C INT *4   MAXBUF           ; LENGTH OF THE PASSED COMMUNICATION BUFFERS
        636                     C                            'BUFSND' AND 'BUFRCV' IN WORDS. 'MAXBUF'
        637                     C                             MUST BE NO SMALLER THAN 4 TIMES THE TOTAL
        638                     C                             NUMBER OF INTER-CONNECT BOUNDARY NODES IN
        639                     C                             THE CALLING TASK
        640                     C
        641                     C       (2) OUTPUT
        642                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
        643                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
        644                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
        645                     C
        646                     C       (3) INPUT-OUTPUT
        647                     C REAL*4   FX(IP)           ; X-DIRECTION RESIDUAL VECTOR
        648                     C REAL*4   FY(IP)           ; Y-DIRECTION RESIDUAL VECTOR
        649                     C REAL*4   FZ(IP)           ; Z-DIRECTION RESIDUAL VECTOR
        650                     C
        651                     C       (4) WORK
        652                     C REAL*4   BUFSND(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
        653                     C                            BOUNDARY NODE NUMBER IN THE NEIGHBORING
        654                     C                            SUB-DOMAINS AND THE RESIDUALS OF THE
        655                     C                            CALLING TASK'S SUB-DOMAIN WHEN SENDING
        656                     C                            THE RESIDUALS
        657                     C
        658                     C REAL*4   BUFRCV(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
        659                     C                            BOUNDARY NODE NUMBER IN THE CALLING TASK'S
        660                     C                            SUB-DOMAIN AND THE RESIDUALS OF THE
        661                     C                            NEIGHBORING SUB-DOMAINS AT THE RECEIPT OF
        662                     C                            THE RESIDUALS FROM THE NEIGHBORING
        663                     C                            SUB-DOMAINS
        664                     C
        665                     C
        666                           IERR = 0
        667                     C
        668                     C
        669                     C
        670                     C CHECK THE INTERNAL ARRAY SIZE
        671                     C
        672                     C
        673                     C
        674     1                     IF(2*NDOM.GT.MAXDOM) THEN
        675     1                         WRITE(IUT0,*) ERMSGB
        676     1                         WRITE(IUT0,*) EREXP1
        677     1                         IERR = 1
        678     1                         RETURN
        679     1                     ENDIF
        680                     C
        681                     C
        682                     C
        683                     C POST ALL THE EXPECTED RECEIVES
        684                     C
        685                     C
        686                     C
        687                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 5
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        688     1                     DO 110 IDOM = 1 , NDOM
        689     1                         MSGTYP = 1
        690     1                         IRECV  = LDOM(IDOM)-1
        691     1                         MSGLEN = 4*NBPDOM(IDOM)
        692     1               C
        693     2                         IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
        694     2                             WRITE(IUT0,*) ERMSGB
        695     2                             WRITE(IUT0,*) EREXP2
        696     2                             IERR = 1
        697     2                             RETURN
        698     2                         ENDIF
        699     1               C
        700     1               #ifdef PRECEXP
        701     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL8,IRECV,MSGTYP,
        702     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
        703     1               #else
        704     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL ,IRECV,MSGTYP,
        705     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
        706     1               #endif
        707     1               C
        708     1                         NSTART = NSTART+MSGLEN
        709     1                 110 CONTINUE
        710                     C
        711                     !      CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
        712                     C
        713                     C
        714                     C
        715                     C SET UP THE SEND BUFFER
        716                     C
        717                     C
        718                     CC    CALL FTRACE_REGION_BEGIN("ddcom3:200-210")
        719                     !CDIR PARALLEL DO PRIVATE(NSTART,IP,IPS)
        720     1                     DO 210 IDOM = 1 , NDOM
        721     1                         NSTART  = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1600
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        722     2  pp    v                DO 205 ITMP = 2 , IDOM
        723     2   p    v                    NSTART = NSTART + NBPDOM(ITMP-1)*4
        724     2   p    v        205     CONTINUE
        725     1               !CDIR NOINNER
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 341
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.62, ITR: 112, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      BUFSND, IPSND, IPSLF
                              <<< Loop-information  End >>>
        726     2  pp    v                DO 200 IBP = 1 , NBPDOM(IDOM)
        727     2   p    v                    IP  = IPSLF(IBP,IDOM)
        728     2   p    v                    IPS = IPSND(IBP,IDOM)
        729     2   p    v                    BUFSND(NSTART+1) = IPS
        730     2   p    v                    BUFSND(NSTART+2) = FX(IP)
        731     2   p    v                    BUFSND(NSTART+3) = FY(IP)
        732     2   p    v                    BUFSND(NSTART+4) = FZ(IP)
        733     2   p    v                    NSTART = NSTART + 4
        734     2   p    v        200     CONTINUE
        735     1                 210 CONTINUE
        736                     CC    CALL FTRACE_REGION_END("ddcom3:200-210")
        737                     C
        738                     C
        739                     C
        740                     C SEND THE RESIDUALS
        741                     C
        742                     C
        743                     C
        744                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        745     1   s    s            DO 220 IDOM = 1 , NDOM
        746     1   s    s                MSGTYP = 1
        747     1   s    s                ISEND  = LDOM(IDOM)-1
        748     1   s    s                MSGLEN = 4*NBPDOM(IDOM)
        749     1               
        750     1               #ifdef PRECEXP
        751     1                         CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL8,ISEND,MSGTYP,
        752     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
        753     1               #else
        754     1   s    s                CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL ,ISEND,MSGTYP,
        755     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
        756     1               #endif
        757     1               C
        758     1   s    s                NSTART = NSTART+MSGLEN
        759     1   s    s        220 CONTINUE
        760                     C
        761                     C
        762                     C
        763                     C WAIT FOR THE COMPLETION OF ALL THE REQUESTED COMMUNICATIONS
        764                     C
        765                     C
        766                     C
        767                           CALL MPI_WAITALL(2*NDOM,MSGIDS,MSGSTS,IERR)
        768                     C
        769                     C
        770                     C IMPORTANT NOTES!
        771                     C        AFTER A NON-BLOCKING SEND/RECEIVE ROUTINE, SUCH AS 'MPI_ISEND'
        772                     C    OR 'MPI_IRECV', IS CALLED, THE COMMUNICATION REQUEST CREATED BY
        773                     C    THESE ROUTINES MUST BE FREED EITHER BY EXPLICITLY OR IMPLICITLY.
        774                     C   'MPI_REQUEST_FREE' FREES SUCH REQUEST EXPLICITLY, WHILE A ROUTINE
        775                     C    WHICH IDENTIFIES COMPLETION OF THE REQUEST, SUCH AS 'MPI_WAIT',
        776                     C    'MPI_WAITANY', OR 'MPI_WAITALL' IMPLICITLY FREES THE REQUEST.
        777                     C        THIS INTERFACE PROGRAM USES 'MPI_WAITALL' ROUTINES TO FREE SUCH
        778                     C    REQUESTS. PAY PARTICULAR ATTENTION IF YOU WISH TO, INSTEAD, USE
        779                     C   'MPI_REQUEST_FREE', BECAUSE 'MPI_REQUEST_FREE' FREES THE REQUESTS
        780                     C    REGARDLESS OF THE STATE OF THE PREVIOUSLY CALLED COMMUNICATION
        781                     C    ROUTINES, THUS SOMETIMES FREES REQUESTS WHICH HAVE NOT BEEN
        782                     C    COMPLETED.
        783                     C
        784                     C
        785                     C SUPERIMPOSE THE RECEIVED RESIDUALS
        786                     C
        787                     C
        788                     CC    CALL FTRACE_REGION_BEGIN("ddcom3:300-310")
        789                           NSTARTMP = 0
        790     1                     DO IDOM = 1 , NDOM
        791     1               !CDIR NOINNER
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 411
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        792     2  pp    v              DO IBP = 1, NBPDOM(IDOM)
        793     2   p    v                IP = BUFRCV(NSTARTMP+1)+0.1
        794     3   p    v                IF(IP.LT.1 .OR. IP.GT.NP) THEN
        795     3   p    v                  IERR = 1
        796     3   p    v                ENDIF
        797     2   p    v                NSTARTMP = NSTARTMP + 4
        798     2   p    v              ENDDO
        799     1                     ENDDO
        800                     C
        801     1                     IF(IERR .eq. 1) THEN
        802     1                       WRITE(IUT0,*) ERMSGB
        803     1                       WRITE(IUT0,*) EREXP3
        804     1                       RETURN
        805     1                     ENDIF
        806                     C
        807     1                     IF(IDIM .GE. 3) THEN
        808     1               !CDIR LISTVEC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 667
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 192, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      BUFRCV, (unknown)
                              <<< Loop-information  End >>>
        809     2   m   2v                DO NSTART = 0, NSTARTMP-4, 4
        810     2   p   2v                  IP = BUFRCV(NSTART+1)+0.1
        811     2   m   2v                  FX(IP) = FX(IP)+BUFRCV(NSTART+2)
        812     2   s   2s                  FY(IP) = FY(IP)+BUFRCV(NSTART+3)
        813     2   s   2m                  FZ(IP) = FZ(IP)+BUFRCV(NSTART+4)
        814     2   p   2v                ENDDO
        815     1                     ELSE IF(IDIM .GE. 2) THEN
        816     1               !CDIR LISTVEC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 667
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 192, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      BUFRCV, (unknown)
                              <<< Loop-information  End >>>
        817     2   m   2v                DO NSTART = 0, NSTARTMP-4, 4
        818     2   p   2v                  IP = BUFRCV(NSTART+1)+0.1
        819     2   m   2v                  FX(IP) = FX(IP)+BUFRCV(NSTART+2)
        820     2   s   2m                  FY(IP) = FY(IP)+BUFRCV(NSTART+3)
        821     2   p   2v                ENDDO
        822     1                     ELSE
        823     1               !CDIR LISTVEC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 667
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 192, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      BUFRCV, (unknown)
                              <<< Loop-information  End >>>
        824     2   m   2v                DO NSTART = 0, NSTARTMP-4, 4
        825     2   p   2v                  IP = BUFRCV(NSTART+1)+0.1
        826     2   m   2m                  FX(IP) = FX(IP)+BUFRCV(NSTART+2)
        827     2   p   2v                ENDDO
        828     1                     ENDIF
        829                     C
        830                     CC    CALL FTRACE_REGION_END("ddcom3:300-310")
        831                     C
        832                           IPART = IPART
        833                     C
        834                     C
        835                           RETURN
        836                           END

 Diagnostic messages: program name(DDCOM3)
   jwd5131p-i  "dd_mpi.f", line 688: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 688: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 688: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 720: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd6138s-i  "dd_mpi.f", line 720: DO変数をループ中で再定義する可能性があるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 720: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5004p-i  "dd_mpi.f", line 722: リダクション演算を含むDOループを並列化しました。(名前:ITMP)
   jwd6004s-i  "dd_mpi.f", line 722: リダクション演算を含むDOループをSIMD化しました。(名前:ITMP)
   jwd5001p-i  "dd_mpi.f", line 726: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 726: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 726: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 726: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8664o-i  "dd_mpi.f", line 745: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 746: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGTYP)
   jwd6208s-i  "dd_mpi.f", line 746: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGTYP)
   jwd5208p-i  "dd_mpi.f", line 747: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LDOM)
   jwd5208p-i  "dd_mpi.f", line 747: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ISEND)
   jwd6208s-i  "dd_mpi.f", line 747: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:LDOM)
   jwd6208s-i  "dd_mpi.f", line 747: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ISEND)
   jwd5208p-i  "dd_mpi.f", line 748: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NBPDOM)
   jwd5208p-i  "dd_mpi.f", line 748: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGLEN)
   jwd6208s-i  "dd_mpi.f", line 748: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NBPDOM)
   jwd6208s-i  "dd_mpi.f", line 748: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGLEN)
   jwd5202p-i  "dd_mpi.f", line 754: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 754: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGIDS)
   jwd5208p-i  "dd_mpi.f", line 754: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IERR)
   jwd5208p-i  "dd_mpi.f", line 754: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd5122p-i  "dd_mpi.f", line 754: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6202s-i  "dd_mpi.f", line 754: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:NSTART)
   jwd6122s-i  "dd_mpi.f", line 754: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5202p-i  "dd_mpi.f", line 790: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:IERR)
   jwd5202p-i  "dd_mpi.f", line 790: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTARTMP)
   jwd5001p-i  "dd_mpi.f", line 792: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 792: このDOループをSIMD化しました。(名前:IBP)
   jwd5005p-i  "dd_mpi.f", line 809: このDOループを部分的に並列化しました。(名前:NSTART)
   jwd6001s-i  "dd_mpi.f", line 809: このDOループをSIMD化しました。(名前:NSTART)
   jwd6302s-i  "dd_mpi.f", line 809: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 809: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 809: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 811: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5209p-i  "dd_mpi.f", line 812: 配列'FY'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 812: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FX)
   jwd6208s-i  "dd_mpi.f", line 812: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FY)
   jwd5209p-i  "dd_mpi.f", line 813: 配列'FZ'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 813: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FZ)
   jwd5005p-i  "dd_mpi.f", line 817: このDOループを部分的に並列化しました。(名前:NSTART)
   jwd6001s-i  "dd_mpi.f", line 817: このDOループをSIMD化しました。(名前:NSTART)
   jwd6302s-i  "dd_mpi.f", line 817: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 817: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 817: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 819: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5209p-i  "dd_mpi.f", line 820: 配列'FY'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 820: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FX)
   jwd6208s-i  "dd_mpi.f", line 820: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FY)
   jwd5005p-i  "dd_mpi.f", line 824: このDOループを部分的に並列化しました。(名前:NSTART)
   jwd6001s-i  "dd_mpi.f", line 824: このDOループをSIMD化しました。(名前:NSTART)
   jwd6302s-i  "dd_mpi.f", line 824: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 824: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 824: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 826: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 826: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FX)

 Procedure information
   Lines      : 4311
   Statements : 3348
   Stack(byte): 323008
   Prefetch num: 0

 External subroutine subprogram "DDSET0"
  (line-no.)(nest)(optimize)
        837                     C
        838                     C
        839                           SUBROUTINE DDSET0(LPSET1,LPSET3,NPSET,MPT,MDOM,IUT0,
        840                          *                  NSND,LSND,NPTSND,IPSET,IPSRC,
        841                          *                  NRCV,LRCV,NPTRCV,IERR)
        842                           IMPLICIT REAL*4(A-H,O-Z)
        843                           DIMENSION LPSET1(NPSET),LPSET3(NPSET),
        844                          1          LSND(MDOM),NPTSND(MDOM),IPSET(MPT,MDOM),IPSRC(MPT,MDOM),
        845                          2          LRCV(MDOM),NPTRCV(MDOM)
        846                     C
        847                     C
        848                           CHARACTER*60 ERMSGB
        849                          & / ' ## SUBROUTINE DDSET0: FATAL     ERROR OCCURRENCE; RETURNED' /
        850                           CHARACTER*60 EREXP1
        851                          & / ' DIMENSION SIZE OF PASSED LIST ARRAYS IS NOT SUFFICIENT    ' /
        852                     C
        853                     C
        854                     C      SET UP OVERSET SUB-DOMAIN LISTS FOR DOMAIN-DECOMPOSITION
        855                     C     PROGRAMMING MODEL
        856                     C
        857                     C
        858                     C     ARGUMENT LISTINGS
        859                     C       (1) INPUT
        860                     C INT *4   LPSET1  (IB); OVERSET BOUNDARY NODES/ELEMENTS
        861                     C INT *4   LPSET3  (IB); DOMAIN NUMBER TO SEND/RECEIVE OVERSET VALUES
        862                     C                   0 --- CALCULATE AND SET OVERSET VALUE WITHIN THE
        863                     C                         SELF-DOMAIN
        864                     C          (POS. INT.)--- SEND    OVERSET VALUE TO   DOMAIN  LPSET3(IB)
        865                     C                         AFTER CALCULATING IT WITHIN THE SELF-DOMAIN
        866                     C          (NEG. INT.)--- RECEIVE OVERSET VALUE FROM DOMAIN -LPSET3(IB)
        867                     C          NPSET       ; NUMBER OF OVERSET BOUNDARY NODES/ELEMENTS
        868                     C
        869                     C INT *4   MPT              ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
        870                     C                            OF THE PASSED ARRAYS 'IPSET'
        871                     C                            (I.E. THE MAXIMUM NUMBER OF THE OVERSET
        872                     C                             POINTS FOR A SINGLE SUB-DOMAIN)
        873                     C INT *4   MDOM             ; MAX. NUMBER OF THE OVERSET SUB-DOMAINS
        874                     C
        875                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
        876                     C
        877                     C       (2) OUTPUT
        878                     C INT *4   NSND             ; NUMBER OF DOMAINS TO SEND OVERSET VALUE
        879                     C INT *4   LSND      (IDOM) ; DOMAIN NUMBER     TO SEND OVERSET VALUE
        880                     C INT *4   NPTSND    (IDOM) ; NUMBER OF OVERSET POINTS TO SEND TO
        881                     C                            SUB-DOMAIN 'LSND(IDOM)'
        882                     C INT *4   IPSET (IPT,IDOM) ; OVERSET NODE/ELEMENT NUMBER IN THE
        883                     C                            SUB-DOMAIN RECEIVING THE OVERSET VALUES.
        884                     C INT *4   IPSRC (IPT,IDOM) ; INDICATES POSITION IN THE OVERSET-VALUES
        885                     C                            PASSING ARRAYS WHEN OVERSET CONDITIONS DATA
        886                     C                            ARE COMPILED SEQUENTIALLY
        887                     C
        888                     C INT *4   NRCV             ; NUMBER OF DOMAINS TO RECEIVE OVERSET VALUE
        889                     C INT *4   LRCV      (IDOM) ; DOMAIN NUMBER     TO RECEIVE OVERSET VALUE
        890                     C INT *4   NPTRCV    (IDOM) ; NUMBER OF OVERSET POINTS TO RECEIVE FROM
        891                     C                            SUB-DOMAIN 'LRCV(IDOM)'
        892                     C
        893                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
        894                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
        895                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
        896                     C
        897                     C
        898                           IERR = 0
        899                     C
        900                     C
        901                     C
        902                     C SET INITIAL VALUES
        903                     C
        904                     C
        905                     C
        906                           NSND = 0
        907                           NRCV = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NPTRCV, NPTSND
                              <<< Loop-information  End >>>
        908     1  pp   2v            DO 100 IDOM = 1 , MDOM
        909     1   p   2v                NPTSND(IDOM) = 0
        910     1   p   2v                NPTRCV(IDOM) = 0
        911     1   p   2v        100 CONTINUE
        912                     C
        913                     C
        914                     C
        915                     C SET DOMAIN LISTS FOR SEND
        916                     C
        917                     C
        918                     C
        919                           NDUM = 0
        920     1                     DO 230 IBP = 1 , NPSET
        921     1                         IF(LPSET3(IBP).LE.0) GO TO 230
        922     1               C
        923     1                         NDUM = NDUM+1
        924     1               C
        925     1                         IFNEW = LPSET3(IBP)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSND
                              <<< Loop-information  End >>>
        926     2                         DO 210 ICHK = 1 , NSND
        927     3                             IF(LSND(ICHK).EQ.IFNEW) THEN
        928     3                                 IDOM = ICHK
        929     3                                 GO TO 220
        930     3                             ENDIF
        931     2                 210     CONTINUE
        932     1                         NSND = NSND+1
        933     1                         IDOM = NSND
        934     1               C
        935     2                         IF(NSND.GT.MDOM) THEN
        936     2                             WRITE(IUT0,*) ERMSGB
        937     2                             WRITE(IUT0,*) EREXP1
        938     2                             IERR = 1
        939     2                             RETURN
        940     2                         ENDIF
        941     1               C
        942     1                         LSND(NSND) = IFNEW
        943     1               C
        944     1                 220     CONTINUE
        945     1                         NPTSND(IDOM) = NPTSND(IDOM)+1
        946     1               C
        947     2                         IF(NPTSND(IDOM).GT.MPT) THEN
        948     2                             WRITE(IUT0,*) ERMSGB
        949     2                             WRITE(IUT0,*) EREXP1
        950     2                             IERR = 1
        951     2                             RETURN
        952     2                         ENDIF
        953     1               C
        954     1                         IPSET(NPTSND(IDOM),IDOM) = LPSET1(IBP)
        955     1                         IPSRC(NPTSND(IDOM),IDOM) = NDUM
        956     1                 230 CONTINUE
        957                     C
        958                     C
        959                     C
        960                     C SET DOMAIN LISTS FOR RECEIVE
        961                     C
        962                     C
        963                     C
        964     1                     DO 330 IBP = 1 , NPSET
        965     1                         IF(LPSET3(IBP).GE.0) GO TO 330
        966     1                         IFNEW = -LPSET3(IBP)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LRCV
                              <<< Loop-information  End >>>
        967     2                         DO 310 ICHK = 1 , NRCV
        968     3                             IF(LRCV(ICHK).EQ.IFNEW) THEN
        969     3                                 IDOM = ICHK
        970     3                                 GO TO 320
        971     3                             ENDIF
        972     2                 310     CONTINUE
        973     1                         NRCV = NRCV+1
        974     1                         IDOM = NRCV
        975     1               C
        976     2                         IF(NRCV.GT.MDOM) THEN
        977     2                             WRITE(IUT0,*) ERMSGB
        978     2                             WRITE(IUT0,*) EREXP1
        979     2                             IERR = 1
        980     2                             RETURN
        981     2                         ENDIF
        982     1               C
        983     1                         LRCV(NRCV) = IFNEW
        984     1               C
        985     1                 320     CONTINUE
        986     1                         NPTRCV(IDOM) = NPTRCV(IDOM)+1
        987     1                 330 CONTINUE
        988                     C
        989                     C
        990                           RETURN
        991                           END

 Diagnostic messages: program name(DDSET0)
   jwd5001p-i  "dd_mpi.f", line 908: このDOループを並列化しました。(名前:IDOM)
   jwd6001s-i  "dd_mpi.f", line 908: このDOループをSIMD化しました。(名前:IDOM)
   jwd8663o-i  "dd_mpi.f", line 908: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dd_mpi.f", line 908: ループを展開数2回でアンローリングしました。
   jwd5131p-i  "dd_mpi.f", line 920: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5131p-i  "dd_mpi.f", line 926: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 926: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "dd_mpi.f", line 926: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。
   jwd5131p-i  "dd_mpi.f", line 964: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5131p-i  "dd_mpi.f", line 967: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 967: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "dd_mpi.f", line 967: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。

 Procedure information
   Lines      : 155
   Statements : 66
   Stack(byte): 1360
   Prefetch num: 0

 External subroutine subprogram "DDSET3"
  (line-no.)(nest)(optimize)
        992                     C
        993                     C
        994                           SUBROUTINE DDSET3(NSND,LSND,NPTSND,IPSET,IPSRC,VALX,VALY,VALZ,NB,
        995                          *                  NRCV,LRCV,NPTRCV,FX,FY,FZ,NP,
        996                          *                  IDIM,MPT,IUT0,IERR,BUFSND,BUFRCV,MAXBUF)
        997                           IMPLICIT REAL*4(A-H,O-Z)
        998                           DIMENSION LSND(NSND),NPTSND(NSND),IPSET(MPT,NSND),IPSRC(MPT,NSND),
        999                          1          LRCV(NRCV),NPTRCV(NRCV),
       1000                          2          VALX(NB),VALY(NB),VALZ(NB),FX(NP),FY(NP),FZ(NP),
       1001                          3          BUFSND(MAXBUF),BUFRCV(MAXBUF)
       1002                     C
       1003                           INCLUDE 'mpif.h'
       1004                     C
       1005                           PARAMETER ( MAXDOM = 10000 )
       1006                           INTEGER*4 MSGIDS(MAXDOM),MSGSTS(MPI_STATUS_SIZE,MAXDOM)
       1007                     C
       1008                     C
       1009                           CHARACTER*60 ERMSGB
       1010                          & / ' ## SUBROUTINE DDSET3: FATAL     ERROR OCCURRENCE; RETURNED' /
       1011                           CHARACTER*60 EREXP1
       1012                          & / ' DIMENSION SIZE OF INTERNAL      ARRAYS IS NOT SUFFICIENT  ' /
       1013                           CHARACTER*60 EREXP2
       1014                          & / ' DIMENSION SIZE OF PASSED BUFFER ARRAYS IS NOT SUFFICIENT  ' /
       1015                           CHARACTER*60 EREXP3
       1016                          & / ' RECEIVED NODE NUMBER IS OUT OF THE GLOBAL NODE NUMBER     ' /
       1017                     C
       1018                     C
       1019                     C      OVERSET SOME VALUES OF THE PASSED ARRAY ELEMENTS,
       1020                     C     FOR DOMAIN-DECOMPOSITION PROGRAMMING MODEL
       1021                     C
       1022                     C                            ( MPI VERSION )
       1023                     C
       1024                     C
       1025                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
       1026                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
       1027                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
       1028                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
       1029                     C
       1030                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
       1031                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
       1032                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
       1033                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
       1034                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
       1035                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
       1036                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
       1037                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
       1038                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
       1039                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
       1040                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
       1041                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
       1042                     C
       1043                     C
       1044                     C
       1045                     C     ARGUMENT LISTINGS
       1046                     C       (1) INPUT
       1047                     C INT *4   NSND             ; NUMBER OF DOMAINS TO SEND OVERSET VALUE
       1048                     C INT *4   LSND      (IDOM) ; DOMAIN NUMBER     TO SEND OVERSET VALUE
       1049                     C INT *4   NPTSND    (IDOM) ; NUMBER OF OVERSET POINTS TO SEND TO
       1050                     C                            SUB-DOMAIN 'LSND(IDOM)'
       1051                     C INT *4   IPSET (IPT,IDOM) ; OVERSET NODE/ELEMENT NUMBER IN THE
       1052                     C                            SUB-DOMAIN RECEIVING THE OVERSET VALUES.
       1053                     C
       1054                     C INT *4   IPSRC (IPT,IDOM) ; INDICATES POSITION IN THE OVERSET-VALUES
       1055                     C                            PASSING ARRAYS
       1056                     C REAL*4   VALX        (IB) ; X-DIRECTION OVERSET VALUES
       1057                     C REAL*4   VALY        (IB) ; Y-DIRECTION OVERSET VALUES
       1058                     C REAL*4   VALZ        (IB) ; Z-DIRECTION OVERSET VALUES
       1059                     C INT *4   NB               ; TOTAL NUMBER OF OVERSET VALUES TO SEND
       1060                     C
       1061                     C INT *4   NRCV             ; NUMBER OF DOMAINS TO RECEIVE OVERSET VALUE
       1062                     C INT *4   LRCV      (IDOM) ; DOMAIN NUMBER     TO RECEIVE OVERSET VALUE
       1063                     C INT *4   NPTRCV    (IDOM) ; NUMBER OF OVERSET POINTS TO RECEIVE FROM
       1064                     C                            SUB-DOMAIN 'LRCV(IDOM)'
       1065                     C INT *4   NP               ; NUMBER OF THE TOTAL NODES/ELEMENTS IN THE
       1066                     C                            CALLING TASK'S SUB-DOMAIN
       1067                     C
       1068                     C INT *4   IDIM             ; SPACE DIMENSION ( 1, 2, OR 3 )
       1069                     C
       1070                     C INT *4   MPT              ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
       1071                     C                            OF THE PASSED ARRAYS 'IPSET'
       1072                     C                            (I.E. THE MAXIMUM NUMBER OF THE OVERSET
       1073                     C                             POINTS FOR A SINGLE SUB-DOMAIN)
       1074                     C
       1075                     C INT *4   MAXBUF           ; LENGTH OF THE PASSED COMMUNICATION BUFFERS
       1076                     C                            'BUFSND' AND 'BUFRCV' IN WORDS. 'MAXBUF'
       1077                     C                            MUST BE NO SMALLER THAN 4 TIMES THE TOTAL
       1078                     C                            NUMBER OF OVERSET POINTS TO SEND OR RECEIVE
       1079                     C
       1080                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
       1081                     C
       1082                     C       (2) OUTPUT
       1083                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
       1084                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
       1085                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
       1086                     C
       1087                     C       (3) INPUT-OUTPUT
       1088                     C REAL*4   FX          (IP) ; X-DIRECTION ARRAY TO OVERSET
       1089                     C REAL*4   FY          (IP) ; Y-DIRECTION ARRAY TO OVERSET
       1090                     C REAL*4   FZ          (IP) ; Z-DIRECTION ARRAY TO OVERSET
       1091                     C
       1092                     C       (4) WORK
       1093                     C REAL*4   BUFSND(IBUF)     ; HOLDS THE OVERSET VALUES AND OVERSET NODE/
       1094                     C                            ELEMENT NUMBERS IN THE SUB-DOMAIN RECEIVING
       1095                     C                            THEM WHEN SENDING OVERSET VALUES
       1096                     C
       1097                     C REAL*4   BUFRCV(IBUF)     ; HOLDS THE OVERSET VALUES AND OVERSET NODE/
       1098                     C                            ELEMENT NUMBERS IN THE CALLING TASK'S
       1099                     C                            SUB-DOMAIN AT THE RECEIPT OF THE OVERSET
       1100                     C                            VALUES
       1101                     C
       1102                     C
       1103                           IERR = 0
       1104                     C
       1105                     C
       1106                     C
       1107                     C CHECK THE INTERNAL ARRAY SIZE
       1108                     C
       1109                     C
       1110                     C
       1111     1                     IF(NRCV+NSND.GT.MAXDOM) THEN
       1112     1                         WRITE(IUT0,*) ERMSGB
       1113     1                         WRITE(IUT0,*) EREXP1
       1114     1                         IERR = 1
       1115     1                         RETURN
       1116     1                     ENDIF
       1117                     C
       1118                     C
       1119                     C
       1120                     C POST ALL THE EXPECTED RECEIPTS
       1121                     C
       1122                     C
       1123                     C
       1124                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LRCV, NPTRCV
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       1125     1                     DO 110 IDOM = 1 , NRCV
       1126     1                         MSGTYP = 2
       1127     1                         IRECV  = LRCV(IDOM)-1
       1128     1                         MSGLEN = 4*NPTRCV(IDOM)
       1129     1               C
       1130     2                         IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
       1131     2                             WRITE(IUT0,*) ERMSGB
       1132     2                             WRITE(IUT0,*) EREXP2
       1133     2                             IERR = 1
       1134     2                             RETURN
       1135     2                         ENDIF
       1136     1               C
       1137     1               #ifdef PRECEXP
       1138     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL8,IRECV,MSGTYP,
       1139     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       1140     1               #else
       1141     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL ,IRECV,MSGTYP,
       1142     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       1143     1               #endif
       1144     1               C
       1145     1                         NSTART = NSTART+MSGLEN
       1146     1                 110 CONTINUE
       1147                     C
       1148                           CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
       1149                     C
       1150                     C
       1151                     C
       1152                     C SET UP SEND BUFFER AND SEND OVERSET VALUES FOR EACH DOMAIN
       1153                     C
       1154                     C
       1155                     C
       1156                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSRC, IPSET, BUFSND
                              <<< Loop-information  End >>>
       1157     1                     DO 210 IDOM = 1 , NSND
       1158     1                         MSGTYP = 2
       1159     1                         ISEND  = LSND(IDOM)-1
       1160     1                         MSGLEN = 4*NPTSND(IDOM)
       1161     1               C
       1162     2                         IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
       1163     2                             WRITE(IUT0,*) ERMSGB
       1164     2                             WRITE(IUT0,*) EREXP2
       1165     2                             IERR = 1
       1166     2                             RETURN
       1167     2                         ENDIF
       1168     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 327
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.62, ITR: 112, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSRC, IPSET, BUFSND
                              <<< Loop-information  End >>>
       1169     2  pp    v                DO 200 IPT = 1 , NPTSND(IDOM)
       1170     2   p    v                    BUFSND(NSTART+4*(IPT-1)  ) = IPSET(IPT,IDOM)
       1171     2   p    v                    BUFSND(NSTART+4*(IPT-1)+1) = VALX(IPSRC(IPT,IDOM))
       1172     2   p    v                    BUFSND(NSTART+4*(IPT-1)+2) = VALY(IPSRC(IPT,IDOM))
       1173     2   p    v                    BUFSND(NSTART+4*(IPT-1)+3) = VALZ(IPSRC(IPT,IDOM))
       1174     2   p    v        200     CONTINUE
       1175     1               C
       1176     1               #ifdef PRECEXP
       1177     1                         CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL8,ISEND,MSGTYP,
       1178     1                    &                   MPI_COMM_WORLD,MSGIDS(NRCV+IDOM),IERR)
       1179     1               #else
       1180     1                         CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL ,ISEND,MSGTYP,
       1181     1                    &                   MPI_COMM_WORLD,MSGIDS(NRCV+IDOM),IERR)
       1182     1               #endif
       1183     1               C
       1184     1                         NSTART = NSTART+MSGLEN
       1185     1                 210 CONTINUE
       1186                     C
       1187                     C
       1188                     C
       1189                     C WAIT FOR THE COMPLETION OF ALL THE REQUESTED COMMUNICATIONS
       1190                     C
       1191                     C
       1192                     C
       1193                           CALL MPI_WAITALL(NRCV+NSND,MSGIDS,MSGSTS,IERR)
       1194                     C
       1195                     C
       1196                     C IMPORTANT NOTES!
       1197                     C        AFTER A NON-BLOCKING SEND/RECEIVE ROUTINE, SUCH AS 'MPI_ISEND'
       1198                     C    OR 'MPI_IRECV', IS CALLED, THE COMMUNICATION REQUEST CREATED BY
       1199                     C    THESE ROUTINES MUST BE FREED EITHER BY EXPLICITLY OR IMPLICITLY.
       1200                     C   'MPI_REQUEST_FREE' FREES SUCH REQUEST EXPLICITLY, WHILE A ROUTINE
       1201                     C    WHICH IDENTIFIES COMPLETION OF THE REQUEST, SUCH AS 'MPI_WAIT',
       1202                     C    'MPI_WAITANY', OR 'MPI_WAITALL' IMPLICITLY FREES THE REQUEST.
       1203                     C        THIS INTERFACE PROGRAM USES 'MPI_WAITALL' ROUTINES TO FREE SUCH
       1204                     C    REQUESTS. PAY PARTICULAR ATTENTION IF YOU WISH TO, INSTEAD, USE
       1205                     C   'MPI_REQUEST_FREE', BECAUSE 'MPI_REQUEST_FREE' FREES THE REQUESTS
       1206                     C    REGARDLESS OF THE STATE OF THE PREVIOUSLY CALLED COMMUNICATION
       1207                     C    ROUTINES, THUS SOMETIMES FREES REQUESTS WHICH HAVE NOT BEEN
       1208                     C    COMPLETED.
       1209                     C
       1210                     C
       1211                     C OVERSET WITH THE RECEIVED VALUES
       1212                     C
       1213                     C
       1214                     C
       1215                           NSTART = 1
       1216     1                     DO 310 IDOM = 1 , NRCV
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      BUFRCV
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 7
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       1217     2        s                DO 300 IPT = 1 , NPTRCV(IDOM)
       1218     2        m                    IP = BUFRCV(NSTART)+0.1
       1219     2               C
       1220     3        m                    IF(IP.LT.1 .OR. IP.GT.NP) THEN
       1221     3        m                        WRITE(IUT0,*) ERMSGB
       1222     3        s                        WRITE(IUT0,*) EREXP3
       1223     3               CC                IERR = 1
       1224     3               CC                RETURN
       1225     3        v                        GOTO 300
       1226     3        s                    ENDIF
       1227     2               C
       1228     2        m                                  FX(IP) = BUFRCV(NSTART+1)
       1229     2        s                    IF(IDIM.GE.2) FY(IP) = BUFRCV(NSTART+2)
       1230     2        s                    IF(IDIM.GE.3) FZ(IP) = BUFRCV(NSTART+3)
       1231     2        m                    NSTART = NSTART+4
       1232     2        v        300     CONTINUE
       1233     1                 310 CONTINUE
       1234                     C
       1235                     C
       1236                           RETURN
       1237                           END

 Diagnostic messages: program name(DDSET3)
   jwd5131p-i  "dd_mpi.f", line 1125: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 1125: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 1125: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5131p-i  "dd_mpi.f", line 1157: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5001p-i  "dd_mpi.f", line 1169: このDOループを並列化しました。(名前:IPT)
   jwd6001s-i  "dd_mpi.f", line 1169: このDOループをSIMD化しました。(名前:IPT)
   jwd8204o-i  "dd_mpi.f", line 1169: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1169: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5121p-i  "dd_mpi.f", line 1216: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd5228p-i  "dd_mpi.f", line 1217: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "dd_mpi.f", line 1217: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8664o-i  "dd_mpi.f", line 1217: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd6228s-i  "dd_mpi.f", line 1218: データの定義引用の順序が逐次実行と異なる可能性があるため、このDOループはSIMD化できません。
   jwd5121p-i  "dd_mpi.f", line 1221: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "dd_mpi.f", line 1221: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5121p-i  "dd_mpi.f", line 1222: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "dd_mpi.f", line 1222: DOループ内に、SIMD化の制約となる入出力文が存在します。

 Procedure information
   Lines      : 4275
   Statements : 3326
   Stack(byte): 281840
   Prefetch num: 0

 External subroutine subprogram "DDCOMX"
  (line-no.)(nest)(optimize)
       1238                     C
       1239                           SUBROUTINE DDCOMX(IPART,IDIM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       1240                          *                  FX,FY,FZ,NP,IUT0,IERR,BUFSND,BUFRCV,MAXBUF)
       1241                           IMPLICIT REAL*4(A-H,O-Z)
       1242                           DIMENSION LDOM(NDOM),NBPDOM(NDOM),IPSLF(MBPDOM,NDOM),
       1243                          1          IPSND(MBPDOM,NDOM), FX(NP),FY(NP),FZ(NP),
       1244                          2          BUFSND(MAXBUF),BUFRCV(MAXBUF)
       1245                     C
       1246                           INCLUDE 'mpif.h'
       1247                     C
       1248                           PARAMETER ( MAXDOM = 10000 )
       1249                           INTEGER*4 MSGIDS(MAXDOM),MSGSTS(MPI_STATUS_SIZE,MAXDOM)
       1250                     C
       1251                     C
       1252                           CHARACTER*60 ERMSGB
       1253                          & / ' ## SUBROUTINE DDCOMX: FATAL     ERROR OCCURRENCE; RETURNED' /
       1254                           CHARACTER*60 EREXP1
       1255                          & / ' DIMENSION SIZE OF INTERNAL      ARRAYS IS NOT SUFFICIENT  ' /
       1256                           CHARACTER*60 EREXP2
       1257                          & / ' DIMENSION SIZE OF PASSED BUFFER ARRAYS IS NOT SUFFICIENT  ' /
       1258                           CHARACTER*60 EREXP3
       1259                          & / ' RECEIVED NODE NUMBER IS OUT OF THE GLOBAL NODE NUMBER     ' /
       1260                            INTEGER*4 MDATA
       1261                            PARAMETER (MDATA=2000000)
       1262                            INTEGER*4 ISAVE,LSTORE(MDATA),NDUP,LDUP(2,MDATA)
       1263                            DATA ISAVE /0/
       1264                            DATA NDUP  /0/
       1265                            SAVE ISAVE,LSTORE,NDUP,LDUP
       1266                     C
       1267                     C
       1268                     C      EXCHANGE X, Y, AND Z RESIDUALS AMONG THE NEIGHBORING SUB-DOMAINS
       1269                     C     AND SUPERIMPOSE THE EXCHANGED RESIDUALS TO THE CALLING TASK'S
       1270                     C     RESIDUALS, FOR DOMAIN-DECOMPOSITION PROGRAMMING MODEL
       1271                     C
       1272                     C                            ( MPI VERSION )
       1273                     C
       1274                     C
       1275                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
       1276                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
       1277                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
       1278                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
       1279                     C
       1280                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
       1281                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
       1282                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
       1283                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
       1284                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
       1285                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
       1286                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
       1287                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
       1288                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
       1289                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
       1290                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
       1291                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
       1292                     C
       1293                     C
       1294                     C     ARGUMENT LISTINGS
       1295                     C       (1) INPUT
       1296                     C INT *4   IPART       ; SUB-DOMAIN NUMBER THAT THE CALLING TASK IS
       1297                     C                       TAKING CARE OF
       1298                     C           NOTES ; ARGUMENT 'IPART' IS NOT CURRENTLY USED. IT IS
       1299                     C                  RETAINED FOR A POSSIBLE FUTURE USE.
       1300                     C INT *4   IDIM             ; SPACE DIMENSION ( 1, 2, OR 3 )
       1301                     C INT *4   LDOM      (IDOM) ; NEIGHBORING SUB-DOMAIN NUMBER
       1302                     C INT *4   NBPDOM    (IDOM) ; NUMBER OF INTER-CONNECT BOUNDARY NODES
       1303                     C                            SHARING WITH THE IDOM'TH NEIGHBORING
       1304                     C                            SUB-DOMAIN, LDOM(IDOM)
       1305                     C INT *4   NDOM             ; NUMBER OF THE NEIGHBORING SUB-DOMAINS
       1306                     C INT *4   IPSLF (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1307                     C                            CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
       1308                     C                            NEIGHBORING SUB-DOMAIN, LDOM(IDOM)
       1309                     C INT *4   IPSND (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1310                     C                            SUB-DOMAIN THAT IS RECEIVING THE CALLING
       1311                     C                            TASK'S RESIDUALS.
       1312                     C INT *4   MBPDOM           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
       1313                     C                            OF THE PASSED ARRAYS 'IPSLF' AND 'IPSND'
       1314                     C                            (I.E. THE MAXIMUM NUMBER OF THE
       1315                     C                             INTER-CONNECT BOUNDARY NODES FOR A
       1316                     C                             NEIGHBORING SUB-DOMAIN)
       1317                     C INT *4   NP               ; NUMBER OF THE TOTAL NODES IN THE CALLING
       1318                     C                            TASK'S SUB-DOMAIN
       1319                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
       1320                     C INT *4   MAXBUF           ; LENGTH OF THE PASSED COMMUNICATION BUFFERS
       1321                     C                            'BUFSND' AND 'BUFRCV' IN WORDS. 'MAXBUF'
       1322                     C                             MUST BE NO SMALLER THAN 4 TIMES THE TOTAL
       1323                     C                             NUMBER OF INTER-CONNECT BOUNDARY NODES IN
       1324                     C                             THE CALLING TASK
       1325                     C
       1326                     C       (2) OUTPUT
       1327                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
       1328                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
       1329                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
       1330                     C
       1331                     C       (3) INPUT-OUTPUT
       1332                     C REAL*4   FX(IP)           ; X-DIRECTION RESIDUAL VECTOR
       1333                     C REAL*4   FY(IP)           ; Y-DIRECTION RESIDUAL VECTOR
       1334                     C REAL*4   FZ(IP)           ; Z-DIRECTION RESIDUAL VECTOR
       1335                     C
       1336                     C       (4) WORK
       1337                     C REAL*4   BUFSND(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
       1338                     C                            BOUNDARY NODE NUMBER IN THE NEIGHBORING
       1339                     C                            SUB-DOMAINS AND THE RESIDUALS OF THE
       1340                     C                            CALLING TASK'S SUB-DOMAIN WHEN SENDING
       1341                     C                            THE RESIDUALS
       1342                     C
       1343                     C REAL*4   BUFRCV(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
       1344                     C                            BOUNDARY NODE NUMBER IN THE CALLING TASK'S
       1345                     C                            SUB-DOMAIN AND THE RESIDUALS OF THE
       1346                     C                            NEIGHBORING SUB-DOMAINS AT THE RECEIPT OF
       1347                     C                            THE RESIDUALS FROM THE NEIGHBORING
       1348                     C                            SUB-DOMAINS
       1349                           IERR = 0
       1350                     
       1351     1                     IF(IDIM.EQ.0) THEN
       1352     1                         NSKIP=1
       1353     1                     ELSE IF(IDIM.EQ.1) THEN
       1354     1                         NSKIP=1
       1355     1                     ELSE IF(IDIM.EQ.2) THEN
       1356     1                         NSKIP=2
       1357     1                     ELSE IF(IDIM.EQ.3) THEN
       1358     1                         NSKIP=3
       1359     1                     ELSE
       1360     1                         WRITE(IUT0,*) EREXP1
       1361     1                         IERR = 1
       1362     1                         RETURN
       1363     1                     ENDIF
       1364                     C
       1365                     C
       1366                     C CHECK THE INTERNAL ARRAY SIZE
       1367                     C
       1368                     C
       1369                     C
       1370     1                     IF(2*NDOM.GT.MAXDOM) THEN
       1371     1                         WRITE(IUT0,*) ERMSGB
       1372     1                         WRITE(IUT0,*) EREXP1
       1373     1                         IERR = 1
       1374     1                         RETURN
       1375     1                     ENDIF
       1376                     C
       1377                     C
       1378                     C
       1379                     C POST ALL THE EXPECTED RECEIVES
       1380                     C
       1381                     C
       1382                     C
       1383                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 6
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       1384     1                     DO 110 IDOM = 1 , NDOM
       1385     1                         MSGTYP = 1
       1386     1                         IRECV  = LDOM(IDOM)-1
       1387     1                         MSGLEN = NSKIP*NBPDOM(IDOM)
       1388     1               C
       1389     2                         IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
       1390     2                             WRITE(IUT0,*) ERMSGB
       1391     2                             WRITE(IUT0,*) EREXP2
       1392     2                             IERR = 1
       1393     2                             RETURN
       1394     2                         ENDIF
       1395     1               C
       1396     1               #ifdef PRECEXP
       1397     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL8,IRECV,MSGTYP,
       1398     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       1399     1               #else
       1400     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL ,IRECV,MSGTYP,
       1401     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       1402     1               #endif
       1403     1               C
       1404     1                         NSTART = NSTART+MSGLEN
       1405     1                 110 CONTINUE
       1406                     C
       1407                     !      CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
       1408                     C
       1409                     C
       1410                     C
       1411                     C SET UP THE SEND BUFFER
       1412                     C
       1413                     C
       1414                     CC    CALL FTRACE_REGION_BEGIN("ddcom3:200-210")
       1415                     !CDIR PARALLEL DO PRIVATE(NSTART,IP,IPS)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND, IPSLF
                              <<< Loop-information  End >>>
       1416     1                     DO 210 IDOM = 1 , NDOM
       1417     1                        NSTART  = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1600
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       1418     2  pp    v               DO 205 ITMP = 2 , IDOM
       1419     2   p    v                  NSTART = NSTART + NBPDOM(ITMP-1)*NSKIP
       1420     2   p    v       205     CONTINUE
       1421     1               !CDIR NOINNER
       1422     2                        IF(IDIM.EQ.0) THEN
       1423     2               !ocl norecurrence(BUFSND)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 640
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.25, ITR: 320, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1424     3  pp   2v                  DO IBP=1,NBPDOM(IDOM)
       1425     3   p   2v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1426     3   p   2v                     IP      = IPSLF(IBP,IDOM)
       1427     3   p   2v                     IPS     = IPSND(IBP,IDOM)
       1428     3   p   2v                     BUFSND(NSTART2+1) = IPS
       1429     3   p   2v                  ENDDO
       1430     2                        ELSE IF(IDIM.EQ.1) THEN
       1431     2               !ocl norecurrence(BUFSND)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 696
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 320, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF
                              <<< Loop-information  End >>>
       1432     3  pp   2v                  DO IBP=1,NBPDOM(IDOM)
       1433     3   p   2v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1434     3   p   2v                     IP      = IPSLF(IBP,IDOM)
       1435     3   p   2v                     BUFSND(NSTART2+1) = FX(IP)
       1436     3   p   2v                  ENDDO
       1437     2                        ELSE IF(IDIM.EQ.2) THEN
       1438     2               !ocl norecurrence(BUFSND)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.62, ITR: 288, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF
                              <<< Loop-information  End >>>
       1439     3  pp   2v                  DO IBP=1,NBPDOM(IDOM)
       1440     3   p   2v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1441     3   p   2v                     IP      = IPSLF(IBP,IDOM)
       1442     3   p   2v                     BUFSND(NSTART2+1) = FX(IP)
       1443     3   p   2v                     BUFSND(NSTART2+2) = FY(IP)
       1444     3   p   2v                  ENDDO
       1445     2                        ELSE IF(IDIM.EQ.3) THEN
       1446     2               !ocl norecurrence(BUFSND)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 458
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.41, ITR: 192, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF
                              <<< Loop-information  End >>>
       1447     3  pp   2v                  DO IBP=1,NBPDOM(IDOM)
       1448     3   p   2v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1449     3   p   2v                     IP      = IPSLF(IBP,IDOM)
       1450     3   p   2v                     BUFSND(NSTART2+1) = FX(IP)
       1451     3   p   2v                     BUFSND(NSTART2+2) = FY(IP)
       1452     3   p   2v                     BUFSND(NSTART2+3) = FZ(IP)
       1453     3   p   2v                  ENDDO
       1454     2                        ENDIF
       1455     1                210  CONTINUE
       1456                     C
       1457                     C
       1458                     C
       1459                     C SEND THE RESIDUALS
       1460                     C
       1461                     C
       1462                     C
       1463                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 4
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       1464     1   s    s            DO 220 IDOM = 1 , NDOM
       1465     1   s    s                MSGTYP = 1
       1466     1   s    s                ISEND  = LDOM(IDOM)-1
       1467     1   s    s                MSGLEN = NSKIP*NBPDOM(IDOM)
       1468     1               
       1469     1               #ifdef PRECEXP
       1470     1                         CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL8,ISEND,MSGTYP,
       1471     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
       1472     1               #else
       1473     1   s    s                CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL ,ISEND,MSGTYP,
       1474     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
       1475     1               #endif
       1476     1               C
       1477     1   s    s                NSTART = NSTART+MSGLEN
       1478     1   s    s        220 CONTINUE
       1479                     C
       1480                     C
       1481                     C
       1482                     C WAIT FOR THE COMPLETION OF ALL THE REQUESTED COMMUNICATIONS
       1483                     C
       1484                     C
       1485                     C
       1486                           CALL MPI_WAITALL(2*NDOM,MSGIDS,MSGSTS,IERR)
       1487                     C
       1488                     C
       1489                     C IMPORTANT NOTES!
       1490                     C        AFTER A NON-BLOCKING SEND/RECEIVE ROUTINE, SUCH AS 'MPI_ISEND'
       1491                     C    OR 'MPI_IRECV', IS CALLED, THE COMMUNICATION REQUEST CREATED BY
       1492                     C    THESE ROUTINES MUST BE FREED EITHER BY EXPLICITLY OR IMPLICITLY.
       1493                     C   'MPI_REQUEST_FREE' FREES SUCH REQUEST EXPLICITLY, WHILE A ROUTINE
       1494                     C    WHICH IDENTIFIES COMPLETION OF THE REQUEST, SUCH AS 'MPI_WAIT',
       1495                     C    'MPI_WAITANY', OR 'MPI_WAITALL' IMPLICITLY FREES THE REQUEST.
       1496                     C        THIS INTERFACE PROGRAM USES 'MPI_WAITALL' ROUTINES TO FREE SUCH
       1497                     C    REQUESTS. PAY PARTICULAR ATTENTION IF YOU WISH TO, INSTEAD, USE
       1498                     C   'MPI_REQUEST_FREE', BECAUSE 'MPI_REQUEST_FREE' FREES THE REQUESTS
       1499                     C    REGARDLESS OF THE STATE OF THE PREVIOUSLY CALLED COMMUNICATION
       1500                     C    ROUTINES, THUS SOMETIMES FREES REQUESTS WHICH HAVE NOT BEEN
       1501                     C    COMPLETED.
       1502                     C
       1503                     CCTTDEBG
       1504     1                     IF(ISAVE.EQ.0 .AND. IDIM.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSTORE
                              <<< Loop-information  End >>>
       1505     2  pp   4v                DO IP = 1, NP
       1506     2   p   4v                    LSTORE(IP)=0
       1507     2   p   4v                ENDDO
       1508     1               C
       1509     1                         NSTART = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1510     2                         DO IDOM = 1 , NDOM
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 0.58, ITR: 6, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1511     3   s   2s                    DO IBP = 1, NBPDOM(IDOM)
       1512     3   p   2v                        IP = IPSND(IBP,IDOM)
       1513     3   p   2v                        NSTART2   = NSTART + NSKIP * (IBP-1)
       1514     3   m   2m                        LSTORE(IP)=LSTORE(IP)+1
       1515     3   p   2v                    ENDDO
       1516     2                             NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       1517     2                         ENDDO
       1518     1               C
       1519     1                         NSTART = 0
       1520     1                         NDUP   = 0
       1521     2                         DO IDOM = 1 , NDOM
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1522     3       2s                    DO IBP = 1, NBPDOM(IDOM)
       1523     3       2v                        IP = IPSND(IBP,IDOM)
       1524     3       2v                        NSTART2   = NSTART + NSKIP * (IBP-1)
       1525     4       2v                        IF(LSTORE(IP).GE.2) THEN
       1526     4       2m                            NDUP=NDUP+1
       1527     4       2s                            LDUP(1,NDUP)=IP
       1528     4       2s                            LDUP(2,NDUP)=NSTART2+1
       1529     4       2v                        ENDIF
       1530     3       2v                    ENDDO
       1531     2                             NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       1532     2                         ENDDO
       1533     1                         ISAVE=1
       1534     1                     ENDIF
       1535                     CCTTDEBG END
       1536                     C
       1537                     C SUPERIMPOSE THE RECEIVED RESIDUALS
       1538                     C
       1539                     C
       1540                           NSTART = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1541     1                     DO IDOM = 1 , NDOM
       1542     2                        IF(IDIM .EQ. 0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 616
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.75, ITR: 576, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1543     3  pp   2v                  DO IBP = 1, NBPDOM(IDOM)
       1544     3   p   2v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1545     3   p   2v                     IPSND(IBP,IDOM)=BUFRCV(NSTART2+1)+0.1
       1546     3   p   2v                  ENDDO
       1547     2                           NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       1548     2               
       1549     2                        ELSE IF(IDIM .EQ. 1) THEN
       1550     2               !ocl norecurrence(FX)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 302
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       1551     3  pp    v                  DO IBP = 1, NBPDOM(IDOM)
       1552     3   p    v                     IP = IPSND(IBP,IDOM)
       1553     4   p    v                     IF(IP.LT.1 .OR. IP.GT.NP) THEN
       1554     4   p    v                        IERR = 1
       1555     4   p    v                     ENDIF
       1556     3   p    v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1557     3   p                          IF(LSTORE(IP).EQ.1)
       1558     3                    *         FX(IP) = FX(IP) + BUFRCV(NSTART2+1)
       1559     3   p    v                  ENDDO
       1560     2                           NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       1561     2               C
       1562     3                           DO I=1,NDUP
       1563     3                               IP=LDUP(1,I)
       1564     3                               J =LDUP(2,I)
       1565     3               C               FX(IP)=FX(IP)+BUFRCV(J)
       1566     3                           ENDDO
       1567     2               C
       1568     2               
       1569     2                        ELSE IF(IDIM .EQ. 2) THEN
       1570     2               !!ocl norecurrence(FX,FY)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 445
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       1571     3   m    v                  DO IBP = 1, NBPDOM(IDOM)
       1572     3   p    v                     IP = IPSND(IBP,IDOM)
       1573     4   p    v                     IF(IP.LT.1 .OR. IP.GT.NP) THEN
       1574     4   p    v                        IERR = 1
       1575     4   p    v                     ENDIF
       1576     3   p    v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1577     3   m    v                     FX(IP) = FX(IP) + BUFRCV(NSTART2+1)
       1578     3   s    m                     FY(IP) = FY(IP) + BUFRCV(NSTART2+2)
       1579     3   p    v                  ENDDO
       1580     2                           NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       1581     2               
       1582     2                        ELSE IF(IDIM .EQ. 3) THEN
       1583     2               !!ocl norecurrence(FX,FY,FZ)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 445
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       1584     3   m    v                  DO IBP = 1, NBPDOM(IDOM)
       1585     3   p    v                     IP = IPSND(IBP,IDOM)
       1586     4   p    v                     IF(IP.LT.1 .OR. IP.GT.NP) THEN
       1587     4   p    v                        IERR = 1
       1588     4   p    v                     ENDIF
       1589     3   p    v                     NSTART2 = NSTART + NSKIP * (IBP-1)
       1590     3   m    v                     FX(IP) = FX(IP) + BUFRCV(NSTART2+1)
       1591     3   s    s                     FY(IP) = FY(IP) + BUFRCV(NSTART2+2)
       1592     3   s    m                     FZ(IP) = FZ(IP) + BUFRCV(NSTART2+3)
       1593     3   p    v                  ENDDO
       1594     2                           NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       1595     2                        ENDIF
       1596     1               C
       1597     1               C          IF(IDIM.EQ.1) THEN
       1598     1               C            FX(IP) = FX(IP)+BUFRCV(NSTART+1)
       1599     1               C          ELSE IF(IDIM .EQ. 2) THEN
       1600     1               C            FX(IP) = FX(IP)+BUFRCV(NSTART+1)
       1601     1               C            FY(IP) = FY(IP)+BUFRCV(NSTART+2)
       1602     1               C          ELSE IF(IDIM .EQ. 3) THEN
       1603     1               C            FX(IP) = FX(IP)+BUFRCV(NSTART+1)
       1604     1               C            FY(IP) = FY(IP)+BUFRCV(NSTART+2)
       1605     1               C            FZ(IP) = FZ(IP)+BUFRCV(NSTART+3)
       1606     1               C          ENDIF
       1607     1                     ENDDO
       1608                     C
       1609     1                     IF(IDIM.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 0.41, ITR: 6, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDUP
                              <<< Loop-information  End >>>
       1610     2   s   2s                DO I=1,NDUP
       1611     2   p   2v                    IP=LDUP(1,I)
       1612     2   p   2v                    J =LDUP(2,I)
       1613     2   m   2m                    FX(IP)=FX(IP)+BUFRCV(J)
       1614     2   p   2v                ENDDO
       1615     1                     ENDIF
       1616                     C
       1617     1                     IF(IERR .eq. 1) THEN
       1618     1                       WRITE(IUT0,*) ERMSGB
       1619     1                       WRITE(IUT0,*) EREXP3
       1620     1                       RETURN
       1621     1                     ENDIF
       1622                     C
       1623                     C     IPART = IPART
       1624                           RETURN
       1625                           END

 Diagnostic messages: program name(DDCOMX)
   jwd2008i-i  "dd_mpi.f", line 1239: この仮引数'IPART'は、副プログラム中で使用されていません。
   jwd5131p-i  "dd_mpi.f", line 1384: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 1384: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 1384: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 1416: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd5004p-i  "dd_mpi.f", line 1418: リダクション演算を含むDOループを並列化しました。(名前:ITMP)
   jwd6004s-i  "dd_mpi.f", line 1418: リダクション演算を含むDOループをSIMD化しました。(名前:ITMP)
   jwd5001p-i  "dd_mpi.f", line 1424: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1424: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 1424: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1424: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "dd_mpi.f", line 1432: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1432: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 1432: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1432: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "dd_mpi.f", line 1439: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1439: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 1439: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1439: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "dd_mpi.f", line 1447: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1447: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 1447: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1447: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8664o-i  "dd_mpi.f", line 1464: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 1465: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGTYP)
   jwd6208s-i  "dd_mpi.f", line 1465: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGTYP)
   jwd5208p-i  "dd_mpi.f", line 1466: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LDOM)
   jwd5208p-i  "dd_mpi.f", line 1466: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ISEND)
   jwd6208s-i  "dd_mpi.f", line 1466: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:LDOM)
   jwd6208s-i  "dd_mpi.f", line 1466: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ISEND)
   jwd5208p-i  "dd_mpi.f", line 1467: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NBPDOM)
   jwd5208p-i  "dd_mpi.f", line 1467: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGLEN)
   jwd6208s-i  "dd_mpi.f", line 1467: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NBPDOM)
   jwd6208s-i  "dd_mpi.f", line 1467: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGLEN)
   jwd5202p-i  "dd_mpi.f", line 1473: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 1473: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGIDS)
   jwd5208p-i  "dd_mpi.f", line 1473: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IERR)
   jwd5208p-i  "dd_mpi.f", line 1473: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd5122p-i  "dd_mpi.f", line 1473: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6202s-i  "dd_mpi.f", line 1473: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:NSTART)
   jwd6122s-i  "dd_mpi.f", line 1473: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5001p-i  "dd_mpi.f", line 1505: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dd_mpi.f", line 1505: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dd_mpi.f", line 1505: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dd_mpi.f", line 1505: ループを展開数4回でアンローリングしました。
   jwd5202p-i  "dd_mpi.f", line 1510: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 1510: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LSTORE)
   jwd6302s-i  "dd_mpi.f", line 1511: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 1511: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1511: ループの繰返し数が6回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 1514: 配列'LSTORE'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6209s-i  "dd_mpi.f", line 1514: 配列'LSTORE'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。
   jwd5202p-i  "dd_mpi.f", line 1521: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NDUP)
   jwd5202p-i  "dd_mpi.f", line 1521: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 1521: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LDUP)
   jwd5228p-i  "dd_mpi.f", line 1522: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd5208p-i  "dd_mpi.f", line 1522: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NDUP)
   jwd6229s-i  "dd_mpi.f", line 1522: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "dd_mpi.f", line 1522: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "dd_mpi.f", line 1522: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "dd_mpi.f", line 1543: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1543: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 1543: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1543: ループの繰返し数が576回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "dd_mpi.f", line 1551: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1551: このDOループをSIMD化しました。(名前:IBP)
   jwd5005p-i  "dd_mpi.f", line 1571: このDOループを部分的に並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1571: このDOループをSIMD化しました。(名前:IBP)
   jwd6302s-i  "dd_mpi.f", line 1571: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd5209p-i  "dd_mpi.f", line 1577: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5209p-i  "dd_mpi.f", line 1578: 配列'FY'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 1578: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FX)
   jwd6208s-i  "dd_mpi.f", line 1578: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FY)
   jwd5005p-i  "dd_mpi.f", line 1584: このDOループを部分的に並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 1584: このDOループをSIMD化しました。(名前:IBP)
   jwd6302s-i  "dd_mpi.f", line 1584: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd5209p-i  "dd_mpi.f", line 1590: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5209p-i  "dd_mpi.f", line 1591: 配列'FY'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 1591: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FX)
   jwd6208s-i  "dd_mpi.f", line 1591: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FY)
   jwd5209p-i  "dd_mpi.f", line 1592: 配列'FZ'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 1592: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FZ)
   jwd6302s-i  "dd_mpi.f", line 1610: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 1610: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1610: ループの繰返し数が6回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 1613: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6209s-i  "dd_mpi.f", line 1613: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。

 Procedure information
   Lines      : 4417
   Statements : 3440
   Stack(byte): 378368
   Prefetch num: 0

 External subroutine subprogram "DDCMAX"
  (line-no.)(nest)(optimize)
       1626                     C
       1627                     CCTT SUBROUTINE DDCOMX END
       1628                     C
       1629                     CCTT SUBROUTINE DDCMAX BEGIN
       1630                     C
       1631                           SUBROUTINE DDCMAX(IPART,IDIM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       1632                          *                  FX,FY,FZ,NP,IUT0,IERR,BUFSND,BUFRCV,MAXBUF)
       1633                           IMPLICIT REAL*4(A-H,O-Z)
       1634                           DIMENSION LDOM(NDOM),NBPDOM(NDOM),IPSLF(MBPDOM,NDOM),
       1635                          1          IPSND(MBPDOM,NDOM), FX(NP),FY(NP),FZ(NP),
       1636                          2          BUFSND(MAXBUF),BUFRCV(MAXBUF)
       1637                     C
       1638                           INCLUDE 'mpif.h'
       1639                     C
       1640                           PARAMETER ( MAXDOM = 10000 )
       1641                           INTEGER*4 MSGIDS(MAXDOM),MSGSTS(MPI_STATUS_SIZE,MAXDOM)
       1642                     C
       1643                     C
       1644                           CHARACTER*60 ERMSGB
       1645                          & / ' ## SUBROUTINE DDCOMX: FATAL     ERROR OCCURRENCE; RETURNED' /
       1646                           CHARACTER*60 EREXP1
       1647                          & / ' DIMENSION SIZE OF INTERNAL      ARRAYS IS NOT SUFFICIENT  ' /
       1648                           CHARACTER*60 EREXP2
       1649                          & / ' DIMENSION SIZE OF PASSED BUFFER ARRAYS IS NOT SUFFICIENT  ' /
       1650                           CHARACTER*60 EREXP3
       1651                          & / ' RECEIVED NODE NUMBER IS OUT OF THE GLOBAL NODE NUMBER     ' /
       1652                     C
       1653                     C
       1654                     C      EXCHANGE X, Y, AND Z RESIDUALS AMONG THE NEIGHBORING SUB-DOMAINS
       1655                     C     AND TAKE THE MAXIMUM VALUE OF THE EXCHANGED RESIDUALS TO THE CALLING
       1656                     C     TASK'S RESIDUALS, FOR DOMAIN-DECOMPOSITION PROGRAMMING MODEL
       1657                     C
       1658                     C                            ( MPI VERSION )
       1659                     C
       1660                     C
       1661                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
       1662                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
       1663                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
       1664                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
       1665                     C
       1666                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
       1667                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
       1668                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
       1669                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
       1670                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
       1671                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
       1672                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
       1673                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
       1674                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
       1675                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
       1676                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
       1677                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
       1678                     C
       1679                     C
       1680                     C     ARGUMENT LISTINGS
       1681                     C       (1) INPUT
       1682                     C INT *4   IPART       ; SUB-DOMAIN NUMBER THAT THE CALLING TASK IS
       1683                     C                       TAKING CARE OF
       1684                     C           NOTES ; ARGUMENT 'IPART' IS NOT CURRENTLY USED. IT IS
       1685                     C                  RETAINED FOR A POSSIBLE FUTURE USE.
       1686                     C INT *4   IDIM             ; SPACE DIMENSION ( 1, 2, OR 3 )
       1687                     C INT *4   LDOM      (IDOM) ; NEIGHBORING SUB-DOMAIN NUMBER
       1688                     C INT *4   NBPDOM    (IDOM) ; NUMBER OF INTER-CONNECT BOUNDARY NODES
       1689                     C                            SHARING WITH THE IDOM'TH NEIGHBORING
       1690                     C                            SUB-DOMAIN, LDOM(IDOM)
       1691                     C INT *4   NDOM             ; NUMBER OF THE NEIGHBORING SUB-DOMAINS
       1692                     C INT *4   IPSLF (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1693                     C                            CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
       1694                     C                            NEIGHBORING SUB-DOMAIN, LDOM(IDOM)
       1695                     C INT *4   IPSND (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1696                     C                            SUB-DOMAIN THAT IS RECEIVING THE CALLING
       1697                     C                            TASK'S RESIDUALS.
       1698                     C INT *4   MBPDOM           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
       1699                     C                            OF THE PASSED ARRAYS 'IPSLF' AND 'IPSND'
       1700                     C                            (I.E. THE MAXIMUM NUMBER OF THE
       1701                     C                             INTER-CONNECT BOUNDARY NODES FOR A
       1702                     C                             NEIGHBORING SUB-DOMAIN)
       1703                     C INT *4   NP               ; NUMBER OF THE TOTAL NODES IN THE CALLING
       1704                     C                            TASK'S SUB-DOMAIN
       1705                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
       1706                     C INT *4   MAXBUF           ; LENGTH OF THE PASSED COMMUNICATION BUFFERS
       1707                     C                            'BUFSND' AND 'BUFRCV' IN WORDS. 'MAXBUF'
       1708                     C                             MUST BE NO SMALLER THAN 4 TIMES THE TOTAL
       1709                     C                             NUMBER OF INTER-CONNECT BOUNDARY NODES IN
       1710                     C                             THE CALLING TASK
       1711                     C
       1712                     C       (2) OUTPUT
       1713                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
       1714                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
       1715                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
       1716                     C
       1717                     C       (3) INPUT-OUTPUT
       1718                     C REAL*4   FX(IP)           ; X-DIRECTION RESIDUAL VECTOR
       1719                     C REAL*4   FY(IP)           ; Y-DIRECTION RESIDUAL VECTOR
       1720                     C REAL*4   FZ(IP)           ; Z-DIRECTION RESIDUAL VECTOR
       1721                     C
       1722                     C       (4) WORK
       1723                     C REAL*4   BUFSND(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
       1724                     C                            BOUNDARY NODE NUMBER IN THE NEIGHBORING
       1725                     C                            SUB-DOMAINS AND THE RESIDUALS OF THE
       1726                     C                            CALLING TASK'S SUB-DOMAIN WHEN SENDING
       1727                     C                            THE RESIDUALS
       1728                     C
       1729                     C REAL*4   BUFRCV(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
       1730                     C                            BOUNDARY NODE NUMBER IN THE CALLING TASK'S
       1731                     C                            SUB-DOMAIN AND THE RESIDUALS OF THE
       1732                     C                            NEIGHBORING SUB-DOMAINS AT THE RECEIPT OF
       1733                     C                            THE RESIDUALS FROM THE NEIGHBORING
       1734                     C                            SUB-DOMAINS
       1735                     C
       1736                     C
       1737                           IERR = 0
       1738                     C
       1739     1                     IF(IDIM.EQ.0) THEN
       1740     1                         NSKIP=1
       1741     1                     ELSE IF(IDIM.EQ.1) THEN
       1742     1                         NSKIP=1
       1743     1                     ELSE IF(IDIM.EQ.2) THEN
       1744     1                         NSKIP=2
       1745     1                     ELSE IF(IDIM.EQ.3) THEN
       1746     1                         NSKIP=3
       1747     1                     ELSE
       1748     1                         WRITE(IUT0,*) EREXP1
       1749     1                         IERR = 1
       1750     1                         RETURN
       1751     1                     ENDIF
       1752                     C
       1753                     C
       1754                     C CHECK THE INTERNAL ARRAY SIZE
       1755                     C
       1756                     C
       1757                     C
       1758     1                     IF(2*NDOM.GT.MAXDOM) THEN
       1759     1                         WRITE(IUT0,*) ERMSGB
       1760     1                         WRITE(IUT0,*) EREXP1
       1761     1                         IERR = 1
       1762     1                         RETURN
       1763     1                     ENDIF
       1764                     C
       1765                     C
       1766                     C
       1767                     C POST ALL THE EXPECTED RECEIVES
       1768                     C
       1769                     C
       1770                     C
       1771                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 3  FILL 9
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       1772     1                     DO 110 IDOM = 1 , NDOM
       1773     1                         MSGTYP = 1
       1774     1                         IRECV  = LDOM(IDOM)-1
       1775     1                         MSGLEN = NSKIP*NBPDOM(IDOM)
       1776     1               C
       1777     2                         IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
       1778     2                             WRITE(IUT0,*) ERMSGB
       1779     2                             WRITE(IUT0,*) EREXP2
       1780     2                             IERR = 1
       1781     2                             RETURN
       1782     2                         ENDIF
       1783     1               C
       1784     1               #ifdef PRECEXP
       1785     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL8,IRECV,MSGTYP,
       1786     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       1787     1               #else
       1788     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL ,IRECV,MSGTYP,
       1789     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       1790     1               #endif
       1791     1               C
       1792     1                         NSTART = NSTART+MSGLEN
       1793     1                 110 CONTINUE
       1794                     C
       1795                     !      CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
       1796                     C
       1797                     C
       1798                     C
       1799                     C SET UP THE SEND BUFFER
       1800                     C
       1801                     C
       1802                     CC    CALL FTRACE_REGION_BEGIN("ddcom3:200-210")
       1803                     !CDIR PARALLEL DO PRIVATE(NSTART,IP,IPS)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    UNSWITCHING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF
                              <<< Loop-information  End >>>
       1804     1                     DO 210 IDOM = 1 , NDOM
       1805     1                         NSTART  = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1600
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       1806     2  pp    v                DO 205 ITMP = 2 , IDOM
       1807     2   p    v                    NSTART = NSTART + NBPDOM(ITMP-1)*NSKIP
       1808     2   p    v        205     CONTINUE
       1809     1               !CDIR NOINNER
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 320, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND, IPSLF
                              <<< Loop-information  End >>>
       1810     2   s   2v                DO 200 IBP = 1 , NBPDOM(IDOM)
       1811     2   p   2v                    IP  = IPSLF(IBP,IDOM)
       1812     3   p   2v                    IF(IDIM.EQ.0) THEN
       1813     3   p   2v                        IPS = IPSND(IBP,IDOM)
       1814     3   m   2v                        BUFSND(NSTART+1) = IPS
       1815     3       2v                    ELSE IF(IDIM.EQ.1) THEN
       1816     3   m   2v                        BUFSND(NSTART+1) = FX(IP)
       1817     3   p   2v                    ELSE IF(IDIM.EQ.2) THEN
       1818     3   m   2m                        BUFSND(NSTART+1) = FX(IP)
       1819     3   s   2s                        BUFSND(NSTART+2) = FY(IP)
       1820     3   p   2v                    ELSE IF(IDIM.EQ.3) THEN
       1821     3   m   2m                        BUFSND(NSTART+1) = FX(IP)
       1822     3   s   2s                        BUFSND(NSTART+2) = FY(IP)
       1823     3   m   2m                        BUFSND(NSTART+3) = FZ(IP)
       1824     3   p   2v                    ENDIF
       1825     2   p   2v                    NSTART = NSTART + NSKIP
       1826     2   p   2v        200     CONTINUE
       1827     1                 210 CONTINUE
       1828                     C
       1829                     C
       1830                     C
       1831                     C SEND THE RESIDUALS
       1832                     C
       1833                     C
       1834                     C
       1835                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 2  FILL 6
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       1836     1   s    s            DO 220 IDOM = 1 , NDOM
       1837     1   s    s                MSGTYP = 1
       1838     1   s    s                ISEND  = LDOM(IDOM)-1
       1839     1   s    s                MSGLEN = NSKIP*NBPDOM(IDOM)
       1840     1               
       1841     1               #ifdef PRECEXP
       1842     1                         CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL8,ISEND,MSGTYP,
       1843     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
       1844     1               #else
       1845     1   s    s                CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL ,ISEND,MSGTYP,
       1846     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
       1847     1               #endif
       1848     1               C
       1849     1   s    s                NSTART = NSTART+MSGLEN
       1850     1   s    s        220 CONTINUE
       1851                     C
       1852                     C
       1853                     C
       1854                     C WAIT FOR THE COMPLETION OF ALL THE REQUESTED COMMUNICATIONS
       1855                     C
       1856                     C
       1857                     C
       1858                           CALL MPI_WAITALL(2*NDOM,MSGIDS,MSGSTS,IERR)
       1859                     C
       1860                     C
       1861                     C IMPORTANT NOTES!
       1862                     C        AFTER A NON-BLOCKING SEND/RECEIVE ROUTINE, SUCH AS 'MPI_ISEND'
       1863                     C    OR 'MPI_IRECV', IS CALLED, THE COMMUNICATION REQUEST CREATED BY
       1864                     C    THESE ROUTINES MUST BE FREED EITHER BY EXPLICITLY OR IMPLICITLY.
       1865                     C   'MPI_REQUEST_FREE' FREES SUCH REQUEST EXPLICITLY, WHILE A ROUTINE
       1866                     C    WHICH IDENTIFIES COMPLETION OF THE REQUEST, SUCH AS 'MPI_WAIT',
       1867                     C    'MPI_WAITANY', OR 'MPI_WAITALL' IMPLICITLY FREES THE REQUEST.
       1868                     C        THIS INTERFACE PROGRAM USES 'MPI_WAITALL' ROUTINES TO FREE SUCH
       1869                     C    REQUESTS. PAY PARTICULAR ATTENTION IF YOU WISH TO, INSTEAD, USE
       1870                     C   'MPI_REQUEST_FREE', BECAUSE 'MPI_REQUEST_FREE' FREES THE REQUESTS
       1871                     C    REGARDLESS OF THE STATE OF THE PREVIOUSLY CALLED COMMUNICATION
       1872                     C    ROUTINES, THUS SOMETIMES FREES REQUESTS WHICH HAVE NOT BEEN
       1873                     C    COMPLETED.
       1874                     C
       1875                     C
       1876                     C SUPERIMPOSE THE RECEIVED RESIDUALS
       1877                     C
       1878                     C
       1879                           NSTART = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    UNSWITCHING
                              <<< Loop-information  End >>>
       1880     1                     DO IDOM = 1 , NDOM
       1881     1               !CDIR NOINNER
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 445
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       1882     2   m    v              DO IBP = 1, NBPDOM(IDOM)
       1883     3   p    v                IF(IDIM.EQ.0) THEN
       1884     3   p    v                    IPSND(IBP,IDOM)=BUFRCV(NSTART+1)+0.1
       1885     3   p    v                ELSE
       1886     3   p    v                    IP = IPSND(IBP,IDOM)
       1887     4   p    v                    IF(IP.LT.1 .OR. IP.GT.NP) THEN
       1888     4   p    v                      IERR = 1
       1889     4                             ENDIF
       1890     3   p    v                ENDIF
       1891     2               C
       1892     3   p    v                IF(IDIM.EQ.1) THEN
       1893     3   m    m                  FX(IP) = MAX(FX(IP),BUFRCV(NSTART+1))
       1894     3   p    v                ELSE IF(IDIM .EQ. 2) THEN
       1895     3   m    s                  FX(IP) = MAX(FX(IP),BUFRCV(NSTART+1))
       1896     3   s    s                  FY(IP) = MAX(FY(IP),BUFRCV(NSTART+2))
       1897     3   p    v                ELSE IF(IDIM .EQ. 3) THEN
       1898     3   m    s                  FX(IP) = MAX(FX(IP),BUFRCV(NSTART+1))
       1899     3   s    s                  FY(IP) = MAX(FY(IP),BUFRCV(NSTART+2))
       1900     3   m    v                  FZ(IP) = MAX(FZ(IP),BUFRCV(NSTART+3))
       1901     3   p    v                ENDIF
       1902     2               C
       1903     2   p    v                NSTART=NSTART+NSKIP
       1904     2   p    v              ENDDO
       1905     1                     ENDDO
       1906                     C
       1907     1                     IF(IERR .eq. 1) THEN
       1908     1                       WRITE(IUT0,*) ERMSGB
       1909     1                       WRITE(IUT0,*) EREXP3
       1910     1                       RETURN
       1911     1                     ENDIF
       1912                     C
       1913                     C     IPART = IPART
       1914                     C
       1915                           RETURN
       1916                           END

 Diagnostic messages: program name(DDCMAX)
   jwd2008i-i  "dd_mpi.f", line 1631: この仮引数'IPART'は、副プログラム中で使用されていません。
   jwd5131p-i  "dd_mpi.f", line 1772: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 1772: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 1772: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8321o-i  "dd_mpi.f", line 1804: ループをループアンスイッチングしました。
   jwd5208p-i  "dd_mpi.f", line 1804: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd5004p-i  "dd_mpi.f", line 1806: リダクション演算を含むDOループを並列化しました。(名前:ITMP)
   jwd6004s-i  "dd_mpi.f", line 1806: リダクション演算を含むDOループをSIMD化しました。(名前:ITMP)
   jwd6229s-i  "dd_mpi.f", line 1810: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd6001s-i  "dd_mpi.f", line 1810: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 1810: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 1810: ループの繰返し数が352回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8205o-i  "dd_mpi.f", line 1810: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8670o-i  "dd_mpi.f", line 1810: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5206p-i  "dd_mpi.f", line 1814: 配列'BUFSND'の1次元に現れる誘導変数'NSTART'の変化の様子が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。
   jwd5206p-i  "dd_mpi.f", line 1816: 配列'BUFSND'の1次元に現れる誘導変数'NSTART'の変化の様子が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。
   jwd5206p-i  "dd_mpi.f", line 1818: 配列'BUFSND'の1次元に現れる誘導変数'NSTART'の変化の様子が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。
   jwd6206s-i  "dd_mpi.f", line 1818: 配列'BUFSND'の1次元に現れる誘導変数'NSTART'の変化の様子が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 1836: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 1837: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGTYP)
   jwd6208s-i  "dd_mpi.f", line 1837: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGTYP)
   jwd5208p-i  "dd_mpi.f", line 1838: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LDOM)
   jwd5208p-i  "dd_mpi.f", line 1838: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ISEND)
   jwd6208s-i  "dd_mpi.f", line 1838: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:LDOM)
   jwd6208s-i  "dd_mpi.f", line 1838: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ISEND)
   jwd5208p-i  "dd_mpi.f", line 1839: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NBPDOM)
   jwd5208p-i  "dd_mpi.f", line 1839: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGLEN)
   jwd6208s-i  "dd_mpi.f", line 1839: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NBPDOM)
   jwd6208s-i  "dd_mpi.f", line 1839: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGLEN)
   jwd5202p-i  "dd_mpi.f", line 1845: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 1845: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGIDS)
   jwd5208p-i  "dd_mpi.f", line 1845: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IERR)
   jwd5208p-i  "dd_mpi.f", line 1845: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd5122p-i  "dd_mpi.f", line 1845: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6202s-i  "dd_mpi.f", line 1845: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:NSTART)
   jwd6122s-i  "dd_mpi.f", line 1845: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd8321o-i  "dd_mpi.f", line 1880: ループをループアンスイッチングしました。
   jwd5208p-i  "dd_mpi.f", line 1880: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IPSND)
   jwd5208p-i  "dd_mpi.f", line 1880: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FZ)
   jwd5208p-i  "dd_mpi.f", line 1880: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FY)
   jwd5202p-i  "dd_mpi.f", line 1880: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:IERR)
   jwd5202p-i  "dd_mpi.f", line 1880: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 1880: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FX)
   jwd5005p-i  "dd_mpi.f", line 1882: このDOループを部分的に並列化しました。(名前:IBP)
   jwd5004p-i  "dd_mpi.f", line 1882: リダクション演算を含むDOループを並列化しました。(名前:IBP)
   jwd6004s-i  "dd_mpi.f", line 1882: リダクション演算を含むDOループをSIMD化しました。(名前:IBP)
   jwd6229s-i  "dd_mpi.f", line 1882: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "dd_mpi.f", line 1883: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 1895: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FX)
   jwd5209p-i  "dd_mpi.f", line 1895: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 1895: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FX)
   jwd6209s-i  "dd_mpi.f", line 1895: 配列'FX'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。
   jwd5208p-i  "dd_mpi.f", line 1896: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FY)
   jwd5209p-i  "dd_mpi.f", line 1896: 配列'FY'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6208s-i  "dd_mpi.f", line 1896: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:FY)
   jwd6209s-i  "dd_mpi.f", line 1896: 配列'FY'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。
   jwd5209p-i  "dd_mpi.f", line 1900: 配列'FZ'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6209s-i  "dd_mpi.f", line 1900: 配列'FZ'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。

 Procedure information
   Lines      : 4320
   Statements : 3363
   Stack(byte): 336032
   Prefetch num: 0

 External subroutine subprogram "DDCOMY"
  (line-no.)(nest)(optimize)
       1917                     C
       1918                     C
       1919                     CCTT SUBROUTINE DDCMAX END
       1920                           SUBROUTINE DDCOMY(IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       1921                          *                  FXYZ,NP,IUT0,IERR,BUFSND,BUFRCV,MAXBUF)
       1922                           IMPLICIT REAL*4(A-H,O-Z)
       1923                           DIMENSION LDOM(NDOM),NBPDOM(NDOM),IPSLF(MBPDOM,NDOM),
       1924                          1          IPSND(MBPDOM,NDOM), FXYZ(3,NP),
       1925                          2          BUFSND(MAXBUF),BUFRCV(MAXBUF)
       1926                     C
       1927                           INCLUDE 'mpif.h'
       1928                     C
       1929                           PARAMETER ( MAXDOM = 10000 )
       1930                           INTEGER*4 MSGIDS(MAXDOM),MSGSTS(MPI_STATUS_SIZE,MAXDOM)
       1931                     C
       1932                     C
       1933                           CHARACTER*60 ERMSGB
       1934                          & / ' ## SUBROUTINE DDCOMY: FATAL     ERROR OCCURRENCE; RETURNED' /
       1935                           CHARACTER*60 EREXP1
       1936                          & / ' DIMENSION SIZE OF INTERNAL      ARRAYS IS NOT SUFFICIENT  ' /
       1937                           CHARACTER*60 EREXP2
       1938                          & / ' DIMENSION SIZE OF PASSED BUFFER ARRAYS IS NOT SUFFICIENT  ' /
       1939                           CHARACTER*60 EREXP3
       1940                          & / ' RECEIVED NODE NUMBER IS OUT OF THE GLOBAL NODE NUMBER     ' /
       1941                            INTEGER*4 MDATA
       1942                            PARAMETER (MDATA=2000000)
       1943                            INTEGER*4 ISAVE,LSTORE(MDATA),NDUP,LDUP(2,MDATA)
       1944                            DATA ISAVE /0/
       1945                            DATA NDUP  /0/
       1946                            SAVE ISAVE,LSTORE,NDUP,LDUP
       1947                     C
       1948                     C
       1949                     C      EXCHANGE X, Y, AND Z RESIDUALS AMONG THE NEIGHBORING SUB-DOMAINS
       1950                     C     AND SUPERIMPOSE THE EXCHANGED RESIDUALS TO THE CALLING TASK'S
       1951                     C     RESIDUALS, FOR DOMAIN-DECOMPOSITION PROGRAMMING MODEL
       1952                     C
       1953                     C                            ( MPI VERSION )
       1954                     C
       1955                     C
       1956                     C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
       1957                     C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
       1958                     C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
       1959                     C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
       1960                     C
       1961                     C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
       1962                     C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
       1963                     C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
       1964                     C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA
       1965                     C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH
       1966                     C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
       1967                     C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
       1968                     C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
       1969                     C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
       1970                     C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
       1971                     C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
       1972                     C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
       1973                     C
       1974                     C
       1975                     C     ARGUMENT LISTINGS
       1976                     C       (1) INPUT
       1977                     C INT *4   IPART       ; SUB-DOMAIN NUMBER THAT THE CALLING TASK IS
       1978                     C                       TAKING CARE OF
       1979                     C           NOTES ; ARGUMENT 'IPART' IS NOT CURRENTLY USED. IT IS
       1980                     C                  RETAINED FOR A POSSIBLE FUTURE USE.
       1981                     C INT *4   LDOM      (IDOM) ; NEIGHBORING SUB-DOMAIN NUMBER
       1982                     C INT *4   NBPDOM    (IDOM) ; NUMBER OF INTER-CONNECT BOUNDARY NODES
       1983                     C                            SHARING WITH THE IDOM'TH NEIGHBORING
       1984                     C                            SUB-DOMAIN, LDOM(IDOM)
       1985                     C INT *4   NDOM             ; NUMBER OF THE NEIGHBORING SUB-DOMAINS
       1986                     C INT *4   IPSLF (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1987                     C                            CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
       1988                     C                            NEIGHBORING SUB-DOMAIN, LDOM(IDOM)
       1989                     C INT *4   IPSND (IBP,IDOM) ; INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1990                     C                            SUB-DOMAIN THAT IS RECEIVING THE CALLING
       1991                     C                            TASK'S RESIDUALS.
       1992                     C INT *4   MBPDOM           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS
       1993                     C                            OF THE PASSED ARRAYS 'IPSLF' AND 'IPSND'
       1994                     C                            (I.E. THE MAXIMUM NUMBER OF THE
       1995                     C                             INTER-CONNECT BOUNDARY NODES FOR A
       1996                     C                             NEIGHBORING SUB-DOMAIN)
       1997                     C INT *4   NP               ; NUMBER OF THE TOTAL NODES IN THE CALLING
       1998                     C                            TASK'S SUB-DOMAIN
       1999                     C INT *4   IUT0             ; FILE NUMBER TO WRITE ERROR MESSAGE
       2000                     C INT *4   MAXBUF           ; LENGTH OF THE PASSED COMMUNICATION BUFFERS
       2001                     C                            'BUFSND' AND 'BUFRCV' IN WORDS. 'MAXBUF'
       2002                     C                             MUST BE NO SMALLER THAN 4 TIMES THE TOTAL
       2003                     C                             NUMBER OF INTER-CONNECT BOUNDARY NODES IN
       2004                     C                             THE CALLING TASK
       2005                     C
       2006                     C       (2) OUTPUT
       2007                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
       2008                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
       2009                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
       2010                     C
       2011                     C       (3) INPUT-OUTPUT
       2012                     C REAL*4   FXYZ(3,IP)       ; RESIDUAL VECTOR
       2013                     C
       2014                     C       (4) WORK
       2015                     C REAL*4   BUFSND(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
       2016                     C                            BOUNDARY NODE NUMBER IN THE NEIGHBORING
       2017                     C                            SUB-DOMAINS AND THE RESIDUALS OF THE
       2018                     C                            CALLING TASK'S SUB-DOMAIN WHEN SENDING
       2019                     C                            THE RESIDUALS
       2020                     C
       2021                     C REAL*4   BUFRCV(IBUF)     ; HOLDS THE VALUES OF THE INTER-CONNECT
       2022                     C                            BOUNDARY NODE NUMBER IN THE CALLING TASK'S
       2023                     C                            SUB-DOMAIN AND THE RESIDUALS OF THE
       2024                     C                            NEIGHBORING SUB-DOMAINS AT THE RECEIPT OF
       2025                     C                            THE RESIDUALS FROM THE NEIGHBORING
       2026                     C                            SUB-DOMAINS
       2027                           IERR = 0
       2028                           NSKIP= 3
       2029                     C
       2030                     C
       2031                     C CHECK THE INTERNAL ARRAY SIZE
       2032                     C
       2033                     C
       2034                     C
       2035     1                     IF(2*NDOM.GT.MAXDOM) THEN
       2036     1                         WRITE(IUT0,*) ERMSGB
       2037     1                         WRITE(IUT0,*) EREXP1
       2038     1                         IERR = 1
       2039     1                         RETURN
       2040     1                     ENDIF
       2041                     C
       2042                     C
       2043                     C
       2044                     C POST ALL THE EXPECTED RECEIVES
       2045                     C
       2046                     C
       2047                     C
       2048                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 2
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       2049     1                     DO 110 IDOM = 1 , NDOM
       2050     1                         MSGTYP = 1
       2051     1                         IRECV  = LDOM(IDOM)-1
       2052     1                         MSGLEN = NSKIP*NBPDOM(IDOM)
       2053     1               C
       2054     2                         IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
       2055     2                             WRITE(IUT0,*) ERMSGB
       2056     2                             WRITE(IUT0,*) EREXP2
       2057     2                             IERR = 1
       2058     2                             RETURN
       2059     2                         ENDIF
       2060     1               C
       2061     1               #ifdef PRECEXP
       2062     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL8,IRECV,MSGTYP,
       2063     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       2064     1               #else
       2065     1                         CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL ,IRECV,MSGTYP,
       2066     1                    &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
       2067     1               #endif
       2068     1               C
       2069     1                         NSTART = NSTART+MSGLEN
       2070     1                 110 CONTINUE
       2071                     C
       2072                     !      CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
       2073                     C
       2074                     C
       2075                     C
       2076                     C SET UP THE SEND BUFFER
       2077                     C
       2078                     C
       2079                     CC    CALL FTRACE_REGION_BEGIN("ddcom3:200-210")
       2080                     !CDIR PARALLEL DO PRIVATE(NSTART,IP,IPS)
       2081     1                     DO 210 IDOM = 1 , NDOM
       2082     1                        NSTART  = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1600
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       2083     2  pp    v               DO 205 ITMP = 2 , IDOM
       2084     2   p    v                  NSTART = NSTART + NBPDOM(ITMP-1)*NSKIP
       2085     2   p    v       205     CONTINUE
       2086     1               !CDIR NOINNER
       2087     1               !ocl norecurrence(BUFSND)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 445
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.58, ITR: 224, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF, BUFSND
                              <<< Loop-information  End >>>
       2088     2  pp   2v               DO IBP=1,NBPDOM(IDOM)
       2089     2   p   2v                  NSTART2 = NSTART + NSKIP * (IBP-1)
       2090     2   p   2v                  IP      = IPSLF(IBP,IDOM)
       2091     2   p   2v                  BUFSND(NSTART2+1) = FXYZ(1,IP)
       2092     2   p   2v                  BUFSND(NSTART2+2) = FXYZ(2,IP)
       2093     2   p   2v                  BUFSND(NSTART2+3) = FXYZ(3,IP)
       2094     2   p   2v               ENDDO
       2095     1                210  CONTINUE
       2096                     
       2097                     C
       2098                     C
       2099                     C
       2100                     C SEND THE RESIDUALS
       2101                     C
       2102                     C
       2103                     C
       2104                           NSTART = 1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDOM, NBPDOM
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 2
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       2105     1   s    s            DO 220 IDOM = 1 , NDOM
       2106     1   s    s                MSGTYP = 1
       2107     1   s    s                ISEND  = LDOM(IDOM)-1
       2108     1   s    s                MSGLEN = NSKIP*NBPDOM(IDOM)
       2109     1               
       2110     1               #ifdef PRECEXP
       2111     1                         CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL8,ISEND,MSGTYP,
       2112     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
       2113     1               #else
       2114     1   s    s                CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL ,ISEND,MSGTYP,
       2115     1                    &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
       2116     1               #endif
       2117     1               C
       2118     1   s    s                NSTART = NSTART+MSGLEN
       2119     1   s    s        220 CONTINUE
       2120                     C
       2121                     C
       2122                     C
       2123                     C WAIT FOR THE COMPLETION OF ALL THE REQUESTED COMMUNICATIONS
       2124                     C
       2125                     C
       2126                     C
       2127                           CALL MPI_WAITALL(2*NDOM,MSGIDS,MSGSTS,IERR)
       2128                     C
       2129                     C
       2130                     C IMPORTANT NOTES!
       2131                     C        AFTER A NON-BLOCKING SEND/RECEIVE ROUTINE, SUCH AS 'MPI_ISEND'
       2132                     C    OR 'MPI_IRECV', IS CALLED, THE COMMUNICATION REQUEST CREATED BY
       2133                     C    THESE ROUTINES MUST BE FREED EITHER BY EXPLICITLY OR IMPLICITLY.
       2134                     C   'MPI_REQUEST_FREE' FREES SUCH REQUEST EXPLICITLY, WHILE A ROUTINE
       2135                     C    WHICH IDENTIFIES COMPLETION OF THE REQUEST, SUCH AS 'MPI_WAIT',
       2136                     C    'MPI_WAITANY', OR 'MPI_WAITALL' IMPLICITLY FREES THE REQUEST.
       2137                     C        THIS INTERFACE PROGRAM USES 'MPI_WAITALL' ROUTINES TO FREE SUCH
       2138                     C    REQUESTS. PAY PARTICULAR ATTENTION IF YOU WISH TO, INSTEAD, USE
       2139                     C   'MPI_REQUEST_FREE', BECAUSE 'MPI_REQUEST_FREE' FREES THE REQUESTS
       2140                     C    REGARDLESS OF THE STATE OF THE PREVIOUSLY CALLED COMMUNICATION
       2141                     C    ROUTINES, THUS SOMETIMES FREES REQUESTS WHICH HAVE NOT BEEN
       2142                     C    COMPLETED.
       2143                     C
       2144                     C
       2145                     C SUPERIMPOSE THE RECEIVED RESIDUALS
       2146                     C
       2147                     C
       2148     1                     IF(ISAVE.EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSTORE
                              <<< Loop-information  End >>>
       2149     2  pp   4v                DO IP = 1, NP
       2150     2   p   4v                    LSTORE(IP)=0
       2151     2   p   4v                ENDDO
       2152     1               C
       2153     1                         NSTART = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       2154     2                         DO IDOM = 1 , NDOM
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 0.54, ITR: 6, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       2155     3   s   2s                    DO IBP = 1, NBPDOM(IDOM)
       2156     3   p   2v                        IP = IPSND(IBP,IDOM)
       2157     3   p   2v                        NSTART2   = NSTART + NSKIP * (IBP-1)
       2158     3   m   2m                        LSTORE(IP)=LSTORE(IP)+1
       2159     3   p   2v                    ENDDO
       2160     2                             NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       2161     2                         ENDDO
       2162     1               C
       2163     1                         NSTART = 0
       2164     1                         NDUP   = 0
       2165     2                         DO IDOM = 1 , NDOM
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       2166     3       2s                    DO IBP = 1, NBPDOM(IDOM)
       2167     3       2v                        IP = IPSND(IBP,IDOM)
       2168     3       2v                        NSTART2   = NSTART + NSKIP * (IBP-1)
       2169     4       2v                        IF(LSTORE(IP).GE.2) THEN
       2170     4       2m                            NDUP=NDUP+1
       2171     4       2s                            LDUP(1,NDUP)=IP
       2172     4       2s                            LDUP(2,NDUP)=NSTART2+1
       2173     4       2v                        ENDIF
       2174     3       2v                    ENDDO
       2175     2                             NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       2176     2                         ENDDO
       2177     1                         ISAVE=1
       2178     1                     ENDIF
       2179                     C
       2180                           NSTART = 0
       2181     1                     DO IDOM = 1 , NDOM
       2182     1               !ocl norecurrence(FXYZ)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 302
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSND
                              <<< Loop-information  End >>>
       2183     2  pp    s               DO IBP = 1, NBPDOM(IDOM)
       2184     2   p    v                  IP = IPSND(IBP,IDOM)
       2185     2   p    v                  NSTART2 = NSTART + NSKIP * (IBP-1)
       2186     3   p    m                  IF(LSTORE(IP).EQ.1) THEN
       2187     3   p    s                      FXYZ(1,IP) = FXYZ(1,IP) + BUFRCV(NSTART2+1)
       2188     3   p    s                      FXYZ(2,IP) = FXYZ(2,IP) + BUFRCV(NSTART2+2)
       2189     3   p    s                      FXYZ(3,IP) = FXYZ(3,IP) + BUFRCV(NSTART2+3)
       2190     3   p    v                  ENDIF
       2191     2   p    v               ENDDO
       2192     1                        NSTART = NSTART + NSKIP * NBPDOM(IDOM)
       2193     1                     ENDDO
       2194                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 0.33, ITR: 3, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LDUP
                              <<< Loop-information  End >>>
       2195     1   s    s            DO I=1,NDUP
       2196     1   p    v                IP=LDUP(1,I)
       2197     1   p    v                J =LDUP(2,I)
       2198     1   m    m                FXYZ(1,IP) = FXYZ(1,IP) + BUFRCV(J  )
       2199     1   s    s                FXYZ(2,IP) = FXYZ(2,IP) + BUFRCV(J+1)
       2200     1   s    s                FXYZ(3,IP) = FXYZ(3,IP) + BUFRCV(J+2)
       2201     1   p    v            ENDDO
       2202                     C
       2203     1                     IF(IERR .eq. 1) THEN
       2204     1                       WRITE(IUT0,*) ERMSGB
       2205     1                       WRITE(IUT0,*) EREXP3
       2206     1                       RETURN
       2207     1                     ENDIF
       2208                     C
       2209                     C     IPART = IPART
       2210                           RETURN
       2211                           END
       2212                     C
       2213                     CCTT SUBROUTINE DDCOMY END

 Diagnostic messages: program name(DDCOMY)
   jwd2008i-i  "dd_mpi.f", line 1920: この仮引数'IPART'は、副プログラム中で使用されていません。
   jwd5131p-i  "dd_mpi.f", line 2049: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "dd_mpi.f", line 2049: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 2049: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 2081: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd6138s-i  "dd_mpi.f", line 2081: DO変数をループ中で再定義する可能性があるため、このDOループはSIMD化できません。
   jwd8664o-i  "dd_mpi.f", line 2081: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5004p-i  "dd_mpi.f", line 2083: リダクション演算を含むDOループを並列化しました。(名前:ITMP)
   jwd6004s-i  "dd_mpi.f", line 2083: リダクション演算を含むDOループをSIMD化しました。(名前:ITMP)
   jwd5001p-i  "dd_mpi.f", line 2088: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "dd_mpi.f", line 2088: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "dd_mpi.f", line 2088: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 2088: ループの繰返し数が224回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8664o-i  "dd_mpi.f", line 2105: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "dd_mpi.f", line 2106: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGTYP)
   jwd6208s-i  "dd_mpi.f", line 2106: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGTYP)
   jwd5208p-i  "dd_mpi.f", line 2107: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LDOM)
   jwd5208p-i  "dd_mpi.f", line 2107: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ISEND)
   jwd6208s-i  "dd_mpi.f", line 2107: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:LDOM)
   jwd6208s-i  "dd_mpi.f", line 2107: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ISEND)
   jwd5208p-i  "dd_mpi.f", line 2108: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NBPDOM)
   jwd5208p-i  "dd_mpi.f", line 2108: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGLEN)
   jwd6208s-i  "dd_mpi.f", line 2108: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NBPDOM)
   jwd6208s-i  "dd_mpi.f", line 2108: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MSGLEN)
   jwd5202p-i  "dd_mpi.f", line 2114: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 2114: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MSGIDS)
   jwd5208p-i  "dd_mpi.f", line 2114: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IERR)
   jwd5208p-i  "dd_mpi.f", line 2114: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:BUFSND)
   jwd5122p-i  "dd_mpi.f", line 2114: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6202s-i  "dd_mpi.f", line 2114: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:NSTART)
   jwd6122s-i  "dd_mpi.f", line 2114: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5001p-i  "dd_mpi.f", line 2149: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "dd_mpi.f", line 2149: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "dd_mpi.f", line 2149: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "dd_mpi.f", line 2149: ループを展開数4回でアンローリングしました。
   jwd5202p-i  "dd_mpi.f", line 2154: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 2154: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LSTORE)
   jwd6302s-i  "dd_mpi.f", line 2155: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 2155: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 2155: ループの繰返し数が6回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 2158: 配列'LSTORE'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6209s-i  "dd_mpi.f", line 2158: 配列'LSTORE'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。
   jwd5202p-i  "dd_mpi.f", line 2165: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NDUP)
   jwd5202p-i  "dd_mpi.f", line 2165: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 2165: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LDUP)
   jwd5228p-i  "dd_mpi.f", line 2166: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd5208p-i  "dd_mpi.f", line 2166: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NDUP)
   jwd6229s-i  "dd_mpi.f", line 2166: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "dd_mpi.f", line 2166: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "dd_mpi.f", line 2166: ループを展開数2回でアンローリングしました。
   jwd5202p-i  "dd_mpi.f", line 2181: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NSTART)
   jwd5208p-i  "dd_mpi.f", line 2181: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FXYZ)
   jwd5001p-i  "dd_mpi.f", line 2183: このDOループを並列化しました。(名前:IBP)
   jwd6229s-i  "dd_mpi.f", line 2183: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "dd_mpi.f", line 2183: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd6302s-i  "dd_mpi.f", line 2195: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8204o-i  "dd_mpi.f", line 2195: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "dd_mpi.f", line 2195: ループの繰返し数が3回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "dd_mpi.f", line 2198: 配列'FXYZ'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6209s-i  "dd_mpi.f", line 2198: 配列'FXYZ'の添字式中の変数'IP'をループ中で定義しているため、このDOループはSIMD化できません。

 Procedure information
   Lines      : 4326
   Statements : 3372
   Stack(byte): 295520
   Prefetch num: 0

 Total information
   Procedures       : 14
   Total lines      : 46792
   Total statements : 36720
   Total stack(byte): 1620896
   Total prefetch num: 0

