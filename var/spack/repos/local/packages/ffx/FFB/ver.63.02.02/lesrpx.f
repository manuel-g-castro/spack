      SUBROUTINE LESRPX(IACT,IUT0,IUT5,IUT6,
     *                  IPART,COMGEN,MSMPL,MTIME,MRESV,MFRAME,
     *                  IMODEL,IFORM ,IPRESS,FSMACH,
     *                  D000  ,U000  ,T000  ,TREF  ,RHO000,
     *                  IHEAT ,ISOLID,ICAV  ,IBUSNQ, 
     *                  NFRAME,JSET  ,OMEGA,
     *                  UFRAM0,VFRAM0,WFRAM0,
     *                  VISCM ,SIGMA ,RHOF  ,RHOS  ,
     *                  CONDF ,CONDS ,CPF   ,CPS   ,
     *                  ISTART,NTIME ,DT    ,NMAXSE,NMAXSI,
     *                  NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS  ,
     *                  TFINAL,UFINAL,VFINAL,WFINAL,
     *                  IOUT  ,INTFSV,INTPSV,
     *                  NSMPL,LSMPL,XSMPL,YSMPL,ZSMPL,
     *                  NHST,COMHST,
     *                  FILEMS,FILEBC,FILEIF,FILEFF,FILEHS,
     *                  FILEAT,FILEMD,FILEOS,
     *                  FILEAV,FILERM,FILEST,FILEFS,FILEPS,    
     *                  FILEMR,FILEBR,FILEFR,FILEAR,
     *                  JSETOS,FILEDM,FILEFM,
     *                  IERR)
      IMPLICIT NONE
C
      INTEGER*4 IACT,IUT0,IUT5,IUT6,IPART,MSMPL,MTIME,MRESV,MFRAME,
     *          ITRANS,IMODEL,IFORM,IPRESS,IHEAT,ISOLID,ICAV,IBUSNQ,
     *          NFRAME,ISET,JSET,ISTART,NTIME,NMAXSE,NMAXSI,
     *          NMAXT,NMAXP,IOUT,INTFSV,INTPSV,
     *          NSMPL,LSMPL(MSMPL),NHST,JSETOS,IERR
      REAL*4 FSMACH,D000,U000,T000,TREF,RHO000,OMEGA,
     *       UFRAM0(MFRAME),VFRAM0(MFRAME),WFRAM0(MFRAME),
     *       VISCM,SIGMA,RHOF,RHOS,CONDF,CONDS,CPF,CPS,
     *       DT,EPST,EPSP,EPSS,TFINAL,UFINAL,VFINAL,WFINAL,
     *       XSMPL(MSMPL),YSMPL(MSMPL),ZSMPL(MSMPL)
      CHARACTER*60 COMGEN,COMHST(MRESV+MSMPL)
      CHARACTER*60 FILEMS,FILEBC,FILEIF,FILEFF,FILEHS,
     *             FILEAT,FILEMD,FILEOS,
     *             FILEAV,FILERM,FILEST,FILEFS,FILEPS,
     *             FILEMR,FILEBR,FILEFR,FILEAR,
     *             FILEDM,FILEFM,FILE
C
      CHARACTER*15 COMDAT(10)
      DATA COMDAT( 1) / ' VELOCITY-U   ;' /
      DATA COMDAT( 2) / ' VELOCITY-V   ;' /
      DATA COMDAT( 3) / ' VELOCITY-W   ;' /
      DATA COMDAT( 4) / ' PRESSURE     ;' /
      DATA COMDAT( 5) / ' LIQUID FRACT.;' /
      DATA COMDAT( 6) / ' TEMPRATURE   ;' /
      DATA COMDAT( 7) / ' TOTAL VISC.  ;' /
      DATA COMDAT( 8) / ' KINETIC NERGY;' /
      DATA COMDAT( 9) / ' EPSOLON      ;' /
      DATA COMDAT(10) / ' OMEGA        ;' /
C
C     
      CHARACTER*60 COMMNT(24)
      DATA COMMNT(01) /'#GIVE ITRANS IMODEL IFORM  IPRESS FSMACH '/ 
      DATA COMMNT(02) /'#GIVE D000  U000  T000  TREF          '/  
      DATA COMMNT(03) /'#GIVE IHEAT  ICAV   IBUSNQ               '/
      DATA COMMNT(04) /'#GIVE NFRAME ISET   JSET   OMEGA         '/
      DATA COMMNT(05) /'#GIVE VISCM  SIGMA  RHOF   RHOS          '/
      DATA COMMNT(06) /'#GIVE CONDF  CONDS  CPF    CPS           '/
      DATA COMMNT(07) /'#GIVE ISTART NTIME  DT     NMAXSE NMAXSI '/ 
      DATA COMMNT(08) /'#GIVE NMAXT  NMAXP  EPST   EPSP   EPSS   '/
      DATA COMMNT(09) /'#GIVE TFINAL UFINAL VFINAL WFINAL        '/
      DATA COMMNT(10) /'#GIVE IOUT   INTFSV INTPSV               '/
      DATA COMMNT(11) /'#GIVE NSMPL  LSMPL  XSMPL  YSMPL ZSMPL   '/ 
      DATA COMMNT(12) /'#GIVE MESH         FILE NAME             '/
      DATA COMMNT(13) /'#GIVE B.C.         FILE NAME             '/
      DATA COMMNT(14) /'#GIVE INITIAL FLOW FILE NAME             '/
      DATA COMMNT(15) /'#GIVE FINALE  FLOW FILE NAME             '/
      DATA COMMNT(16) /'#GIVE HISTORY      FILE NAME             '/
      DATA COMMNT(17) /'#GIVE ATTRIBUE     FILE NAME             '/
      DATA COMMNT(18) /'#GIVE MID-NODE     FILE NAME             '/
      DATA COMMNT(19) /'#GIVE OVERSET      FILE NAME             '/
      DATA COMMNT(20) /'#GIVE AVERAGE      FILE NAME             '/
      DATA COMMNT(21) /'#GIVE RMS          FILE NAME             '/
      DATA COMMNT(22) /'#GIVE STRESS       FILE NAME             '/
      DATA COMMNT(23) /'#GIVE CURRENT FLOW FILE NAME             '/
      DATA COMMNT(24) /'#GIVE SURFACE PRS. FILE NAME             '/
C
      INTEGER*4 ISMPL,IERRS,ILINE,IFRAME
C
      CHARACTER*8  CKEYWD
      CHARACTER*60 HEADMY
      DATA CKEYWD / '#FFB_V07' /
C
      CHARACTER*60 ERRMSG
     & / ' ## SUBROUTINE LESRPX: FATAL      ERROR OCCURENCE; RETURNED' /
C
      CHARACTER*60 EREXP0,EREXP1,EREXP2,EREXP3,EREXP4,EREXP5
      DATA EREXP0
     & / ' READING FAILED AT LINE OF ' /
      DATA EREXP1
     & / ' FILE FORMAT OF THE  FILE IS NOT FOR LES3X OF FFB VER.8.1  ' /
      DATA EREXP2
     & / ' AN ILLEGAL VALUE WAS SPECIFIED FOR CONTROL PARAMETER      ' /
      DATA EREXP3
     & / ' NUMBER OF TIME STEPS HAS EXCEEDED THE LIMIT OF            ' /
      DATA EREXP4
     & / ' NUMBER OF DATA SMPLING POINTS HAS EXCEEDED THE LIMIT OF  ' /
      DATA EREXP5
     & / ' NUMBER OF TRANSLATING FRAMES HAS EXCEEDED THE LIMIT OF    ' /
C
      INCLUDE 'gf.h'
      INCLUDE 'gfdummy.h'
C
C
C      READ & WRITE CALCULATION PARAMETERS AND FILE NAMES FOR LES3C
C
C     ARGUMENT LISTINGS
C
C     IACT       ; SPECIFY ACTION MODE (1:READ, 2:WRITE)        
C     IUT0       ; FILE NUMBER TO WRITE  ERROR MESSAGE
C     IUT5       ; FILE NUMBER TO READ PARAMETERS AND FILE NAMES
C     IUT6       ; FILE NUMBER TO WRITE CALCULATION SEQUENCE
C
C    [1] ANALYSIS MODE    
C     ITRANS     ;SPECIFIES TIME-LOOP MODE
C                  1 --- UNSTEADY 
C                  2 ---   STEADY (SIMPLE)
C                  3 ---   STEADY (SIMPEC)
C
C     IMODEL     ;SPECIFIES SUBGRID-SCALE MODEL TO BE USED
C                  0 --- NO SGS MODEL USED
C                  1 --- STATIC SMAGORINSKY MODEL INCORPORATED WITH
C                         VAN-DRIEST WALL DAMPING FUNCTION
C                  2 --- DYNAMIC SMAGORINSKY MODEL
C                 11 --- K-EPSION (STANDARD)
C                 12 --- K-EPSION (LOW-RE TYPE:A)
C                 13 --- K-EPSION (LOW-RE TYPE:A)
C                 21 --- K-OMEGA SST
C
C     IFORM       ;SPECIFIES MOMENTUM EQUATIONS METHOD
C           MOMENTUM EQUATIONS ARE SOLVED BY CRANK-NICOLSON METHOD (C.N.) IN 
C          THIS VERSION. TWO OPTIONAL FUNCTIONS ARE SUPPORTED TO STABILAZE 
C          COMPUTATIONS. THE FIRST ONE IS BLANCED TENSOR DIFFUSITIVITY (BTD).
C          COMPUTATIONS WITH DSM IN THIS VERSION TENDS TO BE UNSTABLE. BTD
C          TERM IS USEFULL IN SUCH CASES. THE SECOND ONE IS EULER BACKWARD 
C          (E.B.) METHOD FOR ONLY DIFFUSION TERM. WE RECOMMEND THIS FUNCTION 
C          FOR LOW REYNOLDS FLOW (RE<100). 
C           IFORM CONTROLS THESE OPTIONAL FUNCTIONS AS FOLLOWS; 
C
C                  1 --- C.N. FOR DIFF. TERM / NO   BTD TERM  (DEFAULT)  
C                  2 --- C.N. FOR DIFF. TERM / WITH BTD TERM  
C                  3 --- E.B. FOR DIFF. TERM / NO   BTD TERM  
C                  4 --- E.B. FOR DIFF. TERM / WITH BTD TERM  
C
C     IPRESS     ;SPECIFIES PRESSURE-COUPLING ALGORITHM 
C                  1 --- STANDARD FRACTIONAL STEP
C                  2 --- FRACTIONAL STEP WITH LOW-MACH-NO. ASSUMPTION
C
C     FSMACH     ;FREE-STREAM MACH NUMBER
C
C    [2] SCALE
C    D000        ;CHARACTARISTIC LENGTH 
C    U000        ;CHARACTARISTIC VELOCITY 
C    T000        ;CHARACTARISTIC TEMPRATURE  
C    TREF        ;REFERENCE TEMPERATURE
C
C    [3] PHYSICAL FUNCTION FLAG
C    IHEAT       ;FLAG FOR HEAT-TRANSFER COMPUTATION
C                  0 --- NO CAL. (DEFAULT)
C                  1 --- FORCED CONVECTION MODE WITH DISSIPATION TERM
C                  2 --- FORCED CONVECTION MODE W.O. DISSIPATION TERM
C                  3 --- NATURE CONVECTION MODE
C    ICAV        ;FLAG FOR CAVITATION COMPUTATION
C                  0 --- OFF (DEFALT)
C                  1 --- ON
C    IBUSNQ      ; FLAG FOR BOUSSINESQ ASSUMPTION
C                  0  -- CAL. DENSITY CHANGE FOR ONLY GRAVITY TERM
C                  1  -- CAL. DENSITY CHANGE FOR ALL THE TERM
C
C    [4] FRAME OF REFERENCE 
C    ISET        ; MID-NODE MODE FLGA
C                  0 --- OFF (DEFALT)
C                  1 --- ON
C
C    JSET        ; OVERSET COMPUTATION WILL BE ACTIVATED WHEN THIS
C                  PARAMETER IS SET TO A POSITIVE INTEGER VALUE, AS
C                  LISTED BELOW:
C    VALUE OF 'JSET' ACTIONS TO BE TAKEN
C        NEGATIVE INT.  : ILLEGAL, REGARDED AS AN ERROR
C        ZERO(0)        : NO OVERSET WILL BE DONE
C        POSITIVE INT.  : READ THE SPECIFIED OVERSET CONDITIONS DATA FILE 
C                         AT EVERY 'JSET' TIME STEP(S) FOR A NEW OVERSET DATA,
C                         MAKE APPROPRIATE TRANSACTIONS FOR THE OVERSET.
C                         IF NO OVERSET DATA IS FOUND DURING THE TIME 
C                         INTEGRATIONS, 'LES3X' WILL USE THE OVERSET
C                         DATA READ-IN LATEST FOR THE REMAINING TIME INTEGRATIONS.
C
C    OMEGA       ; ANGULAR VELOCITY OF REFERENCE FRAME -1
C    UACCE       ; ACCELERATION IN X-DIR. OF REFERENCE FRAME 1
C    VACCE       ; ACCELERATION IN Y-DIR. OF REFERENCE FRAME 1
C    WACCE       ; ACCELERATION IN Z-DIR. OF REFERENCE FRAME 1
C    GRAVX       ;X-DIR. COMPONENT OF GRAVITY ACCERATION VECTOR
C    GRAVY       ;X-DIR. COMPONENT OF GRAVITY ACCERATION VECTOR
C    GRAVZ       ;X-DIR. COMPONENT OF GRAVITY ACCERATION VECTOR
C
C    [5] CONSTANT
C    VISCM       ;MOLECULAR VISCOSITY
C    SIGMA       ;CAVITATION NUMBER
C    RHOF        ;DENSITY           OF FLUID
C    RHOS        ;DENSITY           OF SOLID
C    CONDF       ;HEAT CONDUCTIVITY OF FLUID
C    CONDS       ;HEAT CONDUCTIVITY OF SOLID
C    CPF         ;SPECIFIC HEAT     OF FLUID
C    CPS         ;SPECIFIC HEAT     OF SOLID
C
C    [6] TIME INTEGRATION 
C    ISTART      ; CONTROLS DEVELOPMENT OF THE FLOW FIELD
C                  0 --- SET  ZERO INITIAL FLOW FIELD
C                  1 --- READ INITIAL FLOW FIELD FROM GIVEN FILE
C    NMAXSE      ; MAXIMUM ITERATIONS FOR EXTERNAL LOOP OF SIMPLE METHOD
C    NMAXSI      ; MAXIMUM ITERATIONS FOR EXTERNAL LOOP OF SIMPLE METHOD
C    NMAXT       ; MAXIMUM ITERATIONS     FOR TRANSPORT EQUATIONS
C    NMAXP       ; MAXIMUM ITERATIONS     FOR PRESSURE  EQUATION
C    EPST        ; CONVERGENCE CRITERIA   FOR TRANSPORT EQUATIONS
C    EPSP        ; CONVERGENCE CRITERIA   FOR PRESSURE  EQUATION
C    EPSS        ; CONVERGENCE CRITERIA   FOR SIMPLE (SIMPLEC) METHOD
C    TFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
C    UFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
C    VFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
C    WFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
C
C    [7] ADDITION OUTPUT 
C    IOUT        ;CONTROLS OPTIONAL OUTPUT FILES
C                  0 --- OUTPUT NO OPTIONAL FILES
C                  1 --- OUTPUT AVERAGE              FLOW FIELD FILE
C                  2 --- OUTPUT AVERAGE, RMS, STRESS FLOW FIELD FILES
C    INTFSV       ; FIELD DATA SAMPLING INTERVAL
C           NOTES ; FIELD DATA, NAMELY U, V, W, AND P AT ALL THE NODES
C                  OR ELEMENTS, WILL BE OUTPUT TO THE SPECIFIED FILE
C                  AT EVERY 'INTFSV' TIME STEPS. NO DATA WILL BE OUTPUT
C                  WHEN 'INTFSV' IS SET TO 0.
C    INTPSV       ; SURFACE PRESSURE DATA SAMPLING INTERVAL
C           NOTES ; SURFACE PRESSURE DATA, NAMELY P AT SURFACE ELEMENTS
C                  DETERMINED BY THE BODY FORCE CALCULATION BOUNDARY 
C                  NODES, WILL BE OUTPUT TO THE SPECIFIED FILE AT EVERY
C                  'INTPSV' TIME STEPS. NO DATA WILL BE OUTPUT WHEN 
C                  'INTPSV' IS SET TO 0.
C
C
C    [8] SAMPLING DATA In HISTORY FILE  
C    MSAMPL      ;
C    NSMPL       ; NUMBER OF DATA SAMPLING POINTS
C    LSMPL(ISMPL); TYPE OF DATA TO BE SAMPLED
C                   1 --- X-DIR. VELOCITY COMPONENT
C                   2 --- Y-DIR. VELOCITY COMPONENT
C                   3 --- Z-DIR. VELOCITY COMPONENT
C                   4 --- PRESSURE
C                   5 --- VOLUMETRIC FRACTION OF LIQUID PHASE (NOT SUPPORTED)
C                   6 --- TEMPRATURE
C          XSMPL(ISMPL); X     COORDINATE OF  SAMPLING POINT ISMPL
C          YSMPL(ISMPL); Y     COORDINATE OF  SAMPLING POINT ISMPL
C          ZSMPL(ISMPL); Z     COORDINATE OF  SAMPLING POINT ISMPL
C
C    [9] FILE NAMES
C    FILEMS      ; FILE NAME TO READ MESH DATA
C    FILEBC      ; FILE NAME TO READ BOUNDARY CONDITIONS
C    FILEIF      ; FILE NAME TO READ INITIAL FLOW FIELD
C    FILEFF      ; FILE NAME TO WRITE FINAL FLOW FIELD
C    FILEHS      ; FILE NAME TO WRITE TIME HISTORIES
C    FILEAT      ; FILE NAME TO READ  ELEMENT ATTRIBUTE 
C    FILEMD      ; FILE NAME TO READ  MID-NODES DATA    
C    FILEOS      ; FILE NAME TO READ  OVERSET DATA      
C    FILEAV      ; FILE NAME TO WRITE AVERAGE   FIELD  (IOUT)
C    FILERM      ; FILE NAME TO WRITE RMS       FIELD  (IOUT)
C    FILEST      ; FILE NAME TO WRITE STRESS    FIELD  (IOUT)
C    FILEFS      ; FILE NAME TO WRITE CURRENT   FIELD  (INTFSV)
C    FILEPS      ; FILE NAME TO WRITE SURFACE PRESSURE (INTPSV)
C    
      IERR = 0
      ILINE= 0
C
      WRITE(IUT6,*) 
      WRITE(IUT6,*) '  LESRPX : READING CONTROLL PARAMETERS (VER.7.1)'
C
C
C READ CONTROL PARAMETERS
C
C
      IF(IACT.EQ.2) THEN
          WRITE(IUT0,*) 'WRITE MODE IS NOT SUPPORTED NOW'
          IERR=1
          RETURN
      ENDIF
C
      WRITE(IUT6,  610)
      ILINE=ILINE+1
      READ (IUT5,FMTAM) HEADMY
      IF(HEADMY(1:8).NE.CKEYWD) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP1
          IERR=1
          RETURN
      ENDIF
C
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) COMGEN
      WRITE(IUT6,  620) COMGEN
C
C    [1] ANALYSIS MODE    
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) ITRANS,IMODEL,IFORM ,IPRESS,FSMACH
      WRITE(IUT6,621)               ITRANS,IMODEL,IFORM ,IPRESS,FSMACH
C
      IF(ITRANS.LT.1 .OR. ITRANS.GT.3) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'ITRANS'
          IERR = 1
          RETURN
      ENDIF
C
      IF(      IMODEL.NE. 0 .AND. IMODEL.NE. 1 
     *   .AND. IMODEL.NE. 2 .AND. IMODEL.NE.10
     *   .AND. IMODEL.NE.11 .AND. IMODEL.NE.12
     *   .AND. IMODEL.NE.13 .AND. IMODEL.NE.14 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'IMODEL'
          IERR = 1
          RETURN
      ENDIF
C
      IF( ITRANS.GE.2 .AND. 
     *   (IMODEL.EQ.1 .OR. IMODEL.EQ.2 ) ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) 'STEADY & LES MODE MUST NOT BE SPECIFIED'
          IERR = 1
          RETURN
      ENDIF
C
      IF( ITRANS.EQ.1 .AND. IMODEL.GE.10 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) 'UNSTEADY RANS MODE IS NOT SUPPORTED NOW'
          IERR = 1
          RETURN
      ENDIF
C
      IF(IFORM.LT.1 .OR. IFORM.GT.5) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'IFORM '
          IERR = 1
          RETURN
      ENDIF
C
      IF(ITRANS.GT.1 .AND. IFORM.LT.3) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) 'ONLY EULER-BACKWARD IS ALLOWED '
          WRITE(IUT0,*) ' FOR STADY MODE'
          IERR = 1
          RETURN
      ENDIF
C
      IF(IPRESS.LT.1 .OR. IPRESS.GT.2) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'IPRESS'
          IERR = 1
          RETURN
      ENDIF
C
      IF(FSMACH.LT.0.0E0 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'FSMACH'
          IERR = 1
          RETURN
      ENDIF
C
C    [2] SCALE
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) D000 ,U000 ,T000 ,TREF
      WRITE(IUT6,622)               D000 ,U000 ,T000 ,TREF
C
      IF(D000.LT.0.0E0 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'D000'
          IERR = 1
          RETURN
      ENDIF
C
      IF(U000.LT.0.0E0 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'U000'
          IERR = 1
          RETURN
      ENDIF
C
      IF(T000.LT.0.0E0 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'T000'
          IERR = 1
          RETURN
      ENDIF
C
      IF(TREF.LE.0.0E0 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'TREF'
          IERR = 1
          RETURN
      ENDIF
C
C    [3] PHYSICAL FUNCTION FLAGS
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
CC    READ (IUT5,*,ERR=900,END=900) IHEAT ,ICAV  ,IBUSNQ
CC    WRITE(IUT6,623)               IHEAT ,ICAV  ,IBUSNQ
      READ (IUT5,*,ERR=900,END=900) IHEAT ,ISOLID,ICAV  ,IBUSNQ
      WRITE(IUT6,623)               IHEAT ,ISOLID,ICAV  ,IBUSNQ
C
      IF(IHEAT.LT.0 .OR. IHEAT.GT.3) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'IHEAT '
          IERR = 1
          RETURN
      ENDIF
C
      IF(ISOLID.LT.0 .OR. ISOLID.GT.1) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'ISOLID'
          IERR = 1
          RETURN
      ENDIF
C
CC      IF(ICAV.LT.0 .OR. ICAV.GT.1) THEN
CC          WRITE(IUT0,*) ERRMSG
CC          WRITE(IUT0,*) EREXP2, 'ICAV'
CC          IERR = 1
CC          RETURN
CC      ENDIF
C
CC      IF(ICAV.EQ.1) THEN
CC          WRITE(IUT0,*) ERRMSG
CC          WRITE(IUT0,*) 'CAVITATION IS NOT SUPPORTED NOW'
CC          IERR = 1
CC          RETURN
CC      ENDIF
C
      IF(IBUSNQ.LT.0 .OR. IBUSNQ.GT.1) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'IBUSNQ'
          IERR = 1
          RETURN
      ENDIF
C
C    [4] FRAME OF REFERENCE 
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) NFRAME,ISET  ,JSET  ,OMEGA
      WRITE(IUT6,624)               NFRAME,ISET  ,JSET  ,OMEGA
C
      IF(JSET.LT.0) THEN
          JSET=-JSET
          JSETOS=1
      ENDIF    
C
C
      IF(NFRAME.LT.-1) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'NFRAME'
          IERR = 1
          RETURN
      ENDIF
C
      IF(NFRAME.GT.MFRAME) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP5, MFRAME
          IERR = 1
          RETURN
      ENDIF
C
      IF(JSET.LT.0) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'JSET'
          IERR = 1
          RETURN
      ENDIF
C
      DO 10 IFRAME = 1 , NFRAME
          READ (IUT5,  *) UFRAM0(IFRAME), VFRAM0(IFRAME), WFRAM0(IFRAME)
          WRITE(IUT6,635) IFRAME ,
     &                    UFRAM0(IFRAME), VFRAM0(IFRAME), WFRAM0(IFRAME)
          UFRAM0(IFRAME)=UFRAM0(IFRAME)/U000
          VFRAM0(IFRAME)=VFRAM0(IFRAME)/U000
          WFRAM0(IFRAME)=WFRAM0(IFRAME)/U000
   10 CONTINUE
C
C    [5] CONSTANT
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) VISCM ,SIGMA ,RHOF  ,RHOS
      WRITE(IUT6,625)               VISCM ,SIGMA ,RHOF  ,RHOS
C
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) CONDF ,CONDS ,CPF   ,CPS   
      WRITE(IUT6,626)               CONDF ,CONDS ,CPF   ,CPS   
C
      IF(VISCM.LT.0.0E0 ) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'VISCM'
          IERR = 1
          RETURN
      ENDIF
C
      IF(RHOF.LT.0.0E0 .OR. RHOS.LT.0.0E0) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'RHOSF, RHOSS'
          IERR = 1
          RETURN
      ENDIF
C
      IF(CONDF.LT.0.0E0 .OR. CONDS.LE.0.0E0) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'CONDF, CONDS'
          IERR = 1
          RETURN
      ENDIF
C
      IF(CPF.LT.0.0E0 .OR. CPS.LE.0.0E0) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'CPF, CPS'
          IERR = 1
          RETURN
      ENDIF
C
C    [6] TIME INTEGRATION 
      ILINE=ILINE+1
      READ (IUT5,FMTAM) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) ISTART,NTIME ,DT    ,NMAXSE,NMAXSI
      WRITE(IUT6,627)               ISTART,NTIME ,DT    ,NMAXSE,NMAXSI
C
      ILINE=ILINE+1
      READ (IUT5,FMTAM) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS  
      WRITE(IUT6,628)               NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS  
C
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) TFINAL,UFINAL,VFINAL,WFINAL
      WRITE(IUT6,629)               TFINAL,UFINAL,VFINAL,WFINAL
C
      IF(ISTART.NE.0 .AND. ISTART.NE.1) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'ISTART'
          IERR = 1
          RETURN
      ENDIF
C
      IF(NTIME.LT.0) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'NTIME'
          IERR = 1
          RETURN
      ENDIF
C
      IF(NTIME.GT.MTIME) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP3, MTIME
          IERR = 1
          RETURN
      ENDIF
C
      IF(NMAXSE.LT.1) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'NMAXSE'
          IERR = 1
          RETURN
      ENDIF
C
      IF(NMAXSI.LT.1) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'NMAXSI'
          IERR = 1
          RETURN
      ENDIF
C
C    [7] ADDITION OUTPUT 
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) IOUT  ,INTFSV,INTPSV 
      WRITE(IUT6,630)               IOUT  ,INTFSV,INTPSV
C
      IF(IOUT.NE.0 .AND. IOUT.NE.1 .AND. IOUT.NE.2) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP2, 'IOUT'
          IERR = 1
          RETURN
      ENDIF
C
C    [8] SMPLING DATA IN HISTORY FILE  
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,*,ERR=900,END=900) NSMPL
      WRITE(IUT6,631)               NSMPL
C
C
      IF(NSMPL.GT.MSMPL) THEN
          WRITE(IUT0,*) ERRMSG
          WRITE(IUT0,*) EREXP4, MSMPL
          IERR = 1
          RETURN
      ENDIF
C
      NHST=MRESV
      DO 20 ISMPL = 1 , NSMPL
          ILINE=ILINE+1
          READ (IUT5,*,ERR=900,END=900)
     *    LSMPL(ISMPL) ,
     *    XSMPL(ISMPL) , YSMPL(ISMPL) , ZSMPL(ISMPL)
C
          IF(LSMPL(ISMPL).LT.1 .OR. LSMPL(ISMPL).GT.9) THEN
              WRITE(IUT0,*) ERRMSG
              WRITE(IUT0,*) EREXP1, 'LSMPL '
              IERR = 1
              RETURN
          ENDIF

          WRITE(IUT6,632) COMDAT(LSMPL(ISMPL)) ,
     *                     XSMPL(ISMPL) , YSMPL(ISMPL) , ZSMPL(ISMPL)
          NHST = NHST+1
          WRITE(COMHST(NHST),701)
     *                    COMDAT(LSMPL(ISMPL)) ,
     *                    XSMPL(ISMPL) , YSMPL(ISMPL) , ZSMPL(ISMPL)
   20 CONTINUE
C
C
C    [9] FILE NAMES
C
C    [9-01] NAME OF MESH FILE [IN]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEMS
      CALL RFNAME(FILEMS,FILEMR,IUT0,IERR)
C
C
C    [9-02] NAME OF B.C. FILE [IN]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEBC
      CALL RFNAME(FILEBC,FILEBR,IUT0,IERR)
C
C
C    [9-03] NAME OF INITIAL FLOW FILE [IN]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEIF
C
C
C    [9-04] NAME OF FLOW FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEFF
      CALL RFNAME(FILEFF,FILEFR,IUT0,IERR)
C
C    [9-05] NAME OF HISTORY FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEHS
C
C    [9-06] NAME OF ATTRIBUTE FILE [IN]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEAT
      CALL RFNAME(FILEAT,FILEAR,IUT0,IERR)
C
C    [9-07] NAME OF MID-NODE FILE [IN]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEMD
C
C    [9-08] NAME OF OVERSET FILE [IN]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEOS
C
C    [9-09] NAME OF AVERAGE FLOW FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEAV
C
C    [9-10] NAME OF RMS FLOW FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILERM
C
C    [9-11] NAME OF STRESS FLOW FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEST
C
C    [9-12] NAME OF CURRENT FLOW FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEFS
C
C    [9-13] NAME OF SURFACE PRESSURE FILE [OUT]
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
      ILINE=ILINE+1
      READ (IUT5,FMTAM,ERR=900,END=900) FILEPS
C
C
      IF(IPART.GE.1) THEN
          IERRS = 0
C
          CALL MFNAME(FILEMS,FILE,IPART,IUT0,IERR)
          FILEMS = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEMR,FILE,IPART,IUT0,IERR)
          FILEMR = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEBC,FILE,IPART,IUT0,IERR)
          FILEBC = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEBR,FILE,IPART,IUT0,IERR)
          FILEBR = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEIF,FILE,IPART,IUT0,IERR)
          FILEIF = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEFF,FILE,IPART,IUT0,IERR)
          FILEFF = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEFR,FILE,IPART,IUT0,IERR)
          FILEFR = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEHS,FILE,IPART,IUT0,IERR)
          FILEHS = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEAT,FILE,IPART,IUT0,IERR)
          FILEAT = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEAR,FILE,IPART,IUT0,IERR)
          FILEAR = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEMD,FILE,IPART,IUT0,IERR)
          FILEMD = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEOS,FILE,IPART,IUT0,IERR)
          FILEOS = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEAV,FILE,IPART,IUT0,IERR)
          FILEAV = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILERM,FILE,IPART,IUT0,IERR)
          FILERM = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEST,FILE,IPART,IUT0,IERR)
          FILEST = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEFS,FILE,IPART,IUT0,IERR)
          FILEFS = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEPS,FILE,IPART,IUT0,IERR)
          FILEPS = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEDM,FILE,IPART,IUT0,IERR)
          FILEDM = FILE
          IERRS = IERRS+IERR
C
          CALL MFNAME(FILEFM,FILE,IPART,IUT0,IERR)
          FILEFM = FILE
          IERRS = IERRS+IERR
C
          IF(IERRS.NE.0) THEN
              WRITE(IUT0,*) ERRMSG
              IERR = IERRS
              RETURN
          ENDIF
      ENDIF
C
      WRITE(IUT6,    *) 'MESH     DAT.FILE=' , FILEMS
      WRITE(IUT6,    *) 'BOUNDARY DAT.FILE=' , FILEBC
      WRITE(IUT6,    *) 'FLOW_IN  DAT.FILE=' , FILEIF
      WRITE(IUT6,    *) 'FLOW_OUT DAT.FILE=' , FILEFF
      WRITE(IUT6,    *) 'HISTORY  DAT.FILE=' , FILEHS
      WRITE(IUT6,    *) 'ATTRIB.  DAT.FILE=' , FILEAT
      WRITE(IUT6,    *) 'MID-NODE DAT.FILE=' , FILEMD
      WRITE(IUT6,    *) 'OVERSET  DAT.FILE=' , FILEOS
      WRITE(IUT6,    *) 'AVERAGE  DAT.FILE=' , FILEAV
      WRITE(IUT6,    *) 'RMS      DAT.FILE=' , FILERM
      WRITE(IUT6,    *) 'STRESS   DAT.FILE=' , FILEST
      WRITE(IUT6,    *) 'SAMPLING DAT.FILE=' , FILEFS
      WRITE(IUT6,    *) 'SURFACE  DAT.FILE=' , FILEPS
      WRITE(IUT6,    *) 'DEF-MESH DAT.FILE=' , FILEDM
C
      RHO000=RHOF
      VISCM=VISCM/(U000*D000)
      RHOF  =RHOF/RHO000
      RHOS  =RHOS/RHO000
      CPF   =CPF/(U000*U000/T000)
      CPS   =CPS/(U000*U000/T000)
      CONDF =CONDF/(RHO000*U000*U000*U000*D000/T000)
      CONDS =CONDS/(RHO000*U000*U000*U000*D000/T000)
C
      OMEGA=OMEGA  /(U000/D000)
      DT=DT        /(D000/U000)
      TFINAL=TFINAL/(D000/U000)
      UFINAL=UFINAL/U000
      VFINAL=VFINAL/U000
      WFINAL=WFINAL/U000
C
      DO 30 ISMPL = 1 , NSMPL
          XSMPL(ISMPL)=XSMPL(ISMPL)/D000
          YSMPL(ISMPL)=YSMPL(ISMPL)/D000
          ZSMPL(ISMPL)=ZSMPL(ISMPL)/D000
 30    CONTINUE
C
      WRITE(IUT6,*) '  LESRPX SUCCESFULLY TERMINATED'
      WRITE(IUT6,*) 
C
      RETURN
C
  610 FORMAT(' LESRPX: READING CALCULATION PARAMETERS AND FILE NAMES')
  620 FORMAT(' COMGEN=',A60)
  621 FORMAT(' ITRANS=', I12,     ' IMODEL=', I12,    
     *       ' IFORM =', I12,     /
     *       ' IPRESS=', I12,     ' FSMACH=', 1PE12.5  )
  622 FORMAT(' D000  =', 1PE12.5, ' U000  =', 1PE12.5,
     *       ' T000  =', 1PE12.5, ' TREF  =', 1PE12.5  )
C 623 FORMAT(' IHEAT =', I12,     ' ICAV  =', I12,    
C    *       ' IBUSNQ=', I12                           )
  623 FORMAT(' IHEAT =', I12,  ' ISOLID=', I12,   
     *       ' ICAV  =', I12,  ' IBUSNQ=', I12       )
  624 FORMAT(' NFRAME=', I12,    ' ISET  =', I12,      
     *     ' JSET  =', I12,    ' OMEGA =', 1PE12.5   ) 
  625 FORMAT(' VISCM =', 1PE12.5, ' SIGMA =', 1PE12.5,
     *     ' RHOF  =', 1PE12.5, ' RHOS  =', 1PE12.5  )
  626 FORMAT(' CONDF =', 1PE12.5, ' CONDS =', 1PE12.5,
     *     ' CPF   =' ,1PE12.5, ' CPS   =', 1PE12.5  )
  627 FORMAT(' ISTART=', I12,     ' NTIME =', I12,    
     *     ' DT    =', 1PE12.5, /
     *     ' NMAXSE=', I12,     ' NMAXSI=', I12      )
  628 FORMAT(' NMAXT =', I12,     ' NMAXP =', I12,/    
     *     ' EPST  =' ,1PE12.5, ' EPSP  =', 1PE12.5,
     *     ' EPSS  =' ,1PE12.5                       )
  629 FORMAT(' TFINAL=', 1PE12.5, ' UFINAL=', 1PE12.5,
     *     ' VFINAL=' ,1PE12.5, ' WFINAL=', 1PE12.5  )
  630 FORMAT(' IOUT  =', I12,     ' INTFSV=', I12,    
     *     ' INTPSV=' ,  I12.5                       )
  631 FORMAT(' NSMPL =', I12                           )
  632 FORMAT(' LSMPL =', A15    , ' XSMPL =' ,1PE12.5,
     *       ' YSMPL =', 1PE12.5, ' ZSMPL =' ,1PE12.5  )
  635 FORMAT(' IFRAME=', I12    , ' UFRAME=' ,1PE12.5,
     &       ' VFRAME=', 1PE12.5, ' WFRAME=' ,1PE12.5)
 701  FORMAT(A15 , '  X=' , F11.5 , '  Y=', F11.5 , '  Z=', F11.5 )
C
  900 CONTINUE
      WRITE(IUT0,*) ERRMSG
      WRITE(IUT0,'(A28,I8)') EREXP0, ILINE
      IERR=1
      RETURN
C  
      END
