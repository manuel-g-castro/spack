      SUBROUTINE SETOS(N2,ME,NE,NP,NEX,IPART,NPART,MPSET,NDOM,
     *                 MFRM,NFRM,ITIME,NODE,LEFRM,X,Y,Z,
     *                 OMEGA,TIME,IEATTR,IPATTR,
     *                 NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
     *                 COEFP1,COEFP2,COEFP3,
     *                 NESET,LESET1,LESET2,LESET3,LESET4,
     *                 COEFE1,COEFE2,COEFE3,
     *                 MMRF,NMRF,IFATTR,OMGMRF,AMRF,
     *                 XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
     *                 MZ,MBLK,NDIVX,NDIVY,NDIVZ,NEZ,IELIST,ISTART,
     *                 JNTFND,EPSOS,
     *                 IUT6,IUT0,IERR)
      IMPLICIT NONE
C
C[INPUT]
      INTEGER*4 N2,ME,NE,NP,NEX(8),IPART,NPART,MPSET,
     *          NDOM,
     *          NODE(N2,NE),LEFRM(NE),
     *          IEATTR(NE),IPATTR(NP),MFRM,NFRM,ITIME
      REAL*4    X(NP),Y(NP),Z(NP),OMEGA,TIME
      REAL*4    XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX
      INTEGER*4 MZ,MBLK,NDIVX,NDIVY,NDIVZ,
     *          NEZ(MZ),IELIST(MBLK),ISTART(MZ)
      INTEGER*4 JNTFND
      REAL*4    EPSOS
      INTEGER*4 IUT0,IUT6,IERR
C
C[INPUT/OUTPUT (OVERSET DATA)]
      INTEGER*4 NPSET
      INTEGER*4 LPSET1(MPSET),LPSET2(MPSET),LPSET3(MPSET),
     *          LPSET4(MPSET)
      REAL*4    COEFP1(MPSET),COEFP2(MPSET),COEFP3(MPSET)
C
      INTEGER*4 NESET
      INTEGER*4 LESET1(MPSET),LESET2(MPSET),LESET3(MPSET),
     *          LESET4(MPSET)
      REAL*4    COEFE1(MPSET),COEFE2(MPSET),COEFE3(MPSET)
C
      INTEGER*4 MMRF,NMRF
      INTEGER*4 IFATTR(MFRM)
      REAL*4    OMGMRF(MMRF),AMRF(3,MMRF)
C
C[LOCAL:OVERSET TABLE-3]
      INTEGER*4, ALLOCATABLE::
     * NFRMS(:),LFRMS(:,:),NFRMR(:),LFRMR(:,:)
C
C[LOCAL:OVERSET TABLE-2]
      INTEGER*4 NDOMS,NDOMR
      INTEGER*4, ALLOCATABLE::
     * LDOMS(:),NBDOMS(:),LISTS(:),LISTR(:),
     * LOSFMS(:),LOSPS(:),LTYPES(:),
     * LDOMR(:),NBDOMR(:),LOSFMR(:),LOSPR(:),LTYPER(:)
      REAL*4, ALLOCATABLE::
     * BNDBOX(:,:),OSBOXG(:,:),
     * XOVERS(:),YOVERS(:),ZOVERS(:),
     * XOVERR(:),YOVERR(:),ZOVERR(:)
C
C[LOCAL:OVERSET TABLE-1]
      INTEGER*4, ALLOCATABLE::
     * LOSFDS(:),LOSFDR(:)
      REAL*4, ALLOCATABLE::
     * COEF1S(:),COEF2S(:),COEF3S(:),
     * COEF1R(:),COEF2R(:),COEF3R(:),
     * ERROSR(:),ERROSS(:),
     * XMINE(:),YMINE(:),ZMINE(:),XMAXE(:),YMAXE(:),ZMAXE(:)
C
C[LOCAL]
      INTEGER*4 LPFRM(NP)
      INTEGER*4 IBUF,IE,IP,I,MBPDOM,MDOM,MCOMM,IBP,IBE,IFRM,IERRA
      REAL*4    CBUF1,CBUF2,CBUF3
C
C[LOCAL FOR BLOCK]
      REAL*4    EPS
      INTEGER*4 IPB
      DATA EPS   /1.0E-1/
C
C[LOCAL FOR BLOCK]
      REAL*4    OSBOX(6)
C
C
C     VERSION 2011.07.01 WRITTEN BY Y.YAMADE   
C
C     FUNCTION
C     THIS PROGRAM MAKES OVERSET DATA BY TAKING INTO ACCOUNT 
C     INTER DOMAIN CONNECTION
C
C     
C     ARGUMENT LIST
C
C[INPUT]
C N2         : NUMBER OF NODES IN A ELEMENT (=8)
C              SOMETIMES, IT IS SET TO 9 TO AVOID BANK CONFLICT.
C NE         : NUMBER OF ELEMENTS
C NP         : NUMBER OF NODES
C IPART      : DOMAIN NUMBER (1 - NPART) 
C NPART      : NUMBER OF DOMAINS
C MPSET      : MAX. NUMBER OF OVERSET NODES
C NODE(I,IE) : NODE TABLE
C LEFRM(IE)  : FRAME NUMBER AT ELEMENTS
C X(IP)      : X COORDINATE
C Y(IP)      : Y COORDINATE
C Z(IP)      : Z COORDINATE
C
C[OUTPUT]
C NPSET      : NUMBER OF OVERSET NOUSES
C LPSET1(IBP): OVERSET NODES LIST
C LPSET2(IBP): ELEMENT NUMBER OF PARENTS ELEMENTS OF OVERSET NODES
C LPSET3(IBP): DOMAIN NUMBER
C              0        : BOTH OF OVERSET NODES AND PARENTS ELEENTS 
C                         ARE WITHIN THE DOMAIN 
C              POSITIVE : ONLY PARENT ELEMENTS ARE WITHIN THE DOMAIN
C              NEGATIVE : ONLY OVERSET NODES   ARE WITHIN THE DOMAIN
C COEF1(IBP) : LOCAL COORDINATE-1  
C COEF2(IBP) : LOCAL COORDINATE-2 
C COEF3(IBP) : LOCAL COORDINATE-3 
C
C[LOCAL ENTRY FOR OVERSET TABLE-3]
C NFRMS(  IPART) : NUMBER OF FRAMES FOR SENDING   IN THE DOMAIN OF IPART
C LFRMS(I,IPART) : FRAME LIST       FOR SENDING   IN THE DOMAIN OF IPART
C NFRMR(  IPART) : NUMBER OF FRAMES FOR RECEIVING IN THE DOMAIN OF IPART
C LFRMR(I,IPART) : FRAME LST        FOR RECEIVING IN THE DOMAIN OF IPART
C
C[LOCAL ENTRY FOR OVERSET TABLE-2]
C NDOMS          : NUMBER OF DOMAIN  FOR SENDING
C LDOMS (  IDOM) : DOMAIN LIST       FOR SENDING 
C NBDOMS(I,IDOM) : NUMBER OF NODES   FOR SENDING TO THE DOMAIN OF IDOM
C LOSFMS(I,IDOM) : FRAME NUMBER LIST FOR SENDING TO THE DOMAIN OF IDOM
C LOSPS (I,IDOM) : NODE  NUMBER LIST FOR SENDING TO THE DOMAIN OF IDOM
C XOVERS(I,IDOM) : X-COORDINATE      FOR SENDING TO THE DOMAIN OF IDOM
C YOVERS(I,IDOM) : Y-COORDINATE      FOR SENDING TO THE DOMAIN OF IDOM
C ZOVERS(I,IDOM) : Z-COORDINATE      FOR SENDING TO THE DOMAIN OF IDOM
C NDOMR          : NUMBER OF DOMAIN  FOR RECEIVING
C LDOMR (  IDOM) : DOMAIN LIST       FOR RECEIVING FROM THE DOMAIN OF IDOM
C NBDOMR(I,IDOM) : NUMBER OF NODES   FOR RECEIVING FROM THE DOMAIN OF IDOM 
C LOSFMR(I,IDOM) : FRAME NUMBER LIST FOR RECEIVING FROM THE DOMAIN OF IDOM 
C LOSPR (I,IDOM) : NODE  NUMBER LIST FOR RECEIVING FROM THE DOMAIN OF IDOM  
C XOVERR(I,IDOM) : X-COORDINATE      FOR RECEIVING FROM THE DOMAIN OF IDOM  
C YOVERR(I,IDOM) : Y-COORDINATE      FOR RECEIVING FROM THE DOMAIN OF IDOM  
C ZOVERR(I,IDOM) : Z-COORDINATE      FOR RECEIVING FROM THE DOMAIN OF IDOM  
C
C NOTE THAT
C IPART IS GLOCAL DOMAIN NUMBER WHILE IDOM IS LOCAL 
C DOMAIN NUMBER
C
C[LOCAL ENTRY FOR OVERSET TABLE-1]
C LOSFDR (I,IDOM) : RESULT OF SERCHING (0:NOT FOUND, ELM. NUM.:FOUND)
C COEF1R (I,IDOM) : LOCAL COORDINATE-1
C COEF2R (I,IDOM) : LOCAL COORDINATE-2
C COEF3R (I,IDOM) : LOCAL COORDINATE-3
C LOSFDS (I,IDOM) : RESULT OF SERCHING (IT WILL BE GOT BY COMMUNICATION)
C COEF1S (I,IDOM) : LOCAL COORDINATE-1
C COEF2S (I,IDOM) : LOCAL COORDINATE-2
C COEF3S (I,IDOM) : LOCAL COORDINATE-3
C
      IERR=0
      CALL DDSYNC
      CALL USTSTA(31)
C
C
CCYY[1] CHECK MAXIMUM FRAME NUMBER
CC
      WRITE(IUT6,*) 
      WRITE(IUT6,*) ' **SETOS** : CHECKING MAX. FRAME NUMBER'
      WRITE(IUT6,*) ' **SETOS** : NMRF=', NMRF
      WRITE(IUT6,*) ' **SETOS** :OMEGA=', OMEGA
      WRITE(IUT6,*) ' **SETOS** : TIME=', TIME
      WRITE(IUT6,*) ' **SETOS** :NPSET=', NPSET
C
      DO 1100 IFRM=1,MFRM
          DO 1110 IE=1,NE
              IF(LEFRM(IE).EQ.IFRM) THEN
                  IFATTR(IFRM)=IEATTR(IE)
                  GOTO 1120
              ENDIF
 1110     CONTINUE   
C
          IFATTR(IFRM)=-99999
   
 1120     CONTINUE   
              CALL DDMAXI(IFATTR(IFRM),IBUF,IERR)
              IFATTR(IFRM)=IBUF 
              IF(IFATTR(IFRM).EQ.-9999) THEN
                  WRITE(IUT0,*) 'INVALID O.S. FRAME NUMBER IN B.C. FILE'
                  IERR=1
                  RETURN
              ELSE
                  WRITE(IUT6,*)' **SETOS** :FRM. NUM',IFRM,IFATTR(IFRM)
              ENDIF 
 1100 CONTINUE   
C
      WRITE(IUT6,*) ' **SETOS** : DONE'
C
CC
CCYY[2] MAKING OVERSET TABLE-3
CC
      WRITE(IUT6,*) 
      WRITE(IUT6,*) ' **SETOS3** : MAKING OS-TBL-3'
C
      ALLOCATE(NFRMS(     NPART))
      ALLOCATE(LFRMS(MFRM,NPART))
      ALLOCATE(NFRMR(     NPART))
      ALLOCATE(LFRMR(MFRM,NPART))
      ALLOCATE(BNDBOX(6  ,NPART))
      ALLOCATE(OSBOXG(6  ,NPART))
C
      CALL CHKOS2(NP,NPSET,IFATTR,LPSET1,LPSET4,
     *            X,Y,Z,IPATTR,OMEGA,TIME,OSBOX,
     *            IUT0,IUT6,IERR)
C
      CALL SETOS3(N2,NE,NP,IPART,NPART,MFRM,
     *            NODE,LEFRM,LPFRM,NPSET,LPSET1,LPSET4,
     *            NFRMS,LFRMS,NFRMR,LFRMR,
     *            XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
     *            BNDBOX,OSBOX,OSBOXG,  
     *            IUT6,IERR)
      CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
      IERR=IERRA
      IF(IERR.NE.0) THEN
          GOTO 9030
      ENDIF
      WRITE(IUT6,*) ' **SETOS3** : DONE'
CC
CCYY[3] MAKING OVERSET TABLE-2
CC
      WRITE(IUT6,*)
      WRITE(IUT6,*) ' **SETOS2** : MAKING OS-TBL-2'
C
      DO 1300 IBP =1,NPSET
          LPSET2(IBP)=0
          LPSET3(IBP)=0
          COEFP1(IBP)=0.0E0
          COEFP2(IBP)=0.0E0
          COEFP3(IBP)=0.0E0
 1300 CONTINUE
C
      DO 1310 IBE =1,NESET
          LESET2(IBE)=0
          LESET3(IBE)=0
          COEFE1(IBE)=0.0E0
          COEFE2(IBE)=0.0E0
          COEFE3(IBE)=0.0E0
 1310 CONTINUE
CC
CC    COUNT MBPDOM AND MDOM
CC
      CALL CNTOS2(IPART,NPART,N2,NE,NP,MFRM,MBPDOM,MDOM,
     *            MCOMM,
     *            NPSET,LPSET1,LPSET4,
     *            NESET,LESET1,LESET4,
     *            X,Y,Z,NODE, 
     *            OMEGA,TIME,IPATTR,IEATTR,IFATTR,
     *            NFRMS,LFRMS,NFRMR,LFRMR,
     *            MMRF,OMGMRF,AMRF,BNDBOX,OSBOXG,
     *            IUT6,IUT0,IERR)
      CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
      IERR=IERRA
      IF(IERR.NE.0) THEN
          GOTO 9030
      ENDIF
C
      WRITE(IUT6,*) 
      WRITE(IUT6,*) ' **CNTOS2** : MDOM  ', MDOM
      WRITE(IUT6,*) ' **CNTOS2** : MBPDOM', MBPDOM
      WRITE(IUT6,*) ' **CNTOS2** : MCOMM ', MCOMM
C
      ALLOCATE(LDOMS (MDOM ))
      ALLOCATE(NBDOMS(MDOM ))
      ALLOCATE(LISTS (MDOM ))
      ALLOCATE(LOSFMS(MCOMM))
      ALLOCATE(LOSPS (MCOMM))
      ALLOCATE(LTYPES(MCOMM))
      ALLOCATE(XOVERS(MCOMM))
      ALLOCATE(YOVERS(MCOMM))
      ALLOCATE(ZOVERS(MCOMM))
C
      ALLOCATE(LDOMR (MDOM ))
      ALLOCATE(NBDOMR(MDOM ))
      ALLOCATE(LISTR (MDOM ))
      ALLOCATE(LOSFMR(MCOMM))
      ALLOCATE(LOSPR (MCOMM))
      ALLOCATE(LTYPER(MCOMM))
      ALLOCATE(XOVERR(MCOMM))
      ALLOCATE(YOVERR(MCOMM))
      ALLOCATE(ZOVERR(MCOMM))
C
      LOSFMS=-1
      LOSFMR=-1
C
      CALL SETOS2(IPART,NPART,N2,NE,NP,MFRM,MDOM,
     *            MCOMM,
     *            NPSET,LPSET1,LPSET4,
     *            NESET,LESET1,LESET4,
     *            X,Y,Z,NODE, 
     *            OMEGA,TIME,IPATTR,IEATTR,IFATTR,
     *            NFRMS,LFRMS,NFRMR,LFRMR,
     *            NDOMS,LISTS,LDOMS,LOSFMS,NBDOMS,LOSPS,LTYPES,
     *            XOVERS,YOVERS,ZOVERS,
     *            NDOMR,LISTR,LDOMR,LOSFMR,NBDOMR,LOSPR,LTYPER,
     *            XOVERR,YOVERR,ZOVERR,
     *            MMRF,OMGMRF,AMRF,BNDBOX,OSBOXG,
     *            IUT6,IUT0,IERR)
      CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
      IERR=IERRA
      IF(IERR.NE.0) THEN
          GOTO 9020
      ENDIF
      WRITE(IUT6,*) ' **SETOS2** : DONE'
CC
CCYY[4] SERCHING PARENT ELEMENTS
CC
      WRITE(IUT6,*)
      WRITE(IUT6,*) ' **SETOS1** : SEARCHING PARENTS ELMS.'
C
      ALLOCATE(LOSFDS(MCOMM))
      ALLOCATE(COEF1S(MCOMM))
      ALLOCATE(COEF2S(MCOMM))
      ALLOCATE(COEF3S(MCOMM))
C
      ALLOCATE(LOSFDR(MCOMM))
      ALLOCATE(COEF1R(MCOMM))
      ALLOCATE(COEF2R(MCOMM))
      ALLOCATE(COEF3R(MCOMM))
C
      ALLOCATE(ERROSR(MCOMM))
      ALLOCATE(ERROSS(MCOMM))
C
      ALLOCATE(XMINE(NE))
      ALLOCATE(YMINE(NE))
      ALLOCATE(ZMINE(NE))
      ALLOCATE(XMAXE(NE))
      ALLOCATE(YMAXE(NE))
      ALLOCATE(ZMAXE(NE))
C
      CALL MINMAX(N2,NE,NP,NEX,X,Y,Z,NODE,
     *            XMINE,YMINE,ZMINE,XMAXE,YMAXE,ZMAXE)
C
      CALL DDSYNC
      CALL USTSTA(32)
      CALL SETOS1(IPART,NPART,N2,NE,NP,NEX,MBPDOM,MDOM,
     *            MCOMM,NODE,LEFRM,X,Y,Z,
     *            XMINE,YMINE,ZMINE,XMAXE,YMAXE,ZMAXE,
     *            NDOMS,NDOMR,NBDOMS,NBDOMR,LISTS,LISTR,
     *            LDOMS,LDOMR,LOSPR,
     *            LOSFMR,XOVERR,YOVERR,ZOVERR,
     *            LOSFDS,COEF1S,COEF2S,COEF3S,ERROSR,
     *            LOSFDR,COEF1R,COEF2R,COEF3R,ERROSS,
     *            MZ,MBLK,NDIVX,NDIVY,NDIVZ,NEZ,IELIST,ISTART,
     *            XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
     *            JNTFND,EPSOS,IUT0,IUT6,IERR)
      CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
      CALL DDSYNC
      CALL USTEND(32)
      IERR=IERRA
      IF(IERR.NE.0) THEN
          GOTO 9010
      ENDIF
      WRITE(IUT6,*) ' **SETOS1** : DONE'
C
CC
CCYY[5] SERCHING PARENT ELEMENTS
CC
      WRITE(IUT6,*)
      WRITE(IUT6,*) ' **SETOS0** : MAKE OVERSET DATA'
      CALL SETOS0(IPART,NPART,MBPDOM,MDOM,MPSET,NE,LEFRM,
     *            MCOMM,NDOMS,NDOMR,
     *            LISTS,LISTR,NBDOMS,NBDOMR,LDOMS,LDOMR,
     *            LOSPS,LOSPR,LOSFMS,LOSFMR,LOSFDS,LOSFDR,
     *            LTYPES,LTYPER, 
     *            COEF1S,COEF2S,COEF3S,ERROSS,
     *            COEF1R,COEF2R,COEF3R,
     *            NPSET, LPSET1,LPSET2,LPSET3,LPSET4,
     *            COEFP1,COEFP2,COEFP3,
     *            NESET, LESET1,LESET2,LESET3,LESET4,
     *            COEFE1,COEFE2,COEFE3,
     *            IUT6,IERR,N2,NP,NODE,X,Y,Z)
      CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
      IERR=IERRA
      IF(IERR.NE.0) THEN
          GOTO 9010
      ENDIF
      WRITE(IUT6,*) ' **SETOS0** : DONE'
C
 9010 CONTINUE
      DEALLOCATE(LOSFDS)
      DEALLOCATE(COEF1S)
      DEALLOCATE(COEF2S)
      DEALLOCATE(COEF3S)
C
      DEALLOCATE(LOSFDR)
      DEALLOCATE(COEF1R)
      DEALLOCATE(COEF2R)
      DEALLOCATE(COEF3R)
C
      DEALLOCATE(ERROSR)
      DEALLOCATE(ERROSS)
C
      DEALLOCATE(XMINE)
      DEALLOCATE(YMINE)
      DEALLOCATE(ZMINE)
      DEALLOCATE(XMAXE)
      DEALLOCATE(YMAXE)
      DEALLOCATE(ZMAXE)
C
 9020 CONTINUE
C
      DEALLOCATE(LDOMS )
      DEALLOCATE(NBDOMS)
      DEALLOCATE(LOSFMS)
      DEALLOCATE(LOSPS )
      DEALLOCATE(LTYPES)
      DEALLOCATE(XOVERS)
      DEALLOCATE(YOVERS)
      DEALLOCATE(ZOVERS)
C
      DEALLOCATE(LDOMR )
      DEALLOCATE(NBDOMR)
      DEALLOCATE(LOSFMR)
      DEALLOCATE(LOSPR )
      DEALLOCATE(LTYPER)
      DEALLOCATE(XOVERR)
      DEALLOCATE(YOVERR)
      DEALLOCATE(ZOVERR)
C
 9030 CONTINUE
      DEALLOCATE(NFRMS)
      DEALLOCATE(LFRMS)
      DEALLOCATE(NFRMR)
      DEALLOCATE(LFRMR)
      DEALLOCATE(BNDBOX)
      DEALLOCATE(OSBOXG)
C
      CALL DDSYNC
      CALL USTEND(31)
C
      RETURN
      END
