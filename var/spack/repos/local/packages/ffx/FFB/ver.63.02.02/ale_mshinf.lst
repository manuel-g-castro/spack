
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:38 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : ale_mshinf.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "ALE_MSHINF"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE ALE_MSHINF(
          2                          *     MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
          3                          *     N1,N2,NE,NP,NEX,NS,NSP,N2D,NELM,LOCAL,NODE,
          4                          *     X,Y,Z,XD,YD,ZD,
          5                          *     IPART,MDOM,NDOM,LDOM,NBPDOM,MBPDOM,IPSLF,IPSND,
          6                          *     MGAUSS,IGAUSH,IGAUSW,IGAUSP,IGAUST,MELM,ME,
          7                          *     SNI,DNXI,DNYI,DNZI,SN,DNXYZ,DELTA,
          8                          *     EAP1,EAP2,EAP3,EBP,MEP,MP,IENP,JENP,NEP,
          9                          *     NEBODY,NEHEAT,NSTET,NSPRD,NSWED,NSHEX,LEBODY,LEHEAT,
         10                          *     SBODY,DXBODY,DYBODY,DZBODY,SHEAT,
         11                          *     IFILTR,FILTER,
         12                          *     IMODEL,JPRESS,NEWALL,LEWALL,NEAR,DSNEAR,
         13                          *     NCRS,NAVDYN,NPFREE,NPSLD2,
         14                          *     LTAB,LPFREE,LPSLD2,GAMDYN,APRS,APRS0,ATEST0,
         15                          *     AAVER0,ATESPC,AAVEPC,
         16                     #ifdef RCAPCPL
         17                          *     NPCPL,LPCPL,XPCPL,YPCPL,ZPCPL,
         18                     #endif
         19                          *     MPWLAD,NPWALL,NEWLAD,NPWLAD,LPWALL,
         20                          *     XNWALL,YNWALL,ZNWALL,LEWLAD,LPWLAE,LPWLAD,DPWLAD,
         21                          *     MAXBUF,MWRK,RX,RY,WRKN,WRK01,WRK02,WRK03,WRK04,
         22                          *     WRK05,WRK06,DWRK01,DWRK02,DWRK03,DWRK04,DWRK05,
         23                          *     LWRK01,LWRK02,LEWRK,IWRTIM,
         24                     #ifdef cputime
         25                          *     DTALE,IUT6,IUT0,IERR)
         26                     #else
         27                          *     IUT6,IUT0,IERR)
         28                     #endif
         29                     C
         30                           IMPLICIT NONE
         31                     C
         32                           INTEGER*4 MCOLOR,MCPART
         33                           INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
         34                           INTEGER*4 N1,N2,NE,NP,NEX,NS,NSP,N2D,NELM
         35                           INTEGER*4 LOCAL(NSP,NS,4),NODE(N2,NE)
         36                           REAL*4    X(NP),Y(NP),Z(NP)
         37                           REAL*8    XD(NP),YD(NP),ZD(NP)
         38                           INTEGER*4 IPART,MDOM,NDOM,MBPDOM
         39                           INTEGER*4 LDOM(MDOM),NBPDOM(MDOM),
         40                          *          IPSLF(MBPDOM,MDOM),IPSND(MBPDOM,MDOM)
         41                     C
         42                     C     [INTEGRAL ELEMENT MATRICES]
         43                           INTEGER*4 MGAUSS,IGAUSH,IGAUSW,IGAUSP,IGAUST,MELM,ME
         44                           REAL*4    SNI(N1,NE+1),DNXI(N1,NE+1),DNYI(N1,NE+1),DNZI(N1,NE+1),
         45                          *          SN (N1,NE+1),DNXYZ(3,N1,NE+1),
         46                          *          DELTA(NE+1)
         47                           REAL*4    EAP1(N2,MEP,NP),EAP2(3,N2,MEP,NP),EAP3(6,N2,MEP,NP)
         48                           REAL*4    EBP(3,N2,MEP,NP)
         49                           INTEGER*4 MEP,MP
         50                           INTEGER*4 IENP(MEP,MP),JENP(MEP,MP),NEP(MP)
         51                     C
         52                     C     [INTEGRAL ELEMENT VECTORS NEEDED]
         53                           INTEGER*4 NEBODY,NEHEAT,NSTET,NSPRD,NSWED,NSHEX
         54                           INTEGER*4 LEBODY(2,NEBODY),LEHEAT(2,NEHEAT)
         55                           REAL*4    SBODY(N1,NEBODY),DXBODY(N1,NEBODY),DYBODY(N1,NEBODY),
         56                          *          DZBODY(N1,NEBODY),SHEAT(N1,NEHEAT)
         57                     C
         58                     C     [COMPUTE ELEMENT FILTER WIDTH]
         59                           INTEGER*4 IFILTR
         60                           REAL*4    FILTER(ME)
         61                     C
         62                     C     [SEARCH NEAREST WALL SURFACE FOR ALL ELEMENTS]
         63                           INTEGER*4 IMODEL,JPRESS,NEWALL
         64                           INTEGER*4 LEWALL(2,NEWALL),NEAR(NE),DSNEAR(NE)
         65                     C
         66                     C     [CAL. L.H.S. FOR PRS. EQ. AND DSM]
         67                           INTEGER*4 NCRS,NAVDYN,NPFREE,NPSLD2
         68                           INTEGER*4 LTAB(N1,N2,NE),
         69                          *          LPFREE(NPFREE),LPSLD2(NPSLD2)
         70                           REAL*4    GAMDYN,APRS (N1,N2,ME),APRS0 (NP),ATEST0(NP),AAVER0(NP),
         71                          *          ATESPC,AAVEPC
         72                     #ifdef RCAPCPL
         73                     C     [REVOCAP COUPLER: OBTAIN NODE LIST]
         74                           INTEGER*4 NPCPL
         75                           INTEGER*4 LPCPL(NPCPL)
         76                           REAL*4    XPCPL(NPCPL),YPCPL(NPCPL),ZPCPL(NPCPL)
         77                     #endif
         78                     C
         79                     C     [SEARCHING WALL ADJACENT NODES]
         80                           INTEGER*4 MPWLAD,NPWALL,NEWLAD,NPWLAD
         81                           INTEGER*4 LPWALL(NPWALL),
         82                          *          XNWALL(NEWALL),YNWALL(NEWALL),ZNWALL(NEWALL),
         83                          *          LEWLAD(NEWLAD),LPWLAE(7,NEWLAD),LPWLAD(MPWLAD),
         84                          *          DPWLAD(MPWLAD)
         85                     C
         86                           INTEGER*4 IUT6,IUT0,IERR
         87                     C
         88                     C     [WORK]
         89                           INTEGER*4 MAXBUF,MWRK,IFNDNW,MLST,IDUM,IE,IELM,J,IERRA
         90                           INTEGER*4 LWRK01(MWRK),LWRK02(MWRK),LEWRK(2,MWRK)
         91                           REAL*4    RX(N1,NE),RY(N1,NE),WRKN(MWRK*9),
         92                          :          WRK01(MWRK),WRK02(MWRK),WRK03(MWRK),
         93                          *          WRK04(MWRK),WRK05(MWRK),WRK06(MWRK)
         94                           REAL*8    DWRK01,DWRK02,DWRK03,DWRK04,DWRK05
         95                     C
         96                           CHARACTER*10 BLANK / ' ' /
         97                           CHARACTER*60 ERMSGC /' ## SUBROUTINE ALE_MSHINF: FATAL
         98                          * ERROR REPORT   ; RETURNED' /
         99                           INTEGER*4 IWRTIM
        100                           REAL*4    TWRK1,TWRK2,TWRK3,TWRK4,TWRK5,TWRK6,TWRK7,TWRK8
        101                     #ifdef cputime
        102                           REAL*4    DTALE(8)
        103                           include 'mpif.h'
        104                     #endif
        105                     C
        106                     C     <<<<< INTEGRAL ELEMENT MATRICES >>>>>
        107                     C
        108                     #ifdef cputime
        109                     C     CALL CPU_TIME(TWRK1)
        110                           TWRK1 = MPI_WTIME()
        111                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.ELM3DX:START',IUT6)
        112                     #endif
        113                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DELTA
                              <<< Loop-information  End >>>
        114     1  pp   4v            DO 2300 IE = 1, NE
        115     1   p   4v               DELTA(IE) = 0.0
        116     1   p   4v       2300 CONTINUE
        117                     C
        118                           CALL ELM3DX(MGAUSS,IGAUSH,IGAUSW,IGAUSP,IGAUST,
        119                          *            MELM,ME,N1,N2,NE,NP,NEX,XD,YD,ZD,NODE,
        120                          *            SNI ,DNXI,DNYI,DNZI,SN,RX,RY,WRKN,DELTA,
        121                          *            EAP1,EAP2,EAP3,EBP,MEP,MP,IENP,JENP,NEP,
        122                          *            DWRK01,DWRK02,DWRK03,DWRK04,DWRK05,IUT0,IERR)
        123                           CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        124     1                     IF(IERRA.NE.0) THEN
        125     1                        WRITE(IUT0,*) BLANK
        126     1                        WRITE(IUT0,*) ERMSGC
        127     1                        RETURN
        128     1                     ENDIF
        129                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RY, WRKN, RX, DNXYZ
                              <<< Loop-information  End >>>
        130     1  pp                 DO 2400 IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.58, ITR: 96, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RX, DNXYZ, WRKN, RY
                              <<< Loop-information  End >>>
        131     2   p   2v               DO 2410 J=1,N1
        132     2   p   2v                  DNXYZ(1,J,IE)=RX(J,IE)
        133     2   p   2v                  DNXYZ(2,J,IE)=RY(J,IE)
        134     2   p   2v                  DNXYZ(3,J,IE)=WRKN(J+N1*(IE-1))
        135     2   p   2v       2410    CONTINUE
        136     1   p            2400 CONTINUE
        137                     #ifdef cputime
        138                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.ELM3DX:END  ',IUT6)
        139                     C     CALL CPU_TIME(TWRK2)
        140                           TWRK2 = MPI_WTIME()
        141                           DTALE(1)=DTALE(1)+(TWRK2-TWRK1)
        142                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.ELM3BX:START',IUT6)
        143                     #endif
        144                     C
        145                     C     <<<<< INTEGRAL ELEMENT VECTORS NEEDED >>>>>
        146                     C
        147                           CALL ELM3BX
        148                          *   ( N1,N2,NP,XD,YD,ZD,NODE,NE,NEX,NSTET,NSPRD,NSWED,NSHEX,
        149                          *     LEBODY,NEBODY,SBODY,DXBODY,DYBODY,DZBODY,IERR)
        150                           CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        151     1                     IF(IERRA.NE.0) THEN
        152     1                         WRITE(IUT0,*) BLANK
        153     1                         WRITE(IUT0,*) ERMSGC
        154     1                         RETURN
        155     1                     ENDIF
        156                     C
        157                           CALL ELM3BX
        158                          *   ( N1,N2,NP,XD,YD,ZD,NODE,NE,NEX,NSTET,NSPRD,NSWED,NSHEX,
        159                          *     LEHEAT,NEHEAT,SHEAT,RX,RX,RX,IERR)
        160                           CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        161     1                     IF(IERRA.NE.0) THEN
        162     1                         WRITE(IUT0,*) BLANK
        163     1                         WRITE(IUT0,*) ERMSGC
        164     1                         RETURN
        165     1                     ENDIF
        166                     #ifdef cputime
        167                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.ELM3BX:END  ',IUT6)
        168                     C     CALL CPU_TIME(TWRK3)
        169                           TWRK3 = MPI_WTIME()
        170                           DTALE(2)=DTALE(2)+(TWRK3-TWRK2)
        171                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.FLT3DX:START',IUT6)
        172                     #endif
        173                     C
        174                     C     <<<<< COMPUTE ELEMENT FILTER WIDTH >>>>>
        175                     C
        176     1                     IF(IFILTR.EQ.3) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.00, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DELTA, FILTER
                              <<< Loop-information  End >>>
        177     2  pp   4v               DO 3000 IE = 1, NE
        178     2   p   4v                  FILTER(IE) = DELTA(IE)
        179     2   p   4v       3000    CONTINUE
        180     1                     ELSE
        181     1                        CALL FLT3DX(IFILTR,X,Y,Z,NODE,NE,NP,N2,NEX,FILTER)
        182     1                     END IF
        183                     #ifdef cputime
        184                     C     CALL CPU_TIME(TWRK4)
        185                           TWRK4 = MPI_WTIME()
        186                           DTALE(3)=DTALE(3)+(TWRK4-TWRK3)
        187                     #endif
        188                     C
        189                     C     <<<<< SEARCH NEAREST WALL SURFACE FOR ALL ELEMENTS >>>>>
        190                     C
        191     1                     IF(IMODEL.EQ.1 .AND. NEWALL.GE.1) THEN
        192     1                        IF(IPART.GE.1)
        193     1                    *        CALL NERWLX(X,Y,Z,NODE,NE,NP,N1,NEX,NS,NSP,
        194     1                    *                    LOCAL,LEWALL,NEWALL,NEAR,DSNEAR,
        195     1                    *                    WRK01,WRK02,WRK03)
        196     1                     ENDIF
        197                     #ifdef cputime
        198                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.FLT3DX:END  ',IUT6)
        199                     C     CALL CPU_TIME(TWRK5)
        200                           TWRK5 = MPI_WTIME()
        201                           DTALE(4)=DTALE(4)+(TWRK5-TWRK4)
        202                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.CALLHS:START',IUT6)
        203                     #endif
        204                     C
        205                     C     <<<<< CAL. L.H.S. FOR PRS. EQ. AND DSM >>>>>
        206                     C
        207     1                     IF(IMODEL.EQ.2 .OR. JPRESS.EQ.1) THEN
        208     1                     CALL CALLHS(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        209     1                    *            ME,NE,NP,NEX,N1,N2,NODE,
        210     1                    *            APRS,APRS0,ATEST0,AAVER0,
        211     1                    *            NCRS,ATESPC,AAVEPC,LTAB,
        212     1                    *            FILTER,GAMDYN,NAVDYN,NELM,
        213     1                    *            EAP1,EAP3,IENP,JENP,NEP,MEP,MP,
        214     1                    *            IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        215     1                    *            NPFREE,LPFREE,NPSLD2,LPSLD2,LWRK01,
        216     1                    *            RX,RY,LWRK02,IUT0,IERR)
        217     1                     CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        218     2                     IF(IERRA.NE.0) THEN
        219     2                         WRITE(IUT0,*) BLANK
        220     2                         WRITE(IUT0,*) ERMSGC
        221     2                         RETURN
        222     2                     ENDIF
        223     1                     ENDIF
        224                     #ifdef cputime
        225                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.CALLHS:END  ',IUT6)
        226                     C     CALL CPU_TIME(TWRK6)
        227                           TWRK6 = MPI_WTIME()
        228                           DTALE(5)=DTALE(5)+(TWRK6-TWRK5)
        229                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.SRFNVX:START',IUT6)
        230                     #endif
        231                     #ifdef RCAPCPL
        232                     C
        233                     C     <<<<< REVOCAP COUPLER: OBTAIN NODE LIST >>>>>
        234                     C
        235                           CALL SRFNVX(IPART,NE,NP,N2,NEX,NS,NSP,N2D,
        236                          *            LOCAL,NODE,XD,YD,ZD,
        237                          *            MWRK,NPCPL,LPCPL,LEWRK,
        238                          *            MDOM,NDOM,LDOM,NBPDOM,MBPDOM,IPSLF,IPSND,
        239                          *            XPCPL,YPCPL,ZPCPL,
        240                          *            LWRK01,WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
        241                          *            RX,RY,IUT6,IUT0,IERR)
        242                           CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        243                           IF(IERRA.NE.0) THEN
        244                               WRITE(IUT0,*) BLANK
        245                               WRITE(IUT0,*) ERMSGC
        246                               RETURN
        247                           ENDIF
        248                     #endif
        249                     #ifdef cputime
        250                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.SRFNVX:END  ',IUT6)
        251                     C     CALL CPU_TIME(TWRK7)
        252                           TWRK7 = MPI_WTIME()
        253                           DTALE(6)=DTALE(6)+(TWRK7-TWRK6)
        254                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.FINDNW:START',IUT6)
        255                     #endif
        256                     C
        257                     C     <<<<< SEARCHING WALL ADJACENT NODES >>>>>
        258                     C
        259                           IFNDNW=1
        260                           MLST=2
        261                           IDUM=2
        262                           CALL FINDNW(IFNDNW,MLST,ME,NE,NP,N2,NEX,NS,NSP,N2D,
        263                          *            X,Y,Z,MPWLAD,
        264                          *            LPWALL,NPWALL,
        265                          *            LEWALL,NEWALL,XNWALL,YNWALL,ZNWALL,
        266                          *            LEWLAD,NEWLAD,LPWLAE,LPWLAD,NPWLAD,
        267                          *            DPWLAD,
        268                          *            LOCAL,NODE,
        269                          *            LWRK01,LWRK02,
        270                          *            IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,
        271                          *            MBPDOM,WRK01,RX,RY,MAXBUF,
        272                          *            IUT0,IUT6,IERR)
        273                           CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        274     1                     IF(IERRA.NE.0) THEN
        275     1                         WRITE(IUT0,*) BLANK
        276     1                         WRITE(IUT0,*) ERMSGC
        277     1                         RETURN
        278     1                     ENDIF
        279                     #ifdef cputime
        280                           IF (IWRTIM.EQ.1) CALL CLTIME('SUB.FINDNW:END  ',IUT6)
        281                     C     CALL CPU_TIME(TWRK8)
        282                           TWRK8 = MPI_WTIME()
        283                           DTALE(7)=DTALE(7)+(TWRK8-TWRK7)
        284                     #endif
        285                     C
        286                           RETURN
        287                           END

 Diagnostic messages: program name(ALE_MSHINF)
   jwd2006i-i  "ale_mshinf.f", line 89: この名前'IELM'は、宣言だけされていて引用されていません。
   jwd2008i-i  "ale_mshinf.f", line 90: この仮引数'LEWRK'は、副プログラム中で使用されていません。
   jwd2008i-i  "ale_mshinf.f", line 91: この仮引数'WRK06'は、副プログラム中で使用されていません。
   jwd2008i-i  "ale_mshinf.f", line 91: この仮引数'WRK05'は、副プログラム中で使用されていません。
   jwd2008i-i  "ale_mshinf.f", line 91: この仮引数'WRK04'は、副プログラム中で使用されていません。
   jwd5001p-i  "ale_mshinf.f", line 114: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "ale_mshinf.f", line 114: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "ale_mshinf.f", line 114: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "ale_mshinf.f", line 114: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "ale_mshinf.f", line 130: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "ale_mshinf.f", line 131: このDOループをSIMD化しました。(名前:J)
   jwd8204o-i  "ale_mshinf.f", line 131: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "ale_mshinf.f", line 131: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "ale_mshinf.f", line 177: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "ale_mshinf.f", line 177: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "ale_mshinf.f", line 177: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "ale_mshinf.f", line 177: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。

 Procedure information
   Lines      : 4316
   Statements : 3384
   Stack(byte): 3376
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 4316
   Total statements : 3384
   Total stack(byte): 3376
   Total prefetch num: 0

