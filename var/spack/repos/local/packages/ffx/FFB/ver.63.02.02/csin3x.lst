
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:52:55 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : csin3x.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "CSIN3X"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE : CSIN3X                                                C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY Y.YAMADE            C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         11                     C                                                                      C
         12                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         13                     C                                                                      C
         14                     C======================================================================C
         15                           SUBROUTINE CSIN3X(LOCAL,X,Y,Z,NODE,NE,NP,N2,NEX,NS,NSP,
         16                          *                  LEB,NB,XNB,YNB,ZNB,A)
         17                           IMPLICIT NONE
         18                     C
         19                           INTEGER*4 LOCAL,NODE,NE,NP,N2,NS,NSP,LEB,NB,NEX
         20                           REAL*8    X,Y,Z
         21                           REAL*4    XNB,YNB,ZNB,A
         22                           DIMENSION X(NP),Y(NP),Z(NP),NODE(N2,NE),NEX(8),
         23                          1          LEB(2,NB),XNB(NB),YNB(NB),ZNB(NB),A(NB)
         24                     C
         25                           DIMENSION LOCAL(NSP,NS,4)
         26                     C
         27                           INTEGER*4 IB,IE,IS,IETYPE,I,IA0,IA1,IB0,IB1,NNPE
         28                           INTEGER*4 IP1,IP2,IP3,IP4
         29                           REAL*8 AX,AY,AZ,BX,BY,BZ,CX,CY,CZ,CABS,DOT
         30                     C
         31                     C
         32                     C      CALCULATE ELEMENT'S SURFACE INWARD NORMAL VECTOR WITH
         33                     C     UNIT LENGTH AND SURFACE AREA
         34                     C         ( 3-D CALCULATION : SINGLE WORD & MULTI ELEMENT VERSION )
         35                     C                                           CODED BASED ON 'COSIN3'
         36                     C
         37                     C
         38                     C     ARGUMENT LISTINGS
         39                     C       (1) INPUT
         40                     C          LOCAL (I,IS); NODE NUMBER TABLE  DEFINING ELEMENT'S SURFACES
         41                     C          X      (IP) ; X-DIR. COORDINATE         OF NODE
         42                     C          Y      (IP) ; Y-DIR. COORDINATE         OF NODE
         43                     C          Z      (IP) ; Y-DIR. COORDINATE         OF NODE
         44                     C          NODE (I,IE) ; NODE TABLE
         45                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         46                     C          NP          ; NUMBER OF TOTAL    NODES
         47                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         48                     C          LEB  (I,IB) ; ELEMENT(1, & SURFACE(2, NUMBER SPECIFYING LIST
         49                     C          NB          ; NUMBER OF SURFACES
         50                     C
         51                     C       (2) OUTPUT
         52                     C          XNB    (IB) ; X COMPONENT OF THE NORMAL VECTOR OF SURFACE IB
         53                     C          YNB    (IB) ; Y COMPONENT OF THE NORMAL VECTOR OF SURFACE IB
         54                     C          ZNB    (IB) ; X COMPONENT OF THE NORMAL VECTOR OF SURFACE IB
         55                     C          A      (IB) ; AREA                             OF SURFACE IB
         56                     C
         57                     C
         58                     C    CAL. SURFACE AREA AND NORMAL UNIT VECTOR
         59                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 62
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEB, XNB, ZNB, YNB, A
                              <<< Loop-information  End >>>
         60     1  pp    s            DO 100 IB = 1 , NB
         61     1   p    v               IE = LEB(1,IB)
         62     1   p    v               IS = LEB(2,IB)
         63     2   p    m               IF(     NODE(8,IE).GE.1) THEN ! HEX
         64     2   p    s                  IETYPE = 4
         65     2   p    s               ELSE IF(NODE(6,IE).GE.1) THEN ! PRS
         66     2   p    s                  IETYPE = 3
         67     2   p    s               ELSE IF(NODE(5,IE).GE.1) THEN ! PYR
         68     2   p    s                  IETYPE = 2
         69     2   p    s               ELSE                          ! TET
         70     2   p    s                  IETYPE = 1
         71     2   p    v               ENDIF
         72     2   p    m               IF(LOCAL(4,IS,IETYPE).GE.1) THEN      ! QUADRILATERAL
         73     2   p    s                  IA1 = NODE(LOCAL(3,IS,IETYPE),IE)
         74     2   p    s                  IA0 = NODE(LOCAL(1,IS,IETYPE),IE)
         75     2   p    s                  IB1 = NODE(LOCAL(4,IS,IETYPE),IE)
         76     2   p    s                  IB0 = NODE(LOCAL(2,IS,IETYPE),IE)
         77     2   p    s               ELSE                                  ! TRIANGLE
         78     2   p    s                  IA1 = NODE(LOCAL(2,IS,IETYPE),IE)
         79     2   p    s                  IA0 = NODE(LOCAL(1,IS,IETYPE),IE)
         80     2   p    s                  IB1 = NODE(LOCAL(3,IS,IETYPE),IE)
         81     2   p    s                  IB0 = NODE(LOCAL(1,IS,IETYPE),IE)
         82     2   p    v               ENDIF
         83     1               C
         84     1   p    v                AX  = X(IA1) - X(IA0)
         85     1   p    v                AY  = Y(IA1) - Y(IA0)
         86     1   p    v                AZ  = Z(IA1) - Z(IA0)
         87     1               C
         88     1   p    v                BX  = X(IB1) - X(IB0)
         89     1   p    v                BY  = Y(IB1) - Y(IB0)
         90     1   p    v                BZ  = Z(IB1) - Z(IB0)
         91     1               C
         92     1   p    v                CX = AY*BZ-AZ*BY
         93     1   p    v                CY = AZ*BX-AX*BZ
         94     1   p    v                CZ = AX*BY-AY*BX
         95     1   p    v                CABS = SQRT(CX*CX+CY*CY+CZ*CZ)
         96     1               C
         97     1   p    v                XNB (IB) = REAL(-CX/CABS  )
         98     1   p    v                YNB (IB) = REAL(-CY/CABS  )
         99     1   p    v                ZNB (IB) = REAL(-CZ/CABS  )
        100     1   p    v                A   (IB) = REAL(0.5D0*CABS)
        101     1   p    v        100 CONTINUE
        102                     C
        103                     C
        104                     C    CHECK NORMAL VECTOR DIRECTION
        105                     C    CHANGE IF THE VECTOR DIRECT OUTWARD
        106                     C
        107                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 3
                              <<< Loop-information  End >>>
        108     1  pp                 DO 200 IB = 1 , NB
        109     1   p                     IE = LEB(1,IB)
        110     1   p                     IS = LEB(2,IB)
        111     2   p                     IF(     NODE(8,IE).GE.1) THEN ! HEX
        112     2   p                        IETYPE = 4
        113     2   p                        NNPE   = 8
        114     2   p                     ELSE IF(NODE(6,IE).GE.1) THEN ! PRS
        115     2   p                        IETYPE = 3
        116     2   p                        NNPE   = 6
        117     2   p                     ELSE IF(NODE(5,IE).GE.1) THEN ! PYR
        118     2   p                        IETYPE = 2
        119     2   p                        NNPE   = 5
        120     2   p                     ELSE                          ! TET
        121     2   p                        IETYPE = 1
        122     2   p                        NNPE   = 4
        123     2   p                     ENDIF
        124     1   p                     AX=0.0D0
        125     1   p                     AY=0.0D0
        126     1   p                     AZ=0.0D0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
        127     2   p   6v                DO 201 I=1,NNPE
        128     2   p   6v                   AX = AX + X(NODE(I,IE))
        129     2   p   6v                   AY = AY + Y(NODE(I,IE))
        130     2   p   6v                   AZ = AZ + Z(NODE(I,IE))
        131     2   p   6v       201      CONTINUE
        132     1   p                     AX = AX/DBLE(NNPE)
        133     1   p                     AY = AY/DBLE(NNPE)
        134     1   p                     AZ = AZ/DBLE(NNPE)
        135     1               C
        136     1   p                     IP1=NODE(LOCAL(1,IS,IETYPE),IE)
        137     1   p                     IP2=NODE(LOCAL(2,IS,IETYPE),IE)
        138     1   p                     IP3=NODE(LOCAL(3,IS,IETYPE),IE)
        139     2   p                     IF((IETYPE.EQ.1            ).OR. ! TRI
        140     2                    *       (IETYPE.EQ.2.AND.IS.LE.4).OR.
        141     2                    *       (IETYPE.EQ.3.AND.IS.LE.2))THEN
        142     2   p                        BX=(X(IP1)+X(IP2)+X(IP3))/3.0E0
        143     2   p                        BY=(Y(IP1)+Y(IP2)+Y(IP3))/3.0E0
        144     2   p                        BZ=(Z(IP1)+Z(IP2)+Z(IP3))/3.0E0
        145     2   p                     ELSE ! QUAD
        146     2   p                        IP4=NODE(LOCAL(4,IS,IETYPE),IE)
        147     2   p                        BX=(X(IP1)+X(IP2)+X(IP3)+X(IP4))/4.0E0
        148     2   p                        BY=(Y(IP1)+Y(IP2)+Y(IP3)+Y(IP4))/4.0E0
        149     2   p                        BZ=(Z(IP1)+Z(IP2)+Z(IP3)+Z(IP4))/4.0E0
        150     2   p                     ENDIF
        151     1   p                     CX  = AX - BX
        152     1   p                     CY  = AY - BY
        153     1   p                     CZ  = AZ - BZ
        154     1   p                     CABS = SQRT(CX*CX+CY*CY+CZ*CZ)
        155     1               C
        156     1   p                     CX = CX/CABS
        157     1   p                     CY = CY/CABS
        158     1   p                     CZ = CZ/CABS
        159     1   p                     DOT=CX*DBLE(XNB(IB))+CY*DBLE(YNB(IB))+CZ*DBLE(ZNB(IB))
        160     1               C         AX  = AX - X(NODE(LOCAL(1,IS,IETYPE),IE))
        161     1               C         AY  = AY - Y(NODE(LOCAL(1,IS,IETYPE),IE))
        162     1               C         AZ  = AZ - Z(NODE(LOCAL(1,IS,IETYPE),IE))
        163     1               C
        164     1               C         DOT=AX*DBLE(XNB(IB))+AY*DBLE(YNB(IB))+AZ*DBLE(ZNB(IB))
        165     2   p                     IF(DOT.LE.0.0E0)THEN
        166     2   p                         XNB(IB)=-XNB(IB)
        167     2   p                         YNB(IB)=-YNB(IB)
        168     2   p                         ZNB(IB)=-ZNB(IB)
        169     2               CC            STOP
        170     2   p                     ENDIF
        171     1   p             200 CONTINUE
        172                     C
        173                           RETURN
        174                           END

 Diagnostic messages: program name(CSIN3X)
   jwd8220o-i  "csin3x.f", line 15: 副作用の可能性のある最適化を行いました。
   jwd2008i-i  "csin3x.f", line 22: この仮引数'NEX'は、副プログラム中で使用されていません。
   jwd5001p-i  "csin3x.f", line 60: このDOループを並列化しました。(名前:IB)
   jwd6229s-i  "csin3x.f", line 60: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "csin3x.f", line 60: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "csin3x.f", line 95: 多項式の演算順序を変更しました。
   jwd8206o-i  "csin3x.f", line 97: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 98: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 99: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "csin3x.f", line 108: このDOループを並列化しました。(名前:IB)
   jwd6004s-i  "csin3x.f", line 127: リダクション演算を含むDOループをSIMD化しました。(名前:I)
   jwd8666o-i  "csin3x.f", line 127: 浮動小数点レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "csin3x.f", line 127: ループを展開数6回でアンローリングしました。
   jwd8208o-i  "csin3x.f", line 129: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd8208o-i  "csin3x.f", line 130: ループ内の総和または乗積演算の計算方法を変更しました。
   jwd8206o-i  "csin3x.f", line 132: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 133: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 134: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 142: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 143: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "csin3x.f", line 144: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "csin3x.f", line 147: 多項式の演算順序を変更しました。
   jwd8209o-i  "csin3x.f", line 148: 多項式の演算順序を変更しました。
   jwd8209o-i  "csin3x.f", line 149: 多項式の演算順序を変更しました。
   jwd8209o-i  "csin3x.f", line 154: 多項式の演算順序を変更しました。
   jwd8209o-i  "csin3x.f", line 159: 多項式の演算順序を変更しました。
   jwd8206o-i  "csin3x.f", line 159: 除算を逆数の乗算に変更しました。

 Procedure information
   Lines      : 174
   Statements : 104
   Stack(byte): 864
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 174
   Total statements : 104
   Total stack(byte): 864
   Total prefetch num: 0

