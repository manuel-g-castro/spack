
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:52:55 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : callhs.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "CALLHS"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE CALLHS(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
          2                          *                  ME,NE,NP,NEX,N1,N2,NODE,
          3                          *                  APRS,APRS0,ATEST0,AAVER0,
          4                          *                  NCRS,ATESPC,AAVEPC,LTAB,
          5                          *                  FILTER,GAMDYN,NAVDYN,MELM,
          6                          *                  EAP1,EAP3,IENP,JENP,NEP,MEP,MP,
          7                          *                  IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
          8                          *                  NPFREE,LPFREE,NPSLD2,LPSLD2,LPFIX,
          9                          *                  RX,RY,LWORK,IUT0,IERR)
         10                           IMPLICIT NONE
         11                     C
         12                           INTEGER*4 ME,NE,NP,N1,N2,IPART,NAVDYN,IUT0,IERR,
         13                          *          NDOM,MBPDOM
         14                           INTEGER*4 NETET,NEPRD,NEWED,NEHEX,
         15                          *          IEE1,IEE2,IEE3,IEE4,
         16                          *          IE,IP,I,J,MAXBUF,IB,
         17                          *          IPE,MEP,MP,NN,K
         18                           REAL*4    GAMDYN
         19                           REAL*4    DI,
         20                          *          FACTOR,RLUMP,GAM2,COEF,AVENUM
         21                     C
         22                           INTEGER*4 MCOLOR,MCPART
         23                           INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
         24                           INTEGER*4 NCRS
         25                           INTEGER*4 NEX(12),NODE(N2,NE),LTAB(N1,N2,NE)
         26                           REAL*4    APRS (N1,N2,ME),APRS0 (NP),ATEST0(NP),AAVER0(NP)
         27                           REAL*4    ATESPC(NCRS),AAVEPC(NCRS)
         28                           REAL*4    FILTER(ME)
         29                           INTEGER*4 MELM
         30                           INTEGER*4 NPFREE,LPFREE(NPFREE),
         31                          1          NPSLD2,LPSLD2(NPSLD2),LPFIX(NP),
         32                          2          LDOM(NDOM),NBPDOM(NDOM),
         33                          3          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM)
         34                           REAL*4    RX(0:N2,NE),RY(0:N2,NE),LWORK(NP)
         35                           REAL*4    EAP1(N2,MEP,NP),EAP3(6,N2,MEP,NP)
         36                           INTEGER*4 IENP(MEP,MP),JENP(MEP,MP),NEP(MP)
         37                     C
         38                           REAL*4    DIJ(8,8)
         39                           DATA DIJ / 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         40                          &           0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         41                          &           0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
         42                          &           0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
         43                          &           0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
         44                          &           0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
         45                          &           0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
         46                          &           0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 /
         47                     C
         48                           CHARACTER*60 ERMSGC
         49                          & /' ## SUBROUTINE CALLHS: FATAL      ERROR OCCURENCE; RETURNED' /
         50                     C
         51                           INTEGER*4 IDIMP,NPFIX
         52                           DATA IDIMP  / 3 /
         53                           DATA NPFIX  / 0 /
         54                     
         55                     C
         56                     C
         57                     C      CALCULATE ELEMENT MATRIX FOR PRESSURE EQUATION
         58                     C         ( 3-D CALCULATION : SINGLE WORD & MULTI ELEMENT VERSION )
         59                     C                                           CODED BASED ON 'EMDFTC'
         60                     C                                              2009.01.13 Y.YAMADE
         61                     C
         62                     C     ARGUMENT LISTINGS
         63                     C       (1) INPUT
         64                     C          ME          ; MAX. NUMBER OF TOTAL ELEMENTS
         65                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         66                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         67                     C          NEX(I)      ; INCLUDES NUMBER OF ELEMENTS AND NUMBER OF LOCAL NODES
         68                     C                        AS FOLOOWS
         69                     C          NEX(1)      ; NUMBER OF TET.    ELEMENTS
         70                     C          NEX(2)      ; NUMBER OF PYRAMID ELEMENTS
         71                     C          NEX(3)      ; NUMBER OF WEGDE   ELEMENTS
         72                     C          NEX(4)      ; NUMBER OF HEX.    ELEMENTS
         73                     C          NEX(5)      ; NUMBER OF LOCAL NODES IN A TET.    ELEMENT (=4)
         74                     C          NEX(6)      ; NUMBER OF LOCAL NODES IN A PYRAMID ELEMENT (=5)
         75                     C          NEX(7)      ; NUMBER OF LOCAL NODES IN A WEGDE   ELEMENT (=6)
         76                     C          NEX(8)      ; NUMBER OF LOCAL NODES IN A HEX.    ELEMENT (=8)
         77                     C
         78                     C          LS2NOD(IENEW); RENUMBERD ELEMENTS ARRAY.
         79                     C                      IF IENEW IS A RENUMBERD INDEX FOR AN ELEMENT,
         80                     C                      THEN THE ORIGINAL INDEX, IE, OF THIS ELEMENT
         81                     C                      IN THE NODE ARRAY IS GIVEN BY
         82                     C                      IE=LS2NOD(IENEW)
         83                     C          NCRS   ; NUMBER OF NONZERO ELEMENTS IN MATRIX OF CRS FORMAT
         84                     C          LTAB(J1,J2,IE); CRS INDEX TABLE FOR NODE-BASE MATRIX
         85                     C                          COEFFICIENT
         86                     C
         87                     C          A. FREE BOUNDARY
         88                     C          NPFREE      ; NUMBER OF FREE BOUNDARY NODES
         89                     C          LPFREE (IBP); FREE BOUNDARY NODES
         90                     C
         91                     C          B. INTER-CONNECT BOUNDARY
         92                     C          IPART       ; SUB-DOMAIN NUMBER THAT THIS TASK SHOULD TAKE/IS
         93                     C                       TAKING CARE OF. IPART BEING SET ZERO MEANS THAT
         94                     C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL
         95                     C                       MODE.
         96                     C          LDOM  (IDOM); NEIBERING SUB-DOMAIN NUMBER
         97                     C          NBPDOM(IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
         98                     C                       SHARING WITH THE IDOM'TH NEIBERING SUB-DOMAIN,
         99                     C                       LDOM(IDOM)
        100                     C          NDOM        ; NUMBER OF THE NERIBERING SUB-DOMAINS
        101                     C          IPSLF (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        102                     C                           CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
        103                     C                           NEIBERING SUB-DOMAIN, LDOM(IDOM)
        104                     C          IPSND (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        105                     C                           SUB-DOMAIN THAT IS RECEIVING THE CALLING
        106                     C                           TASK'S RESIDUALS.
        107                     C          MBPDOM      ; THE MAXIMUM NUMBER OF THE INTER-CONNECT
        108                     C                       BOUNDARY NODES FOR ONE NEIBERING SUB-DOMAIN
        109                     C                       BELONGS TO
        110                     C
        111                     C       (2) OUTPUT
        112                     C          A     (IE,I,J);ELEMENT MATRIX FOR PRESSURE EQUATION
        113                     C          A0    (    IP);DIAGONAL TERM   OF PRESSURE EQUATION MATRIX
        114                     C          ATEST (I,J,IE):ELEMENT MATRIX FOR GRID-FILTERING
        115                     C          ATEST0(    IP):DIAGONAL TERM OF GRID-FILTERING
        116                     C          AAVER (I,J,IE):ELEMENT MATRIX FOR AVERAGING
        117                     C          AAVER0(    IP):DIAGONAL TERM OF AVERAGING
        118                     C          ATESPC(ICRS);NODE-BASE MATRIX COEFFICIENT FOR GRID-FILTERING
        119                     C          AAVEPC(ICRS);NODE-BASE MATRIX COEFFICIENT FOR AVERAGING
        120                     C
        121                     C       (3) WORK
        122                     C          RX          ; WORK
        123                     C          RY          ; WORK
        124                     C          LPFIX       ; WORK
        125                     C
        126                           GAM2   = GAMDYN*GAMDYN
        127                           AVENUM = FLOAT(NAVDYN)
        128                           MAXBUF = NE*(N2+1)
        129                     C
        130                           NETET=NEX(1)
        131                           NEPRD=NEX(2)
        132                           NEWED=NEX(3)
        133                           NEHEX=NEX(4)
        134                     C
        135                     C   == TET. ==
        136                           IEE1=NETET
        137                     C
        138                     C   == PYRAMID ==
        139                           IEE2=NETET+NEPRD
        140                     C
        141                     C   == WEDGE ==
        142                           IEE3=NETET+NEPRD+NEWED
        143                     C
        144                     C   == HEX. ==
        145                           IEE4=NETET+NEPRD+NEWED+NEHEX
        146                     C
        147                     CCC   CAL. LAPLACE OPERATOR
        148                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      APRS
                              <<< Loop-information  End >>>
        149     1  pp   4v            DO 1200 IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<< Loop-information  End >>>
        150     2   p   4                 DO 1100 J=1,N2
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<< Loop-information  End >>>
        151     3   p   4                     DO 1000 I=1,N1
        152     3   p   4v                        APRS(I,J,IE)=0.0E0
        153     3   p   4v       1000         CONTINUE
        154     2   p            1100     CONTINUE
        155     1   p            1200 CONTINUE
        156                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      AAVER0, ATEST0, APRS0
                              <<< Loop-information  End >>>
        157     1  pp   2v            DO 1300 IP=1,NP
        158     1   p   2v                APRS0 (IP)=0.0E0
        159     1   p   2v                ATEST0(IP)=0.0E0
        160     1   p   2v                AAVER0(IP)=0.0E0
        161     1   p   2v       1300  CONTINUE
        162                     C
        163                     C     OPERATION COUNTS:   FLOP /ELEMENT
        164                     C     DATA LOADINGS   :   WORDS/ELEMENT
        165                     C                      (  WORDS CONTIGUOUSLY,
        166                     C                         WORDS BY STRIDE, AND
        167                     C                         WORDS BY LIST )
        168                     C
        169     1                     DO IP=1,NP
        170     1               !ocl nosimd
        171     1               !ocl noswp
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IENP, JENP
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 4
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        172     2                         DO IPE=1,NEP(IP)
        173     2                             IE =IENP(IPE,IP)
        174     2                             I  =JENP(IPE,IP)
        175     2               C
        176     3                             IF(IE.LE.IEE1) THEN
        177     3                                 NN = NEX(5)
        178     3                             ELSE IF (IE.LE.IEE2) THEN
        179     3                                 NN = NEX(6)
        180     3                             ELSE IF (IE.LE.IEE3) THEN
        181     3                                 NN = NEX(7)
        182     3                             ELSE
        183     3                                 NN = NEX(8)
        184     3                             ENDIF
        185     2               C
        186     2                             RLUMP=0.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<< Loop-information  End >>>
        187     3  pp                         DO K=1,NN
        188     3   p                             RLUMP = RLUMP + EAP1(K,IPE,IP)
        189     3   p                         ENDDO
        190     2               C
        191     2                             FACTOR=(GAM2/24.0E0)*FILTER(IE)**2
        192     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP3, DIJ
                              <<< Loop-information  End >>>
        193     3  pp   2                     DO K=1,NN
        194     3   p   2                         DI = EAP3(1,K,IPE,IP)+EAP3(2,K,IPE,IP)
        195     3                    *                +EAP3(3,K,IPE,IP)
        196     3   p   2                         APRS(I,K,IE) = RLUMP*DIJ(I,K) + FACTOR*DI
        197     3   p   2                     ENDDO
        198     2                             ATEST0(IP) = ATEST0(IP) + APRS(I,I,IE)
        199     2                         ENDDO
        200     1                     ENDDO
        201                     C
        202                           IDIMP=1
        203                           CALL DDCOMX(IPART,IDIMP,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        204                          *            ATEST0,ATEST0,ATEST0,NP,IUT0,IERR,RX,RY,MAXBUF)
        205     1                     IF(IERR.NE.0) THEN
        206     1                        WRITE(IUT0,*)
        207     1                        WRITE(IUT0,*) ERMSGC
        208     1                        RETURN
        209     1                     ENDIF
        210                     C
        211                           CALL DSCALE(N1,N2,NE,NP,NEX,NODE,APRS,ATEST0,LWORK,IERR)
        212                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 800
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 544, MVE: 9)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      ATEST0
                              <<< Loop-information  End >>>
        213     1  pp   2v            DO 2800 IP=1,NP
        214     1   p   2v               ATEST0(IP)=1.0E0/ATEST0(IP)
        215     1   p   2v       2800 CONTINUE
        216                     C
        217                           CALL E2PMAT(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        218                          *            N2,N1,NE,NEX,NCRS,APRS,ATESPC,LTAB,IUT0,IERR)
        219     1                     IF (IERR.NE.0) THEN
        220     1                        WRITE(IUT0,*)
        221     1                        WRITE(IUT0,*) ERMSGC
        222     1                        RETURN
        223     1                     ENDIF
        224                     C
        225     1                     DO IP=1,NP
        226     1               !ocl nosimd
        227     1               !ocl noswp
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IENP, JENP
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 4
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        228     2                         DO IPE=1,NEP(IP)
        229     2                             IE =IENP(IPE,IP)
        230     2                             I  =JENP(IPE,IP)
        231     3                             IF(IE.LE.IEE1) THEN
        232     3                                 NN = NEX(5)
        233     3                             ELSE IF (IE.LE.IEE2) THEN
        234     3                                 NN = NEX(6)
        235     3                             ELSE IF (IE.LE.IEE3) THEN
        236     3                                 NN = NEX(7)
        237     3                             ELSE
        238     3                                 NN = NEX(8)
        239     3                             ENDIF
        240     2               C
        241     2                             RLUMP=0.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<< Loop-information  End >>>
        242     3  pp                         DO K=1,NN
        243     3   p                             RLUMP = RLUMP + EAP1(K,IPE,IP)
        244     3   p                         ENDDO
        245     2               C
        246     2                             FACTOR=(GAM2/24.0E0)*FILTER(IE)**2
        247     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP3, DIJ
                              <<< Loop-information  End >>>
        248     3  pp   2                     DO K=1,NN
        249     3   p   2                         DI =EAP3(1,K,IPE,IP)+EAP3(2,K,IPE,IP)+EAP3(3,K,IPE,IP)
        250     3   p   2                         APRS(I,K,IE) = RLUMP*DIJ(I,K) + FACTOR*AVENUM*DI
        251     3   p   2                     ENDDO
        252     2                             AAVER0(IP) = AAVER0(IP) + APRS(I,I,IE)
        253     2                         ENDDO
        254     1                     ENDDO
        255                     C
        256                           IDIMP=1
        257                           CALL DDCOMX(IPART,IDIMP,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        258                          *            AAVER0,AAVER0,AAVER0,NP,IUT0,IERR,RX,RY,MAXBUF)
        259     1                     IF(IERR.NE.0) THEN
        260     1                        WRITE(IUT0,*)
        261     1                        WRITE(IUT0,*) ERMSGC
        262     1                        RETURN
        263     1                     ENDIF
        264                     C
        265                           CALL DSCALE(N1,N2,NE,NP,NEX,NODE,APRS,AAVER0,LWORK,IERR)
        266                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 800
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 544, MVE: 9)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      AAVER0
                              <<< Loop-information  End >>>
        267     1  pp   2v            DO 3800 IP=1,NP
        268     1   p   2v               AAVER0(IP)=1.0E0/AAVER0(IP)
        269     1   p   2v       3800 CONTINUE
        270                     C
        271                           CALL E2PMAT(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        272                          *            N2,N1,NE,NEX,NCRS,APRS,AAVEPC,LTAB,IUT0,IERR)
        273     1                     IF (IERR.NE.0) THEN
        274     1                        WRITE(IUT0,*)
        275     1                        WRITE(IUT0,*) ERMSGC
        276     1                        RETURN
        277     1                     ENDIF
        278                     C
        279     1                     DO IP=1,NP
        280     1               !ocl nosimd
        281     1               !ocl noswp
        282     2                         DO IPE=1,NEP(IP)
        283     2                             IE =IENP(IPE,IP)
        284     2                             I  =JENP(IPE,IP)
        285     3                             IF(IE.LE.IEE1) THEN
        286     3                                 NN = NEX(5)
        287     3                             ELSE IF (IE.LE.IEE2) THEN
        288     3                                 NN = NEX(6)
        289     3                             ELSE IF (IE.LE.IEE3) THEN
        290     3                                 NN = NEX(7)
        291     3                             ELSE
        292     3                                 NN = NEX(8)
        293     3                             ENDIF
        294     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 696
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP3
                              <<< Loop-information  End >>>
        295     3  pp   2                     DO K=1,NN
        296     3   p   2                         DI = EAP3(1,K,IPE,IP)+EAP3(2,K,IPE,IP)
        297     3                    *                +EAP3(3,K,IPE,IP)
        298     3   p   2                         APRS(I,K,IE) = DI
        299     3   p   2                     ENDDO
        300     2                             APRS0(IP) = APRS0(IP) + APRS(I,I,IE)
        301     2                         ENDDO
        302     1                     ENDDO
        303                     C
        304                           IDIMP=1
        305                           CALL DDCOMX(IPART,IDIMP,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
        306                          *            APRS0,APRS0,APRS0,NP,IUT0,IERR,RX,RY,MAXBUF)
        307     1                     IF(IERR.NE.0) THEN
        308     1                        WRITE(IUT0,*)
        309     1                        WRITE(IUT0,*) ERMSGC
        310     1                        RETURN
        311     1                     ENDIF
        312                     C
        313                           CALL DSCALE(N1,N2,NE,NP,NEX,NODE,APRS,APRS0,LWORK,IERR)
        314                     C
        315                     C
        316                     CCC    CLEAR OFF-DIAGONAL ELEMENTS IN THOSE LINES OF COEFFICIENT MATRIX
        317                     CCC   THAT CORRESPOND TO THE DIRECLET BOUNDARY NODES
        318                     C
        319                     C
        320                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWORK
                              <<< Loop-information  End >>>
        321     1  pp   4v            DO 5000 IP=1,NP
        322     1   p   4v                LWORK(IP)=0
        323     1   p   4v       5000 CONTINUE
        324                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.83, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPFREE
                              <<< Loop-information  End >>>
        325     1   s   4v            DO 5100 IB=1,NPFREE
        326     1   p   4v                IP=LPFREE(IB)
        327     1   m   4v                LWORK(IP)=1
        328     1   p   4v       5100 CONTINUE
        329                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.83, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSLD2
                              <<< Loop-information  End >>>
        330     1   s   4v            DO 5200 IB=1,NPSLD2
        331     1   p   4v                IP=LPSLD2(IB)
        332     1   m   4v                LWORK(IP)=1
        333     1   p   4v       5200 CONTINUE
        334                     C
        335                           NPFIX=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWORK
                              <<< Loop-information  End >>>
        336     1       2s            DO 5300 IP=1,NP
        337     1       2v                IF(LWORK(IP).EQ.0) GOTO 5300
        338     1       2m                NPFIX=NPFIX+1
        339     1       2s                LPFIX(NPFIX)=IP
        340     1       2v       5300 CONTINUE
        341                     C
        342                           CALL CLROFF(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        343                          *            ME,NE,NP,NEX,NODE,APRS,
        344                          *            N1,N2,NPFIX,LPFIX,LWORK,IUT0,IERR)
        345     1                     IF(IERR.NE.0) THEN
        346     1                        WRITE(IUT0,*)
        347     1                        WRITE(IUT0,*) ERMSGC
        348     1                        RETURN
        349     1                     ENDIF
        350                     C
        351                           RETURN
        352                           END

 Diagnostic messages: program name(CALLHS)
   jwd2008i-i  "callhs.f", line 1: この仮引数'MELM'は、副プログラム中で使用されていません。
   jwd8220o-i  "callhs.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "callhs.f", line 19: この名前'COEF'は、宣言だけされていて引用されていません。
   jwd6002s-i  "callhs.f", line 149: このDOループをSIMD化しました。
   jwd8663o-i  "callhs.f", line 149: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "callhs.f", line 149: ループを展開数4回でアンローリングしました。
   jwd5002p-i  "callhs.f", line 151: このDOループを並列化しました。
   jwd8209o-i  "callhs.f", line 152: 多項式の演算順序を変更しました。
   jwd8330o-i  "callhs.f", line 152: 多重DOループをDO変数IE,...,Iで1重化しました。
   jwd5001p-i  "callhs.f", line 157: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "callhs.f", line 157: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "callhs.f", line 157: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "callhs.f", line 157: ループを展開数2回でアンローリングしました。
   jwd5208p-i  "callhs.f", line 169: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS)
   jwd5208p-i  "callhs.f", line 172: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS)
   jwd5208p-i  "callhs.f", line 172: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ATEST0)
   jwd6156s-i  "callhs.f", line 172: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd5004p-i  "callhs.f", line 187: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6156s-i  "callhs.f", line 187: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8209o-i  "callhs.f", line 188: 多項式の演算順序を変更しました。
   jwd8206o-i  "callhs.f", line 191: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "callhs.f", line 191: 多項式の演算順序を変更しました。
   jwd5001p-i  "callhs.f", line 193: このDOループを並列化しました。(名前:K)
   jwd6156s-i  "callhs.f", line 193: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8202o-i  "callhs.f", line 193: ループを展開数2回でアンローリングしました。
   jwd8209o-i  "callhs.f", line 194: 多項式の演算順序を変更しました。
   jwd8209o-i  "callhs.f", line 196: 多項式の演算順序を変更しました。
   jwd5001p-i  "callhs.f", line 213: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "callhs.f", line 213: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "callhs.f", line 213: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "callhs.f", line 213: ループの繰返し数が544回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5208p-i  "callhs.f", line 225: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS)
   jwd5208p-i  "callhs.f", line 228: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS)
   jwd5208p-i  "callhs.f", line 228: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:AAVER0)
   jwd6156s-i  "callhs.f", line 228: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd5004p-i  "callhs.f", line 242: リダクション演算を含むDOループを並列化しました。(名前:K)
   jwd6156s-i  "callhs.f", line 242: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8209o-i  "callhs.f", line 243: 多項式の演算順序を変更しました。
   jwd8206o-i  "callhs.f", line 246: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "callhs.f", line 246: 多項式の演算順序を変更しました。
   jwd5001p-i  "callhs.f", line 248: このDOループを並列化しました。(名前:K)
   jwd6156s-i  "callhs.f", line 248: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8202o-i  "callhs.f", line 248: ループを展開数2回でアンローリングしました。
   jwd8209o-i  "callhs.f", line 249: 多項式の演算順序を変更しました。
   jwd8209o-i  "callhs.f", line 250: 多項式の演算順序を変更しました。
   jwd5001p-i  "callhs.f", line 267: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "callhs.f", line 267: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "callhs.f", line 267: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "callhs.f", line 267: ループの繰返し数が544回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5208p-i  "callhs.f", line 279: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS)
   jwd5208p-i  "callhs.f", line 282: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS)
   jwd5208p-i  "callhs.f", line 282: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:APRS0)
   jwd5001p-i  "callhs.f", line 295: このDOループを並列化しました。(名前:K)
   jwd6156s-i  "callhs.f", line 295: 最適化指示子NOSIMDを指定しているため、このDOループはSIMD化できません。
   jwd8202o-i  "callhs.f", line 295: ループを展開数2回でアンローリングしました。
   jwd8209o-i  "callhs.f", line 296: 多項式の演算順序を変更しました。
   jwd8209o-i  "callhs.f", line 298: 多項式の演算順序を変更しました。
   jwd5001p-i  "callhs.f", line 321: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "callhs.f", line 321: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "callhs.f", line 321: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "callhs.f", line 321: ループを展開数4回でアンローリングしました。
   jwd6001s-i  "callhs.f", line 325: このDOループをSIMD化しました。(名前:IB)
   jwd8204o-i  "callhs.f", line 325: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "callhs.f", line 325: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "callhs.f", line 327: 配列'LWORK'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6001s-i  "callhs.f", line 330: このDOループをSIMD化しました。(名前:IB)
   jwd8204o-i  "callhs.f", line 330: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "callhs.f", line 330: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "callhs.f", line 332: 配列'LWORK'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5228p-i  "callhs.f", line 336: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "callhs.f", line 336: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "callhs.f", line 336: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "callhs.f", line 336: ループを展開数2回でアンローリングしました。

 Procedure information
   Lines      : 352
   Statements : 184
   Stack(byte): 31168
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 352
   Total statements : 184
   Total stack(byte): 31168
   Total prefetch num: 0

