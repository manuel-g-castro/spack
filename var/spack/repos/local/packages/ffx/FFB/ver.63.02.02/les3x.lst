
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:32 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : les3x.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 Main program "LES3X"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  MAIN PRORGRAM : LES3X                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY Y.YAMADE            C
          8                     C                                       WRITTEN BY H.YOSHIMURA         C
          9                     C                                       WRITTEN BY T.TAKAYAMA          C
         10                     C                                                                      C
         11                     C                                                                      C
         12                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         13                     C                                                                      C
         14                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         15                     C                                                                      C
         16                     C======================================================================C
         17                           PROGRAM LES3X
         18                     #ifdef RCAPCPL
         19                           USE RCAPF
         20                     #endif
         21                           IMPLICIT NONE
         22                     C
         23                           INTEGER*4 MSMPL,MRESV,MTIME,MHST
         24                           PARAMETER (MSMPL=150, MRESV=28, MTIME=100000, MHST=MRESV+MSMPL)
         25                     C
         26                           INTEGER*4 N1,N2
         27                           PARAMETER (N1=9,N2=8)
         28                     C
         29                           INTEGER*4 ME,MP,MEP,MPP,MELM,MWRK
         30                           INTEGER*4 MB,MDOM,MBPDOM,MEE,MDUM
         31                           DATA ME     /1000000/
         32                           DATA MP     /1000000/
         33                           DATA MEP    /8/
         34                           DATA MPP    /31/
         35                           DATA MB     /1000000/
         36                           DATA MBPDOM /1000000/
         37                           DATA MDOM   /32/
         38                           PARAMETER(MEE=1,MDUM=1)
         39                     C
         40                           INTEGER*4 MER,MPR,MEPR,MPPR,MBR,MBPR,MDOMR
         41                           DATA MER    /-1/
         42                           DATA MPR    /-1/
         43                           DATA MEPR   /-1/
         44                           DATA MPPR   /-1/
         45                           DATA MBR    /-1/
         46                           DATA MBPR   /-1/
         47                           DATA MDOMR  /-1/
         48                           INTEGER*4 MPWALL,MPINLT,MPFREE,
         49                          *          MPINT,MPBODY,MPHEAT,MPHTRS,IBUF
         50                     C
         51                           CHARACTER*30 DATE
         52                           DATA DATE     / 'LES3X:VER.63.02.02:2020.04.28' /
         53                     C
         54                     C This code is based on ver.49.20.14.8
         55                     C
         56                           CHARACTER* 8 MODE(0:1)
         57                           DATA MODE     / 'SERIAL  ', 'PARALLEL' /
         58                     C
         59                     CLES3X----------------------------------------------------------CLES3X
         60                     CCCCCC      CONSTANTS DEFINITION                                CCCCCC
         61                     CLES3X----------------------------------------------------------CLES3X
         62                     CC
         63                     CC [A.01] CONSTANTS REGARDING CONTROL PARAMETERS
         64                     CC
         65                           INTEGER*4 IMODEL,IPRESS,IFORM,IOUT,NFRAME,JSET,JSETOS,JWRTOS,
         66                          *          NMAXP,NMAXT,NMAXSE,NMAXSI,
         67                          *          NTIME,ISTART,INTFSV,INTPSV,
         68                          *          IHEAT,ISOLID,IBUSNQ,
         69                          *          NSMPL,JSTOP,NSTOP,JDUMP,INTDMP,
         70                          *          IDIAGV,JPRESS,IVELIN,IGRAV,JNTFND
         71                           REAL*4    FSMACH,VISCM,C,DT,OMEGA,OMEGA0,
         72                          *          EPSP,EPST,EPSS,EPSOS,EPSF,EPSRF,
         73                          *          TFINAL,UFINAL,VFINAL,WFINAL,
         74                          *          RCPF,RCPS,TDIFF,TDIFS,PRT,GRAV(3),VELIN0(3),BTDCOE(4),
         75                          *          D000,U000,T000,TREF,RHO000,
         76                          *          RHOF,RHOS,CONDF,CONDS,CPF,CPS,THDT3D,PLIMIT
         77                           DATA C /0.2/
         78                     C
         79                           DATA JSTOP /0/
         80                           DATA NSTOP /-1/
         81                           DATA JDUMP /0/
         82                           DATA PRT   /0.71E0/
         83                     C JNTFND: FLAG FOR NOT FOUND O.S. DATA
         84                     C     JNTFND=0 : DO NOTHING
         85                     C     JNTFND=1 : SEARCH THE NEAREST ELEMENT
         86                     C EPSOS : CRITERIA DISTANCE FOR OVERSET SEARCH
         87                           DATA JSETOS /0/
         88                           DATA JNTFND /0/
         89                           DATA EPSOS  /1.0E10/
         90                     C
         91                     C JSETOS: FLAG FOR MAKING OVERSET DATA
         92                     C     JSETOS=0 : OFF
         93                     C     JSETOS=1 : ON
         94                           DATA JSETOS /0/
         95                     C
         96                     C JWRTOS FLAG FOR WRITING OVERSET DATA
         97                     C     JWRTOS=0 : OFF
         98                     C     JWRTOS=1 : ON
         99                           DATA JWRTOS /0/
        100                     C
        101                           DATA IDIAGV /0/
        102                           DATA THDT3D /1.0/
        103                           DATA PLIMIT /1.0E3/
        104                           DATA GRAV   /0.0E0,0.0E0,0.0E0/
        105                           DATA IVELIN /0/
        106                           DATA VELIN0 /0.0E0,0.0E0,0.0E0/
        107                           DATA BTDCOE /0.1E0,0.0E0,0.0E0,0.0E0/
        108                     C
        109                           DATA JPRESS /1/
        110                           DATA IGRAV  /0/
        111                     CC
        112                     CC [A.02] CONSTANTS REGARDING FILE ALLOCATIONS
        113                     CC
        114                           INTEGER*4 IACT,ITARGT,IRESV,IWRITE,INAME,
        115                          *          ICAST,ICAST1,IDATA0,IALL,IALLM,ISKIP,ISKIP1,ICHECK,
        116                          *          JGRID
        117                           INTEGER*4 MAXPRN
        118                           CHARACTER*30 NAME
        119                           DATA IWRITE / 2 /
        120                           DATA INAME  / 1 /
        121                           DATA MAXPRN / 200 /
        122                           DATA ICAST  /0/
        123                           DATA ICAST1 /1/
        124                           DATA IDATA0 /0/
        125                           DATA IALL   /0/
        126                           DATA IALLM  /-1/
        127                           DATA ISKIP  /0/
        128                           DATA ISKIP1 /1/
        129                           DATA ICHECK /999999/
        130                           DATA JGRID  /1/
        131                     C
        132                           INTEGER*4 MCOM,NCOMFL,NCOMST
        133                           PARAMETER ( MCOM = 22 )
        134                           CHARACTER*60 COMGEN,COMFLE(MCOM),COMSET(MCOM),COMHST(MHST)
        135                     C
        136                           CHARACTER*60 FILEMS,FILEBC,FILEIF,FILEFF,FILEHS,
        137                          *             FILEAT,FILEOS,FILEMD,
        138                          *             FILEAV,FILERM,FILEST,FILEFS,FILEPS,
        139                          *             FILEMR,FILEBR,FILEFR,FILEAR,
        140                          *             FILELG,FILEIN,FILEDM,FILEFM,FILESS,
        141                          *             FILECD,FILECR,FILE
        142                           DATA FILELG / 'les3x.log' /
        143                           DATA FILEIN / 'PARMLES3X' /
        144                           DATA FILEDM / 'DFMESH'  /
        145                           DATA FILEFM / 'DFMESH_F'/
        146                           DATA FILESS / 'ASRC'  /
        147                           DATA FILECD / '' /
        148                     C
        149                           INTEGER*4 IUT0,IUT5,IUT6,IUTLG
        150                           DATA IUT0  /  0 /
        151                           DATA IUT5  /  5 /
        152                           DATA IUT6  /  6 /
        153                           DATA IUTLG / 60 /
        154                     C
        155                           INTEGER*4 IUTMS,IUTBC,IUTIF,IUTFF,IUTHS,
        156                          *          IUTAT,IUTOS,
        157                          *          IUTAV,IUTRM,IUTST,IUTFS,IUTPS,
        158                          *          IUTMR,IUTBR,IUTFR,IUTAR,IUTMD,IUTSS
        159                           DATA IUTMS / 10 /
        160                           DATA IUTBC / 11 /
        161                           DATA IUTIF / 12 /
        162                           DATA IUTFF / 13 /
        163                           DATA IUTHS / 14 /
        164                           DATA IUTAT / 15 /
        165                           DATA IUTOS / 16 /
        166                           DATA IUTAV / 17 /
        167                           DATA IUTRM / 18 /
        168                           DATA IUTST / 19 /
        169                           DATA IUTFS / 20 /
        170                           DATA IUTPS / 21 /
        171                           DATA IUTMR / 22 /
        172                           DATA IUTBR / 23 /
        173                           DATA IUTFR / 24 /
        174                           DATA IUTAR / 25 /
        175                           DATA IUTMD / 26 /
        176                           DATA IUTSS / 27 /
        177                     C
        178                           INTEGER*4 IINTRP
        179                           DATA IINTRP/0/
        180                     CC
        181                     CC [A.03] CONSTANTS REGARDING SUBGRID-SCALE (SMAGORINSKY) MODEL
        182                     CC
        183                           INTEGER*4 MONITR,IFILTR,INTDYN,NAVDYN,IDSM
        184                           REAL*4    ALFDYN,GAMDYN,UPPER
        185                           REAL*4    CSMAX
        186                           INTEGER*4 NITDYN(23)
        187                           REAL*4 RESDYN(23)
        188                     C
        189                           DATA IDSM   /  2 /
        190                           DATA MONITR /  0 /
        191                           DATA IFILTR /  1 /
        192                           DATA INTDYN / 10 /
        193                           DATA NAVDYN /  5 /
        194                           DATA ALFDYN / 2.E0    /
        195                           DATA GAMDYN / 1.732E0 /
        196                           DATA CSMAX  / 0.3E0   /
        197                           DATA UPPER  /-1.0E0   /
        198                     CC
        199                     CC [A.04] CONSTANTS REGARDING NEAR-WALL TURBULENCE TREATMENTS
        200                     CC
        201                           INTEGER*4 IPRDWL
        202                           REAL*4    DAMPWL,VKAP,BCONST,AP,ALFTAU
        203                           DATA IPRDWL / 1 /
        204                           DATA DAMPWL /   0.2E0 /
        205                           DATA VKAP   /   0.4E0 /
        206                           DATA BCONST /   5.5E0 /
        207                           DATA AP     /  25.0E0 /
        208                           DATA ALFTAU /   1.0E0 /
        209                     CC
        210                     CC [A.05] CONSTANTS REGARDING NUMERICAL METHODS
        211                     CC
        212                           INTEGER*4 NITRWL,NITRIT,NITRIP
        213                           REAL*4    CBTD0
        214                           DATA NITRWL  / 6 /
        215                           DATA NITRIT  /30 /
        216                           DATA NITRIP  /100 /
        217                           DATA CBTD0   / 0.1E0 /
        218                     C
        219                           INTEGER*4 LFREE,JFSPRS
        220                           REAL*4    FACTOR
        221                           DATA LFREE   / 0 /
        222                           DATA JFSPRS  / 0 /
        223                     CC
        224                     CC [A.06] CONSTANTS REGARDING ELEMENT INTEGRATION
        225                     CC
        226                           INTEGER*4 MGAUSS,IGAUSH,IGAUSW,IGAUSP,IGAUST
        227                           PARAMETER (MGAUSS=100)
        228                           DATA IGAUSH / 64 /
        229                           DATA IGAUSW / 30 /
        230                           DATA IGAUSP / 48 /
        231                           DATA IGAUST /  4 /
        232                           INTEGER*4 NSTET,NSPRD,NSWED,NSHEX
        233                           DATA NSTET /4/
        234                           DATA NSPRD /5/
        235                           DATA NSWED /5/
        236                           DATA NSHEX /6/
        237                     CC
        238                     CC [A.07] CONSTANTS REGARDING REFINER I.F.
        239                     CC
        240                     C          NRFN        ;NUMBER OF REFINE  (DEFAULT=0)
        241                     C                       IT MUST BE ZERO OR ONE IN THIS VERSION
        242                     C          IRFNMW      ;REFINED MESH AND BOUN FILE WILL BE OUTPUT
        243                     C                       WHEN THIS PARAMETER IS ONE (DEFAULT=0)
        244                     C          IRFNFF      ;READ IN FLOW DATA (U,V,W,P) WILL BE REFINED
        245                     C                       WHEN THIS PARAMETER IS ONE (DEFAULT=0)
        246                     C          NGRID
        247                     C
        248                     C     LAYER REFINEMENT
        249                           INTEGER*4   NRFN,IRFNMW,IRFNFF,IRFNFT,NGRID,MRFN,IPB
        250                           PARAMETER(MRFN=20)
        251                           INTEGER*4   NLAYER(MRFN),LLAYER(MRFN),IRFNR
        252                           DATA NRFN   /0/
        253                           DATA IRFNMW /0/
        254                           DATA IRFNFF /0/
        255                           DATA IRFNFT /0/
        256                           DATA NGRID  /0/
        257                     C
        258                     C     BOX REFINEMENT
        259                           INTEGER*4 IRFBOX
        260                           REAL*4 XRFMIN(MRFN),YRFMIN(MRFN),ZRFMIN(MRFN)
        261                           REAL*4 XRFMAX(MRFN),YRFMAX(MRFN),ZRFMAX(MRFN)
        262                           DATA IRFBOX / 0 /
        263                     C
        264                     C     TARGET SURFACE REFINEMENT
        265                           INTEGER*4 MSURFD,MSURFS,MPTGT,NPTGT
        266                           PARAMETER (MSURFD=8000,MSURFS=100)
        267                           INTEGER*4 NSURFD(MSURFS),NSURFS
        268                           INTEGER*4 NLAYRT(MRFN),LLAYRT(MRFN)
        269                           REAL*4 XSURFD(MSURFD,MSURFS),YSURFD(MSURFD,MSURFS),
        270                          *       ZSURFD(MSURFD,MSURFS),
        271                          *       XMINSF(MSURFS),YMINSF(MSURFS),ZMINSF(MSURFS),
        272                          *       XMAXSF(MSURFS),YMAXSF(MSURFS),ZMAXSF(MSURFS)
        273                           CHARACTER*60 FILESF,FILSFO,FILSFR
        274                           PARAMETER(FILESF="srf.grd")
        275                           INTEGER*4 IUTSF,IUTSFO
        276                           DATA NPTGT  /  0 /
        277                           DATA IUTSF  / 31 /
        278                           DATA IUTSFO / 32 /
        279                     C
        280                     #ifdef RCAPCPL
        281                           INTEGER*4 NUM_NODES,NPCPL,NDOF,ICNCPL,NITRCP
        282                           DATA NUM_NODES /0/
        283                           DATA NPCPL     /0/
        284                           DATA ICNCPL    /0/
        285                           CHARACTER*256 PORTFILE
        286                           REAL*8,    ALLOCATABLE:: BFCPL(:)
        287                           INTEGER*4, ALLOCATABLE:: LPCPL(:)
        288                           REAL*4,    ALLOCATABLE:: XPCPL(:),YPCPL(:),ZPCPL(:)
        289                           REAL*4,    ALLOCATABLE:: XO(:),YO(:),ZO(:),UO(:),VO(:),WO(:),
        290                          *                         PO(:),PNO(:)
        291                     #endif
        292                           INTEGER*4 IFLCPL
        293                           DATA IFLCPL /0/
        294                     CC
        295                     CC [A.08] CONSTANTS REGARDING COUPLER I.F.
        296                     CC
        297                     C          IRCAPC      ;RCAP_COUPLER I.F. FLAG ,0 OFF (DEFAULT), 1 ON
        298                     C
        299                     C
        300                           INTEGER*4 IRCAPC
        301                           DATA IRCAPC /0/
        302                     CC
        303                           INTEGER*4 JSPADV
        304                           DATA JSPADV /0/
        305                     CC    FLAG TO SPECIFY FILEFORMAT FOR WRITING SURFACE PRESSURE
        306                     CC    JSPADV 0: GF (DEFAULT)
        307                     CC    JSPADV 1: ADVENTURE FORMAT
        308                     CC
        309                     CC [A.09] CONSTANTS REGARDING RENUMBERING
        310                     CC
        311                           INTEGER*4 JSORT,JCOLOR,JUNROL
        312                           INTEGER*4 NDIVX,NDIVY,NDIVZ
        313                           REAL*4    XRATIO,YRATIO,ZRATIO
        314                           INTEGER*4 NEIP(4)
        315                           INTEGER*4 MCOLOR,MCPART
        316                           PARAMETER(MCOLOR=1000,MCPART=10000)
        317                           INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
        318                           INTEGER*4,ALLOCATABLE::LPBTOA(:),LPATOB(:),LEBTOA(:),LEATOB(:)
        319                           CHARACTER*80 DUMMYC
        320                           DATA JSORT  / 0/
        321                           DATA JCOLOR / 0/
        322                           DATA JUNROL / 0/
        323                           DATA NDIVX  /10/
        324                           DATA NDIVY  /10/
        325                           DATA NDIVZ  /10/
        326                           DATA XRATIO /0.1/
        327                           DATA YRATIO /0.1/
        328                           DATA ZRATIO /0.1/
        329                           DATA NEIP   /1500,1500,1500,1500/
        330                     C
        331                     CC [A.10] CONSTANTS REGARDING HISTORY DATA
        332                     CC
        333                           INTEGER*4 NHST
        334                           DATA NHST / MRESV /
        335                     C
        336                           DATA COMHST( 1) / ' TIME                                 '/
        337                           DATA COMHST( 2) / ' MAXIMUM DIVERGENT                    '/
        338                           DATA COMHST( 3) / ' AVERAGE ELEMENT EDDY VISCOSITY       '/
        339                           DATA COMHST( 4) / ' ITERATIONS DONE FOR PRESSURE EQUATION'/
        340                           DATA COMHST( 5) / ' L2-NORM RESIDUAL OF PRESSURE EQUATION'/
        341                           DATA COMHST( 6) / ' FLUID FORCE ACTING IN X DIRECTION    '/
        342                           DATA COMHST( 7) / ' FLUID FORCE ACTING IN Y DIRECTION    '/
        343                           DATA COMHST( 8) / ' FLUID FORCE ACTING IN Z DIRECTION    '/
        344                           DATA COMHST( 9) / ' ITERATIONS DONE FOR U-EQUATION       '/
        345                           DATA COMHST(10) / ' ITERATIONS DONE FOR V-EQUATION       '/
        346                           DATA COMHST(11) / ' ITERATIONS DONE FOR W-EQUATION       '/
        347                           DATA COMHST(12) / ' ITERATIONS DONE FOR T-EQUATION       '/
        348                           DATA COMHST(13) / ' ITERATIONS DONE FOR K-EQUATION       '/
        349                           DATA COMHST(14) / ' ITERATIONS DONE FOR E-EQUATION       '/
        350                           DATA COMHST(15) / ' L2-NORM RESIDUAL OF U-EQUATION       '/
        351                           DATA COMHST(16) / ' L2-NORM RESIDUAL OF V-EQUATION       '/
        352                           DATA COMHST(17) / ' L2-NORM RESIDUAL OF W-EQUATION       '/
        353                           DATA COMHST(18) / ' L2-NORM RESIDUAL OF T-EQUATION       '/
        354                           DATA COMHST(19) / ' L2-NORM RESIDUAL OF K-EQUATION       '/
        355                           DATA COMHST(20) / ' L2-NORM RESIDUAL OF E-EQUATION       '/
        356                           DATA COMHST(21) / ' VOLUME INTEGRATION OF TEMPRATURE     '/
        357                           DATA COMHST(22) / ' MAX. OVERSET ERROR                   '/
        358                           DATA COMHST(23) / ' TOTAL VOLUME OF FIRST FLUID          '/
        359                           DATA COMHST(24) / ' MINIMUM VOLUME FRACTION              '/
        360                           DATA COMHST(25) / ' MAXMUM VOLUME FRACTION               '/
        361                           DATA COMHST(26) / ' MAXMUM COURANT NUMBER FOR VOF EQ.    '/
        362                           DATA COMHST(27) / ' FLUX ON INLET BOUNDARY               '/
        363                           DATA COMHST(28) / ' FLUX ON OUTLET BOUNDARY              '/
        364                     CC
        365                     CC [A.11] CONSTANTS REGARDING ERROR TRAP
        366                     CC
        367                           INTEGER*4 IERR,IERRA,JESC,LERR(200)
        368                           DATA IERR /0/
        369                           DATA JESC /0/
        370                     C
        371                           CHARACTER*60 ERMSGB
        372                          * / ' ## PROGRAM    LES3X: FATAL      ERROR OCCURENCE; STOPPED ' /
        373                           CHARACTER*60 EREXP1
        374                          * / ' ALLOCATING FAILED                                        ' /
        375                           CHARACTER*60 EREXP2
        376                          * / ' READ-IN DATA ARE NOT CONSISTENT WITH THE MESH DATA        ' /
        377                     CC    CHARACTER*60 EREXP3
        378                     CC   * / ' AN UNDEFINED FRAME NUMBER IS REFERENCED                   ' /
        379                     CC    CHARACTER*60 EREXP4
        380                     CC   * / ' SPECIFIED NODE NUMBER IS OUT OF RANGE (1-NP)              ' /
        381                           CHARACTER*60 EREXP5
        382                          * / ' NUMBER OF WALL BOUNDARY NODES          EXCEEDED LIMIT OF'   /
        383                           CHARACTER*60 EREXP6
        384                          * / ' FIELD MAXIMUM DIVERGENT                EXCEEDED LIMIT OF'   /
        385                           CHARACTER*60 EREXP7
        386                          * / ' NUMBER OF NON-ZEROS IN CRS FORMAT      EXCEEDED LIMIT OF'   /
        387                           CHARACTER*60 EREXP8
        388                          * / ' COORDINATE WHERE DIV. IS MAX::                            ' /
        389                           CHARACTER*60 ERMSGC
        390                          * / ' ## PROGRAM    LES3X : FATAL      ERROR REPORT   ; STOPPED ' /
        391                           CHARACTER*10 BLANK / ' ' /
        392                     CC
        393                     CC [A.12] CONSTANTS REGARDING FLOW RATE CONTROL
        394                     CC
        395                           REAL*4 QINLT,QFREE,PINLT,QCOEF(3),ALPHAQ
        396                           DATA QINLT  /0.0/
        397                           DATA QFREE  /0.0/
        398                           DATA PINLT  /0.0/
        399                           DATA QCOEF  /0.0,1.0,2.0/
        400                           DATA ALPHAQ /0.0/
        401                     CC
        402                     CC [A.13] CONSTANTS REGARDING MATRIX SOLVER
        403                     CC
        404                           INTEGER*4 MRCM,NMAXB,ISOLV,ISOLP,ISOLT,NSIDR,NLIDR
        405                           PARAMETER (MRCM=4)
        406                           DATA NMAXB /10/
        407                           DATA ISOLV / 1/
        408                           DATA ISOLP / 2/
        409                           DATA ISOLT / 1/
        410                           DATA NSIDR / 5/
        411                           DATA NLIDR / 2/
        412                     CC    ISLOP: MATRIX SOLVER FLAG FOR PRES. EQ. (1:BCGSTAB, 2:RCM)
        413                     CC
        414                     CC [A.14] CONSTANTS REGARDING PROPERTY TABLE
        415                     CC
        416                           INTEGER*4 MAXPRO
        417                           PARAMETER (MAXPRO=1000)
        418                           INTEGER*4 LPRO(MAXPRO)
        419                           REAL*4    CPRO0(9,MAXPRO),CPRO1(4,MAXPRO),
        420                          *          CPRO2(4,MAXPRO),CTREF(4,MAXPRO)
        421                     CC
        422                     CC [A.15] CONSTANTS REGARDING MULTIPL ROTATINAL FRAME
        423                     CC
        424                           INTEGER*4 MMRF,NMRF,IMRF,MFRM,NFRM
        425                           INTEGER*4, ALLOCATABLE::IFATTR(:)
        426                           PARAMETER (MMRF=20)
        427                           REAL*4    OMGMRF0(MMRF),OMGMRF(MMRF),
        428                          *          AMRF(3,MMRF),ORGMRF(3,MMRF),FLSET(MMRF,MMRF)
        429                           DATA NMRF / 0 /
        430                     CC
        431                     CC [A.16] CONSTANTS REGARDING BLOCK SEARCHING
        432                     CC
        433                           INTEGER*4 NBLKX,NBLKY,NBLKZ,MZ,MBLK ,NEZMAX,NEZAVR,NZEFF,NZ
        434                           REAL*4    EPSBLK,BLKMIN,XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
        435                          *          OSXMIN,OSYMIN,OSZMIN,OSXMAX,OSYMAX,OSZMAX
        436                           DATA NBLKX /50/
        437                           DATA NBLKY /50/
        438                           DATA NBLKZ /50/
        439                           DATA EPSBLK /1.0E-1/
        440                           DATA BLKMIN /1.0E-4/
        441                           DATA OSXMIN /-1.0E8/
        442                           DATA OSYMIN /-1.0E8/
        443                           DATA OSZMIN /-1.0E8/
        444                           DATA OSXMAX / 1.0E8/
        445                           DATA OSYMAX / 1.0E8/
        446                           DATA OSZMAX / 1.0E8/
        447                     CC
        448                     CC [A.17] CONSTANTS REGARDING REALTIME MAPPING OF SOUND SOURCE
        449                     CC
        450                           INTEGER*4 ICAVI,NPF
        451                           REAL*4    SIGMA,CGAS,CLQD,F0
        452                           REAL*4    FLINLT,FLIMIT,FLMIN,SCT
        453                           REAL*4, ALLOCATABLE:: FL(:),FESRC(:),FLE(:)
        454                     C
        455                           DATA CGAS   /1.0E+3/
        456                           DATA CLQD   /1.0E-1/
        457                           DATA F0     /1.0E-2/
        458                           DATA FLINLT /1.0/
        459                           DATA FLIMIT /0.99/
        460                           DATA FLMIN  /0.5/
        461                           DATA SCT    /1.0/
        462                     C
        463                     C     ICAVI  : FLAG FOR CAVITATION MODEL (1:OKITA, 2:MARKLE, 3:KUNZ)
        464                     C     SIGMA  : CAVITATION NUMBER (PRESSURE DIFFERENCE BETWEEN OUTLET PRESSURE AND
        465                     C              VAPOR PRESSURE, NORMARIZED BY RHO*U*U. NOTE THAT OUTLET PRESSURE IS
        466                     C              ZERO IN THIS SOLVER)
        467                     C     CGAS   : MODEL PATAMETE FOR ICAVI IS 1,2,3
        468                     C     CLQD   : MODEL PATAMETE FOR ICAVI IS 1,2,3
        469                     C     CGAS   : MODEL PATAMETE FOR ICAVI IS     3
        470                     C     FLINLT : LIQUID FRACTION OF INLET B.C.
        471                     C     FLIMIT : BOUND VALUE OF LIQUID FRACTION FOR JUDGING THE OCCURRENCE
        472                     C              OF CAVITATION
        473                     C     FLMIN  : LOWER BOUND VALUE OF LIQUID FRACTION
        474                     C     SCT    : SGS SCHMIDT NUMBER FOR LIQUID FRACTION
        475                     C
        476                     CC
        477                     CC [A.18] CONSTANTS REGARDING REALTIME MAPPING OF SOUND SOURCE
        478                     CC
        479                           INTEGER*4 JSSMAP,NUMSSB(3),NOUTSS,NITRSS,NPASRC
        480                           REAL*4    CODSSB(4),
        481                          *          SSXMIN,SSYMIN,SSZMIN,SSXMAX,SSYMAX,SSZMAX
        482                           DATA JSSMAP /0/
        483                           DATA NITRSS /0/
        484                           DATA NOUTSS /0/
        485                           DATA NPASRC /0/
        486                           DATA SSXMIN /-1.0E8/
        487                           DATA SSYMIN /-1.0E8/
        488                           DATA SSZMIN /-1.0E8/
        489                           DATA SSXMAX / 1.0E8/
        490                           DATA SSYMAX / 1.0E8/
        491                           DATA SSZMAX / 1.0E8/
        492                           INTEGER*4, ALLOCATABLE:: LPASRC(:),LEASRC(:)
        493                           REAL*4,    ALLOCATABLE:: COEAS1(:),COEAS2(:),COEAS3(:)
        494                           REAL*4,    ALLOCATABLE:: UASRC (:),VASRC (:),WASRC (:)
        495                     C
        496                     CC   JSSMAP    :FLAG FOR REALTIME MAPPING OF SOUND SOURCE  0:OFF, 1:ON
        497                     CC   NUMSSB(1) :NUMBER OF GRIDS OF THE SOUND SOURCE BOX IN X-DIR.
        498                     CC   NUMSSB(2) :NUMBER OF GRIDS OF THE SOUND SOURCE BOX IN Y-DIR.
        499                     CC   NUMSSB(3) :NUMBER OF GRIDS OF THE SOUND SOURCE BOX IN Z-DIR.
        500                     CC   NOUTSS    :OUTPUT INTERVAL OF SOUND SOURCE DATA
        501                     CC   NITRSS    :NUMBER OF TEST-FILTERING OPERATION FOR VEL.
        502                     CC   NPASRC    :NUMBER OF SOUND SOURCE POINTS
        503                     CC   CODSSB(1) :X-COORDINATE OF STARTING POINT OF THE SOUND SOURCE BOX
        504                     CC   CODSSB(2) :Y-COORDINATE OF STARTING POINT OF THE SOUND SOURCE BOX
        505                     CC   CODSSB(3) :Z-COORDINATE OF STARTING POINT OF THE SOUND SOURCE BOX
        506                     CC   CODSSB(4) :GRID SIZE OF SOUND SOURCE BOX
        507                     CC
        508                     CC
        509                     CC [A.19] CPU TIME
        510                     CC
        511                           INTEGER*4 IWRTIM
        512                           DATA IWRTIM /0/
        513                     #ifdef cputime
        514                           include 'mpif.h'
        515                     C
        516                           REAL*8 TCPU1     ! TOTAL WRK TIME
        517                           REAL*8 TCPU2     ! CPU TIME FOR MOMENTUM EQUATION
        518                           REAL*8 TCPU3     ! CPU TIME FOR MASS CONSERVATION
        519                           REAL*8 TCPU4     ! CPU TIME FOR OTHER OPERATION
        520                           REAL*8 TCPU5     ! CPU TIME FOR ALE EQUATION
        521                           REAL*8 TCPU6     ! CPU TIME FOR UPDATING INFORMATION ON MESH
        522                           REAL*8 TCPU7     ! CPU TIME FOR VOF EQUATION
        523                           REAL*8 TWRK1     ! TOTAL WRK TIME ( LOG OUTPUT )
        524                           REAL*8 TWRK2     ! CPU TIME FOR MOMENTUM EQUATION ( LOG OUTPUT )
        525                           REAL*8 TWRK3     ! CPU TIME FOR MASS CONSERVATION ( LOG OUTPUT )
        526                           REAL*8 TBUF1,TBUF2,TBUF3,TBUF4,TBUF5,TBUF6,
        527                          *       TBUF7,TBUF8,TBUF9,TBUF10,TBUF11,
        528                          *       DTBUF1,DTBUF2,DTBUF3,DTBUF5,DTBUF6,DTBUF7
        529                           REAL*8 DTALE(8),TALE(8)
        530                           DATA TALE /0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0 /
        531                           INTEGER*8 TCNT0
        532                           REAL*8    TSYS0
        533                           COMMON/TINIT/TCNT0,TSYS0
        534                           DATA TBUF1  /1.0D0/
        535                           DATA TBUF2  /1.0D0/
        536                           DATA TBUF3  /1.0D0/
        537                           DATA TBUF4  /1.0D0/
        538                           DATA TBUF5  /1.0D0/
        539                           DATA TBUF6  /1.0D0/
        540                           DATA TBUF7  /1.0D0/
        541                           DATA TBUF8  /1.0D0/
        542                           DATA TBUF9  /1.0D0/
        543                           DATA TBUF10 /1.0D0/
        544                           DATA TBUF11 /1.0D0/
        545                     C
        546                           DATA TCPU1,TCPU2,TCPU3,TCPU4,TCPU5,TCPU6,TCPU7,TWRK1,TWRK2,TWRK3
        547                          *   / 0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.0D0/
        548                     C
        549                           INTEGER*4 NUMCRS
        550                           REAL*4 DTCRSA,DTCRSR ,DTCRS2
        551                           COMMON /CPUCRS/ NUMCRS,DTCRSA,DTCRSR,DTCRS2
        552                           DATA NUMCRS /0/
        553                           DATA DTCRSA /0.0E0/
        554                           DATA DTCRSR /0.0E0/
        555                           DATA DTCRS2 /0.0E0/
        556                     C
        557                           INTEGER*4 NUMLAP
        558                           REAL*4 DTLAPA,DTLAPR ,DTLAP2
        559                           COMMON /CPULAP/ NUMLAP,DTLAPA,DTLAPR,DTLAP2
        560                           DATA NUMLAP /0/
        561                           DATA DTLAPA /0.0E0/
        562                           DATA DTLAPR /0.0E0/
        563                           DATA DTLAP2 /0.0E0/
        564                     C
        565                           INTEGER*4 NUMALL
        566                           REAL*4 DTALLA,DTALLR
        567                           COMMON /CPUALL/ NUMALL,DTALLA,DTALLR
        568                           DATA NUMALL /0/
        569                           DATA DTALLA /0.0E0/
        570                           DATA DTALLR /0.0E0/
        571                     C
        572                           CHARACTER*40 CTIME(30)
        573                           DATA CTIME( 1) /'******* SUMMARY OF CPU TIME *******  '/
        574                           DATA CTIME( 2) /'(1) CPU TIME / TIME LOOP (SEC/STEP)  '/
        575                           DATA CTIME( 3) /'TOTAL        (sec/step):             '/
        576                           DATA CTIME( 4) /'MOMENTUM EQ. (sec/step),(%):         '/
        577                           DATA CTIME( 5) /'PRESSURE EQ. (sec/step),(%):         '/
        578                           DATA CTIME( 6) /'OTHER        (sec/step),(%):         '/
        579                           DATA CTIME( 7) /'AX OPERATION (sec/step),(%):         '/
        580                           DATA CTIME( 8) /'(2) CPU TIME / AX-OPERATION (SEC/AX) '/
        581                           DATA CTIME( 9) /'NUM. OF CAL-AX                       '/
        582                           DATA CTIME(10) /'NUM. OF POINTS                       '/
        583                           DATA CTIME(11) /'MFLOP (MFLOPS)                       '/
        584                           DATA CTIME(12) /'CPU-TIME (AVE.)           :CRS (msec)'/
        585                           DATA CTIME(13) /'CPU-TIME (RMS )           :CRS  [%]  '/
        586                           DATA CTIME(14) /'SUSTAINED FLOPS (GFLOPS)             '/
        587                           DATA CTIME(15) /'CPU-TIME (AVE.) with COMM.:CRS (msec)'/
        588                           DATA CTIME(16) /'(3) CPU TIME /LAPLACE OPE. (SEC/LAP) '/
        589                           DATA CTIME(17) /'NUM. OF LAPLACE OPERATIONS           '/
        590                           DATA CTIME(18) /'NUM. OF ELEMENTS                     '/
        591                           DATA CTIME(19) /'MFLOP (MFLOPS)                       '/
        592                           DATA CTIME(20) /'CPU-TIME (AVE.)          :LAP. (msec)'/
        593                           DATA CTIME(21) /'CPU-TIME (RMS )          :LAP.  [%]  '/
        594                           DATA CTIME(22) /'SUSTAINED FLOPS (GFLOPS)             '/
        595                           DATA CTIME(23) /'(4) CPU TIME / ALL-REDUCE            '/
        596                           DATA CTIME(24) /'NUM. OF ALL-REDUCE                   '/
        597                           DATA CTIME(25) /'CPU-TIME (AVE.)           :ALL (msec)'/
        598                           DATA CTIME(26) /'CPU-TIME (RMS ) [%]                  '/
        599                           DATA CTIME(27) /'***********************************  '/
        600                           DATA CTIME(28) /'ALE EQ.      (sec/step),(%):         '/
        601                           DATA CTIME(29) /'UPDATE MESH  (sec/step),(%):         '/
        602                           DATA CTIME(30) /'VOF EQ.      (sec/step),(%):         '/
        603                     CCHYDEBUG
        604                           CHARACTER*40 CTALE(8)
        605                           DATA CTALE(1) /'-SUB. ELM3DX (sec/step),(%):         '/
        606                           DATA CTALE(2) /'-SUB. ELM3BX (sec/step),(%):         '/
        607                           DATA CTALE(3) /'-SUB. FLT3DX (sec/step),(%):         '/
        608                           DATA CTALE(4) /'-SUB. NERWLX (sec/step),(%):         '/
        609                           DATA CTALE(5) /'-SUB. CALLHS (sec/step),(%):         '/
        610                           DATA CTALE(6) /'-SUB. SRFNVX (sec/step),(%):         '/
        611                           DATA CTALE(7) /'-SUB. FINDNW (sec/step),(%):         '/
        612                           DATA CTALE(8) /'CALC.TRACTION(sec/step),(%):         '/
        613                     CCHYDEBUG
        614                     #endif
        615                     C
        616                     CLES3X----------------------------------------------------------CLES3X
        617                     CCCCCC      VARIABLES DEFINITION                                CCCCCC
        618                     CLES3X----------------------------------------------------------CLES3X
        619                     CC
        620                     CC [B.01] FIELD VARIABLES
        621                     CC        ( 46*MP+6*ME WORDS )
        622                     CC
        623                           INTEGER*4 NE,NER,NP,NEHEX,NEWED,NEPRD,NETET,NEX(12)
        624                           REAL*4,ALLOCATABLE::
        625                          *       X(:),Y (:),Z(:),U(:),V(:),W(:),
        626                          *       PN(:),P(:),DP(:),DPE(:),T(:),
        627                          *       UA(:),VA(:),WA(:),PNA(:),PA(:),FLA(:),
        628                          *       UR(:),VR(:),WR(:),PNR(:),PR(:),FLR(:),
        629                          *       US(:),VS(:),WS(:),
        630                          *       VISC(:),VISCA(:),COND3D(:),RHOCP(:),RHO3D(:),
        631                          *       CS(:),AML(:),AMM(:),UI(:,:),UIJ(:,:),
        632                          *       S(:),SIJN(:,:),SIJ(:,:),SSIJ(:,:),DSNEAR(:),
        633                          *       PRCM(:,:),APRCM(:,:),
        634                          *       UMESH(:),VMESH(:),WMESH(:),
        635                          *       UMESH_P(:),VMESH_P(:),WMESH_P(:),
        636                          *       EJ(:),CBTD3D(:)
        637                           REAL*8,ALLOCATABLE:: XD(:),YD(:),ZD(:)
        638                           INTEGER*4,ALLOCATABLE::NEAR(:)
        639                     C
        640                           INTEGER*4  MFRAME
        641                           PARAMETER ( MFRAME = 10 )
        642                           REAL*4 UFRAME(2,MFRAME),VFRAME(2,MFRAME),WFRAME(2,MFRAME),
        643                          *       UFRAM0  (MFRAME),VFRAM0  (MFRAME),WFRAM0  (MFRAME)
        644                     CC
        645                     CC [B.02] ELEMENT'S SHAPE DEPENDENT CONSTANTS
        646                     CC        ( 25*MP+792*ME WORDS)
        647                     CC
        648                     C
        649                           INTEGER*4 NTET,NPRD,NWED,NHEX
        650                           INTEGER*4 NSKIP1,NSKIP2,NSKIP3,NSKIP4
        651                           PARAMETER (NTET=4,NSKIP1=NTET*NTET)
        652                           PARAMETER (NPRD=5,NSKIP2=NPRD*NPRD)
        653                           PARAMETER (NWED=6,NSKIP3=NWED*NWED)
        654                           PARAMETER (NHEX=8,NSKIP4=NHEX*NHEX)
        655                           REAL*4,ALLOCATABLE::CM(:),DELTA(:),FILTER(:),
        656                          *       SNI(:,:),DNXI(:,:),DNYI(:,:),DNZI(:,:),
        657                          *       SN(:,:),SNP(:,:),DNXYZ(:,:,:),DNXYZP(:,:,:),
        658                          *       DNXYZT(:,:,:)
        659                           INTEGER*4::IELM0,kt,i1,i2,iV
        660                           REAL*4,ALLOCATABLE::EAP1(:,:,:),EAP2(:,:,:,:),EAP3(:,:,:,:)
        661                           REAL*4,ALLOCATABLE::EBP(:,:,:,:)
        662                           REAL*4,ALLOCATABLE::AP1(:,:,:)
        663                           INTEGER*4,ALLOCATABLE::NODP(:,:,:)
        664                     CC
        665                     CC [B.03] ELEMENT'S CONNECTIVITY AND ATTRIBUTE LISTS
        666                     CC        ( 122*MP+146*ME WORDS)
        667                     CC
        668                           INTEGER*4,ALLOCATABLE::
        669                          *       NODE(:,:),
        670                          *       IEATTR(:),IPATTR(:),
        671                          *       IEMEDA(:),IEPROP(:),LEFRM(:),
        672                          *       IENP(:,:),JENP(:,:),NEP(:),
        673                          *       NEE(:),IPNP(:,:),
        674                          *       NPP(:),NPP2(:),
        675                          *       NUMIP(:),LTAB(:,:,:),ICRS_T(:)
        676                           REAL*4,ALLOCATABLE::WEIGHP(:)
        677                           INTEGER*4 IENE(MDUM,MDUM),LIST(MDUM,MDUM,MDUM),NPPMAX
        678                     
        679                     C
        680                           INTEGER*4 N2D,NS,NSP
        681                           PARAMETER (N2D=4, NS=6, NSP=4)
        682                           INTEGER*4 LOCAL(NSP,NS,4)
        683                           DATA LOCAL /
        684                          *     1,2,4,0,  2,3,4,0,  3,1,4,0,  1,3,2,0,  0,0,0,0,  0,0,0,0, ! TET
        685                          *     1,2,5,0,  2,3,5,0,  3,4,5,0,  4,1,5,0,  1,4,3,2,  0,0,0,0, ! PYR
        686                          *     1,3,2,0,  4,5,6,0,  1,2,5,4,  2,3,6,5,  3,1,4,6,  0,0,0,0, ! PRS
        687                          *     1,5,8,4,  2,3,7,6,  1,2,6,5,  3,4,8,7,  1,4,3,2,  5,6,7,8  ! HEX
        688                          *           /
        689                     CC
        690                     CC [B.04] ARRAYS FOR SPECIFYING BOUNDARY CONDITIONS
        691                     CC        ( 55*MP+0*ME WORDS)
        692                     C
        693                           INTEGER*4,ALLOCATABLE::
        694                          *       LPINLT(:),LEINLT(:,:),
        695                          *       LPWALL(:),LEWALL(:,:),
        696                          *       LPSYMT(:),
        697                          *       LPFREE(:),LEFREE(:,:),
        698                          *       LPCCL1(:),LPCCL2(:),LPBODY(:),LEBODY(:,:),
        699                          *       NODEPS(:,:),
        700                          *       LPINT1(:),LPINT2(:),LPINT3(:),
        701                          *       LDOM(:),NBPDOM(:),IPSLF(:,:),IPSND(:,:),
        702                          *       LPTEMP(:),LEHSRC(:),
        703                          *       LPHFIX(:),LPHTRS(:),LPHEAT(:),LEHEAT(:,:),
        704                          *       LPSLD1(:),LPSLD2(:),LPOSIN(:),LPOSFR(:),
        705                          *       LPMVB(:,:),LPTGT(:)
        706                     C
        707                           REAL*4,ALLOCATABLE::
        708                          *       UINLT0(:),VINLT0(:),WINLT0(:),
        709                          *       UINLT (:),VINLT (:),WINLT (:),
        710                          *       XNINLT(:),YNINLT(:),ZNINLT(:),AEINLT(:),
        711                          *       UWALL (:),VWALL (:),WWALL (:),
        712                          *       XPSYMT(:),YPSYMT(:),ZPSYMT(:),
        713                          *       XPFREE(:),YPFREE(:),ZPFREE(:),
        714                          *       XNFREE(:),YNFREE(:),ZNFREE(:),AEFREE(:),
        715                          *       XPBODY(:),YPBODY(:),ZPBODY(:),
        716                          *       AEBODY(:),
        717                          *       XNBODY(:),YNBODY(:),ZNBODY(:),
        718                          *       DXBODY(:,:),DYBODY(:,:),DZBODY(:,:),SBODY(:,:),
        719                          *       XPS(:),YPS(:),ZPS(:),
        720                          *       FXVIS(:),FYVIS(:),FZVIS(:),
        721                          *       XNWALL(:),YNWALL(:),ZNWALL(:),YP(:),
        722                          *       UTAUN(:),TAUXN(:),TAUYN(:),TAUZN(:),
        723                          *       UTAU (:),TAUX (:),TAUY (:),TAUZ (:),
        724                          *       TEMP(:),HSRC(:),HFIX(:),HTRS(:),
        725                          *       HEAT(:),HEATE(:),SHEAT(:,:),
        726                          *       UMVB(:),VMVB(:),WMVB(:)
        727                     C
        728                           INTEGER*4 NPINLT,NPWALL,NPW,NPSYMT,NPFREE,NPCCL,
        729                          *          NPBODY,NPINT,
        730                          *          NEWALL,NEINLT,NEFREE,NEBODY,
        731                          *          NDOM,NPTEMP,NEHSRC,
        732                          *          NPHFIX,NPHTRS,NPHEAT,NEHEAT,
        733                          *          NPSLD1,NPSLD2,NPMVB,NPSYM2
        734                     C
        735                           DATA NPINLT /0/
        736                           DATA NPWALL /0/
        737                           DATA NPW    /0/
        738                           DATA NPSYMT /0/
        739                           DATA NPFREE /0/
        740                           DATA NPCCL  /0/
        741                           DATA NPBODY /0/
        742                           DATA NPINT  /0/
        743                           DATA NPTEMP /0/
        744                           DATA NEHSRC /0/
        745                           DATA NPHFIX /0/
        746                           DATA NPHEAT /0/
        747                           DATA NEHEAT /0/
        748                           DATA NPHTRS /0/
        749                           DATA NPSLD1 /0/
        750                           DATA NPSLD2 /0/
        751                           DATA NEWALL /0/
        752                           DATA NEINLT /0/
        753                           DATA NEFREE /0/
        754                           DATA NPMVB  /0/
        755                           DATA NPSYM2 /0/
        756                     C
        757                           INTEGER*4,ALLOCATABLE::
        758                          *       LPSET1(:),LPSET2(:),LPSET3(:),LPSET4(:),
        759                          *       LPSND (:),NPTSND(:) ,LPRCV (:) ,NPTRCV(:),
        760                          *       IPSET (:,:),IPSRC (:,:),
        761                          *       LESET1(:),LESET2(:),LESET3(:),LESET4(:),
        762                          *       LESND (:),NETSND(:) ,LERCV (:) ,NETRCV(:),
        763                          *       IESET (:,:),IESRC (:,:),
        764                          *       LBESET(:,:)
        765                           REAL*4,ALLOCATABLE::
        766                          *       COVER1(:),COVER2(:),COVER3(:),
        767                          *       EOVER1(:),EOVER2(:),EOVER3(:),
        768                          *       SNESET(:,:),OSBCOE(:),
        769                          *       AESET(:),XNESET(:),YNESET(:),ZNESET(:)
        770                     C
        771                           INTEGER*4 NPSET,NPSETR,NPSND
        772                           INTEGER*4 NESET,NESND,MBESET,NBESET
        773                           DATA NPSET  /0/
        774                           DATA NPSETR /0/
        775                           DATA NESET  /0/
        776                           REAL*4 ERROVS
        777                           DATA   ERROVS /0.0E0/
        778                     CC
        779                           REAL*4 COSBIN,COSBFR
        780                           DATA  COSBIN /1.0E0/
        781                           DATA  COSBFR /1.0E0/
        782                     CC
        783                     CC [FLUID FORCE OBJECT]
        784                           INTEGER*4 NEFFO,NPFFO,NPFFOI
        785                           DATA NEFFO  /0/
        786                           DATA NPFFO  /0/
        787                           DATA NPFFOI /0/
        788                           INTEGER*4,ALLOCATABLE::LEFFO1(:),LEFFO2(:),LPFFO1(:),LPFFO2(:)
        789                           REAL*4   ,ALLOCATABLE::FXFFO(:),FYFFO(:),FZFFO(:)
        790                     C
        791                           INTEGER*4 MFFO,MDGCOE,MEFFOI
        792                           PARAMETER(MFFO=20,MDGCOE=5,MEFFOI=10000)
        793                           INTEGER*4 NDGCOE(MFFO),NEFFOI(MFFO),LEFFOI(2,MEFFOI,MFFO)
        794                           REAL*4    COEFFO(0:MDGCOE,MFFO),
        795                          *          FFOVOL(MFFO),FFOAIN(MFFO),
        796                          *          FFODIM(MFFO),FFODIR(3,MFFO),
        797                          *          FFOFR (MFFO),FFODP (MFFO),
        798                          *          AXFFOI(MEFFOI,MFFO),AYFFOI(MEFFOI,MFFO),
        799                          *          AZFFOI(MEFFOI,MFFO)
        800                     C
        801                           INTEGER*4 NFFO,NFRCNT
        802                           DATA NFFO   /0/
        803                           DATA NFRCNT /0/
        804                     CC
        805                     CC [B.05] ARRAYS FOR SAVING TIME HISTORY
        806                     CC        ( MHST*MTIME WORDS)
        807                     CC
        808                           INTEGER*4 LSMPL,IESMPL,LHIST
        809                           REAL*4    HST,XSMPL,YSMPL,ZSMPL,GSMPL,ESMPL,TSMPL
        810                           COMMON / HISTSV /
        811                          1       HST(MHST,MTIME),LSMPL(MSMPL),IESMPL(MSMPL),
        812                          2       LHIST(MSMPL),
        813                          3       XSMPL(MSMPL),YSMPL(MSMPL),ZSMPL(MSMPL),
        814                          4       GSMPL(MSMPL),ESMPL(MSMPL),TSMPL(MSMPL)
        815                     CC
        816                     CC [B.06] WORK REGION (MATRIX SOLVER)
        817                     CC        ( 94*MP+144*ME WORDS)
        818                     CC
        819                           INTEGER*4 NCRS,NCRS2
        820                           INTEGER*4,ALLOCATABLE:: IPCRS(:),ITPCRS(:),LSTCLR(:),LSTDGN(:)
        821                           REAL*4,ALLOCATABLE::
        822                          *       APRS(:,:,:),AWRK(:,:,:),
        823                          *       APRS0 (:),ATEST0(:),AAVER0(:),
        824                          *       ACRS (:),ATESPC(:),AAVEPC(:)
        825                          *      ,ACRS2(:),TACRS(:)
        826                     CC
        827                     CC [B.07] WORK REGION (REFINER I.F.)
        828                     CC        ( 34*MP+42*ME WORDS)
        829                     CC
        830                           INTEGER*4,ALLOCATABLE::
        831                          *       NPB0(:),NPB1(:),NPB2(:),LPB1(:,:),LPB2(:,:)
        832                           REAL*4,ALLOCATABLE:: XPB1(:,:),XPB2(:,:),
        833                          *                     YPB1(:,:),YPB2(:,:),
        834                          *                     ZPB1(:,:),ZPB2(:,:)
        835                     CC
        836                     CC [B.08] WORK REGION (OTHER)
        837                     CC        ( 3*MP+42*ME WORDS)
        838                     CC
        839                           INTEGER*4,ALLOCATABLE::
        840                          *       NODWK1(:,:),NODWK2(:,:),LEWRK(:,:),
        841                          *       LWRK01(:),LWRK02(:),LWRK03(:),
        842                          *       LWRK04(:),LWRK05(:),LWRK06(:),
        843                          *       NODWK3(:,:)
        844                           REAL*4,ALLOCATABLE::
        845                          *       RX(:,:),RY(:,:),RZ(:,:),WRKN(:),
        846                          *       WRK01(:),WRK02(:),WRK03(:),WRK04(:),
        847                          *       WRK05(:),WRK06(:),WRK07(:),WRK08(:),
        848                          *       WRK09(:),WRK10(:),WRK11(:),WRK12(:),
        849                          *       WRK13(:),WRK14(:),WRK15(:),WRK3(:,:),DGET(:,:)
        850                           REAL*4,ALLOCATABLE::
        851                          *       AWRK01(:),AWRK02(:),AWRK03(:),AWRK04(:),
        852                          *       AWRK05(:),AWRK06(:),AWRK07(:),AWRK08(:),
        853                          *       AWRK09(:),AWRK10(:)
        854                           REAL*4,ALLOCATABLE::
        855                          *       FWRK01(:),FWRK02(:),FWRK03(:),FBWRK1(:),
        856                          *       FBWRK2(:),FBWRK3(:),FBWRK4(:),FBWRK5(:),
        857                          *       FBWRK6(:),FBWRK7(:)
        858                           REAL*8,ALLOCATABLE::
        859                          *       DWRK01(:,:),DWRK02(:),DWRK03(:,:,:),
        860                          *       DWRK04(:,:),DWRK05(:),DWRK3(:)
        861                     CC
        862                     CC [B.09] SIMPLE METHOD
        863                     CC
        864                           INTEGER*4 JCONVG,ITIMEI
        865                           DATA JCONVG  /0/
        866                           DATA ITIMEI  /0/
        867                     C
        868                     C     JCONVG  : INITIAL VALUES FOR FLAG AND COUNTER
        869                     C
        870                           REAL*4 EPSREV,EPSREP
        871                           REAL*4 EPSSU,EPSSP,DNRU,DNRP
        872                           REAL*4,ALLOCATABLE::
        873                          *       DT3D(:),UE(:),VE(:),WE(:),ADIAG(:),
        874                          *       UPREV(:),VPREV(:),WPREV(:),PNPREV(:)
        875                           REAL*4 ALPHAP,ALPHAV,ALPHAT,EPSQ,EPSREQ
        876                           DATA   ALPHAP /1.0E0/
        877                           DATA   ALPHAV /1.0E0/
        878                           DATA   ALPHAT /1.0E0/
        879                           REAL*4 COUNTA
        880                     C
        881                     C     ALPHAP:RELAXATION COEEFFICIENT FOR PRSSURE (NOT USED IN VER1.3.6)
        882                     C     ALPHAV:RELAXATION COEEFFICIENT FOR VEL.    (NOT USED IN VER.13.6)
        883                     C
        884                     CC
        885                     CC [B.11] MONITERING PARAMETER FILE
        886                     CC
        887                           INTEGER*4 IMONTR
        888                           DATA IMONTR /0/
        889                     C     IMONTR: FLAG FOR PARAMETER FILE MONITERING (1:ON, 0:OFF)
        890                     C
        891                     CCTT [B.12] RANS CALCULATION
        892                           INTEGER*4 MPWLAD,NPWLAD,NEWLAD
        893                           INTEGER*4 NMAXEP,NMAXK,MLST
        894                           INTEGER*4,ALLOCATABLE:: LEWLAD(:),LPWLAD(:),LPWLAE(:,:)
        895                           REAL*4,ALLOCATABLE:: DPWLAD(:),TA(:),TR(:)
        896                           INTEGER*4 IFIXFL
        897                           DATA IFIXFL /0/
        898                     C
        899                     CCHY [B.13] ALE CALCULATION
        900                           REAL*4    EPSA,EPSREA,RESA,STPWR,AOBJ,TOBJ,EYNG
        901                           INTEGER*4 IALE,NMAXA,NMODE,NITRA,NLYNG
        902                     C
        903                     CCYY [B.14] BLOCK
        904                           INTEGER*4, ALLOCATABLE::IELIST(:),IEBUF(:)
        905                           INTEGER*4, ALLOCATABLE::NEZ(:)  ,IBSTAT(:)
        906                     CCHY_TMP
        907                           INTEGER*4 MRSALE,IALEDB,IUTAL
        908                     CCHY_TMP
        909                           DATA NITRA / 0/
        910                           DATA IALE  / 0/
        911                           DATA NMODE / 0/
        912                           DATA RESA  /0.0E0/
        913                           DATA NLYNG / 0/
        914                           DATA EYNG  /1.0E0/
        915                     CCHY_TMP
        916                           DATA MRSALE / 0/
        917                           DATA IALEDB / 0/
        918                           DATA IUTAL  /30/
        919                     CCHY_TMP
        920                     C
        921                     CCHY [B.14] VOF
        922                           INTEGER*4 IVOF,NSCYC,IMASS
        923                           INTEGER*4 MFACE,NFACE,NFACE1,NFACE2,NFACE3
        924                           INTEGER*4 NFWALL,NFINLT,NFFREE,NFSYMT,MBF,NEFRC,NEFRC0
        925                           INTEGER*4 NPFLD2,NEFLD2
        926                           INTEGER*4 MBFDOM,NDOMF,NVCRR,NVERR,NITRVF,NMAXVF
        927                           REAL*4    FVOL,FMIN,FMAX,CMAX,FLXIN,FLXOUT,RESVF,EPSVF,EPSRVF,
        928                          *          RHOF2,VISCM2
        929                           INTEGER*4,ALLOCATABLE::LEFACE(:,:),LFACE(:,:)
        930                           INTEGER*4,ALLOCATABLE::LFWALL(:),LFINLT(:),LFFREE(:),LFSYMT(:)
        931                           INTEGER*4,ALLOCATABLE::LPFLD2(:),LEFLD2(:)
        932                           INTEGER*4,ALLOCATABLE::LDOMF(:),NBFDOM(:),IFSLF(:,:),IFSND(:,:)
        933                           REAL*4,   ALLOCATABLE::FE(:),FFA(:),FINLT(:),FEA(:),FER(:)
        934                           REAL*4,   ALLOCATABLE::AVEC(:,:),DVEC(:,:),AAD(:),AAE(:,:)
        935                     C
        936                           DATA IVOF   /0/
        937                           DATA NSCYC  /0/
        938                           DATA IMASS  /0/
        939                           DATA MFACE  /0/
        940                           DATA NFACE  /0/
        941                           DATA NFACE1 /0/
        942                           DATA NFACE2 /0/
        943                           DATA NFACE3 /0/
        944                           DATA MBF    /0/
        945                           DATA MBFDOM /0/
        946                           DATA NVCRR  /0/
        947                           DATA NVERR  /0/
        948                           DATA NITRVF /0/
        949                           DATA NMAXVF /10/
        950                           DATA RESVF  /0.0E0/
        951                           DATA FVOL   /0.0E0/
        952                           DATA FMIN   /0.0E0/
        953                           DATA FMAX   /0.0E0/
        954                           DATA CMAX   /0.0E0/
        955                           DATA FLXIN  /0.0E0/
        956                           DATA FLXOUT /0.0E0/
        957                           DATA EPSVF  /1.0E-12/
        958                           DATA EPSRVF /1.0E-12/
        959                           DATA NEFRC  /0/
        960                           DATA NEFRC0 /0/
        961                           DATA RHOF2  /1.0E0/
        962                           DATA VISCM2 /1.0E-5/
        963                           DATA NPFLD2 /0/
        964                           DATA NEFLD2 /0/
        965                     C
        966                     CLES3X----------------------------------------------------------CLES3X
        967                     CCCCCC      CONSTANTS DEFINITION (WORK)                         CCCCCC
        968                     CLES3X----------------------------------------------------------CLES3X
        969                     C
        970                           INTEGER*4 IPART,NPART,MAXBUF,
        971                          *          NECHK,NECHK1,NECHK2,
        972                          *          NPFLOW,NEPRS,NPPRS,
        973                          *          NPT1,NPT2,NPT3,
        974                          *          IDUM,INTPRN,IUTWRN,IFRAME,
        975                          *          I,J,IE,IELM,NELM,IP,IPW,NP0,NE0,NPDUM,
        976                          *          ITIME,NPSETN,NESETN,
        977                          *          IBP,ISEND,IEWALL,NPRCV,NERCV,NITRP,NITRT,NPZERO,NTIMEP,
        978                          *          JMOD,ISTEP,IMODE,IEBODY,ISMPL,IDIM,NZERO,
        979                          *          NITRU,NITRV,NITRW,NITRF,IRFN,NDUM,IRBUF,IONE,IBE,IFFO,
        980                          *          IP1,IP2,IP3,IP4,IP5,IP6,IP7,IP8,NEBUF,IFNDNW
        981                           REAL*4    VISCAV,FX,FY,FZ,SIZEAL,SIZE,DUM,
        982                          *          TIME,TIMER,DEVLP1,DEVLP2,ACCELX,ACCELY,ACCELZ,
        983                          *          COF1,COF2,RESU,RESV,RESW,PSFREE,RESP,REST,RESF,TSUM,
        984                          *          DIVMAX,DIVAV,XDIVMX,YDIVMX,ZDIVMX,XI,ET,ZT,FJESC,FJESCA,
        985                          *          DIVESC,WORD,FINITE,TIMEP,TIMEW,FRBUF,EPSMID
        986                     C
        987                           DATA IDIM   / 3 /
        988                           DATA NZERO  / 0 /
        989                           DATA WORD   / 4.0E-6  /
        990                           DATA FINITE / 1.0E-20 /
        991                           DATA DIVMAX / 0.0E+0 /
        992                           DATA DIVESC / 1.0E+4 /
        993                           DATA XDIVMX / 0.0E0 /
        994                           DATA YDIVMX / 0.0E0 /
        995                           DATA ZDIVMX / 0.0E0 /
        996                           DATA ITIME  / 0    /
        997                           DATA ISTEP  / 0    /
        998                           DATA TIMEP  / 0.E0 /
        999                           DATA TIMEW  / 0.E0 /
       1000                           DATA NTIMEP / 0 /
       1001                           DATA NITRT / 0 /
       1002                           DATA REST /0.0E0/
       1003                           DATA NITRU,NITRV,NITRW,NITRP / 0,0,0,0 /
       1004                     C
       1005                           DATA NPSETN /0/
       1006                           DATA NESETN /0/
       1007                     C
       1008                           DATA VISCAV /0.0E0/
       1009                           DATA FX     /0.0E0/
       1010                           DATA FY     /0.0E0/
       1011                           DATA FZ     /0.0E0/
       1012                           DATA TSUM   /0.0E0/
       1013                     C
       1014                           DATA RESU /1.0E-10/
       1015                           DATA RESV /1.0E-10/
       1016                           DATA RESW /1.0E-10/
       1017                           DATA RESP /1.0E-10/
       1018                     C
       1019                           DATA NECHK  /0/
       1020                           DATA NECHK1 /0/
       1021                           DATA NECHK2 /0/
       1022                           DATA NPFLOW /0/
       1023                           DATA NEPRS  /0/
       1024                           DATA NPPRS  /0/
       1025                     C
       1026                           DATA EPSMID /2.0E-1/
       1027                     C
       1028                           INTEGER*4,ALLOCATABLE:: LSTVALID(:)
       1029                           INTEGER*4 NUMVALID
       1030                     C
       1031                     C
       1032                     C
       1033                     C LES3X MEMORY MAP ( FOR N1=8,N2=8,  EXCEPT COMMON BLOCK HISTSV)
       1034                     C                    UNIT=WORD
       1035                     C
       1036                     C
       1037                     C     APPROXIMATELY, 1800 SINGLE WORDS (7.2 KB) OF MEMORY IS NEEDED PER
       1038                     C    ONE ELEMENT.
       1039                     C
       1040                     C
       1041                     C COMMON +        MP        ME
       1042                     C ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       1043                     C FIELD  +        46         6
       1044                     C METRIX +        25       792
       1045                     C CONECT +       122         0
       1046                     C BOUN   +        55        72
       1047                     C WORK1  +        94       320
       1048                     C WORK2  +        24         0
       1049                     C WORK3  +         3        42
       1050                     C ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       1051                     C TOTAL  +       369      1306
       1052                     C
       1053                     C**********************************************************************
       1054                     C*                                                                    *
       1055                     C*                                                                    *
       1056                     C*                    <<<<< PROGRAM LES3X >>>>>                       *
       1057                     C*                                                                    *
       1058                     C*                                                                    *
       1059                     C*     ENTRY NAME        ; LES3X                                      *
       1060                     C*     FUNCTION          ; TO INTEGRATE 3-D UNSTEADY INCOMPRESSIBLE   *
       1061                     C*                        NAVIER-STOKES EQUATIONS BY FINITE ELEMENT   *
       1062                     C*                        METHODS                                     *
       1063                     C*                            ( SINGLE-PRECISION WORD VERSION )       *
       1064                     C*     EXECUTION MODE    ; SERIAL(SCALAR, VECTOR)/PARALLEL(THREAD,MPI)*
       1065                     C*     EXTRENAL LIBRARIES; 'MPI' IS CALLED FOR PARALLEL COMPUTATION   *
       1066                     C*     WRITTEN BY      ; C.KATO,                                      *
       1067                     C*                       INSTITUTE OF INDUSTRIAL SCIENCE,             *
       1068                     C*                       THE UNIVERSITY OF TOKYO.                     *
       1069                     C*     MODIFIED BY     ; Y.GUO,                                       *
       1070                     C*                       INSTITUTE OF INDUSTRIAL SCIENCE,             *
       1071                     C*                       THE UNIVERSITY OF TOKYO.                     *
       1072                     C*     MODIFIED BY     ; Y.YAMADE,                                    *
       1073                     C*                       INSTITUTE OF INDUSTRIAL SCIENCE,             *
       1074                     C*                       THE UNIVERSITY OF TOKYO.                     *
       1075                     C*                       (MIZUHO INFORMATION & RESEACH INSTITUTE INC.)*
       1076                     C*     COPY RIGHT      ; SEPTEMBER 14TH, 1988 BY HITACHI, LTD.        *
       1077                     C*                       APRIL     22ND, 2001 BY UNIVERSITY OF TOKYO  *
       1078                     C*                       JUNE       3RD, 2003 BY UNIVERSITY OF TOKYO  *
       1079                     C*                       JUNE       3RD, 2010 BY UNIVERSITY OF TOKYO  *
       1080                     C*                                                                    *
       1081                     C**********************************************************************
       1082                     C
       1083                     C >>>>> PROGRAM FUNCTIONS <<<<<
       1084                     C        'LES3X' IS A GENERAL-PURPOSE FINITE ELEMENT PROGRAM THAT
       1085                     C       CALCULATES INCOMPRESSIBLE UNSTEADY FLOWS IN ARBITRARILY-SHAPED
       1086                     C       GEOMETRIES. THE GOVERNING EQUATIONS ADOPTED FOR THE COMPUTATION
       1087                     C       ARE UNSTEADY INCOMPRESSIBLE NAVIER-STOKES EQUATIONS
       1088                     C       REPRESENTED IN THE CARTETIAN COORDINATES SYSTEM. IT SUPPORTS
       1089                     C       MULTI ELEMENT TYPE.
       1090                     C
       1091                     C
       1092                     C >>>>> FILE ALLOCATIONS <<<<<
       1093                     C
       1094                     C          ALL THE FILES THAT 'LES3X' HANDLES ARE OF GENERAL FILE
       1095                     C         VERSION 1.1 FORMAT.
       1096                     C
       1097                     C   (1) STANDARD ERROR-OUTPUT/INPUT/OUTPUT
       1098                     C       IUT0 ( OUTPUT ); FILE NUMBER TO WRITE ERROR MESSAGE
       1099                     C       IUT5 (  INPUT ); FILE NUMBER TO READ  CALCULATION PARAMETERS
       1100                     C                       AND FILE NAMES
       1101                     C       IUT6 ( OUTPUT ); FILE NUMBER TO WRITE CALCULATION SEQUENCE
       1102                     C
       1103                     C   (2) PROGRAM-DEFAULT INPUT/OUTPUT
       1104                     C
       1105                     C       NOTES ; FOLLOWING FILES MUST ALWAYS BE SPECIFIED IN THE ORDER
       1106                     C              LISTED BELOW IN THE PARAMETER FILE. THEY WILL ALWAYS BE
       1107                     C              INPUT/OUTPUT DURING THE EXECUTION, EXCEPT THE INITIAL
       1108                     C              FLOW FIELD FILE, WHICH WILL BE INPUT ONLY WHEN CONTROL
       1109                     C              PARAMETER 'ISTART' (DESCRIBED LATER) IS SET TO 1. VALUE.
       1110                     C
       1111                     C       IUTMS(  INPUT ); FILE NUMBER TO READ  MESH DATA
       1112                     C       IUTBC(  INPUT ); FILE NUMBER TO READ  BOUNDARY CONDITIONS
       1113                     C       IUTIF(  INPUT ); FILE NUMBER TO READ  INITIAL FLOW FIELD
       1114                     C       IUTFF( OUTPUT ); FILE NUMBER TO WRITE FINAL   FLOW FIELD
       1115                     C       IUTHS( OUTPUT ); FILE NUMBER TO WRITE TIME HISTORIES
       1116                     C
       1117                     C       FILEMS( INPUT ); FILE NAME   TO READ  MESH DATA
       1118                     C       FILEBC( INPUT ); FILE NAME   TO READ  BOUNDARY CONDITIONS
       1119                     C       FILEIF( INPUT ); FILE NAME   TO READ  INITIAL FLOW FIELD
       1120                     C       FILEFF(OUTPUT ); FILE NAME   TO WRITE FINAL   FLOW FIELD
       1121                     C       FILEHS(OUTPUT ); FILE NAME   TO WRITE TIME HISTORIES
       1122                     C
       1123                     C   (3) OPTIONAL INPUT/OUTPUT
       1124                     C
       1125                     C       NOTES ; FOLLOWING FILES WILL BE OPTIONALLY INPUT/OUTPUT
       1126                     C              DEPENDING ON THE VALUES OF INPUT PARAMETERS LISTED TO THE
       1127                     C              RIGHT. TO ACTIVATE THESE FILES, SET CORRESPONDING INPUT
       1128                     C              PARAMETER TO THE APPROPRIATE VALUE AND SPECIFY A FILE
       1129                     C              NAME IN THE ORDER LISTED BELOW. SEE EXPLANATION ON
       1130                     C             'VARIABLES AND CONSTANTS USED' FOR DETAIL.
       1131                     C
       1132                     C       FILEAV(OUTPUT ); FILE NAME   TO WRITE AVERAGE   FIELD  (IOUT)
       1133                     C       FILERM(OUTPUT ); FILE NAME   TO WRITE RMS       FIELD  (IOUT)
       1134                     C       FILEST(OUTPUT ); FILE NAME   TO WRITE STRESS    FIELD  (IOUT)
       1135                     C       FILEFS(OUTPUT ); FILE NAME   TO WRITE CURRENT   FIELD  (INTFSV)
       1136                     C       FILEPS(OUTPUT ); FILE NAME   TO WRITE SURFACE PRESSURE (INTPSV)
       1137                     C
       1138                     C       NOTES ; CURRENT FIELD FILE(FILEFS) AND SURFACE PRESSURE FILE
       1139                     C              (FILEPS) WILL BE CONCURRENTLY ACCESSED DURING THE TIME
       1140                     C              INTEGRATIONS. WHEN USING A MAIN FRAME, DO NOT ALLOCATE
       1141                     C              THESE FILES ON A SAME DATA SET.
       1142                     C
       1143                     C >>>>> VARIABLES AND CONSTANTS USED <<<<<
       1144                     C       (1) CONTROL VARIABLES
       1145                     C          IPART       ; DOMAIN NUMBER THAT THIS TASK SHOULD COMPUTE/IS
       1146                     C                       COMPUTING. IPART BEING SET ZERO MEANS THAT
       1147                     C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL
       1148                     C                       MODE.
       1149                     C
       1150                     C          IWRITE      ; INFORM GF UTILITIES OF OUTPUT MODE
       1151                     C          INAME       ; INFORM GF UTILITIES OF VARIABLE NAME MODE
       1152                     C          IDIM        ; INFORM RELATED SUBROUTINES OF PROBLEM DIMENSION
       1153                     C          MAXPRN      ; MAXIMUM TIME STEPS TO BE PRINTED OUT
       1154                     C
       1155                     C          IOUT        ; CONTROLS OPTIONAL OUTPUT FILES
       1156                     C                   0 --- OUTPUT NO OPTIONAL FILES
       1157                     C                   1 --- OUTPUT AVERAGE              FLOW FIELD FILE
       1158                     C                   2 --- OUTPUT AVERAGE, RMS, STRESS FLOW FIELD FILES
       1159                     C
       1160                     C          INTFSV      ; FIELD DATA SAMPLING INTERVAL
       1161                     C           NOTES ; INSTANTANEOUS VELOCITY COMPONENTS AT ALL THE MODES
       1162                     C                  AND STATIC PRESSURE AT ALL THE ELEMENTS WILL BE
       1163                     C                  OUTPUT TO THE SPECIFIED FILE AT EVERY 'INTFSV' TIME
       1164                     C                  STEPS. NO DATA WILL BE OUTPUT WHEN 'INTFSV' IS SET
       1165                     C                  TO 0.
       1166                     C
       1167                     C          INTPSV      ; SURFACE PRESSURE DATA SAMPLING INTERVAL
       1168                     C           NOTES ; SURFACE PRESSURE DATA, NAMELY P AT SURFACE ELEMENTS
       1169                     C                  DETERMINED BY THE BODY FORCE CALCULATION BOUNDARY
       1170                     C                  NODES, WILL BE OUTPUT TO THE SPECIFIED FILE AT EVERY
       1171                     C                  'INTPSV' TIME STEPS. NO DATA WILL BE OUTPUT WHEN
       1172                     C                  'INTPSV' IS SET TO 0.
       1173                     C
       1174                     C          FSMACH      ; FREE-STREAM MACH NUMBER   (NEEDED FOR IPRESS>1)
       1175                     C
       1176                     C          DT          ; TIME INCREMENT
       1177                     C           NOTES ; TIME INCREMENT WILL BE KEPT CONSTANT TO THE
       1178                     C                  SPECIFIED VALUE THROUGHOUT THE TIME INTEGRATION.
       1179                     C          VISCM       ; MOLECULAR VISCOSITY
       1180                     C          PRT         ; TURBULENT PRANDTL NUMBER
       1181                     C
       1182                     C          C           ; SMAGORINSKY CONSTANT USED FOR IMODEL = 1
       1183                     C
       1184                     C           NOTES ; THE FOLLOWING VALUES FOR THE SMAGORINSKY CONSTANT
       1185                     C                  ARE GENERALLY RECOMMENDED:
       1186                     C
       1187                     C                0.1  --- FOR WALL-BOUNDED FLOWS
       1188                     C                0.15 --- FOR WAKES / JETS / MIXING LAYERS
       1189                     C                0.2  --- FOR HOMOGENEOUS TURBULENCE
       1190                     C
       1191                     C                   FOR THE DYNAMIC SMAGORINSKY MODEL, THE VALUE OF THE
       1192                     C                  SMAGORINSKY CONSTANT WILL BE COMPUTED LOCALLY (IN
       1193                     C                  TIME AND SPACE), AND THUS DOES NOT NEED TO BE
       1194                     C                  SPECIFIED.
       1195                     C
       1196                     C          OMEGA       ; ANGULAR VELOCITY OF REFERENCE FRAME OF -1
       1197                     C           NOTES ; REFERENCE FRAME OF -1 IS THE DEFAULT FRAME FOR
       1198                     C                  SINGLE FRAME MODE CALCULATION, SET FORCE BY
       1199                     C                  SPECIFYING ZERO FOR USER INPUT PARAMETER 'NFRAME',
       1200                     C                  AND IS ASSUMED TO HAVE AN ANGULAR VELOCITY OF 'OMEGA'
       1201                     C                  ABOUT THE POSITIVE Z-AXIS. AN APPROPRIATE INERTIA
       1202                     C                  (CENTRIFUGAL AND COLLIORIS' FORCES) WILL BE ADDED FOR
       1203                     C                  THOSE ELEMENTS WITH FRAME ATTRIBUTES OF -1. SEE ALSO
       1204                     C                  EXPLANATION ON USER INPUT PAREMETER 'NFRAME' DESRIBED
       1205                     C                  ABOVE.
       1206                     C
       1207                     C          UFRAM0  (IF); X-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
       1208                     C          VFRAM0  (IF); Y-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
       1209                     C          WFRAM0  (IF); Z-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
       1210                     C           NOTES ; FOR TRANSLATING FRAME WITH FRAME NUMBER OF 1, THESE
       1211                     C          VALUES WILL BE REGARDED AS THE ACCELERATION COMPONENTS IN THE
       1212                     C          X, Y, AND Z DIRECTIONS, RESPECTIVELY. SEE ALSO NOTES ON
       1213                     C          'NFRAME' DESRIBED ABOVE.
       1214                     C
       1215                     C          UFRAME(1,IF); X-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
       1216                     C          VFRAME(1,IF); Y-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
       1217                     C          WFRAME(1,IF); Z-DIR. VELOCITY    OF TRANSLATING FRAME 'IF'
       1218                     C          UFRAME(2,IF); X-DIR. ACCELERAION OF TRANSLATING FRAME 'IF'
       1219                     C          VFRAME(2,IF); Y-DIR. ACCELERAION OF TRANSLATING FRAME 'IF'
       1220                     C          WFRAME(2,IF); Z-DIR. ACCELERAION OF TRANSLATING FRAME 'IF'
       1221                     C
       1222                     C          EPSP        ; CONVERGENCE CRITERIA   FOR PRESSURE  EQUATION
       1223                     C          NMAXP       ; MAXIMUM ITERATIONS     FOR PRESSURE  EQUATION
       1224                     C          EPST        ; CONVERGENCE CRITERIA   FOR TRANSPORT EQUATIONS
       1225                     C          NMAXT       ; MAXIMUM ITERATIONS     FOR TRANSPORT EQUATIONS
       1226                     C
       1227                     C           NOTES ; USER INPUT PARAMETERS 'EPST' AND 'NMAXT' ARE
       1228                     C                  CONCERNED WITH THE TRANSPORT EQUATIONS THAT ARE
       1229                     C                  SOLVED IMPLICITLY AND ARE NEEDED ONLY FOR IFORM=3 AND
       1230                     C                  IFORM=4. IF YOU SELECT AN EXPLICIT FORMULATION
       1231                     C                  BY SPECIFYING EITHER IFORM=0, 1, OR 2, PROVIDE DUMMY
       1232                     C                  VALUES FOR THESE PARAMETERS.
       1233                     C
       1234                     C          NTIME       ; TIME STEPS TO BE INTEGRATED
       1235                     C
       1236                     C          ISTART      ; CONTROLS DEVELOPMENT OF THE FLOW FIELD
       1237                     C                   0 --- SET  ZERO INITIAL FLOW FIELD
       1238                     C                   1 --- READ INITIAL FLOW FROM GIVEN FILE
       1239                     C          TFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER (SEE BELOW)
       1240                     C          UFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER (SEE BELOW)
       1241                     C          VFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER (SEE BELOW)
       1242                     C          WFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER (SEE BELOW)
       1243                     C
       1244                     C                   IN TERMS OF THE FLOW FIELD DEVELOPMENT, ISTART=0
       1245                     C                  IS IDENTICAL TO ISTART=1, EXCEPT THAT THE FORMER
       1246                     C                  SETS ZERO INITIAL FLOW FIELD WHILE THE LATTER READS
       1247                     C                  INITIAL FLOW FILED FROM A GIVEN FILE. THE FOLLOWING
       1248                     C                  EXPLANATION WILL BE APPLICABLE BOTH FOR ISTART=0 AND
       1249                     C                  ISTART=1.
       1250                     C
       1251                     C                   THOSE VALUES LISTED BELOW WILL BE EXPONENTIALLY
       1252                     C                  DEVELOPED. NAMELY, AT EACH TIME STEP THEY WILL BE SET
       1253                     C                  TO A VALUE THAT IS THE ORIGINAL VALUE MULTIPLIED BY
       1254                     C                  THE FOLLOWING FUNCTION.
       1255                     C
       1256                     C                      VALUES GRADUALLY DEVELOPED:
       1257                     C                          INLET BOUNDARY VELOCITIES
       1258                     C                          MOVING WALL BOUNDARY VELOCITIES
       1259                     C                          ANGULAR VELOCITY
       1260                     C                          FRAME VELOCITIES FOR TRANSLATING FRAMES
       1261                     C                          (FRAME ACCELERATION FOR FRAME NUMBER 1)
       1262                     C
       1263                     C                      FUNCTION APPLIED: 1-EXP(-TIME/TFINAL)
       1264                     C
       1265                     C                  WHERE 'TIME' IS THE CURRENT TIME OF THE INTEGRATION
       1266                     C                  AND 'TFINAL' IS A USER INPUT PARAMETER TO CONTROL
       1267                     C                  FLOW FIELD DEVELOPMENT. IF NO FURTHER DEVELOPMENT
       1268                     C                  OF THE FLOW FIELD IS DESIRED, SIMPLY SET 'TFINAL'
       1269                     C                  TO ZERO AND THIS FUNCTION WILL BECOME A CONSTANT
       1270                     C                  VALUE OF ONE. THE DIVIDE EXCEPTION WILL BE INTERNALLY
       1271                     C                  SUPPRESSED AND HENCE DOES NOT NEED TO BE TAKEN CARE
       1272                     C                  BY THE USER.
       1273                     C
       1274                     C                   FOLLOWING UNIFORM ACCELERATION TERMS WILL ALSO BE
       1275                     C                  ADDED TO THE MOMENTUM EQUATIONS FOR TRANSLATING
       1276                     C                  FRAMES WITH FRAME NUMBER GREATER THAN 1
       1277                     C                  (SEE ALSO NOTES ON 'NFRAME').
       1278                     C
       1279                     C                      ACCELERATION TERMS ADDED TO X, Y, Z DIRECTIONS:
       1280                     C                         (UFINAL-UFRME0(IFRM))/TFINAL*EXP(-TIME/TFINAL)
       1281                     C                         (VFINAL-VFRME0(IFRM))/TFINAL*EXP(-TIME/TFINAL)
       1282                     C                         (WFINAL-WFRME0(IFRM))/TFINAL*EXP(-TIME/TFINAL)
       1283                     C
       1284                     C                  WHERE 'UFRME0(IFRM)', 'VFRME0(IFRM)', AND
       1285                     C                  'WFRME0(IFRM)' ARE THE FRAME VELOCITIES SET FOR
       1286                     C                  MULTIFRAME COMPUTATIONS (DESCRIBED ELSEWHERE). NOTE
       1287                     C                  THAT THESE ACCELERATION TERMS ARE CONSISTENT WITH THE
       1288                     C                  ABOVE MENTIONED DEVELOPMENT FUNCTION.
       1289                     C
       1290                     C          DEVLP1      ; FUNCTION APPLIED FOR BOUNDARY VALUES, ANGULAR
       1291                     C                       VELOCITY AND FRAME VELOCITY.
       1292                     C          DEVLP2      ; FUNCTION APPLIED FOR ACCELERATIONS
       1293                     C          ACCELX      ; X-DIR. ACCELERATION TERMS ADDED TO ALL FRAMES
       1294                     C          ACCELY      ; Y-DIR. ACCELERATION TERMS ADDED TO ALL FRAMES
       1295                     C          ACCELZ      ; Z-DIR. ACCELERATION TERMS ADDED TO ALL FRAMES
       1296                     C
       1297                     C       (2) PROGRAM-DEFAULT MODEL CONSTANTS
       1298                     C
       1299                     C
       1300                     C       (3) INTEGER CONSTANTS
       1301                     C          ME          ; MAX. NUMBER OF TOTAL ELEMENTS
       1302                     C          MP          ; MAX. NUMBER OF TOTAL NODES
       1303                     C          MB          ; MAX. NUMBER OF BOUNDARY NODES
       1304                     C
       1305                     C          MDOM        ; MAX. NUMBER OF THE SENDING/RECEIVING DOMAINS
       1306                     C          MBPDOM      ; THE MAXIMUM NUMBER OF INTER-CONNECT/OVERSET
       1307                     C                       BOUNDARY NODES FOR ONE NEIGHBORING DOMAIN.
       1308                     C
       1309                     C          MRESV       ; DEFAULT NUMBER OF HISTORY SAVING    DATA
       1310                     C          MSMPL       ; MAX.    NUMBER OF HISTORY SAVING  POINTS
       1311                     C          MHST        ; MAX.    NUMBER OF HISTORY SAVING    DATA
       1312                     C          MTIME       ; MAX.    NUMBER OF TIME INTEGRATION STEPS
       1313                     C
       1314                     C          MWRK        ; DIMENSION SIZE OF WORK AREA ( = MP )
       1315                     C          MAXBUF      ; DIMENSION SIZE OF WORK RX, RY, RZ ( = ME*N2 )
       1316                     C
       1317                     C          NE          ; NUMBER OF TOTAL ELEMENTS
       1318                     C          NP          ; NUMBER OF TOTAL    NODES
       1319                     C
       1320                     C       (4) FIELD VARIABLES
       1321                     C          X       (IP); X-COORDINATES OF NODES
       1322                     C          Y       (IP); Y-COORDINATES OF NODES
       1323                     C          Z       (IP); Z-COORDINATES OF NODES
       1324                     C
       1325                     C          SX      (IE); UPWIND VECTOR IN X-DIR.
       1326                     C          SY      (IE); UPWIND VECTOR IN Y-DIR.
       1327                     C          SZ      (IE); UPWIND VECTOR IN Z-DIR.
       1328                     C
       1329                     C          U       (IP); X-DIR. VELOCITY COMPONENT AT NODES
       1330                     C          V       (IP); Y-DIR. VELOCITY COMPONENT AT NODES
       1331                     C          W       (IP); Z-DIR. VELOCITY COMPONENT AT NODES
       1332                     C          P       (IE); ELEMENT PRESSURE
       1333                     C          PN      (IP); NODAL   PRESSURE
       1334                     C
       1335                     C          UA      (IP); X-DIR. VELOCITY COMPONENT     ( TIME AVERAGE )
       1336                     C          VA      (IP); Y-DIR. VELOCITY COMPONENT     ( TIME AVERAGE )
       1337                     C          WA      (IP); Z-DIR. VELOCITY COMPONENT     ( TIME AVERAGE )
       1338                     C          PA      (IE); NODAL  PRESSURE              ( TIME AVERAGE )
       1339                     C
       1340                     C          UR      (IP); X-DIR. VELOCITY COMPONENT     ( RMS )
       1341                     C          VR      (IP); Y-DIR. VELOCITY COMPONENT     ( RMS )
       1342                     C          WR      (IP); Z-DIR. VELOCITY COMPONENT     ( RMS )
       1343                     C          PR      (IE); NODAL  PRESSURE              ( RMS )
       1344                     C
       1345                     C          US      (IP); X-DIR. VELOCITY COMPONENT ( STRESS )
       1346                     C          VS      (IP); Y-DIR. VELOCITY COMPONENT ( STRESS )
       1347                     C          WS      (IP); Z-DIR. VELOCITY COMPONENT ( STRESS )
       1348                     C           NOTES ; 'US(IP)' DENOTES NODALLY DEFINED REYNOLDS STRESS
       1349                     C                  COMPONENT -<V'W'>, WHERE < > MEANS TIME AVERAGE.
       1350                     C                  LIKEWISE, 'VS(IP)' DENOTES -<W'U'>, AND 'WS(IP)'
       1351                     C                  -<U'V'>.
       1352                     C
       1353                     C           NOTES ; SINCE CURRENT GF SYSTEM HAS ONLY ONE TYPE OF DATA
       1354                     C                  FOR FLOW VELOCITY AND PRESSURE, ALL THE VELOCITIES
       1355                     C                  AND PRESSURES ABOVE WILL BE SAVED WITH A SAME KEY
       1356                     C                  WORD '*VELO_3D' AND '*PRES_3E'.
       1357                     C
       1358                     C           NOTES ; IN ORDER TO KEEP CONSISTENCY WITH THE FLOW FIELD
       1359                     C                  DATA GENERATED BY THE CONVENTIONAL 'LES3D', 'LES3X'
       1360                     C                  INPUTS/OUTPUTS ELEMENT-WISE PRESSURE. IT WILL CONVERT
       1361                     C                  THE READ-IN ELEMENT-WISE PRESSURE TO NODAL VALUE FOR
       1362                     C                  ITS INTERNAL USE AND RE-CONVERT THE NODAL PRESSURE TO
       1363                     C                  ELEMENT-WISE VALUE FOR OUTPUTING TO A GENERAL FILE.
       1364                     C
       1365                     C       (5) ELEMENT'S POSITION AND SHAPE DEPENDENT CONSTANTS
       1366                     C          CM      (IP); INVERSED LUMPED MASS MATRIX
       1367                     C          DELTA   (IE); CHARACTERISTIC ELEMENT DIMENSION COMPUTED AS
       1368                     C                       THE CUBIC ROOT OF ELEMENT VOLUME
       1369                     C          FILTER  (IE); ELEMENT GRID FILTER WIDTH
       1370                     C          ELM   (K*IE); ELEMENT POSITION AND SHAPE DEPENDENT CONSTANTS,
       1371                     C                       DEFINED IN ELEM3E AND USED IN FIND3E FOR
       1372                     C                       CALCULATING LOCAL COORDINATES OF THE SAMPLE
       1373                     C                       POINTS.
       1374                     C           NOTES:    THIS ARRAY IS NEEDED TEMPORARILY ONLY.
       1375                     C                     IN ELEM3E THIS ARRAY IS DEFINED AS ELM(K,IE).
       1376                     C                     IN THE MAIN ROUTINE IT IS DEFINED AS A
       1377                     C                     ONE-DIMENSIONAL ARRAY BECAUSE IT WILL BE USED AS
       1378                     C                     WORKING ARAYS IN SOME ROUTINES.
       1379                     C           (SEE ELEM3E FOR THE MEANING OF EACH COMPONENT IN ELM(K,IE))
       1380                     C
       1381                     C          SNI   (I,IE); ELEMENT CENTER VALUE OF N
       1382                     C          DNXI  (I,IE); ELEMENT CENTER VALUE OF NX
       1383                     C          DNYI  (I,IE); ELEMENT CENTER VALUE OF NY
       1384                     C          DNZI  (I,IE); ELEMENT CENTER VALUE OF NZ
       1385                     C
       1386                     C          SN    (I,IE); INTEGRATED ELEMENT VECTOR OF N
       1387                     C          DNX   (I,IE); INTEGRATED ELEMENT VECTOR OF NX
       1388                     C          DNY   (I,IE); INTEGRATED ELEMENT VECTOR OF NY
       1389                     C          DNZ   (I,IE); INTEGRATED ELEMENT VECTOR OF NZ
       1390                     C
       1391                     C           NOTES ; IN THE ABOVE LISTS, N DENOTES THE SHAPE FUNCTION.
       1392                     C                  NX, NY, NZ, RESPECTIVELY DENOTE, X-DERIVERTIVE,
       1393                     C                  Y-DERIVERTIVE, AND Z-DERIVERTIVE OF SHAPE FUNCTION.
       1394                     C           NOTES ; E   (IE,I,J) IS ALSO USED  AS ELEMENT-WISE
       1395                     C                   COEFFICIENT MATRIX
       1396                     C
       1397                     C       (6) ELEMENT'S CONNECTIVITY SPECIFYING LISTS
       1398                     C          NODE  (I,IE); NODE NO. TABLE BASED ON ELEMENT
       1399                     C          NODE2 (I,IE); NODE NO. TABLE BASED ON ELEMENT
       1400                     C                        (DUMMY VARIABLE FOR READING MESH DATA)
       1401                     C          WEIGHP(IP)  ;  WEIGHT FUNCTION OF THE NODE TO CALCULATE
       1402                     C                         THE FLOW RATE
       1403                     C          NUMIP   (IP); NUMBER OF NEIGHBORING DOMAINS THAT NODE
       1404                     C                        'IP' BELONG TO
       1405                     C
       1406                     C
       1407                     C       (7) BOUNDARY CONDITIONS DATA
       1408                     C        A. INLET BOUNDARY
       1409                     C          NPINLT      ; NUMBER OF INLET BOUNDARY NODES
       1410                     C          LPINLT (IBP); INLET BOUNDARY NODES
       1411                     C          UINLT  (IBP); INLET BOUNDARY U-VELOCITIES
       1412                     C          VINLT  (IBP); INLET BOUNDARY V-VELOCITIES
       1413                     C          WINLT  (IBP); INLET BOUNDARY W-VELOCITIES
       1414                     C
       1415                     C        B. WALL BOUNDARY
       1416                     C          NPWALL      ; NUMBER OF WALL BOUNDARY NODES
       1417                     C          LPWALL (IBP); WALL BOUNDARY NODES
       1418                     C          UWALL  (IBP); WALL BOUNDARY U-VELOCITIES
       1419                     C          VWALL  (IBP); WALL BOUNDARY V-VELOCITIES
       1420                     C          WWALL  (IBP); WALL BOUNDARY W-VELOCITIES
       1421                     C
       1422                     C        C. SYMMETRIC BOUNDARY
       1423                     C          NPSYMT      ; NUMBER OF SYMMETRIC BOUNDARY NODES
       1424                     C          LPSYMT (IBP); SYMMETRIC BOUNDARY NODES
       1425                     C          XPSYMT (IBP); X NORMAL OF SYMMETRIC BOUNDARY NODE
       1426                     C          YPSYMT (IBP); Y NORMAL OF SYMMETRIC BOUNDARY NODE
       1427                     C          ZPSYMT (IBP); Z NORMAL OF SYMMETRIC BOUNDARY NODE
       1428                     C
       1429                     C        D. FREE BOUNDARY
       1430                     C          NPFREE      ; NUMBER OF FREE BOUNDARY NODES
       1431                     C          LPFREE (IBP); FREE BOUNDARY NODES
       1432                     C          XPFREE (IBP); X NORMAL OF FREE BOUNDARY NODE
       1433                     C          YPFREE (IBP); Y NORMAL OF FREE BOUNDARY NODE
       1434                     C          ZPFREE (IBP); Z NORMAL OF FREE BOUNDARY NODE
       1435                     C
       1436                     C        E. CYCLIC BOUNDARY
       1437                     C          NPCCL       ; NUMBER OF CYCLIC BOUNDARY NODES
       1438                     C          LPCCL1 (IBP); CYCLIC BOUNDARY NODES-1
       1439                     C          LPCCL2 (IBP); CYCLIC BOUNDARY NODES-2
       1440                     C
       1441                     C        F. FLUID FORCE CALCULATION SURFACE
       1442                     C          NPBODY      ; NUMBER OF BODY SURFACE NODES
       1443                     C          LPBODY (IBP); BODY SURFACE NODES
       1444                     C          XPBODY (IBP); X NORMAL OF BODY BOUNDARY NODE
       1445                     C          YPBODY (IBP); Y NORMAL OF BODY BOUNDARY NODE
       1446                     C          ZPBODY (IBP); Z NORMAL OF BODY BOUNDARY NODE
       1447                     C          NEBODY      ; NUMBER OF BODY SURFACE ELEMENTS
       1448                     C          LEBODY(I,IBE);BODY SURFACE ELEMENT AND ITS SURFACE
       1449                     C          XNBODY (IBE); X NORMAL OF BODY SURFACE
       1450                     C          YNBODY (IBE); Y NORMAL OF BODY SURFACE
       1451                     C          ZNBODY (IBE); Z NORMAL OF BODY SURFACE
       1452                     C          AEBODY (IBE); AREA     OF BODY SURFACE
       1453                     C          DXBODY(I,IBE);INTEGRATED ELEMENT VECTOR OF NX AT BODY SURFACE
       1454                     C          DYBODY(I,IBE);INTEGRATED ELEMENT VECTOR OF NY AT BODY SURFACE
       1455                     C          DZBODY(I,IBE);INTEGRATED ELEMENT VECTOR OF NZ AT BODY SURFACE
       1456                     C          NODEPS(I,IBE);BODY SURFACE ELEMENT DEFINING TABLE
       1457                     C          XPS     (IBP);BODY SURFACE ELEMENT DEFINING NODE X-COORD.
       1458                     C          YPS     (IBP);BODY SURFACE ELEMENT DEFINING NODE Y-COORD.
       1459                     C          ZPS     (IBP);BODY SURFACE ELEMENT DEFINING NODE Z-COORD.
       1460                     C          FXVIS   (IBP);X-COMPORNENT OF VISCOCITY FORCE ON BODY SURFACE
       1461                     C          FYVIS   (IBP);Y-COMPORNENT OF VISCOCITY FORCE ON BODY SURFACE
       1462                     C          FZVIS   (IBP);Z-COMPORNENT OF VISCOCITY FORCE ON BODY SURFACE
       1463                     C          N2D          ;NUMBER OF SURFACE ELEMENT DEFINING NODES ( =4 )
       1464                     C           NOTES; WALL SHEAR COMPONENTS OF BODY FORCE WILL BE DIRECTLY
       1465                     C                 CALCULATED BASED ON THE LOCAL TOTAL VISCOSITY AND
       1466                     C                 LOCAL VELOCITY GRADIENT WITHOUT TAKING INTO ACCOUNT
       1467                     C                 THE WALL VELOCITIES NOR THE WALL FUNCTION USED FOR THE
       1468                     C                 MOMENTUM INTEGRATION.
       1469                     C
       1470                     C        G. INTER-CONNECT BOUNDARY
       1471                     C          NPINT       ; NUMBER OF INTER-CONNECT BOUNDARY NODES
       1472                     C          LPINT1 (IBP); INTER-CONNECT BOUNDARY NODES
       1473                     C          LPINT2 (IBP); CORRESPONDING DOMAIN NUMBERS
       1474                     C          LPINT3 (IBP); NODE NUMBER IN THE CORRESPONDING DOMAINS
       1475                     C          NDOM        ; NUMBER OF THE NERIBERING DOMAINS
       1476                     C          LDOM  (IDOM); NEIGHBORING DOMAIN NUMBER
       1477                     C          NBPDOM(IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
       1478                     C                       SHARING WITH THE IDOM'TH NEIGHBORING DOMAIN,
       1479                     C                       LDOM(IDOM)
       1480                     C          IPSLF (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1481                     C                           CALLING TASK'S DOMAIN, FOR THE IDOM'TH
       1482                     C                           NEIGHBORING DOMAIN, LDOM(IDOM)
       1483                     C          IPSND (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
       1484                     C                           DOMAIN THAT IS RECEIVING THE CALLING
       1485                     C                           TASK'S RESIDUALS.
       1486                     C
       1487                     C        H. OVERSET BOUNDARY NODES
       1488                     C          NPSET       ; NUMBER OF OVERSET BOUNDARY NODES
       1489                     C          LPSET1 (IBP); OVERSET BOUNDARY NODES
       1490                     C          LPSET2 (IBP); ELEMENT NUMBER TO CALCULATE OVERSET VALUES
       1491                     C          LPSET3 (IBP); DOMAIN NUMBER TO SEND/RECEIVE OVERSET VALUES
       1492                     C                   0 --- CALCULATE AND SET OVERSET VALUE WITHIN THE
       1493                     C                         SELF-DOMAIN
       1494                     C          (POS. INT.)--- SEND    OVERSET VALUE TO   DOMAIN  LPSET3(IB)
       1495                     C                         AFTER CALCULATING IT WITHIN THE SELF-DOMAIN
       1496                     C          (NEG. INT.)--- RECEIVE OVERSET VALUE FROM DOMAIN -LPSET3(IB)
       1497                     C
       1498                     C          COVER1 (IBP); LOCAL COORDINATE IN INTERPOLATING ELEMENT
       1499                     C          COVER2 (IBP); LOCAL COORDINATE IN INTERPOLATING ELEMENT
       1500                     C          COVER3 (IBP); LOCAL COORDINATE IN INTERPOLATING ELEMENT
       1501                     C
       1502                     C          NPSND       ; NUMBER OF DOMAINS TO SEND OVERSET NODE VALUE
       1503                     C          LPSND (IDOM); DOMAIN NUMBER     TO SEND OVERSET NODE VALUE
       1504                     C          NPTSND(IDOM); NUMBER OF OVERSET NODE POINTS TO SEND TO
       1505                     C                        DOMAIN 'LPSND(IDOM)'
       1506                     C          IPSET(IPT,IDOM); OVERSET NODE NUMBER IN THE DOMAIN RECEIVING
       1507                     C                           THE OVERSET VALUES.
       1508                     C          IPSRC(IPT,IDOM); INDICATES POSITION IN THE OVERSET-VALUES
       1509                     C                           PASSING ARRAYS WHEN OVERSET NODE DATA
       1510                     C                           ARE COMPILED SEQUENTIALLY
       1511                     C
       1512                     C          NPRCV       ; NUMBER OF DOMAINS TO RECEIVE OVERSET NODE VALUE
       1513                     C          LPRCV (IDOM); DOMAIN NUMBER     TO RECEIVE OVERSET NODE VALUE
       1514                     C          NPTRCV(IDOM); NUMBER OF OVERSET POINTS TO RECEIVE FROM
       1515                     C                       DOMAIN 'LPRCV(IDOM)'
       1516                     C
       1517                     C          NBESET       ; NUMBER OF OVERSET BOUNDARY FACES
       1518                     C          LBESET(I,IBE); OVERSET BOUNDARY ELEMENT AND ITS SURFACE
       1519                     C          SNESET(I,IBE); INTEGRATED SHAPE FUNCTION AT OVERSET BOUNDARY FACE
       1520                     C          OSBCOE(  IBE); COEFF. FOR SWITCHING OVERSET BOUNDARY TYPE
       1521                     C                         (0.0-->PRESSURE B.C. , 1.0--> :VELOCITY B.C.)
       1522                     C          XNESET(  IBE); X NORMAL OF OVERSET BOUNDARY SURFACE
       1523                     C          YNESET(  IBE); Y NORMAL OF OVERSET BOUNDARY SURFACE
       1524                     C          ZNESET(  IBE); Z NORMAL OF OVERSET BOUNDARY SURFACE
       1525                     C
       1526                     C         I. FLUID FORCE OBJECT (FFO)
       1527                     C          NMFFO  ; NUMBER OF FLUID FORCE OBJECT (FFO)
       1528                     C          NFRCNT ; FLOW RATE CONTROLL FLAG
       1529                     C                  0       : OFF :
       1530                     C                  POSITIVE: ON  :CHANGE INLET VEL. EVERY 'NFRCNT' STEP
       1531                     C
       1532                     C          NEFFO           ; NUMBER OF FFO ELEMENTS
       1533                     C          NPFFOI          ; NUMBER OF FFO INLET NODES
       1534                     C          LEFFO1(IBE)     ; ELEMENT NUMBER OF FFO
       1535                     C          LEFFO2(IBE)     ; FFO-ID OF FFO ELEMENTS
       1536                     C          LPFFO1(IBP)     ; NODE NUMBER OF FFO INLET
       1537                     C          LPFFO2(IBP)     ; FFO-ID OF FFO INLET NODES
       1538                     C          MFFO            ; MAX. NUMBER OF FFO
       1539                     C          MDGCOE          ; MAX. NUMBER OF FF-COEFFICIENT DEGREE
       1540                     C          MEFFOI          ; MAX. NUMBER OF INLET ELEMENTS PER A FFO
       1541                     C          NDGCOE(IFFO)    ; FF-COEFFICIENT DEGREE
       1542                     C          NEFFOI(IFFO)    ;  NUMBER OF INLET ELEMENTS PER A FFO
       1543                     C          COEFFO(IDG,IFFO); FFO-COEEFICCIENT
       1544                     C          FFOVOL(IFFO)    ; VOLUME OF FFO
       1545                     C          FFOAIN(IFFO)    ; SURFACE AREA OF FFO INLET
       1546                     C          FFODIM(IFFO)    ; STREAM-WISE DIMENSION OF FFR (FFODIM=FFOVOL/FFOAIN)
       1547                     C          FFODIR(3,IFFO)  ; DIRECTION OF FFO INLET SURFACE
       1548                     C          FFOFR (IFFO)    ; FLOW RATE (TO BE CALCULATED AT FFO INLET)
       1549                     C          FFODP (IFFO)    ; PRESSURE DIFFERENCE IN FFO REGION
       1550                     C          AXFFOI(IBE;IFFO); X-COMPORNENT OF FFO INTEL SURFACE ELEMENT
       1551                     C          AYFFOI(IBE;IFFO); Y-COMPORNENT OF FFO INTEL SURFACE ELEMENT
       1552                     C          AZFFOI(IBE;IFFO); Z-COMPORNENT OF FFO INTEL SURFACE ELEMENT
       1553                     C          FXFFO (IE)      ; X COMPORNEMT OF FLUID-FORCE BY FFO
       1554                     C          FYFFO (IE)      ; X COMPORNEMT OF FLUID-FORCE BY FFO
       1555                     C          FZFFO (IE)      ; X COMPORNEMT OF FLUID-FORCE BY FFO
       1556                     C
       1557                     C
       1558                     C
       1559                     C       (8) TIME HISTORY DATA
       1560                     C          HST(IHST,ITIME); STORES TIME HISTORIES
       1561                     C          TIME        ; PRESENT TIME
       1562                     C          TIMER       ; PRESENT TIME OF OVERSET CONDITIONS DATA
       1563                     C           NOTES ; 'TIMER' WILL BE REFERED TO FOR INTER-FLAME OVERSET.
       1564                     C          DIVMAX      ; MAXIMUM DIVERGENT
       1565                     C          DIVESC      ; IF FIELD MAXIMUM DIVERGENT EXCEEDS THIS VALUE,
       1566                     C                       TIME MARCH WILL BE FORCED TO END, IN ORDER TO
       1567                     C                       SAVE FINAL FLOW FIELD.
       1568                     C          VISCAV      ; SPATIALLY AVERAGED TURBULENT EDDY VISCOSITY
       1569                     C          NITRP       ; NUMBER OF ITERATIONS FOR PRESSURE EQUATION
       1570                     C          RESP        ; L2-NORM RESIDUAL     FOR PRESSURE EQUATION
       1571                     C          FX          ; X COMPONENT OF FLUID FORCE ACTING ON THE BODY
       1572                     C          FY          ; Y COMPONENT OF FLUID FORCE ACTING ON THE BODY
       1573                     C          FZ          ; Z COMPONENT OF FLUID FORCE ACTING ON THE BODY
       1574                     C
       1575                     C          NSMPL       ; NUMBER OF DATA SAMPLING POINTS
       1576                     C          LSMPL (ISMPL); TYPE OF DATA TO BE SAMPLED
       1577                     C                   1 --- X-DIR. VELOCITY COMPONENT
       1578                     C                   2 --- Y-DIR. VELOCITY COMPONENT
       1579                     C                   3 --- Z-DIR. VELOCITY COMPONENT
       1580                     C                   4 --- PRESSURE
       1581                     C                   5 --- VOLUMETRIC LIQUID FRACTION
       1582                     C          IESMPL(ISMPL); ELEMENT NUMBER  OF  SAMPLING POINT
       1583                     C          XSMPL(ISMPL); X     COORDINATE OF  SAMPLING POINT
       1584                     C          YSMPL(ISMPL); Y     COORDINATE OF  SAMPLING POINT
       1585                     C          ZSMPL(ISMPL); Z     COORDINATE OF  SAMPLING POINT
       1586                     C          GSMPL(ISMPL); GZAI  COORDINATE OF  SAMPLING POINT
       1587                     C          ESMPL(ISMPL); EATA  COORDINATE OF  SAMPLING POINT
       1588                     C          TSMPL(ISMPL); THETA COORDINATE OF  SAMPLING POINT
       1589                     C          NHST        ; TOTAL NUMBER OF TIME HISTORY DATA TO BE SAVED
       1590                     C           NOTES; SAMPLING FOR THOSE POINTS OUT OF THE COMPUTATIONAL
       1591                     C                 DOMAIN WILL BE DISABLED AND THE SAMPLING NUMBER WILL
       1592                     C                 BE CONDENSED.
       1593                     C
       1594                     C       (13) COMMENT DATA
       1595                     C          COMGEN      ; GENERIC  FILE COMMENT STRING TO BE READ FROM
       1596                     C                       PARAMETER FILE AT THE START OF TIME INTEGRATION
       1597                     C                       AND TO BE WRITTEN TO ALL THE OUTPUT FILES
       1598                     C          COMFLE(ICOM); WORK ARRAY USED TO PASS FILE COMMENT
       1599                     C                        STRINGS TO GENERAL FILE UTILITIES
       1600                     C
       1601                     C          COMHST(IHST); SPECIFIC SET COMMENT STRINGS TO BE WRITTEN
       1602                     C                        TO HISTORY FILE, WHICH IDENTIFIES EACH HISTORY
       1603                     C                        DATA
       1604                     C          COMSET(ICOM); DUMMY ARRAY USED TO CALL GENERAL FILE UTILITIES
       1605                     C
       1606                     C           NOTES ; FOR INPUT FILES, ALL THE FILE COMMENT STRINGS AND
       1607                     C                  ALL THE SET COMMENT STRINGS WILL BE DISCARDED IN THE
       1608                     C                  GENERAL FILE UTILITIES AFTER THEY ARE WRITTEN TO THE
       1609                     C                  STANDARD OUTPUT. FOR OUTPUT FILES GENERIC FILE
       1610                     C                  COMMENT STRING READ FROM THE PARAMETER FILE, FOLLOWED
       1611                     C                  BY SPECIFIC FILE COMMENT STRINGS INTERNALLY DEFINED,
       1612                     C                  WILL BE WRITTEN TO EACH OUTPUT FILE.
       1613                     C                   NO SET COMMENT STRINGS WILL BE WRITTEN TO THE OUTPUT
       1614                     C                  FILES EXCEPT THE CURRENT FLOW FIELD FILE, SURFACE
       1615                     C                  PRESSURE DATA FILE, AND HISTORY DATA FILE TO WHICH
       1616                     C                  INTERNALLY DEFINED SET COMMENT STRINGS (INDICATING
       1617                     C                  CURRENT TIME AND TIME STEP OR IDENTIFYING EACH
       1618                     C                  HISTORY DATA), WILL BE WRITTEN.
       1619                     C
       1620                     C
       1621                     C      (14) WORK AREAS AND DUMMY ARRAYS
       1622                     C
       1623                     C
       1624                     C      (15) RETURN CODE
       1625                     C          IERR        ; RETURN CODE WHOSE VALUE WILL BE EITHER
       1626                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
       1627                     C                OR 1 --- INDICATING OCCURENCE OF SOME ERROR CONDITIONS
       1628                     C
       1629                           CALL USTINI()
       1630                           CALL USTPUT(01,"USRT:TIME-LOOP                ")
       1631                           CALL USTPUT(11,"USRT:VEL3D1                   ")
       1632                           CALL USTPUT(12,"USRT:VEL3D1:BCG               ")
       1633                           CALL USTPUT(13,"USRT:VEL3D1:BCG:AX            ")
       1634                           CALL USTPUT(14,"USRT:VEL3D1:01                ")
       1635                           CALL USTPUT(15,"USRT:VEL3D1:02                ")
       1636                           CALL USTPUT(16,"USRT:VEL3D1:CHECK.01          ")
       1637                           CALL USTPUT(21,"USRT:PRES3E                   ")
       1638                           CALL USTPUT(22,"USRT:PRES3E:RCM               ")
       1639                           CALL USTPUT(23,"USRT:PRES3E:RCM:BCG           ")
       1640                           CALL USTPUT(24,"USRT:PRES3E:RCM:BCG:CALLAP    ")
       1641                           CALL USTPUT(25,"USRT:PRES3E:RCM:BCG:CALLAP:GRD")
       1642                           CALL USTPUT(26,"USRT:PRES3E:RCM:BCG:CALLAP:DIV")
       1643                           CALL USTPUT(27,"USRT:PRES3E:RCM:BCG:CALLAP:D2 ")
       1644                           CALL USTPUT(31,"USRT:SETOS                    ")
       1645                           CALL USTPUT(32,"USRT:SETOS1                   ")
       1646                           CALL USTPUT(33,"USRT:SETOS1-01                ")
       1647                           CALL USTPUT(34,"USRT:SETOS1-02                ")
       1648                           CALL USTPUT(35,"USRT:SETOS1-03                ")
       1649                           CALL USTPUT(41,"USRT:VEL3D2                   ")
       1650                           CALL USTPUT(71,"USRT:CLRCRS                   ")
       1651                           CALL USTPUT(72,"USRT:NODLEX                   ")
       1652                           CALL USTPUT(73,"USRT:DGNSCL                   ")
       1653                           CALL USTPUT(74,"USRT:CRSCVA                   ")
       1654                           CALL USTPUT(75,"USRT:CLRCRS2                  ")
       1655                           CALL USTPUT(76,"USRT:NODLEX3                  ")
       1656                           CALL USTPUT(77,"USRT:DGNSCL2                  ")
       1657                           CALL USTPUT(81,"USRT:PRES3E:RCM:BCG:CALLAP:G1 ")
       1658                           CALL USTPUT(82,"USRT:PRES3E:RCM:BCG:CALLAP:G2 ")
       1659                           CALL USTPUT(83,"USRT:PRES3E:RCM:BCG:CALLAP:G3 ")
       1660                           CALL USTPUT(84,"USRT:PRES3E:RCM:BCG:CALLAP:G4 ")
       1661                           CALL USTPUT(91,"USRT:PRES3X                   ")
       1662                           CALL USTPUT(92,"USRT:PRES3X:1                 ")
       1663                           CALL USTPUT(93,"USRT:PRES3X:2:BCGS2X          ")
       1664                     C
       1665                           MAXBUF = ME*N2
       1666                     C
       1667                     C
       1668                     C            <<<<< QUERY EXECUTION MODE AND DOMAIN NUMBER >>>>>
       1669                     C
       1670                     C
       1671                     C
       1672                           NDOM = 0
       1673                           CALL DDINIT(NPART,IPART)
       1674                           IF(IPART.GE.1) NDOM = 1
       1675                     C
       1676     1                     IF(IPART.GE.2) THEN
       1677     1                         IUT6 = IUTLG
       1678     1                         CALL MFNAME(FILELG,FILE,IPART,IUT0,IERR)
       1679     2                         IF(IERR.NE.0) THEN
       1680     2                             WRITE(IUT0,*) BLANK
       1681     2                             WRITE(IUT0,*) ERMSGC
       1682     2                             GO TO 9999
       1683     2                         ENDIF
       1684     1                         OPEN(IUT6,FILE=FILE,FORM='FORMATTED')
       1685     1                     ENDIF
       1686                     C
       1687                           WRITE(IUT6,*) BLANK
       1688                           WRITE(IUT6,*) DATE
       1689                           WRITE(IUT6,*) '          ** RUNNING IN ', MODE(NDOM), ' MODE'
       1690                     C
       1691                           IF(IPART.GE.1)
       1692                          *WRITE(IUT6,*) '             NPART =', NPART, '    IPART=',IPART
       1693                     #ifdef cputime
       1694                           CALL SYSTEM_CLOCK(TCNT0)
       1695                           TSYS0 = MPI_WTIME()
       1696                     #endif
       1697                     C
       1698                     C
       1699                     C
       1700                     C            <<<<< DISPLAY INTERNAL PARAMETER SETTINGS >>>>>
       1701                     C
       1702                     C
       1703                     C
       1704                           WRITE(IUT6,*) BLANK
       1705                           WRITE(IUT6,*) ' ** INTERNAL VARIABLE SETTINGS **'
       1706                     C
       1707                           WRITE(IUT6,*) BLANK
       1708                           WRITE(IUT6,*) '(1) CONSTANTS REGARDING SUBGRID-SCALE MODELS'
       1709                           WRITE(IUT6,*) ' GRID FILTER WIDTH CONTROL FLAG  : IFILTR=', IFILTR
       1710                           WRITE(IUT6,*) ' CS COMPUTING INTERVAL           : INTDYN=', INTDYN
       1711                           WRITE(IUT6,*) ' CS AVERAGING NUMBER             : NAVDYN=', NAVDYN
       1712                           WRITE(IUT6,*) ' TEST FILTER WIDTH RATIO 1       : ALFDYN=', ALFDYN
       1713                           WRITE(IUT6,*) ' TEST FILTER WIDTH RATIO 2       : GAMDYN=', GAMDYN
       1714                           WRITE(IUT6,*) ' DSM VERSION (1:3C-VER.,2:3X-VER.):  IDSM=', IDSM
       1715                     C
       1716     1                     IF(IDSM.EQ.1) THEN
       1717     1                         UPPER=-1.0E0
       1718     1                         CSMAX= 0.3E0
       1719     1                     ENDIF
       1720                     C
       1721                           IF(UPPER .GT. 0.E0)
       1722                          *WRITE(IUT6,*) ' SGS EDDY VISCOSITY UPPER-BOUND  : UPPER =', UPPER
       1723                           WRITE(IUT6,*) ' MAXIMUM CS VALUE IN DSM         : CSMAX =', CSMAX
       1724                     C
       1725                           WRITE(IUT6,*) BLANK
       1726                           WRITE(IUT6,*) '(2) CONSTANTS REGARDING NEAR-WALL TURBULENCE'
       1727                     CC    WRITE(IUT6,*) ' WALL VISCOSITY CONTROL FLAG     : ISGSWL=', ISGSWL
       1728                           WRITE(IUT6,*) ' WALL VISCOSITY DAMP PARAMETER   : DAMPWL=', DAMPWL
       1729                           WRITE(IUT6,*) ' VALUE FOR VON-KARMAN CONSTANT   : VKAP  =', VKAP
       1730                           WRITE(IUT6,*) ' VALUE FOR UNIVERSAL LAW CONSTANT: B     =', BCONST
       1731                           WRITE(IUT6,*) ' VALUE FOR VAN-DRIEST CONSTANT   : AP    =', AP
       1732                     C
       1733                           WRITE(IUT6,*) BLANK
       1734                           WRITE(IUT6,*) '(3) CONSTANTS REGARDING CAVITATION MODEL'
       1735                           WRITE(IUT6,*) BLANK
       1736                           WRITE(IUT6,*) ' LIQUID FRACTION AT INLET        : FLINLT=', FLINLT
       1737                           WRITE(IUT6,*) ' LOWER BOUND FOR LIQUID FRACTION : FLMIN =', FLMIN
       1738                           WRITE(IUT6,*) ' SGS SCHMIDT NUMBER FOR FRACTION : SCT   =', SCT
       1739                     CC    WRITE(IUT6,*) ' STATIC PRESSURE AT OUTLET       : PSFREE=', PSFREE
       1740                     C
       1741                           WRITE(IUT6,*) BLANK
       1742                           WRITE(IUT6,*) '(4) CONSTANTS REGARDING NUMERICAL METHOD'
       1743                           WRITE(IUT6,*) ' NUMBER OF GAUSS POINTS FOR HEX. : IGAUSH=', IGAUSH
       1744                           WRITE(IUT6,*) ' NUMBER OF GAUSS POINTS FOR WED. : IGAUSW=', IGAUSW
       1745                           WRITE(IUT6,*) ' NUMBER OF GAUSS POINTS FOR PYR. : IGAUSP=', IGAUSP
       1746                           WRITE(IUT6,*) ' NUMBER OF GAUSS POINTS FOR TET. : IGAUST=', IGAUST
       1747                           WRITE(IUT6,*) ' OVERSET INTERVAL FOR TRANS. EQ. : NITRIT=', NITRIT
       1748                           WRITE(IUT6,*) ' OVERSET INTERVAL FOR PRS.   EQ. : NITPIP=', NITRIP
       1749                     CC    WRITE(IUT6,*) ' WALL FUNCTION         ITERATIONS: NITRWL=', NITRWL
       1750                     CC    WRITE(IUT6,*) ' SAMPLE-ELEMENT SEARCH ITERATIONS: NITRES=', NITRES
       1751                     C
       1752                           WRITE(IUT6,*) BLANK
       1753                           WRITE(IUT6,*) '(5) CONSTANTS REGARDING OUTPUT'
       1754                           WRITE(IUT6,*) ' FILE WRITING MODE FLAG          : IWRITE=', IWRITE
       1755                           WRITE(IUT6,*) ' MAX. TIMESTEPS TO BE PRINTED-OUT: MAXPRN=', MAXPRN
       1756                           WRITE(IUT6,*) ' EMERGENLY ESCAPE DIVERGENT LIMIT: DIVESC=', DIVESC
       1757                     C
       1758                           WRITE(IUT6,*) BLANK
       1759                           WRITE(IUT6,*) '(6) CONSTANTS REGARDING MATRIX SOLVER'
       1760                           WRITE(IUT6,*) ' MATRIX SOLVER FOR PRESSURE      : ISOLP =', ISOLP
       1761                           WRITE(IUT6,*) ' MATRIX SOLVER FOR HEAT TRANSFER : ISOLT =', ISOLT
       1762                           WRITE(IUT6,*) ' INNER ITERATIONS NUMBER OF RCM  : NMAXB =', NMAXB
       1763                           WRITE(IUT6,*) ' CONTROLL PARAMETER NS FOR IDR   : NSIDR =', NSIDR
       1764                           WRITE(IUT6,*) ' CONTROLL PARAMETER NL FOR IDR   : NLIDR =', NLIDR
       1765                     C
       1766                           WRITE(IUT6,*) BLANK
       1767                           WRITE(IUT6,*) '(7) OTHER FLAGS AND CONSTANTS'
       1768                     CC    WRITE(IUT6,*) ' OVERSET TREATING MODE FLAG      : LOSEND=', LOSEND
       1769                           WRITE(IUT6,*) ' OUTLET  TREATING MODE FLAG      : LFREE =', LFREE
       1770                     CC    WRITE(IUT6,*) ' MASS IMBALANCE CORRECTION FLAG  : IMASS =', IMASS
       1771                     CC    WRITE(IUT6,*) ' HEAD CALCULATION FLAG           : LHEAD =', LHEAD
       1772                     CC    WRITE(IUT6,*) ' NUMBER OF OVERSET SURFACES      : NSDEP =', NSDEP
       1773                     CC    WRITE(IUT6,*) ' NON-REFLECTING B.C. FLAG        : INRBC =', INRBC
       1774                     CC    WRITE(IUT6,*) ' FLAG OF B.C. WHICH USE NRBC     : IBCIO =', IBCIO
       1775                     CC    WRITE(IUT6,*) ' MINIMUM MACH NUMBER TO USE NRBC : EPSM  =', EPSM
       1776                     CC    WRITE(IUT6,*) ' PRESSURE REFERENCE POINT FLAG   : IPREF =', IPREF
       1777                     CC    WRITE(IUT6,*) ' FLAG OF CAVITATION REF. PRESSURE: IPCAV =', IPCAV
       1778                     C
       1779                           WRITE(IUT6,*) BLANK
       1780                           WRITE(IUT6,*) '(8) MAX. NUMBERS'
       1781                           WRITE(IUT6,*) ' MAX. NUMBER OF TOTAL     ELEMENTS =',ME
       1782                           WRITE(IUT6,*) ' MAX. NUMBER OF TOTAL        NODES =',MP
       1783                           WRITE(IUT6,*) ' MAX. NUMBER OF BOUNDARY     NODES =',MB
       1784                           WRITE(IUT6,*) ' MAX. NUMBER OF SEDN/RECV  DOMAINS =',MDOM
       1785                           WRITE(IUT6,*) ' MAX. NUMBER OF COMMUNICATION POINT=',MBPDOM
       1786                           WRITE(IUT6,*) ' MAX. NUMBER OF TIME STEPS         =',MTIME
       1787                           WRITE(IUT6,*) ' MAX. NUMBER OF HISTORY SAVED DATA =',MHST
       1788                           WRITE(IUT6,*) ' MAX. NUMBER OF TRANSLATING FRAMES =',MFRAME
       1789                     CC    WRITE(IUT6,*) ' MAX. NUMBER OF COMBINATIONS IN RCM=',MRCM
       1790                     C
       1791                           WRITE(IUT6,*) BLANK
       1792                           WRITE(IUT6,*) ' ** ALLOCATING ARRAYS **'
       1793                           WRITE(IUT6,*) ' DONE!'
       1794                     C
       1795                     C
       1796                     C
       1797                     C            <<<<< READ CALCULATION PARAMETERS AND FILE NAMES
       1798                     C                 TO ALLOCATE                                    >>>>>
       1799                     C
       1800                     C
       1801                     C
       1802                           OPEN(IUT5,FILE=FILEIN,FORM='FORMATTED')
       1803                     C
       1804                           WRITE(IUT6,*) BLANK
       1805                           WRITE(IUT6,*) ' ** READING CALCULATION PARAMETERS **'
       1806                           IACT=1
       1807                           CALL LESRPX(IACT,IUT0,IUT5,IUT6,
       1808                          *            IPART,COMGEN,MSMPL,MTIME,MRESV,MFRAME,
       1809                          *            IMODEL,IFORM ,IPRESS,FSMACH,
       1810                          *            D000  ,U000  ,T000  ,TREF  ,RHO000,
       1811                          *            IHEAT ,ISOLID,ICAVI ,IBUSNQ,
       1812                          *            NFRAME,JSET  ,OMEGA0 ,
       1813                          *            UFRAM0,VFRAM0,WFRAM0,
       1814                          *            VISCM ,SIGMA ,RHOF  ,RHOS  ,
       1815                          *            CONDF ,CONDS ,CPF   ,CPS   ,
       1816                          *            ISTART,NTIME ,DT    ,NMAXSE,NMAXSI,
       1817                          *            NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS  ,
       1818                          *            TFINAL,UFINAL,VFINAL,WFINAL,
       1819                          *            IOUT  ,INTFSV,INTPSV,
       1820                          *            NSMPL,LSMPL,XSMPL,YSMPL,ZSMPL,
       1821                          *            NHST,COMHST,
       1822                          *            FILEMS,FILEBC,FILEIF,FILEFF,FILEHS,FILEAT,FILEMD,
       1823                          *            FILEOS,FILEAV,FILERM,FILEST,FILEFS,FILEPS,
       1824                          *            FILEMR,FILEBR,FILEFR,FILEAR,
       1825                          *            JSETOS,FILEDM,FILEFM,IERR)
       1826                           IF(ICAVI.GE.1) IPRESS=3
       1827                           OMGMRF(1)=OMEGA0
       1828                           EPSSU  = EPSS
       1829                           EPSSP  = EPSS
       1830                     C
       1831     1                     IF(IERR.NE.0) THEN
       1832     1                         WRITE(IUT0,*) BLANK
       1833     1                         WRITE(IUT0,*) ERMSGC
       1834     1                         GO TO 9999
       1835     1                     ENDIF
       1836                           INTPRN = MAX(1,NTIME/MAXPRN)
       1837                           IF(INTFSV.LE.0) INTFSV = NTIME+1
       1838                           IF(INTPSV.LE.0) INTPSV = NTIME+1
       1839                           WRITE(IUT6,*) ' DONE!'
       1840                     C
       1841                           WRITE(IUT6,*) BLANK
       1842                           WRITE(IUT6,*) ' ** READING OPTIONAL PARAMETERS **'
       1843                           CALL LESROP(IUT0,IUT5,IUT6,IPART,IFILTR,IDUM,
       1844                          *            LFREE,IDUM,IDUM, DUM,IDUM,
       1845                          *            IDUM,IDUM,IDUM,ISOLV,ISOLT,ISOLP,
       1846                          *            NMAXB,IDUM, DUM,IDUM,
       1847                          *            DUM, DUM, DUM,IDUM,IDUM,DUM,
       1848                          *            NITRIT,NITRIP,BTDCOE,DIVESC,
       1849                          *            JSORT,JCOLOR,JUNROL,NDIVX,NDIVY,NDIVZ,NEIP,
       1850                          *            DUM,NRFN,IRFNMW,IRFNFF,NGRID,IRCAPC,
       1851                          *            MER,MPR,MEPR,MPPR,MBR,MBPR,MDOMR,
       1852                          *            IMONTR,ALPHAV,ALPHAP,
       1853                          *            MFFO,MDGCOE,NFFO,NDGCOE,COEFFO,
       1854                          *            NFRCNT,ALPHAQ,IDIAGV,THDT3D,PLIMIT,
       1855                          *            JFSPRS,JPRESS,GRAV,IVELIN,VELIN0,IGRAV,
       1856                          *            MAXPRO,LPRO,CPRO0,CPRO1,CPRO2,CTREF,
       1857                          *            D000,U000,T000,TREF,RHO000,
       1858                          *            IFIXFL,
       1859                          *            EPST,EPSP,
       1860                          *            EPSREV,EPSREP,
       1861                          *            ALPHAT,EPSQ,EPSREQ,NSIDR,NLIDR,
       1862                          *            IALE,NMAXA,EPSA,EPSREA,STPWR,NMODE,AOBJ,TOBJ,
       1863                          *            MRFN,XRFMIN,YRFMIN,ZRFMIN,XRFMAX,YRFMAX,ZRFMAX,
       1864                          *            IRFBOX,NLAYER,NLAYRT,
       1865                          *            NLYNG,EYNG,MRSALE,IWRTIM,IALEDB,
       1866                          *            JSPADV,IWRITE,EPSMID,JGRID,
       1867                          *            MMRF,NMRF,OMGMRF0,AMRF,ORGMRF,IDSM,
       1868                          *            NBLKX,NBLKY,NBLKZ,JWRTOS,
       1869                          *            IVOF,NSCYC,RHOF2,VISCM2,NMAXVF,EPSVF,EPSRVF,
       1870                          *            PRT,JSSMAP,NUMSSB,NOUTSS,NITRSS,CODSSB,
       1871                          *            IRFNFT,FILECD,FILECR,JNTFND,EPSOS,COSBIN,COSBFR,
       1872                          *            EPSBLK,BLKMIN,ICAVI,CGAS,CLQD,F0,
       1873                          *            IERR)
       1874                     C
       1875     1                     IF(NMRF.GT.0 .AND. JSET.GT.0) THEN
       1876     1                         WRITE(IUT0,*)  ' EXTERNAL OVERSET IS NOT AVAILABLE '
       1877     1                         WRITE(IUT0,*)  ' IN THE MULTI ROTATIONAL FRAME MODE '
       1878     1                         GOTO 9999
       1879     1                     ENDIF
       1880                     C
       1881                           IF(NFRCNT.LE.0) NFRCNT = NTIME+1
       1882     1                     IF(IERR.NE.0) THEN
       1883     1                         WRITE(IUT0,*) BLANK
       1884     1                         WRITE(IUT0,*) ERMSGC
       1885     1                         GO TO 9999
       1886     1                     ENDIF
       1887                     C
       1888     1                     IF(IVOF.GE.1.AND.IGRAV.EQ.0) THEN
       1889     1                        WRITE(IUT0,*)
       1890     1                        WRITE(IUT0,*)  ' GRAVITY MUST BE SET,'
       1891     1                        WRITE(IUT0,*)  ' WHEN USING MULTIPHASE FUNCTION. '
       1892     1                        GOTO 9999
       1893     1                     ENDIF
       1894                     C
       1895     1                     IF(IVOF.GE.1.AND.JPRESS.EQ.1) THEN
       1896     1                        WRITE(IUT0,*)
       1897     1                        WRITE(IUT0,*)  ' PRESSURE MUST BE DEFINED AT ELEMENT,'
       1898     1                        WRITE(IUT0,*)  ' WHEN USING MULTIPHASE FUNCTION. '
       1899     1                        WRITE(IUT0,*)  ' JPRESS WAS CHANGED TO 2. '
       1900     1                        JPRESS=2
       1901     1                     ENDIF
       1902                           CLOSE(IUT5)
       1903                           WRITE(IUT6,*) ' DONE!'
       1904                     C
       1905     1                     IF(NITRIT.GT.NMAXT) THEN
       1906     1                         NITRIT=NMAXT
       1907     1                         WRITE(IUT6,*) ' NITRIT IS SET TO ', NMAXT
       1908     1                     ENDIF
       1909                     C
       1910     1                     IF(NITRIP.GT.NMAXP) THEN
       1911     1                         NITRIP=NMAXP
       1912     1                         WRITE(IUT6,*) ' NITRIP IS SET TO ', NMAXP
       1913     1                     ENDIF
       1914                     C
       1915                           WRITE(IUT6,*) BLANK
       1916                           WRITE(IUT6,*) ' ** CHECKING SIZE OF MESH DATA **'
       1917                           IACT     = 1
       1918                           IACT     = 1
       1919                           IONE=1
       1920     1                     IF(JGRID.EQ.1) THEN
       1921     1                         CALL GFALL(IUT0,IUT6,IUTMS,FILEMS,
       1922     1                    *               MCOM,NCOMFL,COMFLE,
       1923     1                    *               MCOM,NCOMST,COMSET,
       1924     1                    *               IACT,IWRITE,INAME,IRESV,
       1925     1                    *               ICAST,IDATA0,IALL,ISKIP1,IERR,
       1926     1                    *               '*GRID_3D *NODE_3D !',
       1927     1                    *               NAME,IONE,NP,FRBUF,FRBUF,FRBUF,
       1928     1                    *               NAME,IONE,IONE,NE,NDUM,IRBUF,
       1929     1                    *               ICHECK)
       1930     1                     ELSE
       1931     1                         CALL GFALL(IUT0,IUT6,IUTMS,FILEMS,
       1932     1                    *               MCOM,NCOMFL,COMFLE,
       1933     1                    *               MCOM,NCOMST,COMSET,
       1934     1                    *               IACT,IWRITE,INAME,IRESV,
       1935     1                    *               ICAST,IDATA0,IALL,ISKIP1,IERR,
       1936     1                    *               '*GRID_3D%D *NODE_3D !',
       1937     1                    *               NAME,IONE,NP,FRBUF,FRBUF,FRBUF,
       1938     1                    *               NAME,IONE,IONE,NE,NDUM,IRBUF,
       1939     1                    *               ICHECK)
       1940     1                     ENDIF
       1941                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       1942                     
       1943     1                     IF(IERRA.NE.0) THEN
       1944     1                         WRITE(IUT0,*) BLANK
       1945     1                         WRITE(IUT0,*) ERMSGC
       1946     1                         GO TO 9999
       1947     1                     ENDIF
       1948                           WRITE(IUT6,*) ' DONE!'
       1949                     C
       1950                           ME=NE+1000
       1951                           MP=NP+1000
       1952                     C
       1953     1                     IF(NRFN.GE.1) THEN
       1954     1                         IDUM=8**NRFN
       1955     1                         ME=ME*IDUM
       1956     1                         MP=MP*IDUM
       1957     1                     ENDIF
       1958                     C
       1959                           IF(MER .NE.-1) ME =MER
       1960                           IF(MPR .NE.-1) MP =MPR
       1961                           IF(MEPR.NE.-1) MEP=MEPR
       1962                           IF(MPPR.NE.-1) MPP=MPPR
       1963                     C
       1964                           WRITE(IUT6,*) BLANK
       1965                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR FIELD'
       1966                     C
       1967     1                     IF(ME.GT.MP) THEN
       1968     1                         MWRK=ME
       1969     1                     ELSE
       1970     1                         MWRK=MP
       1971     1                     ENDIF
       1972                     C
       1973                     C
       1974                           MB=MP/2
       1975                           MBPDOM=MP/5
       1976                           MDOM=32
       1977                           IF(MBR  .NE.-1) MB    =MBR
       1978                           IF(MBPR .NE.-1) MBPDOM=MBPR
       1979                           IF(MDOMR.NE.-1) MDOM  =MDOMR
       1980                     C
       1981                           MPWALL=MB
       1982                           MPINLT=MB
       1983                           MPFREE=MB
       1984                           MPINT =MB
       1985                           MPBODY=MB
       1986                           MBESET=MB
       1987                           MPHEAT=MB
       1988                           MPHTRS=MB
       1989                           MPTGT =MB
       1990                     C
       1991                           SIZEAL = 0.E0
       1992                     C
       1993     1                     IF(MP.GT.2000000) THEN
       1994     1                         WRITE(IUT6,*) 'ERROR: STOPPED                '
       1995     1                         WRITE(IUT6,*) 'MP MUST BE LESS THAN 2,000,000'
       1996     1                         WRITE(IUT6,*) 'CAHNGE MDATA IN DD_MPI.F      '
       1997     1                         WRITE(IUT6,*) 'TO AOVID THIS LIMITATION      '
       1998     1                         GOTO 9999
       1999     1                     ENDIF
       2000                     C
       2001                           WRITE(IUT6,*) BLANK
       2002                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR FIELD'
       2003                           SIZE   = (47*FLOAT(MP)+(6+2*MRCM)*FLOAT(ME))*WORD
       2004                           SIZEAL = SIZEAL+SIZE
       2005                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " FIELD     :",SIZE
       2006                           ALLOCATE( X(MP),    STAT=LERR(01))
       2007                           ALLOCATE( Y(MP),    STAT=LERR(02))
       2008                           ALLOCATE( Z(MP),    STAT=LERR(03))
       2009                           ALLOCATE( U(MP),    STAT=LERR(04))
       2010                           ALLOCATE( V(MP),    STAT=LERR(05))
       2011                           ALLOCATE( W(MP),    STAT=LERR(06))
       2012                           ALLOCATE(PN(MP),    STAT=LERR(07))
       2013                           ALLOCATE(DP(MP),    STAT=LERR(08))
       2014                           ALLOCATE(DPE(ME),   STAT=LERR(09))
       2015                           ALLOCATE( T(MP),    STAT=LERR(10))
       2016                           ALLOCATE( P(ME),    STAT=LERR(11))
       2017                           ALLOCATE(UA(MP),    STAT=LERR(12))
       2018                           ALLOCATE(VA(MP),    STAT=LERR(13))
       2019                           ALLOCATE(WA(MP),    STAT=LERR(14))
       2020                           ALLOCATE(PNA(MP),   STAT=LERR(15))
       2021                           ALLOCATE(PA(ME),    STAT=LERR(16))
       2022                           ALLOCATE(FLA(MP),   STAT=LERR(17))
       2023                           ALLOCATE(UR(MP),    STAT=LERR(18))
       2024                           ALLOCATE(VR(MP),    STAT=LERR(19))
       2025                           ALLOCATE(WR(MP),    STAT=LERR(20))
       2026                           ALLOCATE(PNR(MP),   STAT=LERR(21))
       2027                           ALLOCATE(PR(ME),    STAT=LERR(22))
       2028                           ALLOCATE(FLR(MP),   STAT=LERR(23))
       2029                           ALLOCATE(US(MP),    STAT=LERR(24))
       2030                           ALLOCATE(VS(MP),    STAT=LERR(25))
       2031                           ALLOCATE(WS(MP),    STAT=LERR(26))
       2032                           ALLOCATE(VISC(ME),  STAT=LERR(27))
       2033                           ALLOCATE(VISCA(ME), STAT=LERR(28))
       2034                           ALLOCATE(COND3D(ME),STAT=LERR(29))
       2035                           ALLOCATE(RHOCP(ME), STAT=LERR(30))
       2036                           ALLOCATE(RHO3D(ME), STAT=LERR(31))
       2037                           ALLOCATE(CS(ME),    STAT=LERR(32))
       2038                           ALLOCATE(AML(MP),   STAT=LERR(33))
       2039                           ALLOCATE(AMM(MP),   STAT=LERR(34))
       2040                           ALLOCATE(UI(MP,3),  STAT=LERR(35))
       2041                           ALLOCATE(UIJ(MP,6), STAT=LERR(36))
       2042                           ALLOCATE(S(MP),     STAT=LERR(37))
       2043                           ALLOCATE(SIJN(MP,6),STAT=LERR(38))
       2044                           ALLOCATE(SIJ (MP,6),STAT=LERR(39))
       2045                           ALLOCATE(SSIJ(MP,6),STAT=LERR(40))
       2046                           ALLOCATE(NEAR(ME),  STAT=LERR(41))
       2047                           ALLOCATE(DSNEAR(ME),STAT=LERR(42))
       2048                           ALLOCATE( PRCM(ME,MRCM),STAT=LERR(43))
       2049                           ALLOCATE(APRCM(ME,MRCM),STAT=LERR(44))
       2050                           ALLOCATE(UMESH(MP), STAT=LERR(45))
       2051                           ALLOCATE(VMESH(MP), STAT=LERR(46))
       2052                           ALLOCATE(WMESH(MP), STAT=LERR(47))
       2053                           ALLOCATE(UMESH_P(MP),STAT=LERR(48))
       2054                           ALLOCATE(VMESH_P(MP),STAT=LERR(49))
       2055                           ALLOCATE(WMESH_P(MP),STAT=LERR(50))
       2056                           ALLOCATE(EJ(ME),    STAT=LERR(51))
       2057                           ALLOCATE(CBTD3D(ME),STAT=LERR(52))
       2058                           ALLOCATE(XD(MP),    STAT=LERR(53))
       2059                           ALLOCATE(YD(MP),    STAT=LERR(54))
       2060                           ALLOCATE(ZD(MP),    STAT=LERR(55))
       2061                           ALLOCATE(FE(ME),    STAT=LERR(56))
       2062                           ALLOCATE(FEA(ME),   STAT=LERR(57))
       2063                           ALLOCATE(FER(ME),   STAT=LERR(58))
       2064                           ALLOCATE(FL   (MP), STAT=LERR(59))
       2065                           ALLOCATE(FESRC(ME), STAT=LERR(60))
       2066                           ALLOCATE(FLE  (ME), STAT=LERR(61))
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2286
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FL
                              <<< Loop-information  End >>>
       2067        pp   4v            FL   =1.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2286
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FESRC
                              <<< Loop-information  End >>>
       2068        pp   4v            FESRC=0.0E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2286
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FLE
                              <<< Loop-information  End >>>
       2069        pp   4v            FLE  =1.0E0
       2070                           CALL ERRCHK(IUT6,IPART,60,LERR,IERR)
       2071     1                     IF(IERR.NE.0) THEN
       2072     1                         WRITE(IUT0,*) BLANK
       2073     1                         WRITE(IUT0,*) ERMSGC
       2074     1                         WRITE(IUT0,*) EREXP1
       2075     1                         GO TO 9999
       2076     1                     ENDIF
       2077                           WRITE(IUT6,*) 'DONE'
       2078                     C
       2079                           WRITE(IUT6,*) BLANK
       2080                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR ELEMENT SHAPE '
       2081                           SIZE   = (25*FLOAT(MP)+72*FLOAT(ME))*WORD
       2082                           SIZEAL = SIZEAL+SIZE
       2083                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " ELEMENT   :",SIZE
       2084                           ALLOCATE(FILTER(      ME),STAT=LERR(01))
       2085                           ALLOCATE(SNI   (N1,   ME),STAT=LERR(02))
       2086                           ALLOCATE(DNXI  (N1,   ME),STAT=LERR(03))
       2087                           ALLOCATE(CM    (      MP),STAT=LERR(04))
       2088                           ALLOCATE(DNYI  (N1,   ME),STAT=LERR(05))
       2089                           ALLOCATE(DELTA (      ME),STAT=LERR(06))
       2090                           ALLOCATE(DNZI  (N1,   ME),STAT=LERR(07))
       2091                           ALLOCATE(SN    (N1,   ME),STAT=LERR(08))
       2092                           ALLOCATE(DNXYZ (3,N1, ME),STAT=LERR(09))
       2093                           ALLOCATE(SNP   (  MEP,MP),STAT=LERR(10))
       2094                           ALLOCATE(DNXYZP(MEP,3,MP),STAT=LERR(11))
       2095                           ALLOCATE(DNXYZT(8,3,  ME),STAT=LERR(12))
       2096                           CALL ERRCHK(IUT6,IPART,12,LERR,IERR)
       2097     1                     IF(IERR.NE.0) THEN
       2098     1                         WRITE(IUT0,*) BLANK
       2099     1                         WRITE(IUT0,*) ERMSGC
       2100     1                         WRITE(IUT0,*) EREXP1
       2101     1                         GO TO 9999
       2102     1                     ENDIF
       2103                           WRITE(IUT6,*) 'DONE'
       2104                     C
       2105                           WRITE(IUT6,*) BLANK
       2106                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR CONNECTIVITY'
       2107                           SIZE   = ((MEP*2+MPP+5)*FLOAT(MP)+85*FLOAT(ME))*WORD
       2108                           SIZEAL = SIZEAL+SIZE
       2109                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " CONNECT   :",SIZE
       2110                           ALLOCATE(NODE(N2,ME),   STAT=LERR(01))
       2111                           ALLOCATE(IEATTR(ME),    STAT=LERR(02))
       2112                           ALLOCATE(IPATTR(MP),    STAT=LERR(03))
       2113                           ALLOCATE(IEMEDA(ME),    STAT=LERR(04))
       2114                           ALLOCATE(IEPROP(ME),    STAT=LERR(05))
       2115                           ALLOCATE(LEFRM (ME),    STAT=LERR(06))
       2116                           ALLOCATE(IENP(MEP,MP),  STAT=LERR(07))
       2117                           ALLOCATE(JENP(MEP,MP),  STAT=LERR(08))
       2118                           ALLOCATE(NEP(MP),       STAT=LERR(09))
       2119                           ALLOCATE(NEE(MDUM),     STAT=LERR(10))
       2120                           ALLOCATE(IPNP(MPP,MP),  STAT=LERR(11))
       2121                           ALLOCATE(NPP(MP),       STAT=LERR(12))
       2122                           ALLOCATE(NPP2(MP),      STAT=LERR(13))
       2123                           ALLOCATE(NUMIP(MP),     STAT=LERR(14))
       2124                           ALLOCATE(LTAB(N1,N2,ME),STAT=LERR(15))
       2125                           ALLOCATE(WEIGHP(MP),    STAT=LERR(16))
       2126                           CALL ERRCHK(IUT6,IPART,16,LERR,IERR)
       2127     1                     IF(IERR.NE.0) THEN
       2128     1                         WRITE(IUT0,*) BLANK
       2129     1                         WRITE(IUT0,*) ERMSGC
       2130     1                         WRITE(IUT0,*) EREXP1
       2131     1                         GO TO 9999
       2132     1                     ENDIF
       2133                           WRITE(IUT6,*) 'DONE'
       2134                     C
       2135                           WRITE(IUT6,*) BLANK
       2136                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR B.C.'
       2137                           SIZE   = (55*FLOAT(MB)+0*FLOAT(ME))*WORD
       2138                           SIZEAL = SIZEAL+SIZE
       2139                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " BOUNDARY  :",SIZE
       2140                           ALLOCATE(LPINLT(MB),        STAT=LERR(001))
       2141                           ALLOCATE(LEINLT(2,MB),      STAT=LERR(002))
       2142                           ALLOCATE(XNINLT(MB)        ,STAT=LERR(003))
       2143                           ALLOCATE(YNINLT(MB)        ,STAT=LERR(004))
       2144                           ALLOCATE(ZNINLT(MB)        ,STAT=LERR(005))
       2145                           ALLOCATE(LPWALL(MB),        STAT=LERR(006))
       2146                           ALLOCATE(LPSYMT(MB),        STAT=LERR(007))
       2147                           ALLOCATE(LPFREE(MB),        STAT=LERR(008))
       2148                           ALLOCATE(LEFREE(2,MB),      STAT=LERR(009))
       2149                           ALLOCATE(LPCCL1(MB),        STAT=LERR(010))
       2150                           ALLOCATE(LPCCL2(MB),        STAT=LERR(011))
       2151                           ALLOCATE(LPBODY(MB),        STAT=LERR(012))
       2152                           ALLOCATE(LPINT1(MB),        STAT=LERR(013))
       2153                           ALLOCATE(LPINT2(MB),        STAT=LERR(014))
       2154                           ALLOCATE(LPINT3(MB),        STAT=LERR(015))
       2155                           ALLOCATE(LEBODY(2,MB),      STAT=LERR(016))
       2156                           ALLOCATE(LEWALL(2,MPWALL),  STAT=LERR(017))
       2157                           ALLOCATE(NODEPS(N2D,MB),    STAT=LERR(018))
       2158                           ALLOCATE(LDOM(MDOM),        STAT=LERR(019))
       2159                           ALLOCATE(NBPDOM(MDOM),      STAT=LERR(020))
       2160                           ALLOCATE(IPSLF(MBPDOM,MDOM),STAT=LERR(021))
       2161                           ALLOCATE(IPSND(MBPDOM,MDOM),STAT=LERR(022))
       2162                           ALLOCATE(UINLT0(MB),        STAT=LERR(023))
       2163                           ALLOCATE(VINLT0(MB),        STAT=LERR(024))
       2164                           ALLOCATE(WINLT0(MB),        STAT=LERR(025))
       2165                           ALLOCATE(UINLT (MB),        STAT=LERR(026))
       2166                           ALLOCATE(VINLT (MB),        STAT=LERR(027))
       2167                           ALLOCATE(WINLT (MB),        STAT=LERR(028))
       2168                           ALLOCATE(UWALL (MB),        STAT=LERR(029))
       2169                           ALLOCATE(VWALL (MB),        STAT=LERR(030))
       2170                           ALLOCATE(WWALL (MB),        STAT=LERR(031))
       2171                           ALLOCATE(XPSYMT(MB),        STAT=LERR(032))
       2172                           ALLOCATE(YPSYMT(MB)        ,STAT=LERR(033))
       2173                           ALLOCATE(ZPSYMT(MB)        ,STAT=LERR(034))
       2174                           ALLOCATE(XPFREE(MB)        ,STAT=LERR(035))
       2175                           ALLOCATE(YPFREE(MB)        ,STAT=LERR(036))
       2176                           ALLOCATE(ZPFREE(MB)        ,STAT=LERR(037))
       2177                           ALLOCATE(XNFREE(MB)        ,STAT=LERR(038))
       2178                           ALLOCATE(YNFREE(MB)        ,STAT=LERR(039))
       2179                           ALLOCATE(ZNFREE(MB)        ,STAT=LERR(040))
       2180                           ALLOCATE(XPBODY(MB)        ,STAT=LERR(041))
       2181                           ALLOCATE(YPBODY(MB)        ,STAT=LERR(042))
       2182                           ALLOCATE(ZPBODY(MB)        ,STAT=LERR(043))
       2183                           ALLOCATE(AEBODY(MB)        ,STAT=LERR(044))
       2184                           ALLOCATE(XNBODY(MB)        ,STAT=LERR(045))
       2185                           ALLOCATE(YNBODY(MB)        ,STAT=LERR(046))
       2186                           ALLOCATE(ZNBODY(MB)        ,STAT=LERR(047))
       2187                           ALLOCATE(DXBODY(N1,MB)     ,STAT=LERR(048))
       2188                           ALLOCATE(DYBODY(N1,MB)     ,STAT=LERR(049))
       2189                           ALLOCATE(DZBODY(N1,MB)     ,STAT=LERR(050))
       2190                           ALLOCATE(SBODY(N1,MB)      ,STAT=LERR(051))
       2191                           ALLOCATE(XPS(MB)           ,STAT=LERR(052))
       2192                           ALLOCATE(YPS(MB)           ,STAT=LERR(053))
       2193                           ALLOCATE(ZPS(MB)           ,STAT=LERR(054))
       2194                           ALLOCATE(FXVIS(MB)         ,STAT=LERR(055))
       2195                           ALLOCATE(FYVIS(MB)         ,STAT=LERR(055))
       2196                           ALLOCATE(FZVIS(MB)         ,STAT=LERR(056))
       2197                           ALLOCATE(XNWALL(MPWALL)    ,STAT=LERR(057))
       2198                           ALLOCATE(YNWALL(MPWALL)    ,STAT=LERR(058))
       2199                           ALLOCATE(ZNWALL(MPWALL)    ,STAT=LERR(059))
       2200                           ALLOCATE(YP(MPWALL)        ,STAT=LERR(060))
       2201                           ALLOCATE(UTAUN(MPWALL)     ,STAT=LERR(061))
       2202                           ALLOCATE(TAUXN(MPWALL)     ,STAT=LERR(062))
       2203                           ALLOCATE(TAUYN(MPWALL)     ,STAT=LERR(063))
       2204                           ALLOCATE(TAUZN(MPWALL)     ,STAT=LERR(064))
       2205                           ALLOCATE(UTAU (MPWALL)     ,STAT=LERR(065))
       2206                           ALLOCATE(TAUX (MPWALL)     ,STAT=LERR(066))
       2207                           ALLOCATE(TAUY (MPWALL)     ,STAT=LERR(067))
       2208                           ALLOCATE(TAUZ (MPWALL)     ,STAT=LERR(068))
       2209                           ALLOCATE(LPSET1(MB)        ,STAT=LERR(069))
       2210                           ALLOCATE(LPSET2(MB)        ,STAT=LERR(070))
       2211                           ALLOCATE(LPSET3(MB)        ,STAT=LERR(071))
       2212                           ALLOCATE(LPSET4(MB)        ,STAT=LERR(072))
       2213                           ALLOCATE(LPSND(MDOM)       ,STAT=LERR(073))
       2214                           ALLOCATE(NPTSND(MDOM)      ,STAT=LERR(074))
       2215                           ALLOCATE(LPRCV(MDOM)       ,STAT=LERR(075))
       2216                           ALLOCATE(NPTRCV(MDOM)      ,STAT=LERR(076))
       2217                           ALLOCATE(IPSET(MBPDOM,MDOM),STAT=LERR(077))
       2218                           ALLOCATE(IPSRC(MBPDOM,MDOM),STAT=LERR(078))
       2219                           ALLOCATE(LESET1(MB)        ,STAT=LERR(079))
       2220                           ALLOCATE(LESET2(MB)        ,STAT=LERR(080))
       2221                           ALLOCATE(LESET3(MB)        ,STAT=LERR(081))
       2222                           ALLOCATE(LESET4(MB)        ,STAT=LERR(082))
       2223                           ALLOCATE(LESND(MDOM)       ,STAT=LERR(083))
       2224                           ALLOCATE(NETSND(MDOM)      ,STAT=LERR(084))
       2225                           ALLOCATE(LERCV(MDOM)       ,STAT=LERR(085))
       2226                           ALLOCATE(NETRCV(MDOM)      ,STAT=LERR(086))
       2227                           ALLOCATE(IESET(MBPDOM,MDOM),STAT=LERR(087))
       2228                           ALLOCATE(IESRC(MBPDOM,MDOM),STAT=LERR(088))
       2229                           ALLOCATE(COVER1(MB)        ,STAT=LERR(089))
       2230                           ALLOCATE(COVER2(MB)        ,STAT=LERR(090))
       2231                           ALLOCATE(COVER3(MB)        ,STAT=LERR(091))
       2232                           ALLOCATE(EOVER1(MB)        ,STAT=LERR(092))
       2233                           ALLOCATE(EOVER2(MB)        ,STAT=LERR(093))
       2234                           ALLOCATE(EOVER3(MB)        ,STAT=LERR(094))
       2235                     C
       2236                           ALLOCATE(LBESET(2,MBESET)  ,STAT=LERR(095))
       2237                           ALLOCATE(SNESET(N1,MBESET) ,STAT=LERR(096))
       2238                           ALLOCATE(OSBCOE(  MP    )  ,STAT=LERR(097))
       2239                           ALLOCATE( AESET(  MBESET)  ,STAT=LERR(098))
       2240                           ALLOCATE(XNESET(  MBESET)  ,STAT=LERR(099))
       2241                           ALLOCATE(YNESET(  MBESET)  ,STAT=LERR(100))
       2242                           ALLOCATE(ZNESET(  MBESET)  ,STAT=LERR(101))
       2243                     C
       2244                           ALLOCATE(LPTEMP(MB    )    ,STAT=LERR(102))
       2245                           ALLOCATE(  TEMP(MB    )    ,STAT=LERR(103))
       2246                           ALLOCATE(LEHSRC(MB    )    ,STAT=LERR(104))
       2247                           ALLOCATE(  HSRC(MB    )    ,STAT=LERR(105))
       2248                           ALLOCATE(LPHFIX(MB    )    ,STAT=LERR(106))
       2249                           ALLOCATE(  HFIX(MB    )    ,STAT=LERR(107))
       2250                           ALLOCATE(LPHTRS(MB    )    ,STAT=LERR(108))
       2251                           ALLOCATE(  HTRS(MB    )    ,STAT=LERR(109))
       2252                           ALLOCATE(LPHEAT(MB    )    ,STAT=LERR(110))
       2253                           ALLOCATE(  HEAT(MB    )    ,STAT=LERR(111))
       2254                           ALLOCATE( HEATE(MB    )    ,STAT=LERR(112))
       2255                           ALLOCATE(LEHEAT(2,MPHEAT)  ,STAT=LERR(113))
       2256                           ALLOCATE( SHEAT(N1,MB )    ,STAT=LERR(114))
       2257                           ALLOCATE(LPSLD1(MP    )    ,STAT=LERR(115))
       2258                           ALLOCATE(LPSLD2(MP    )    ,STAT=LERR(116))
       2259                           ALLOCATE(LEFFO1(MB    )    ,STAT=LERR(117))
       2260                           ALLOCATE(LEFFO2(MB    )    ,STAT=LERR(118))
       2261                           ALLOCATE(LPFFO1(MB    )    ,STAT=LERR(119))
       2262                           ALLOCATE(LPFFO2(MB    )    ,STAT=LERR(120))
       2263                           ALLOCATE(FXFFO (ME    )    ,STAT=LERR(121))
       2264                           ALLOCATE(FYFFO (ME    )    ,STAT=LERR(122))
       2265                           ALLOCATE(FZFFO (ME    )    ,STAT=LERR(123))
       2266                           ALLOCATE(AEINLT(ME    )    ,STAT=LERR(124))
       2267                           ALLOCATE(AEFREE(ME    )    ,STAT=LERR(125))
       2268                           ALLOCATE(LPBTOA(MP)        ,STAT=LERR(126))
       2269                           ALLOCATE(LPATOB(MP)        ,STAT=LERR(127))
       2270                           ALLOCATE(LEBTOA(ME)        ,STAT=LERR(128))
       2271                           ALLOCATE(LEATOB(ME)        ,STAT=LERR(129))
       2272     1                     IF (IVOF.EQ.1) THEN
       2273     1                     ALLOCATE(LPFLD2(MP)        ,STAT=LERR(130))
       2274     1                     ALLOCATE(LEFLD2(ME)        ,STAT=LERR(131))
       2275     1                     ELSE
       2276     1                     ALLOCATE(LPFLD2(1)         ,STAT=LERR(130))
       2277     1                     ALLOCATE(LEFLD2(1)         ,STAT=LERR(131))
       2278     1                     ENDIF
       2279                           ALLOCATE(LPTGT(MB)         ,STAT=LERR(132))
       2280                           CALL ERRCHK(IUT6,IPART,132,LERR,IERR)
       2281     1                     IF(IERR.NE.0) THEN
       2282     1                         WRITE(IUT0,*) BLANK
       2283     1                         WRITE(IUT0,*) ERMSGC
       2284     1                         WRITE(IUT0,*) EREXP1
       2285     1                         GO TO 9999
       2286     1                     ENDIF
       2287                           WRITE(IUT6,*) 'DONE'
       2288                     C
       2289                           WRITE(IUT6,*) BLANK
       2290                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR WORK-1'
       2291                           SIZE   = (3*FLOAT(MP)+144*FLOAT(ME))*WORD
       2292                           SIZEAL = SIZEAL+SIZE
       2293                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " WORK-1    :",SIZE
       2294                           ALLOCATE(APRS(N1,N2,ME),STAT=LERR(01))
       2295                           ALLOCATE(AWRK(N1,N2,ME),STAT=LERR(02))
       2296                           ALLOCATE(APRS0(MP),     STAT=LERR(03))
       2297                           ALLOCATE(ATEST0(MP),    STAT=LERR(04))
       2298                           ALLOCATE(AAVER0(MP),    STAT=LERR(05))
       2299                           CALL ERRCHK(IUT6,IPART,05,LERR,IERR)
       2300     1                     IF(IERR.NE.0) THEN
       2301     1                         WRITE(IUT0,*) BLANK
       2302     1                         WRITE(IUT0,*) ERMSGC
       2303     1                         WRITE(IUT0,*) EREXP1
       2304     1                         GO TO 9999
       2305     1                     ENDIF
       2306                           WRITE(IUT6,*) 'DONE'
       2307                     C
       2308                           WRITE(IUT6,*) BLANK
       2309                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR W0RK-2'
       2310                           SIZE   = (3*FLOAT(MDOM)+8*FLOAT(MBPDOM*MDOM))*WORD
       2311                           SIZEAL = SIZEAL+SIZE
       2312                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " WORK-2    :",SIZE
       2313                           ALLOCATE(NPB0(MDOM),STAT=LERR(01))
       2314                           ALLOCATE(NPB1(MDOM),STAT=LERR(02))
       2315                           ALLOCATE(NPB2(MDOM),STAT=LERR(03))
       2316                           ALLOCATE(LPB1(MBPDOM,MDOM),STAT=LERR(04))
       2317                           ALLOCATE(LPB2(MBPDOM,MDOM),STAT=LERR(05))
       2318                           ALLOCATE(XPB1(MBPDOM,MDOM),STAT=LERR(06))
       2319                           ALLOCATE(YPB1(MBPDOM,MDOM),STAT=LERR(07))
       2320                           ALLOCATE(ZPB1(MBPDOM,MDOM),STAT=LERR(08))
       2321                           ALLOCATE(XPB2(MBPDOM,MDOM),STAT=LERR(09))
       2322                           ALLOCATE(YPB2(MBPDOM,MDOM),STAT=LERR(10))
       2323                           ALLOCATE(ZPB2(MBPDOM,MDOM),STAT=LERR(11))
       2324                           CALL ERRCHK(IUT6,IPART,11,LERR,IERR)
       2325     1                     IF(IERR.NE.0) THEN
       2326     1                         WRITE(IUT0,*) BLANK
       2327     1                         WRITE(IUT0,*) ERMSGC
       2328     1                         WRITE(IUT0,*) EREXP1
       2329     1                         GO TO 9999
       2330     1                     ENDIF
       2331                           WRITE(IUT6,*) 'DONE'
       2332                     C
       2333                           WRITE(IUT6,*) BLANK
       2334                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR W0RK-3'
       2335                           SIZE   = (3*FLOAT(MP)+29*FLOAT(MWRK)+34*FLOAT(ME))*WORD
       2336                           SIZEAL = SIZEAL+SIZE
       2337                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " WORK-3    :",SIZE
       2338                           ALLOCATE(NODWK1(N2,ME),STAT=LERR(01))
       2339                           ALLOCATE(NODWK2(N2,ME),STAT=LERR(02))
       2340                           ALLOCATE(LEWRK(2,MWRK),STAT=LERR(03))
       2341                           ALLOCATE(LWRK01(MWRK), STAT=LERR(04))
       2342                           ALLOCATE(LWRK02(MWRK), STAT=LERR(05))
       2343                           ALLOCATE(LWRK03(MWRK), STAT=LERR(06))
       2344                           ALLOCATE(LWRK04(MWRK), STAT=LERR(07))
       2345                           ALLOCATE(LWRK05(MWRK), STAT=LERR(08))
       2346                           ALLOCATE(LWRK06(MWRK), STAT=LERR(09))
       2347                           ALLOCATE(RX(N1,ME),    STAT=LERR(10))
       2348                           ALLOCATE(RY(N1,ME),    STAT=LERR(11))
       2349                           ALLOCATE(RZ(N1,ME),    STAT=LERR(11))
       2350                           ALLOCATE(WRKN(MWRK*9), STAT=LERR(12))
       2351                           ALLOCATE(WRK01(MWRK),  STAT=LERR(13))
       2352                           ALLOCATE(WRK02(MWRK),  STAT=LERR(14))
       2353                           ALLOCATE(WRK03(MWRK),  STAT=LERR(15))
       2354                           ALLOCATE(WRK04(MWRK),  STAT=LERR(16))
       2355                           ALLOCATE(WRK05(MWRK),  STAT=LERR(17))
       2356                           ALLOCATE(WRK06(MWRK),  STAT=LERR(18))
       2357                           ALLOCATE(WRK07(MWRK),  STAT=LERR(19))
       2358                           ALLOCATE(WRK08(MWRK),  STAT=LERR(20))
       2359                           ALLOCATE(WRK09(MWRK),  STAT=LERR(21))
       2360                           ALLOCATE(WRK10(MWRK),  STAT=LERR(22))
       2361                           ALLOCATE(WRK11(MWRK),  STAT=LERR(23))
       2362                           ALLOCATE(WRK12(MWRK),  STAT=LERR(24))
       2363                           ALLOCATE(WRK13(MWRK),  STAT=LERR(25))
       2364                           ALLOCATE(WRK14(MWRK),  STAT=LERR(26))
       2365                           ALLOCATE(WRK15(MWRK),  STAT=LERR(26))
       2366                           ALLOCATE(WRK3(3,MP),   STAT=LERR(27))
       2367                           ALLOCATE(DGET(9,ME),   STAT=LERR(28))
       2368                           ALLOCATE(NODWK3(N2,ME),STAT=LERR(29))
       2369                           ALLOCATE(DWRK01(N1  ,MGAUSS), STAT=LERR(30))
       2370                           ALLOCATE(DWRK02(N1         ), STAT=LERR(31))
       2371                           ALLOCATE(DWRK03(3,N1,MGAUSS), STAT=LERR(32))
       2372                           ALLOCATE(DWRK04(3,N1       ), STAT=LERR(33))
       2373                           ALLOCATE(DWRK05(     MGAUSS), STAT=LERR(34))
       2374                           ALLOCATE(DWRK3(MP*3),  STAT=LERR(35))
       2375                           CALL ERRCHK(IUT6,IPART,35,LERR,IERR)
       2376     1                     IF(IERR.NE.0) THEN
       2377     1                         WRITE(IUT0,*) BLANK
       2378     1                         WRITE(IUT0,*) ERMSGC
       2379     1                         WRITE(IUT0,*) EREXP1
       2380     1                         GO TO 9999
       2381     1                     ENDIF
       2382                           WRITE(IUT6,*) 'DONE'
       2383                     C
       2384     1                     IF (IALE.GE.1) THEN
       2385     1                        WRITE(IUT6,*) BLANK
       2386     1                        WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR ALE'
       2387     1                        ALLOCATE(AWRK01(MWRK*9),STAT=LERR(01))
       2388     1                        ALLOCATE(AWRK02(MWRK*9),STAT=LERR(02))
       2389     1                        ALLOCATE(AWRK03(MWRK*9),STAT=LERR(03))
       2390     1                        ALLOCATE(AWRK04(MWRK*9),STAT=LERR(04))
       2391     1                        ALLOCATE(AWRK05(MWRK*9),STAT=LERR(05))
       2392     1                        ALLOCATE(AWRK06(MWRK*9),STAT=LERR(06))
       2393     1                        ALLOCATE(AWRK07(MWRK*9),STAT=LERR(07))
       2394     1                        ALLOCATE(AWRK08(MWRK*9),STAT=LERR(08))
       2395     1                        ALLOCATE(AWRK09(MWRK*9),STAT=LERR(09))
       2396     1                        ALLOCATE(AWRK10(MWRK*9),STAT=LERR(10))
       2397     1                        ALLOCATE(UMVB (MB)  ,STAT=LERR(11))
       2398     1                        ALLOCATE(VMVB (MB)  ,STAT=LERR(12))
       2399     1                        ALLOCATE(WMVB (MB)  ,STAT=LERR(13))
       2400     1                        ALLOCATE(LPMVB(3,MB),STAT=LERR(14))
       2401     1                        CALL ERRCHK(IUT6,IPART,14,LERR,IERR)
       2402     2                        IF(IERR.NE.0) THEN
       2403     2                           WRITE(IUT0,*) BLANK
       2404     2                           WRITE(IUT0,*) ERMSGC
       2405     2                           WRITE(IUT0,*) EREXP1
       2406     2                           GO TO 9999
       2407     2                        ENDIF
       2408     1                        WRITE(IUT6,*) 'DONE'
       2409     1                     ENDIF
       2410                     C
       2411                           WRITE(IUT6,*) BLANK
       2412                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR SIMPLE'
       2413                           SIZE   = (4*FLOAT(MP)+4*FLOAT(ME))*WORD
       2414                           SIZEAL = SIZEAL+SIZE
       2415                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " SIMPLE    :",SIZE
       2416                           ALLOCATE(DT3D(ME),     STAT=LERR(01))
       2417                           ALLOCATE(UPREV(MP),    STAT=LERR(03))
       2418                           ALLOCATE(VPREV(MP),    STAT=LERR(04))
       2419                           ALLOCATE(WPREV(MP),    STAT=LERR(05))
       2420                           ALLOCATE(PNPREV(MP),   STAT=LERR(06))
       2421                           ALLOCATE(UE(ME),       STAT=LERR(07))
       2422                           ALLOCATE(VE(ME),       STAT=LERR(08))
       2423                           ALLOCATE(WE(ME),       STAT=LERR(09))
       2424                           ALLOCATE(ADIAG(MP),    STAT=LERR(10))
       2425                           CALL ERRCHK(IUT6,IPART,10,LERR,IERR)
       2426     1                     IF(IERR.NE.0) THEN
       2427     1                         WRITE(IUT0,*) BLANK
       2428     1                         WRITE(IUT0,*) ERMSGC
       2429     1                         WRITE(IUT0,*) EREXP1
       2430     1                         GO TO 9999
       2431     1                     ENDIF
       2432                           WRITE(IUT6,*) 'DONE'
       2433                     C
       2434                     CCTT
       2435                     CCTT ALLOCATE VARIABLES FOR RANS CALCULATIONS
       2436                     C
       2437                           MPWLAD = 5*MB
       2438                           WRITE(IUT6,*) BLANK
       2439                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR RANS CALCULATIONS'
       2440                           SIZE   = (24*FLOAT(MB) + 9*FLOAT(MP) + 10*FLOAT(ME))*WORD
       2441                           SIZEAL = SIZEAL+SIZE
       2442                           ALLOCATE(LPWLAD(MPWLAD),    STAT=LERR(01))
       2443                           ALLOCATE(LPWLAE(7,MPWLAD),  STAT=LERR(02))
       2444                           ALLOCATE(DPWLAD(MPWLAD),    STAT=LERR(03))
       2445                           ALLOCATE(LEWLAD(MPWLAD),    STAT=LERR(04))
       2446                           ALLOCATE(TA(MP),            STAT=LERR(05))
       2447                           ALLOCATE(TR(MP),            STAT=LERR(06))
       2448                           CALL ERRCHK(IUT6,IPART,6,LERR,IERR)
       2449     1                     IF(IERR.NE.0) THEN
       2450     1                         WRITE(IUT0,*) BLANK
       2451     1                         WRITE(IUT0,*) ERMSGC
       2452     1                         WRITE(IUT0,*) EREXP1
       2453     1                         GO TO 9999
       2454     1                     ENDIF
       2455                           WRITE(IUT6,*) 'DONE'
       2456                     C
       2457                     C     /// DUMMY VALUES FOR INITIAL AND INLET VALUES OF K AND EPSILON
       2458                     CCTT END
       2459                     C
       2460                     C
       2461                     C
       2462                     C            <<<<< READ MESH DATA >>>>>
       2463                     C
       2464                     C
       2465                     
       2466                           WRITE(IUT6,*) BLANK
       2467                           WRITE(IUT6,*) ' ** READING MESH DATA **'
       2468                           IACT     = 1
       2469     1                     IF(JGRID.EQ.1) THEN
       2470     1                         CALL GFALL(IUT0,IUT6,IUTMS,FILEMS,
       2471     1                    *               MCOM,NCOMFL,COMFLE,
       2472     1                    *               MCOM,NCOMST,COMSET,
       2473     1                    *               IACT,IWRITE,INAME,IRESV,
       2474     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       2475     1                    *               '*GRID_3D *NODE_3D *ELM_ATR
       2476     1                    *                *MOV1_3D *MOV0_3D !',
       2477     1                    *               NAME,MP,NP,X,Y,Z,
       2478     1                    *               NAME,ME,N2,NE,NDUM,NODWK1,
       2479     1                    *               NAME,ME,NE,LEFRM,
       2480     1                    *               NAME,MP,NP,WRK01,WRK02,WRK03,
       2481     1                    *               NAME,MP,NP,WRK04,WRK05,WRK06,
       2482     1                    *               ICHECK)
       2483     1               CCTT  //NORMALIZATION
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 320
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.75, ITR: 72, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      Z, Y, X, YD, XD, ZD
                              <<< Loop-information  End >>>
       2484     2  pp    v                DO 920 IP=1, NP
       2485     2   p    v                    X(IP)=X(IP)/D000
       2486     2   p    v                    Y(IP)=Y(IP)/D000
       2487     2   p    v                    Z(IP)=Z(IP)/D000
       2488     2   p    v                    XD(IP)=DBLE(X(IP))
       2489     2   p    v                    YD(IP)=DBLE(Y(IP))
       2490     2   p    v                    ZD(IP)=DBLE(Z(IP))
       2491     2   p    v        920     CONTINUE
       2492     1                     ELSE
       2493     1                         CALL GFALL(IUT0,IUT6,IUTMS,FILEMS,
       2494     1                    *               MCOM,NCOMFL,COMFLE,
       2495     1                    *               MCOM,NCOMST,COMSET,
       2496     1                    *               IACT,IWRITE,INAME,IRESV,
       2497     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       2498     1                    *               '*GRID_3D%D *NODE_3D *ELM_ATR
       2499     1                    *                *MOV1_3D *MOV0_3D !',
       2500     1                    *               NAME,MP,NP,XD,YD,ZD,
       2501     1                    *               NAME,ME,N2,NE,NDUM,NODWK1,
       2502     1                    *               NAME,ME,NE,LEFRM,
       2503     1                    *               NAME,MP,NP,WRK01,WRK02,WRK03,
       2504     1                    *               NAME,MP,NP,WRK04,WRK05,WRK06,
       2505     1                    *               ICHECK)
       2506     1               CCTT  //NORMALIZATION
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 320
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.75, ITR: 72, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      ZD, YD, XD, Y, X, Z
                              <<< Loop-information  End >>>
       2507     2  pp    v                DO 925 IP=1, NP
       2508     2   p    v                    XD(IP)=XD(IP)/DBLE(D000)
       2509     2   p    v                    YD(IP)=YD(IP)/DBLE(D000)
       2510     2   p    v                    ZD(IP)=ZD(IP)/DBLE(D000)
       2511     2   p    v                    X (IP)=REAL(XD(IP))
       2512     2   p    v                    Y (IP)=REAL(YD(IP))
       2513     2   p    v                    Z (IP)=REAL(ZD(IP))
       2514     2   p    v        925     CONTINUE
       2515     1                     ENDIF
       2516                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2517     1                     IF(IERRA.NE.0) THEN
       2518     1                         WRITE(IUT0,*) BLANK
       2519     1                         WRITE(IUT0,*) ERMSGC
       2520     1                         GO TO 9999
       2521     1                     ENDIF
       2522                     C
       2523     1                     IF (IALE.EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 272
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.10, ITR: 96, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK01, WRK05, VMESH_P, WRK04, UMESH_P
                              <<<      WMESH, WRK03, WRK02, VMESH, UMESH
                              <<<      WMESH_P, WRK06
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 9
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       2524     2  pp    v               DO 930 IP=1,NP
       2525     2   p    v                  UMESH(IP)  =WRK01(IP)/U000
       2526     2   p    v                  VMESH(IP)  =WRK02(IP)/U000
       2527     2   p    v                  WMESH(IP)  =WRK03(IP)/U000
       2528     2   p    v                  UMESH_P(IP)=WRK04(IP)/U000
       2529     2   p    v                  VMESH_P(IP)=WRK05(IP)/U000
       2530     2   p    v                  WMESH_P(IP)=WRK06(IP)/U000
       2531     2   p    v       930     CONTINUE
       2532     1                     ENDIF
       2533                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 8
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
       2534        pp   4v            NODE(:,:) = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 38
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 80, MVE: 3)
                              <<< Loop-information  End >>>
       2535     1  pp   2             DO 900 IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       2536     2   p   2v               DO 910 I=1,N2
       2537     2   p   2v                  NODE(I,IE)=NODWK1(I,IE)
       2538     2   p   2v       910     CONTINUE
       2539     1   p   2        900  CONTINUE
       2540                     C
       2541                           WRITE(IUT6,*) ' DONE!'
       2542                     C
       2543                     C
       2544                     C
       2545                     C            <<<<< READ ELEMENT ATTRIBUTES DATA >>>>>
       2546                     C
       2547                     C
       2548                     C
       2549                           WRITE(IUT6,*) BLANK
       2550                           WRITE(IUT6,*) ' ** SETTING MESH ATTRIBUTES **'
       2551                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEATTR
                              <<< Loop-information  End >>>
       2552     1  pp   4v            DO 1200 IE=1,NE
       2553     1   p   4v               IEATTR(IE)=0
       2554     1   p   4v       1200 CONTINUE
       2555                     C
       2556     1                     IF(NFRAME.NE.0) THEN
       2557     1                         IACT     = 1
       2558     1                         CALL GFALL(IUT0,IUT6,IUTAT,FILEAT,
       2559     1                    *               MCOM,NCOMFL,COMFLE,
       2560     1                    *               MCOM,NCOMST,COMSET,
       2561     1                    *               IACT,IWRITE,INAME,IRESV,
       2562     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       2563     1                    *               '*ELM_ATR !',
       2564     1                    *               NAME,ME,NECHK,IEATTR,
       2565     1                    *               ICHECK)
       2566     1                         CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2567     2                         IF(IERRA.NE.0) THEN
       2568     2                             WRITE(IUT0,*) BLANK
       2569     2                             WRITE(IUT0,*) ERMSGC
       2570     2                             GO TO 9999
       2571     2                         ENDIF
       2572     2                         IF(NECHK.NE.NE) THEN
       2573     2                             WRITE(IUT0,*) BLANK
       2574     2                             WRITE(IUT0,*) ERMSGB
       2575     2                             WRITE(IUT0,*) EREXP2
       2576     2                             GO TO 9999
       2577     2                         ENDIF
       2578     1                     ENDIF
       2579                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEATTR
                              <<< Loop-information  End >>>
       2580     1       2             DO 1300 IE=1,NE
       2581     1       2                 IFRAME=IEATTR(IE)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       2582     2   s   2v                DO 1310 I=1,N2
       2583     2   p   2v                    IP=NODE(I,IE)
       2584     2   p   2v                    IF(IP.EQ.0) GOTO 1310
       2585     2   m   2v                    IPATTR(IP)=IFRAME
       2586     2   p   2v       1310     CONTINUE
       2587     1       2        1300 CONTINUE
       2588                           WRITE(IUT6,*) ' DONE!'
       2589                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEPROP, IEMEDA
                              <<< Loop-information  End >>>
       2590     1  pp   2v            DO 1311 IE=1,NE
       2591     1   p   2v                IEMEDA(IE)=0
       2592     1   p   2v                IEPROP(IE)=0
       2593     1   p   2v       1311 CONTINUE
       2594                     C
       2595     1                     IF(ISOLID.EQ.1) THEN
       2596     1                         IACT     = 1
       2597     1                         NECHK1=0
       2598     1                         NECHK2=0
       2599     1                         CALL GFALL(IUT0,IUT6,IUTAT,FILEAT,
       2600     1                    *               MCOM,NCOMFL,COMFLE,
       2601     1                    *               MCOM,NCOMST,COMSET,
       2602     1                    *               IACT,IWRITE,INAME,IRESV,
       2603     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       2604     1                    *               '*ELM_MDA *ELM_PRO !',
       2605     1                    *               NAME,ME,NECHK1,IEMEDA,
       2606     1                    *               NAME,ME,NECHK2,IEPROP,
       2607     1                    *               ICHECK)
       2608     1                         CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2609     2                         IF(IERRA.NE.0) THEN
       2610     2                             WRITE(IUT0,*) BLANK
       2611     2                             WRITE(IUT0,*) ERMSGC
       2612     2                             GO TO 9999
       2613     2                         ENDIF
       2614     1               C
       2615     2                         IF(NECHK1.EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEMEDA
                              <<< Loop-information  End >>>
       2616     3  pp   4v                    DO 1320 IE=1,NE
       2617     3   p   4v                        IEMEDA(IE)=0
       2618     3   p   4v       1320         CONTINUE
       2619     2                         ENDIF
       2620     1               C
       2621     2                         IF(NECHK2.EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEMEDA, IEPROP
                              <<< Loop-information  End >>>
       2622     3  pp   2v                    DO 1321 IE=1,NE
       2623     3   p   2v                        IEPROP(IE)=IEMEDA(IE)
       2624     3   p   2v       1321         CONTINUE
       2625     2                         ENDIF
       2626     1               C
       2627     1                     ENDIF
       2628                     C
       2629                     C
       2630                     C            <<<<< READ BOUNDARY CONDITIONS DATA >>>>>
       2631                     C
       2632                     C
       2633                     C
       2634                           WRITE(IUT6,*) BLANK
       2635                           WRITE(IUT6,*) ' ** READING BOUNDARY CONDITIONS DATA **'
       2636                           IACT     = 1
       2637                           CALL GFALL(IUT0,IUT6,IUTBC,FILEBC,
       2638                          *           MCOM,NCOMFL,COMFLE,
       2639                          *           MCOM,NCOMST,COMSET,
       2640                          *           IACT,IWRITE,INAME,IRESV,
       2641                          *           ICAST,IDATA0,IALL,ISKIP,IERR,
       2642                          *           '*BC_INLT *BC_IV3D *BC_MWAL *BC_WV3D *BC_WALL
       2643                          *            *BC_SYMT *BC_FREE *BC_CYCL *BC_BODY *BC_INTR
       2644                          *            *BC_FORC *BC_FOIN
       2645                          *            *BC_TMPN *BC_TMPV *BC_HSRN *BC_HSRV
       2646                          *            *BC_HFXN *BC_HFXV *BC_HTRN *BC_HTRV
       2647                          *            *BC_PSET  !',
       2648                          *           NAME,MB,NPINLT,LPINLT,
       2649                          *           NAME,MB,NPINLT,UINLT0,VINLT0,WINLT0,
       2650                          *           NAME,MB,NPWALL,LPWALL,
       2651                          *           NAME,MB,NPWALL,UWALL,VWALL,WWALL,
       2652                          *           NAME,MB,NPW   ,LWRK01,
       2653                          *           NAME,MB,NPSYMT,LPSYMT,
       2654                          *           NAME,MB,NPFREE,LPFREE,
       2655                          *           NAME,MB,NPCCL ,LPCCL1,LPCCL2,
       2656                          *           NAME,MB,NPBODY,LPBODY,
       2657                          *           NAME,MB,NPINT, LPINT1,LPINT2,LPINT3,
       2658                          *           NAME,MB,NEFFO, LEFFO1,LEFFO2,
       2659                          *           NAME,MB,NPFFO, LPFFO1,LPFFO2,
       2660                          *           NAME,MB,NPTEMP,LPTEMP,NAME,MB,NPTEMP,TEMP,
       2661                          *           NAME,MB,NEHSRC,LEHSRC,NAME,MB,NEHSRC,HSRC,
       2662                          *           NAME,MB,NPHFIX,LPHFIX,NAME,MB,NPHFIX,HFIX,
       2663                          *           NAME,MB,NPHTRS,LPHTRS,NAME,MB,NPHTRS,HTRS,
       2664                          *           NAME,MB,NPSETR,LPSET1,LPSET4,LPSET3,
       2665                          *           ICHECK)
       2666                     C
       2667                     CCTT  //NORMALIZE
       2668                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 160, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WINLT0, UINLT0, VINLT0
                              <<< Loop-information  End >>>
       2669     1  pp    v            DO IBP=1,NPINLT
       2670     1   p    v                UINLT0(IBP)=UINLT0(IBP)/U000
       2671     1   p    v                VINLT0(IBP)=VINLT0(IBP)/U000
       2672     1   p    v                WINLT0(IBP)=WINLT0(IBP)/U000
       2673     1   p    v            ENDDO
       2674                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 160, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WWALL, UWALL, VWALL
                              <<< Loop-information  End >>>
       2675     1  pp    v            DO IBP=1,NPWALL
       2676     1   p    v                UWALL(IBP)=UWALL(IBP)/U000
       2677     1   p    v                VWALL(IBP)=VWALL(IBP)/U000
       2678     1   p    v                WWALL(IBP)=WWALL(IBP)/U000
       2679     1   p    v            ENDDO
       2680                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1143
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.66, ITR: 768, MVE: 12)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      TEMP
                              <<< Loop-information  End >>>
       2681     1  pp   2v            DO IBP=1,NPTEMP
       2682     1   p   2v                TEMP(IBP)=(TEMP(IBP)-TREF)/T000
       2683     1   p   2v            ENDDO
       2684                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 512, MVE: 9)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      HSRC
                              <<< Loop-information  End >>>
       2685     1  pp   2v            DO IBE=1,NEHSRC
       2686     1   p   2v                HSRC(IBE)=HSRC(IBE)/(RHO000*U000*U000*U000/D000)
       2687     1   p   2v            ENDDO
       2688                     C
       2689     1                     IF(NPHFIX.GT.0) THEN
       2690     1                         WRITE(*,*) 'HEAT FLUX B.C. IS NOT SUPPORTED IN THIS VERSION'
       2691     1                     ENDIF
       2692                     C
       2693     1                     IF(NPHTRS.GT.0) THEN
       2694     1                         WRITE(*,*) 'HEAT TRANS. B.C. IS NOT SUPPORTED IN THIS VERSION'
       2695     1                     ENDIF
       2696                     C
       2697     1                     IF(IVELIN.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 942
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WINLT0, VINLT0, UINLT0
                              <<< Loop-information  End >>>
       2698     2  pp   2v                DO IBP=1,NPINLT
       2699     2   p   2v                    UINLT0(IBP)=VELIN0(1)
       2700     2   p   2v                    VINLT0(IBP)=VELIN0(2)
       2701     2   p   2v                    WINLT0(IBP)=VELIN0(3)
       2702     2   p   2v                ENDDO
       2703     1                     ENDIF
       2704                     C
       2705     1                     IF(JSET.NE.0) THEN
       2706     1                         CALL CHKOSB(NP,NPSETR,LPSET1,X,Y,Z,
       2707     1                    *                OSXMIN,OSYMIN,OSZMIN,
       2708     1                    *                OSXMAX,OSYMAX,OSZMAX,
       2709     1                    *                IUT0,IUT6,IERR)
       2710     1                     ENDIF
       2711                     C
       2712                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2713     1                     IF(IERRA.NE.0) THEN
       2714     1                         WRITE(IUT0,*) BLANK
       2715     1                         WRITE(IUT0,*) ERMSGC
       2716     1                         GO TO 9999
       2717     1                     ENDIF
       2718                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 96, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WINLT, VINLT0, VINLT, WINLT0, UINLT0
                              <<<      UINLT
                              <<< Loop-information  End >>>
       2719     1  pp    v            DO IBP=1,NPINLT
       2720     1   p    v                UINLT(IBP)=UINLT0(IBP)
       2721     1   p    v                VINLT(IBP)=VINLT0(IBP)
       2722     1   p    v                WINLT(IBP)=WINLT0(IBP)
       2723     1   p    v            ENDDO
       2724                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK02
                              <<< Loop-information  End >>>
       2725     1  pp   4v            DO 1400 IP = 1 , NP
       2726     1   p   4v                LWRK02(IP)=0
       2727     1   p   4v       1400 CONTINUE
       2728                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.75, ITR: 224, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPWALL
                              <<< Loop-information  End >>>
       2729     1   s   2v            DO 1401 IBP = 1 , NPWALL
       2730     1   p   2v                IP=LPWALL(IBP)
       2731     1   m   2v                LWRK02(IP)=1
       2732     1   p   2v       1401 CONTINUE
       2733                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK01
                              <<< Loop-information  End >>>
       2734     1                     DO 1402 IPW = 1 , NPW
       2735     1                         IP=LWRK01(IPW)
       2736     1                         IF(LWRK02(IP).EQ.1) GOTO 1402
       2737     1                         NPWALL = NPWALL+1
       2738     2                         IF(NPWALL.GT.MB) THEN
       2739     2                             WRITE(IUT0,*) BLANK
       2740     2                             WRITE(IUT0,*) ERMSGB
       2741     2                             WRITE(IUT0,*) EREXP5, MPWALL
       2742     2                             GO TO 9999
       2743     2                         ENDIF
       2744     1                         LPWALL(NPWALL) = IP
       2745     1                         LWRK02(IP)     = 1
       2746     1                         UWALL (NPWALL) = 0.0E0
       2747     1                         VWALL (NPWALL) = 0.0E0
       2748     1                         WWALL (NPWALL) = 0.0E0
       2749     1                1402 CONTINUE
       2750                           WRITE(IUT6,*) ' DONE!'
       2751                     C
       2752                           NPHEAT=NPHFIX+NPHTRS
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPHFIX, LPHEAT
                              <<< Loop-information  End >>>
       2753     1  pp   2v            DO 1410 IBP = 1 , NPHFIX
       2754     1   p   2v                LPHEAT(IBP)=LPHFIX(IBP)
       2755     1   p   2v       1410 CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPHTRS, LPHEAT
                              <<< Loop-information  End >>>
       2756     1  pp   2v            DO 1420 IBP = 1 , NPHTRS
       2757     1   p   2v                LPHEAT(NPHFIX+IBP)=LPHTRS(IBP)
       2758     1   p   2v       1420 CONTINUE
       2759                     C
       2760                     C
       2761                     C            <<<<< READ INITIAL FIELD DATA >>>>>
       2762                     C
       2763                     C
       2764                           IINTRP=0
       2765                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FL, T
                              <<< Loop-information  End >>>
       2766     1  pp   2v            DO IP=1,NP
       2767     1   p   2v                T   (IP)=TREF
       2768     1   p   2v                FL  (IP)=FLINLT
       2769     1   p   2v            ENDDO
       2770                     C
       2771     1                     IF(ISTART.EQ.1) THEN
       2772     1                         WRITE(IUT6,*) BLANK
       2773     1                         WRITE(IUT6,*) ' ** READING INITIAL FLOW DATA **'
       2774     1                         IACT     = 1
       2775     1                         CALL GFALL(IUT0,IUT6,IUTIF,FILEIF,
       2776     1                    *               MCOM,NCOMFL,COMFLE,
       2777     1                    *               MCOM,NCOMST,COMSET,
       2778     1                    *               IACT,IWRITE,INAME,IRESV,
       2779     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       2780     1                    *               '*TIME_PS *STEP_PS *VELO_3D *PRES_3E
       2781     1                    *                *PRES_3D *VFRC_3E *LIQD_3D !',
       2782     1                    *               NAME,TIMEP,
       2783     1                    *               NAME,NTIMEP,
       2784     1                    *               NAME,MP,NPFLOW,U,V,W,
       2785     1                    *               NAME,ME,NEPRS,P,
       2786     1                    *               NAME,MP,NPPRS,PN,
       2787     1                    *               NAME,ME,NEFRC,FE ,
       2788     1                    *               NAME,MP,NPF  ,FL ,
       2789     1                    *               ICHECK)
       2790     1               C
       2791     1               CCTT      //NORMALIZE
       2792     1               C
       2793     1                         TIMEW=TIMEP
       2794     1                         TIMEP=TIMEP/(D000/U000)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 348
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.75, ITR: 112, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      PN, U, W, T, V
                              <<< Loop-information  End >>>
       2795     2  pp    v                DO IP=1,NP
       2796     2   p    v                    U (IP)=U (IP)/U000
       2797     2   p    v                    V (IP)=V (IP)/U000
       2798     2   p    v                    W (IP)=W (IP)/U000
       2799     2   p    v                    PN(IP)=PN(IP)/(RHO000*U000*U000)
       2800     2   p    v                    T (IP)=(T(IP)-TREF)/T000
       2801     2   p    v                ENDDO
       2802     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 512, MVE: 9)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      P
                              <<< Loop-information  End >>>
       2803     2  pp   2v                DO IE=1,NE
       2804     2   p   2v                    P(IE)=P(IE)/(RHO000*U000*U000)
       2805     2   p   2v                ENDDO
       2806     1               C
       2807     1                         CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2808     1               C
       2809     2                         IF(IERRA.NE.0) THEN
       2810     2                             WRITE(IUT0,*) BLANK
       2811     2                             WRITE(IUT0,*) ERMSGC
       2812     2                             GO TO 9999
       2813     2                         ENDIF
       2814     1               C
       2815     2                         IF(NRFN.EQ.0 .AND. NPFLOW.NE.NP) THEN
       2816     2                             WRITE(IUT0,*) BLANK
       2817     2                             WRITE(IUT0,*) ERMSGB
       2818     2                             WRITE(IUT0,*) EREXP2
       2819     2                             GO TO 9999
       2820     2                         ENDIF
       2821     1               C
       2822     2                         IF(NRFN.EQ.0 .AND. NPPRS.NE.NP) THEN
       2823     2                             IINTRP=1
       2824     3                             IF(NEPRS.NE.NE) THEN
       2825     3                                 WRITE(IUT0,*) BLANK
       2826     3                                 WRITE(IUT0,*) ERMSGB
       2827     3                                 WRITE(IUT0,*) EREXP2
       2828     3                                 GO TO 9999
       2829     3                             ENDIF
       2830     2               C
       2831     2                             WRITE(IUT6,*) 'PRESSURE READ IS DEFINEDED AT ELEMENT'
       2832     2               CCC           WRITE(IUT0,*) 'ONLY NODAL PRESSURE IS AVAILABLE : STOP'
       2833     2               CCC           GOTO 9999
       2834     2                         ENDIF
       2835     1               C
       2836     1                         WRITE(IUT6,*) ' DONE!'
       2837     1                     ENDIF
       2838                     C
       2839                           NP0=NP
       2840                           NE0=NE
       2841                           IF(NRFN.EQ.0) GOTO 1600
       2842                     C
       2843     1                     IF(NGRID.NE.-1) THEN
       2844     1                         WRITE(IUT6,*) ' **PREPARE REFINE LAYER-NUMBER TABLE **'
       2845     1               C
       2846     1                         LLAYER(NRFN) = (NLAYER(NRFN)+1)/2
       2847     1                         IF(NRFN.LT.2) GOTO 1550
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.20, ITR: 8, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NLAYER, LLAYER
                              <<< Loop-information  End >>>
       2848     2   s   2s                DO 1560 IRFNR = 2, NRFN
       2849     2   p   2v                   IRFN = NRFN - IRFNR + 1
       2850     2   m   2m                   LLAYER(IRFN) = (LLAYER(IRFN+1) + NLAYER(IRFN) + 1)/2
       2851     2   p   2v       1560     CONTINUE
       2852     1                1550     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LLAYER
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       2853     2   s    s                DO 1599 IRFN=1, NRFN
       2854     2   m    m                   WRITE(IUT6,*) "IRFN / LLAYER :", IRFN, LLAYER(IRFN)
       2855     2   p    v       1599     CONTINUE
       2856     1                     ENDIF
       2857                     C
       2858     1                     IF(NGRID.EQ.-2) THEN
       2859     1               C
       2860     1                         LLAYRT(NRFN) = (NLAYRT(NRFN)+1)/2
       2861     1                         IF(NRFN.LT.2) GOTO 1570
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.20, ITR: 8, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NLAYRT, LLAYRT
                              <<< Loop-information  End >>>
       2862     2   s   2s                DO 1580 IRFNR = 2, NRFN
       2863     2   p   2v                   IRFN = NRFN - IRFNR + 1
       2864     2   m   2m                   LLAYRT(IRFN) = (LLAYRT(IRFN+1) + NLAYRT(IRFN) + 1)/2
       2865     2   p   2v       1580     CONTINUE
       2866     1                1570     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LLAYRT
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       2867     2   s    s                DO 1575 IRFN=1, NRFN
       2868     2   m    m                   WRITE(IUT6,*) "IRFN / LLAYRT :", IRFN, LLAYRT(IRFN)
       2869     2   p    v       1575     CONTINUE
       2870     1               C
       2871     1                         WRITE(IUT6,*) "READ REFINE TARGET SURFACE DATA"
       2872     1               C     // READ REFINE TAGRET SURFACE DATA
       2873     1                         CALL RDSURF(IUT0,IUT6,IUTSF,FILESF,
       2874     1                    *        MCOM,NCOMFL,COMFLE,MCOM,NCOMST,COMSET,
       2875     1                    *        MSURFD,MSURFS,NSURFD,NSURFS,XSURFD,YSURFD,ZSURFD,
       2876     1                    *        XMINSF,YMINSF,ZMINSF,XMAXSF,YMAXSF,ZMAXSF)
       2877     1                         WRITE(IUT6,*) " DONE!"
       2878     1               C
       2879     1                         WRITE(IUT6,*) "MPTGT: ", MPTGT
       2880     1                         WRITE(IUT6,*) "FIND REFINE TARGET SURFACES"
       2881     1               C     // FIND REFINE TARGET SURFACE
       2882     1                         CALL PICSRF(MSURFD,MSURFS,NSURFD,NSURFS,
       2883     1                    *        XSURFD,YSURFD,ZSURFD,
       2884     1                    *        XMINSF,YMINSF,ZMINSF,XMAXSF,YMAXSF,ZMAXSF,
       2885     1                    *        NP,NE,N2,NODE,X,Y,Z,NPBODY,LPBODY,
       2886     1                    *        MPTGT,NPTGT,LPTGT,
       2887     1                    *        LWRK01,WRK01,IUT0,IUT6,IERR)
       2888     1                         CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2889     2                         IF(IERRA.NE.0) THEN
       2890     2                            WRITE(IUT0,*) BLANK
       2891     2                            WRITE(IUT0,*) ERMSGC
       2892     2                            GO TO 9999
       2893     2                         ENDIF
       2894     1               C
       2895     1                         WRITE(IUT6,*) " DONE!"
       2896     1               C
       2897     1                     ENDIF
       2898                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      XD, ZD, YD, Y, Z, X
                              <<< Loop-information  End >>>
       2899     1                     DO 1500 IRFN= 1 , NRFN
       2900     1                        WRITE(IUT6,*) BLANK
       2901     1                        WRITE(IUT6,*) ' ** REFINING MESH, B.C. FLOW **'
       2902     1                        WRITE(IUT6,*) ' IRFN = ',IRFN
       2903     1               C
       2904     1                        IF (NGRID.EQ.0) GOTO 1500
       2905     1                        IDUM=NE
       2906     1               CC    NOTE THAT;
       2907     1               CC    LWRK01 IS USED FOR LEACNV IN THIS LOOP
       2908     1                        CALL LRFNMS(IRFNFF,IRFN,NGRID,IRFNFT,FILECD,FILECR,
       2909     1                    *               LLAYER(IRFN),LLAYRT(IRFN),IRFBOX,NPPRS,
       2910     1                    *               ME,MP,MWRK,N2,NE,NP,
       2911     1                    *               XD,YD,ZD,U,V,W,PN,P,NODE,LWRK01,
       2912     1                    *               MB,NPWALL,LPWALL,UWALL,VWALL,WWALL,
       2913     1                    *               MB,NPINLT,LPINLT,UINLT,VINLT,WINLT,
       2914     1                    *               MB,NPFREE,LPFREE,
       2915     1                    *               MB,NPSYMT,LPSYMT,
       2916     1                    *               MB,NPSETR,LPSET1,LPSET4,
       2917     1                    *               MB,NPBODY,LPBODY,
       2918     1                    *               MB,NPINT ,LPINT1,LPINT2,LPINT3,
       2919     1                    *               MPTGT,NPTGT,LPTGT,
       2920     1                    *               IPART,
       2921     1                    *               MDOM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       2922     1                    *               WRK01,WRK02,WRK03,LEWRK,
       2923     1                    *               DWRK3,LWRK02,LWRK03,LWRK04,
       2924     1                    *               WRK04,NODWK1,NODWK2,NODWK3,
       2925     1                    *               RX,RY,NPB0,
       2926     1                    *               NPB1,LPB1,XPB1,YPB1,ZPB1,
       2927     1                    *               NPB2,LPB2,XPB2,YPB2,ZPB2,
       2928     1                    *               LWRK05,LWRK06,
       2929     1                    *               XRFMIN(IRFN),YRFMIN(IRFN),ZRFMIN(IRFN),
       2930     1                    *               XRFMAX(IRFN),YRFMAX(IRFN),ZRFMAX(IRFN),
       2931     1                    *               IUT6,IUT0,IERR)
       2932     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 422
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.20, ITR: 64, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      ZD, XD, YD, Y, X, Z
                              <<< Loop-information  End >>>
       2933     2  pp    v            DO 1510 IP=1, NP
       2934     2   p    v                X (IP)=REAL(XD(IP))
       2935     2   p    v                Y (IP)=REAL(YD(IP))
       2936     2   p    v                Z (IP)=REAL(ZD(IP))
       2937     2   p    v       1510 CONTINUE
       2938     1               C
       2939     1                        CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2940     2                        IF(IERRA.NE.0) THEN
       2941     2                           WRITE(IUT0,*) BLANK
       2942     2                           WRITE(IUT0,*) ERMSGC
       2943     2                           GO TO 9999
       2944     2                        ENDIF
       2945     1               C
       2946     1                        CALL ATRCNV(IDUM,NE,IEATTR,LWRK01,LWRK02,IERR,IUT0,IUT6)
       2947     1                        CALL ATRCNV(IDUM,NE,IEMEDA,LWRK01,LWRK02,IERR,IUT0,IUT6)
       2948     1                        CALL ATRCNV(IDUM,NE,IEPROP,LWRK01,LWRK02,IERR,IUT0,IUT6)
       2949     1                        CALL ATRCNV(IDUM,NE,LEFRM ,LWRK01,LWRK02,IERR,IUT0,IUT6)
       2950     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEATTR
                              <<< Loop-information  End >>>
       2951     2       2             DO 1511 IE=1,NE
       2952     2       2                 IFRAME=IEATTR(IE)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       2953     3   s   2v                DO 1512 I=1,N2
       2954     3   p   2v                    IP=NODE(I,IE)
       2955     3   p   2v                    IF(IP.EQ.0) GOTO 1512
       2956     3   m   2v                    IPATTR(IP)=IFRAME
       2957     3   p   2v       1512     CONTINUE
       2958     2       2        1511 CONTINUE
       2959     1               C
       2960     1                        CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       2961     2                        IF(IERRA.NE.0) THEN
       2962     2                           WRITE(IUT0,*) BLANK
       2963     2                           WRITE(IUT0,*) ERMSGC
       2964     2                           GO TO 9999
       2965     2                        ENDIF
       2966     1               C
       2967     1                        WRITE(IUT6,*) ' ** DONE **'
       2968     1                        WRITE(IUT6,*) BLANK
       2969     1               C
       2970     1                1500 CONTINUE
       2971                           DEALLOCATE(DWRK3)
       2972                           DEALLOCATE(LPTGT)
       2973                     C
       2974                      1600 CONTINUE
       2975                     C
       2976                     C
       2977                     C
       2978                     C            <<<<< REORDERING >>>>>
       2979                     C
       2980                     C
       2981                     C
       2982                           WRITE(IUT6,*) BLANK
       2983                           WRITE(IUT6,*) ' ** REORDERING **'
       2984                           CALL REORDR
       2985                          &   ( JSORT,JCOLOR,NDIVX,NDIVY,NDIVZ,NEIP,
       2986                          &     IALE,MP,ME,MWRK,NP,NE,N2,NODE,
       2987                          &     MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       2988                          &     LPBTOA,LPATOB,LEBTOA,LEATOB,
       2989                          &     NETET,NEPRD,NEWED,NEHEX,
       2990                          &     NPINLT,NPWALL,NPSYMT,NPFREE,NPCCL ,NPBODY,
       2991                          &     NPINT ,NEFFO, NPFFO ,NPTEMP,NEHSRC,NPHEAT,
       2992                          &     NPSETR,
       2993                          &     LPINLT,LPWALL,LPSYMT,LPFREE,LPCCL1,LPCCL2,
       2994                          &     LPBODY,LPINT1,LEFFO1,LPFFO1,LPTEMP,LEHSRC,
       2995                          &     LPHEAT,LPSET1,
       2996                          &     LEFRM ,IEATTR,IPATTR,IEMEDA,IEPROP,
       2997                          &     X,Y,Z,XD,YD,ZD,U,V,W,PN,P,T,FL,FE,
       2998                          &     UMESH,VMESH,WMESH,UMESH_P,VMESH_P,WMESH_P,
       2999                          &     LWRK01,LWRK02,LWRK03,LWRK04,WRK01,IERR,IUT0,IUT6 )
       3000                           NEX( 1)=NETET
       3001                           NEX( 2)=NEPRD
       3002                           NEX( 3)=NEWED
       3003                           NEX( 4)=NEHEX
       3004                           NEX( 5)=NTET
       3005                           NEX( 6)=NPRD
       3006                           NEX( 7)=NWED
       3007                           NEX( 8)=NHEX
       3008                           NEX( 9)=NSKIP1
       3009                           NEX(10)=NSKIP2
       3010                           NEX(11)=NSKIP3
       3011                           NEX(12)=NSKIP4
       3012                     C
       3013                     C
       3014                     C     SET COEF. FOR BTDTERM AT EACH ELEMENT
       3015                     C
       3016     1                     IF(IFORM.EQ.2 .OR. IFORM.EQ.4 .OR. IFORM.EQ.5) THEN
       3017     1                     ELSE
       3018     1                        BTDCOE(1) = 0.0E0
       3019     1                        BTDCOE(2) = 0.0E0
       3020     1                        BTDCOE(3) = 0.0E0
       3021     1                        BTDCOE(4) = 0.0E0
       3022     1                     ENDIF
       3023                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 0.79, ITR: 48, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CBTD3D
                              <<< Loop-information  End >>>
       3024     1  pp    v            DO IE=1,NE
       3025     2   p    v                IF(IE.LE.NETET) THEN
       3026     2   p    v                    CBTD3D(IE)=BTDCOE(1)
       3027     2   p    v                ELSE IF(IE.LE.NETET+NEPRD) THEN
       3028     2   p    v                    CBTD3D(IE)=BTDCOE(2)
       3029     2   p    v                ELSE IF(IE.LE.NETET+NEPRD+NEWED) THEN
       3030     2   p    v                    CBTD3D(IE)=BTDCOE(3)
       3031     2   p    v                ELSE
       3032     2   p    v                    CBTD3D(IE)=BTDCOE(4)
       3033     2   p    v                ENDIF
       3034     1   p    v            ENDDO
       3035                     C
       3036                     CC
       3037     1                     IF(IDSM.EQ.1) THEN
       3038     1                         IERR=0
       3039     2                         IF(NE.NE.NEHEX) THEN
       3040     2                             WRITE(IUT0,*)
       3041     2                    *        'ERROR:OLD-DSM IS NOT AVILABLE FOR NOT-HEX. MESH'
       3042     2                             IERR=1
       3043     2                         ENDIF
       3044     1               C
       3045     1               C
       3046     2                         IF(IERR.NE.0) THEN
       3047     2                             WRITE(IUT0,*) 'ERROR:NEW-DSM WILL BE USED'
       3048     2                             IDSM=2
       3049     2                             UPPER=0.02
       3050     2                             CSMAX=0.3
       3051     2                             IERR=0
       3052     2                     WRITE(IUT6,*) ' SGS EDDY VISCOSITY UPPER-BOUND  : UPPER =', UPPER
       3053     2                     WRITE(IUT6,*) ' MAXIMUM CS VALUE IN DSM         : CSMAX =', CSMAX
       3054     2                         ENDIF
       3055     1               C
       3056     1                     ENDIF
       3057                     CC
       3058                     CC    DO IP=1,NP
       3059                     CC        XD(IP)=DBLE(X(IP))
       3060                     CC        YD(IP)=DBLE(Y(IP))
       3061                     CC        ZD(IP)=DBLE(Z(IP))
       3062                     CC    ENDDO
       3063                     C
       3064     1                     IF(IERR.NE.0) THEN
       3065     1                         WRITE(IUT0,*) BLANK
       3066     1                         WRITE(IUT0,*) ERMSGC
       3067     1                         GO TO 9999
       3068     1                     ENDIF
       3069                           WRITE(IUT6,*) ' ** DONE **'
       3070                     C
       3071                           MFRM=0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<< Loop-information  End >>>
       3072     1  pp    s            DO IE=1,NE
       3073     1   p    s                IF(LEFRM(IE).GT.MFRM) MFRM=LEFRM(IE)
       3074     1   p    s            ENDDO
       3075                           CALL DDMAXI(MFRM,IBUF,IERR)
       3076                           MFRM=IBUF
       3077                           NFRM=IBUF
       3078                           ALLOCATE(IFATTR(MFRM))
       3079                           WRITE(IUT6,*) ' ****** : MFRM=', MFRM
       3080                     C
       3081                     C
       3082                     C            <<<<< MAKE BLOCK PARAMETER >>>>>
       3083                     C
       3084                     C
       3085     1                     IF(JSETOS.EQ.1.OR.JSSMAP.EQ.1) THEN
       3086     1               C
       3087     2                         IF(JSSMAP.EQ.1) THEN
       3088     2                             SSXMIN=CODSSB(1)
       3089     2                             SSYMIN=CODSSB(2)
       3090     2                             SSZMIN=CODSSB(3)
       3091     2                             SSXMAX=CODSSB(1)+CODSSB(4)*FLOAT(NUMSSB(1))
       3092     2                             SSYMAX=CODSSB(2)+CODSSB(4)*FLOAT(NUMSSB(2))
       3093     2                             SSZMAX=CODSSB(3)+CODSSB(4)*FLOAT(NUMSSB(3))
       3094     2               C
       3095     3                             IF(JSET.NE.0) THEN
       3096     3                                 IF(SSXMIN.LT.OSXMIN) OSXMIN=SSXMIN
       3097     3                                 IF(SSYMIN.LT.OSYMIN) OSYMIN=SSYMIN
       3098     3                                 IF(SSZMIN.LT.OSZMIN) OSZMIN=SSZMIN
       3099     3                                 IF(SSXMAX.GT.OSXMAX) OSXMAX=SSXMAX
       3100     3                                 IF(SSYMAX.GT.OSYMAX) OSYMAX=SSYMAX
       3101     3                                 IF(SSZMAX.GT.OSZMAX) OSZMAX=SSZMAX
       3102     3                             ELSE
       3103     3                                 OSXMIN=SSXMIN
       3104     3                                 OSYMIN=SSYMIN
       3105     3                                 OSZMIN=SSZMIN
       3106     3                                 OSXMAX=SSXMAX
       3107     3                                 OSYMAX=SSYMAX
       3108     3                                 OSZMAX=SSZMAX
       3109     3                             ENDIF
       3110     2                         ENDIF
       3111     1               C
       3112     1                         CALL CNTBLK(X,Y,Z,NODE,NE,NP,N2,
       3113     1                    *                NBLKX,NBLKY,NBLKZ,EPSBLK,BLKMIN,
       3114     1                    *                XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
       3115     1                    *                OSXMIN,OSYMIN,OSZMIN,
       3116     1                    *                OSXMAX,OSYMAX,OSZMAX,MBLK)
       3117     1                         MZ=NBLKX*NBLKY*NBLKZ
       3118     1               C
       3119     1                         WRITE(IUT6,*)
       3120     1                         WRITE(IUT6,*) ' **** : MAKING ELEMENT ZONE LIST...'
       3121     1                         WRITE(IUT6,*) ' **** : NBLKX    :',NBLKX
       3122     1                         WRITE(IUT6,*) ' **** : NBLKY    :',NBLKY
       3123     1                         WRITE(IUT6,*) ' **** : NBLKZ    :',NBLKZ
       3124     1                         WRITE(IUT6,*) ' **** : MZ       :',MZ
       3125     1                         WRITE(IUT6,*) ' **** : MBLK     :',MBLK
       3126     1               C
       3127     1                         SIZE   = (8*FLOAT(MZ+MBLK))*WORD
       3128     1                         WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " BLOCK      :",SIZE
       3129     1                         ALLOCATE(NEZ   (MZ  ),STAT=LERR(1))
       3130     1                         ALLOCATE(IBSTAT(MZ  ),STAT=LERR(2))
       3131     1                         ALLOCATE(IELIST(MBLK),STAT=LERR(3))
       3132     1                         ALLOCATE(IEBUF (MBLK),STAT=LERR(4))
       3133     1                         CALL ERRCHK(IUT6,IPART,4,LERR,IERR)
       3134     2                         IF(IERR.NE.0) THEN
       3135     2                             WRITE(IUT0,*) BLANK
       3136     2                             WRITE(IUT0,*) ERMSGC
       3137     2                             WRITE(IUT0,*) EREXP1
       3138     2                             GO TO 9999
       3139     2                         ENDIF
       3140     1               C
       3141     1                         CALL ZONE3E(X,Y,Z,NODE,NE,NP,N2,NBLKX,NBLKY,NBLKZ,
       3142     1                    *                EPSBLK,BLKMIN,
       3143     1                    *                MBLK,MZ,
       3144     1                    *                IELIST,IBSTAT,NEZ,NEZMAX,NEZAVR,NZEFF,NZ,
       3145     1                    *                XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
       3146     1                    *                IEBUF,IUT0,IERR)
       3147     1                         CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3148     1                         IERR=IERRA
       3149     2                         IF(IERR.NE.0) THEN
       3150     2                             WRITE(IUT0,*) BLANK
       3151     2                             WRITE(IUT0,*) ERMSGC
       3152     2                             WRITE(IUT0,*) 'ERROR IN ZONE3E '
       3153     2                             GO TO 9999
       3154     2                         ENDIF
       3155     1               C
       3156     1                         WRITE(IUT6,*) ' NUMBER OF EFFECTIVE ZONES  =', NZEFF
       3157     1                         WRITE(IUT6,*) ' AVE. NUMBER OF ELEMENTS IN A ZONE =', NEZAVR
       3158     1                         WRITE(IUT6,*) ' MAX. NUMBER OF ELEMENTS IN A ZONE =', NEZMAX
       3159     1                         DEALLOCATE(IEBUF)
       3160     1                     ENDIF
       3161                     C
       3162                     C
       3163                     C            <<<<< INITILIZE VARIAVLES >>>>>
       3164                     C
       3165                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 147
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    UNSWITCHING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WMESH_P, UMESH_P, VMESH_P, WMESH, VMESH
                              <<<      T, UMESH, PN, W, V, U, FLR, FLA, TR, TA
                              <<<      WS
                              <<<    PREFETCH(SOFT) : 20
                              <<<     SEQUENTIAL : 20
                              <<<      WR: 2, WA: 2, PNR: 2, PNA: 2, VS: 2
                              <<<      VR: 2, VA: 2, US: 2, UR: 2, UA: 2
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 23
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       3166     1  pp    v            DO 1900 IP = 1 , NP
       3167     1   p    v                UA(IP) = 0.E0
       3168     1   p    v                UR(IP) = 0.E0
       3169     1   p    v                US(IP) = 0.E0
       3170     1   p    v                VA(IP) = 0.E0
       3171     1   p    v                VR(IP) = 0.E0
       3172     1   p    v                VS(IP) = 0.E0
       3173     1   p    v                PNA(IP) = 0.E0
       3174     1   p    v                PNR(IP) = 0.E0
       3175     1   p    v                WA(IP) = 0.E0
       3176     1   p    v                WR(IP) = 0.E0
       3177     1   p    v                WS(IP) = 0.E0
       3178     1   p    v                TA(IP) = 0.E0
       3179     1   p    v                TR(IP) = 0.E0
       3180     1   p    v                FLA(IP)= 0.E0
       3181     1   p    v                FLR(IP)= 0.E0
       3182     1   p    v                IF(ISTART.EQ.1) GOTO 1900
       3183     1   p    v                U (IP) = 0.E0
       3184     1   p    v                V (IP) = 0.E0
       3185     1   p    v                W (IP) = 0.E0
       3186     1   p    v                PN(IP) = 0.E0
       3187     1   p    v                T (IP) = 0.E0
       3188     1   p    v                IF(IALE.EQ.0) GOTO 1900
       3189     1   p    v                UMESH(IP)   = 0.E0
       3190     1   p    v                VMESH(IP)   = 0.E0
       3191     1   p    v                WMESH(IP)   = 0.E0
       3192     1   p    v                UMESH_P(IP) = 0.E0
       3193     1   p    v                VMESH_P(IP) = 0.E0
       3194     1   p    v                WMESH_P(IP) = 0.E0
       3195     1   p    v       1900 CONTINUE
       3196                     C
       3197                           TFINAL = TFINAL+FINITE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 356
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    UNSWITCHING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE, P, FER, FEA, PR, PA, CS, RHO3D
                              <<<      VISCA, VISC
                              <<< Loop-information  End >>>
       3198     1  pp    v            DO 2000 IE = 1 , NE
       3199     1   p    v                VISC (IE) = VISCM
       3200     1   p    v                VISCA(IE) = 0.E0
       3201     1   p    v                RHO3D(IE) = RHOF
       3202     1   p    v                CS   (IE) = C
       3203     1   p    v                PA   (IE) = 0.E0
       3204     1   p    v                PR   (IE) = 0.E0
       3205     1   p    v                FEA  (IE) = 0.E0
       3206     1   p    v                FER  (IE) = 0.E0
       3207     1   p    v                IF(ISTART.EQ.1) GOTO 2000
       3208     1   p    v                P    (IE) = 0.E0
       3209     1   p    v                FE   (IE) = 0.E0
       3210     1   p    v       2000 CONTINUE
       3211                     C
       3212     1                     IF(ISTART.EQ.1) THEN
       3213     2                        IF(JPRESS.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 67
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      P
                              <<< Loop-information  End >>>
       3214     3  pp    s                  DO 2011 IE=1, NE
       3215     3   p    v                     IP1=NODE(1,IE)
       3216     3   p    v                     IP2=NODE(2,IE)
       3217     3   p    v                     IP3=NODE(3,IE)
       3218     3   p    v                     IP4=NODE(4,IE)
       3219     3   p    v                     IP5=NODE(5,IE)
       3220     3   p    v                     IP6=NODE(6,IE)
       3221     3   p    v                     IP7=NODE(7,IE)
       3222     3   p    v                     IP8=NODE(8,IE)
       3223     4   p    s                     IF(IP8.NE.0) THEN
       3224     4   p    s                        P(IE) = (PN(IP1)+PN(IP2)+PN(IP3)+PN(IP4)
       3225     4                    *                  +  PN(IP5)+PN(IP6)+PN(IP7)+PN(IP8))/8.0E0
       3226     4   p    s                     ELSE IF(IP6.NE.0) THEN
       3227     4   p    s                        P(IE) = (PN(IP1)+PN(IP2)+PN(IP3)+PN(IP4)
       3228     4                    *                  +  PN(IP5)+PN(IP6))/6.0E0
       3229     4   p    s                     ELSE IF(IP5.NE.0) THEN
       3230     4   p    s                        P(IE) = (PN(IP1)+PN(IP2)+PN(IP3)+PN(IP4)
       3231     4                    *                  +  PN(IP5))/5.0E0
       3232     4   p    s                     ELSE
       3233     4   p    s                        P(IE) = (PN(IP1)+PN(IP2)+PN(IP3)+PN(IP4))/4.0E0
       3234     4   p    v                     ENDIF
       3235     3   p    v       2011       CONTINUE
       3236     2                        ELSE IF(JPRESS.EQ.2) THEN
       3237     3                           IF (NEPRS.EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      P
                              <<< Loop-information  End >>>
       3238     4  pp   4v                     DO 2022 IE=1,NE
       3239     4   p   4v                        P(IE)=0.0E0
       3240     4   p   4v       2022          CONTINUE
       3241     3                           ENDIF
       3242     3                           IF (NPPRS.EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      PN
                              <<< Loop-information  End >>>
       3243     4  pp   4v                     DO 2023 IP=1,NP
       3244     4   p   4v                        PN(IP)=0.0E0
       3245     4   p   4v       2023          CONTINUE
       3246     3                           ENDIF
       3247     2                        ENDIF
       3248     1                     ENDIF
       3249                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EJ
                              <<< Loop-information  End >>>
       3250     1  pp   4v            DO 2030 IE = 1 , NE
       3251     1   p   4v               EJ   (IE) = 1.E0
       3252     1   p   4v       2030 CONTINUE
       3253                     C
       3254                     C     <<<<< FIND DATA SAMPLING ELEMENTS >>>>>
       3255                     C
       3256                     C     SPECIFY OPERATION TYPE IN HSMRGX
       3257                     C     LHIST( 1): TIME      :-1:USE VALUSE IN *.P0001
       3258                     C     LHIST( 2): MAX. DIV. :-4:CAL. MAX.
       3259                     C     LHIST( 3): AVE. VIS. :-3:CAL. AVE.
       3260                     C     LHIST( 4): NUMP      :-1:USE VALUSE IN *.P0001
       3261                     C     LHIST( 5): RESP      :-1:USE VALUSE IN *.P0001
       3262                     C     LHIST( 6): FX        :-2:CAL. SUM.
       3263                     C     LHIST( 7): FY        :-2:CAL. SUM.
       3264                     C     LHIST( 8): FZ        :-2:CAL. SUM.
       3265                     C     LHIST( 9): NUMU      :-1:USE VALUSE IN *.P0001
       3266                     C     LHIST(10): NUMV      :-1:USE VALUSE IN *.P0001
       3267                     C     LHIST(11): NUMW      :-1:USE VALUSE IN *.P0001
       3268                     C     LHIST(12): NUMT      :-1:USE VALUSE IN *.P0001
       3269                     C     LHIST(13): NUMK      :-1:USE VALUSE IN *.P0001
       3270                     C     LHIST(14): NUME      :-1:USE VALUSE IN *.P0001
       3271                     C     LHIST(15): RESU      :-1:USE VALUSE IN *.P0001
       3272                     C     LHIST(16): RESV      :-1:USE VALUSE IN *.P0001
       3273                     C     LHIST(17): RESW      :-1:USE VALUSE IN *.P0001
       3274                     C     LHIST(18): REST      :-1:USE VALUSE IN *.P0001
       3275                     C     LHIST(20): RESE      :-1:USE VALUSE IN *.P0001
       3276                     C     LHIST(21): TSUM      :-2:CAL. SUM.
       3277                     C     LHIST(22): ERROVS    :-4:MAX. OVERSET ERROR
       3278                     C     LHIST(23): FVOL      :-1:USE VALUSE IN *.P0001
       3279                     C     LHIST(24): FMIN      :-5:CAL. MIN.
       3280                     C     LHIST(25): FMAX      :-4:CAL. MAX.
       3281                     C     LHIST(26): CMAX      :-4:CAL. MAX.
       3282                     C     LHIST(27): FLXIN     :-1:USE VALUSE IN *.P0001
       3283                     C     LHIST(28): FLXOUT    :-1:USE VALUSE IN *.P0001
       3284                     C
       3285                           LHIST( 1)=-1
       3286                           LHIST( 2)=-4
       3287                           LHIST( 3)=-3
       3288                           LHIST( 4)=-1
       3289                           LHIST( 5)=-1
       3290                           LHIST( 6)=-2
       3291                           LHIST( 7)=-2
       3292                           LHIST( 8)=-2
       3293                           LHIST( 9)=-1
       3294                           LHIST(10)=-1
       3295                           LHIST(11)=-1
       3296                           LHIST(12)=-1
       3297                           LHIST(13)=-1
       3298                           LHIST(14)=-1
       3299                           LHIST(15)=-1
       3300                           LHIST(16)=-1
       3301                           LHIST(17)=-1
       3302                           LHIST(18)=-1
       3303                           LHIST(19)=-1
       3304                           LHIST(20)=-1
       3305                           LHIST(21)=-2
       3306                           LHIST(22)=-4
       3307                           LHIST(23)=-1
       3308                           LHIST(24)=-5
       3309                           LHIST(25)=-4
       3310                           LHIST(26)=-4
       3311                           LHIST(27)=-1
       3312                           LHIST(28)=-1
       3313                     C
       3314     1                     IF(NSMPL.GE.1) THEN
       3315     1                         WRITE(IUT6,*) BLANK
       3316     1                         WRITE(IUT6,*) ' ** FINDING DATA SAMPLING ELEMENTS **'
       3317     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
       3318     2   p   fs                DO 2110 I = 1 , N2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 7
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<< Loop-information  End >>>
       3319     3  pp   f                     DO 2100 IE = 1 , NE
       3320     3   p   fv                        IP = NODE(I,IE)
       3321     3   p   fs                        IF(IP.EQ.0) GOTO 2100
       3322     3   p   fs                        IF(I.EQ.1 .OR. X(IP).LE.WRK04(IE)) WRK04(IE) = X(IP)
       3323     3   p   fs                        IF(I.EQ.1 .OR. Y(IP).LE.WRK05(IE)) WRK05(IE) = Y(IP)
       3324     3   p   fs                        IF(I.EQ.1 .OR. Z(IP).LE.WRK06(IE)) WRK06(IE) = Z(IP)
       3325     3   p   fs                        IF(I.EQ.1 .OR. X(IP).GE.WRK07(IE)) WRK07(IE) = X(IP)
       3326     3   p   fs                        IF(I.EQ.1 .OR. Y(IP).GE.WRK08(IE)) WRK08(IE) = Y(IP)
       3327     3   p   fs                        IF(I.EQ.1 .OR. Z(IP).GE.WRK09(IE)) WRK09(IE) = Z(IP)
       3328     3   p   f        2100         CONTINUE
       3329     2   p   fv       2110     CONTINUE
       3330     1               C
       3331     1                         CALL MINMAX(N2,NE,NP,NEX,X,Y,Z,NODE,
       3332     1                    *                WRK04,WRK05,WRK06,WRK07,WRK08,WRK09)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 6
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       3333     2   s    s                DO 2200 I=1,NSMPL
       3334     2   s    s                    CALL FND3EX(N2,NE,NP,NEX,X,Y,Z, NODE,
       3335     2                    *                    WRK04,WRK05,WRK06,WRK07,WRK08,WRK09,
       3336     2                    *                    XSMPL(I),YSMPL(I),ZSMPL(I),
       3337     2                    *                    IESMPL(I),GSMPL(I),ESMPL(I),TSMPL(I),
       3338     2                    *                    IUT0,IERR)
       3339     2   s    s       2200     CONTINUE
       3340     2                         IF(IERR.NE.0) THEN
       3341     2                             WRITE(IUT0,*) BLANK
       3342     2                             WRITE(IUT0,*) ERMSGC
       3343     2                             GO TO 9999
       3344     2                         ENDIF
       3345     1               C
       3346     1                         J=MRESV
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IESMPL
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       3347     2        s                DO 2300 I = 1 , NSMPL
       3348     3        v                    IF(IESMPL(I).GE.1) THEN
       3349     3        m                        WRITE(IUT6,*)
       3350     3                    *            ' POINT  ',I, ' FOUND IN ELEMENT',IESMPL(I)
       3351     3        m                        J=J+1
       3352     3        s                        LHIST(J)=I
       3353     3        v                    ENDIF
       3354     2        v       2300     CONTINUE
       3355     1               C
       3356     1                         IUTWRN = -1
       3357     1                         CALL HSCOND(IESMPL,LSMPL,XSMPL,YSMPL,ZSMPL,GSMPL,ESMPL,TSMPL,
       3358     1                    *                NSMPL,COMHST,NHST,MRESV,IUTWRN)
       3359     1                         WRITE(IUT6,*) ' DONE!'
       3360     1                     ENDIF
       3361                     C
       3362                     C
       3363                     C
       3364                     C            <<<<< PREPARE FOR BOUNDARY CONDITIONS >>>>>
       3365                     C
       3366                     C
       3367                     C
       3368                           WRITE(IUT6,*) BLANK
       3369                           WRITE(IUT6,*) ' ** PREPARING FOR BOUNDARY CONDITIONS **'
       3370                           CALL LESSFX(LOCAL,NODE,MB,NE,NP,N2,NEX,NS,NSP,N2D,
       3371                          *            XD,YD,ZD,IMODEL,IVOF,
       3372                          *            MPWALL,NPWALL,LPWALL,LEWALL,NEWALL,
       3373                          *            XNWALL,YNWALL,ZNWALL,YP,
       3374                          *            MPINLT,NPINLT,LPINLT,
       3375                          *            NEINLT,LEINLT,XNINLT,YNINLT,ZNINLT,AEINLT,
       3376                          *            NPSYMT,NPSYM2,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
       3377                          *            MPFREE,NPFREE,LPFREE,XPFREE,YPFREE,ZPFREE,
       3378                          *            NEFREE,LEFREE,XNFREE,YNFREE,ZNFREE,AEFREE,
       3379                          *            NPCCL ,LPCCL1,LPCCL2,
       3380                          *            IPART ,MPINT ,NPINT ,LPINT1,LPINT2,LPINT3,
       3381                          *            MDOM  ,NDOM  ,LDOM  ,NBPDOM,MBPDOM,IPSLF,IPSND,
       3382                          *            MPBODY,NPBODY,LPBODY,LEBODY,NEBODY,
       3383                          *            XPBODY,YPBODY,ZPBODY,
       3384                          *            XNBODY,YNBODY,ZNBODY,AEBODY,NODEPS,
       3385                          *            MBESET,NPSETR,NBESET,
       3386                          *            LPSET1,LPSET3,LBESET,AESET,XNESET,YNESET,ZNESET,
       3387                          *            MPHEAT,NPHEAT,LPHEAT,LEHEAT,NEHEAT,
       3388                          *            XPS,YPS,ZPS,LPBTOA,IUT0,IUT6,IERR,RX,RY,
       3389                          *            MWRK,WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
       3390                          *            LWRK01,LEWRK,LWRK02)
       3391                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3392     1                     IF(IERRA.NE.0) THEN
       3393     1                         WRITE(IUT0,*) BLANK
       3394     1                         WRITE(IUT0,*) ERMSGC
       3395     1                         GO TO 9999
       3396     1                     ENDIF
       3397                           WRITE(IUT6,*) ' DONE!'
       3398                     C
       3399                     CC
       3400                           CALL DDCOM1(LPINT1,NPINT,NUMIP,NP,IUT0,IERR)
       3401                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3402     1                     IF(IERRA.NE.0) THEN
       3403     1                         WRITE(IUT0,*) BLANK
       3404     1                         WRITE(IUT0,*) ERMSGC
       3405     1                         GO TO 9999
       3406     1                     ENDIF
       3407                     C
       3408     1                     DO 1800 IP = 1 , NP
       3409     1                         WEIGHP(IP) = 1.E0/(FLOAT(NUMIP(IP))+1.E0)
       3410     1                1800 CONTINUE
       3411                           WRITE(IUT6,*) ' DONE!'
       3412                     C
       3413                     C
       3414                     C
       3415                     C     <<<<< SETTING MOVING BOUNDARY NODE LIST FOR ALE >>>>>
       3416                     C
       3417                     C
       3418                     C
       3419     1                     IF(IALE.GE.1) THEN
       3420     1                        CALL MVBOUN(MB,NP,
       3421     1                    *               NPINLT,NPFREE,NPWALL,NPSYMT,NPCCL,NPBODY,
       3422     1                    *               NPSETR,NPMVB,
       3423     1                    *               LPINLT,LPFREE,LPWALL,LPSYMT,LPCCL1,LPCCL2,LPBODY,
       3424     1                    *               LPSET1,LPMVB,
       3425     1                    *               UMVB,VMVB,WMVB,LWRK01,IUT6,IUT0,IERR)
       3426     1                     ENDIF
       3427                     C
       3428                     C
       3429                     C
       3430                     C            <<<<< INTEGRAL ELEMENT MATRICES >>>>>
       3431                     C
       3432                     C
       3433                     C
       3434                     C     - INITIALIZE -
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 12
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.45, ITR: 27, MVE: 2)
                              <<< Loop-information  End >>>
       3435     1  pp                 DO 2500 IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       3436     2   p    v                DO 2510 J=1,N1
       3437     2   p    v                    SNI  (  J,IE)=0.0E0
       3438     2   p    v                    DNXI (  J,IE)=0.0E0
       3439     2   p    v                    DNYI (  J,IE)=0.0E0
       3440     2   p    v                    DNZI (  J,IE)=0.0E0
       3441     2   p    v                    SN   (  J,IE)=0.0E0
       3442     2   p    v                    DNXYZ(1,J,IE)=0.0E0
       3443     2   p    v                    DNXYZ(2,J,IE)=0.0E0
       3444     2   p    v                    DNXYZ(3,J,IE)=0.0E0
       3445     2   p    v       2510     CONTINUE
       3446     1   p            2500 CONTINUE
       3447                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       3448     1  pp                 DO 2511 IP=1,NP
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DNXYZP, SNP
                              <<< Loop-information  End >>>
       3449     2   p   2v                DO 2512 J=1,MEP
       3450     2   p   2v                   SNP   (J,  IP)=0.0E0
       3451     2   p   2v                   DNXYZP(J,1,IP)=0.0E0
       3452     2   p   2v                   DNXYZP(J,2,IP)=0.0E0
       3453     2   p   2v                   DNXYZP(J,3,IP)=0.0E0
       3454     2   p   2v       2512     CONTINUE
       3455     1   p            2511 CONTINUE
       3456                     
       3457                     C
       3458                           NELM=0
       3459                           NELM=NELM+NSKIP1*NETET
       3460                           NELM=NELM+NSKIP2*NEPRD
       3461                           NELM=NELM+NSKIP3*NEWED
       3462                           NELM=NELM+NSKIP4*NEHEX
       3463                     C
       3464                           WRITE(IUT6,*) BLANK
       3465                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR W0RK-4'
       3466                           SIZE   = (10*FLOAT(NELM))*WORD
       3467                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " WORK-4    :",SIZE
       3468                           SIZEAL = SIZEAL+SIZE
       3469                           ALLOCATE(EAP1(8,MEP,NP))
       3470                           ALLOCATE(EAP2(3,8,MEP,NP))
       3471                           ALLOCATE(EAP3(6,8,MEP,NP))
       3472                           ALLOCATE(EBP(3,8,MEP,NP))
       3473                           ALLOCATE(NODP(8,MEP,NP))
       3474                           ALLOCATE(AP1(8,MEP,NP))
       3475                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP1
                              <<< Loop-information  End >>>
       3476        pp   4v            EAP1 = 0.0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.55, ITR: 48, MVE: 2)
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
       3477        pp   6v            EAP2 = 0.0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    FULL UNROLLING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EAP3
                              <<< Loop-information  End >>>
       3478        pp   8v            EAP3 = 0.0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 4)
                              <<<    FULL UNROLLING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EBP
                              <<< Loop-information  End >>>
       3479        pp   8v            EBP  = 0.0
       3480                     C
       3481                           CALL ERRCHK(IUT6,IPART,10,LERR,IERR)
       3482     1                     IF(IERR.NE.0) THEN
       3483     1                         WRITE(IUT0,*) BLANK
       3484     1                         WRITE(IUT0,*) ERMSGC
       3485     1                         WRITE(IUT0,*) EREXP1
       3486     1                         GO TO 9999
       3487     1                     ENDIF
       3488                           WRITE(IUT6,*) 'DONE'
       3489                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DELTA
                              <<< Loop-information  End >>>
       3490     1  pp   4v            DO 2530 IE = 1, NE
       3491     1   p   4v               DELTA(IE)=0.0E0
       3492     1   p   4v       2530 CONTINUE
       3493                     C
       3494                           WRITE(IUT6,*) BLANK
       3495                           WRITE(IUT6,*) ' ** MAKING NEIBERING LISTS **'
       3496                           IMODE=002
       3497                           CALL NEIBR2(IMODE,NODE,NE,NP,N2,ME,MP,MEP,MPP,MEE,
       3498                          *            IENP,JENP,NEP,IPNP,NPP,IENE,NEE,LIST,NPPMAX,IUT0,IERR)
       3499                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3500     1                     IF (IERRA.NE.0) THEN
       3501     1                         WRITE(IUT0,*) BLANK
       3502     1                         WRITE(IUT0,*) ERMSGC
       3503     1                         GOTO 9999
       3504     1                     ENDIF
       3505                           WRITE(IUT6,*) ' DONE! '
       3506                     C
       3507                           WRITE(IUT6,*) BLANK
       3508                           WRITE(IUT6,*) ' ** INTEGRATING ELEMENT MATRICES **'
       3509                           MELM=NELM+1
       3510                           CALL ELM3DX(MGAUSS,IGAUSH,IGAUSW,IGAUSP,IGAUST,
       3511                          *            MELM,ME,N1,N2,NE,NP,NEX,XD,YD,ZD,NODE,
       3512                          *            SNI ,DNXI,DNYI,DNZI,SN,RX,RY,WRKN,DELTA,
       3513                          *            EAP1,EAP2,EAP3,EBP,MEP,MP,IENP,JENP,NEP,
       3514                          *            DWRK01,DWRK02,DWRK03,DWRK04,DWRK05,IUT0,IERR)
       3515                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3516     1                     IF(IERRA.NE.0) THEN
       3517     1                         WRITE(IUT0,*) BLANK
       3518     1                         WRITE(IUT0,*) ERMSGC
       3519     1                         GO TO 9999
       3520     1                     ENDIF
       3521     1                     IF (IALE.EQ.0) THEN
       3522     1                        DEALLOCATE(DWRK01)
       3523     1                        DEALLOCATE(DWRK02)
       3524     1                        DEALLOCATE(DWRK03)
       3525     1                        DEALLOCATE(DWRK04)
       3526     1                        DEALLOCATE(DWRK05)
       3527     1                     ENDIF
       3528                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 17
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.85, ITR: 36, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRKN
                              <<< Loop-information  End >>>
       3529     1  pp                 DO 2540 IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       3530     2   p    v               DO 2545 J=1,N1
       3531     2   p    v                  DNXYZ(1,J,IE)=RX(J,IE)
       3532     2   p    v                  DNXYZ(2,J,IE)=RY(J,IE)
       3533     2   p    v                  DNXYZ(3,J,IE)=WRKN(J+N1*(IE-1))
       3534     2   p    v       2545    CONTINUE
       3535     1   p            2540 CONTINUE
       3536                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      JENP, IENP, DNXYZP, SNP
                              <<< Loop-information  End >>>
       3537     1  pp                 DO 2546 IP=1,NP
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.88, ITR: 144, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DNXYZP, JENP, IENP, SNP
                              <<< Loop-information  End >>>
       3538     2   p    v               DO 2547 I=1,NEP(IP)
       3539     2   p    v                  IE=IENP(I,IP)
       3540     2   p    v                  J =JENP(I,IP)
       3541     2   p    v                  SNP   (I,  IP)=SN   (  J,IE)
       3542     2   p    v                  DNXYZP(I,1,IP)=DNXYZ(1,J,IE)
       3543     2   p    v                  DNXYZP(I,2,IP)=DNXYZ(2,J,IE)
       3544     2   p    v                  DNXYZP(I,3,IP)=DNXYZ(3,J,IE)
       3545     2   p    v       2547    CONTINUE
       3546     1   p            2546 CONTINUE
       3547                     C
       3548     1                     IF(ITIME.EQ.0)  THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODP
                              <<< Loop-information  End >>>
       3549     1  pp   4v              NODP=NP+1
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       3550     2  pp                   DO IP=1,NP
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      JENP, IENP
                              <<< Loop-information  End >>>
       3551     3   p                     DO I=1,NEP(IP)
       3552     3   p                       I1 = IENP(I,IP)
       3553     3   p                       I2 = JENP(I,IP)
       3554     4   p                       IF(NODE(I2,I1) .NE. 0) THEN
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       3555     5   p    v                    DO KT=1,8
       3556     6   p    v                      IF(NODE(KT,I1) .NE. 0) THEN
       3557     6   p    v                        NODP(KT,I,IP)=NODE(KT,I1)
       3558     6   p    v                      END IF
       3559     5   p    v                    END DO
       3560     4   p                       END IF
       3561     3   p                     END DO
       3562     2   p                   END DO
       3563     1                     END IF
       3564                     C
       3565                     C
       3566                           WRITE(IUT6,*) 'DONE'
       3567                     C
       3568                     C
       3569                     C
       3570                     C            <<<<< INTEGRAL ELEMENT VECTORS NEEDED >>>>>
       3571                     C
       3572                     C
       3573                     C
       3574                           WRITE(IUT6,*) BLANK
       3575                           WRITE(IUT6,*) ' ** INTEGRATING ELEMENT VECTORS ON BODY **'
       3576                           CALL ELM3BX
       3577                          *   ( N1,N2,NP,XD,YD,ZD,NODE,NE,NEX,NSTET,NSPRD,NSWED,NSHEX,
       3578                          *     LEBODY,NEBODY,SBODY,DXBODY,DYBODY,DZBODY,IERR)
       3579                     C
       3580                           WRITE(IUT6,*) ' DONE!'
       3581                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3582     1                     IF(IERRA.NE.0) THEN
       3583     1                         WRITE(IUT0,*) BLANK
       3584     1                         WRITE(IUT0,*) ERMSGC
       3585     1                         GO TO 9999
       3586     1                     ENDIF
       3587                           WRITE(IUT6,*) 'DONE'
       3588                           WRITE(IUT6,*) BLANK
       3589                     C
       3590                           WRITE(IUT6,*) ' ** INTEGRATING ELEMENT VECTORS ON O.S. **'
       3591                           CALL ELM3BX
       3592                          *   ( N1,N2,NP,XD,YD,ZD,NODE,NE,NEX,NSTET,NSPRD,NSWED,NSHEX,
       3593                          *     LBESET,NBESET,SNESET,WRK01,WRK02,WRK03,IERR)
       3594                     C
       3595                           WRITE(IUT6,*) ' DONE!'
       3596                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3597     1                     IF(IERRA.NE.0) THEN
       3598     1                         WRITE(IUT0,*) BLANK
       3599     1                         WRITE(IUT0,*) ERMSGC
       3600     1                         GO TO 9999
       3601     1                     ENDIF
       3602                           WRITE(IUT6,*) 'DONE'
       3603                     C
       3604                           WRITE(IUT6,*) BLANK
       3605                           WRITE(IUT6,*) ' ** INTEGRATING ELEMENT VECTORS ON HEAT SURF **'
       3606                           CALL ELM3BX
       3607                          *   ( N1,N2,NP,XD,YD,ZD,NODE,NE,NEX,NSTET,NSPRD,NSWED,NSHEX,
       3608                          *     LEHEAT,NEHEAT,SHEAT,RX,RX,RX,IERR)
       3609                           WRITE(IUT6,*) ' DONE!'
       3610                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       3611     1                     IF(IERRA.NE.0) THEN
       3612     1                         WRITE(IUT0,*) BLANK
       3613     1                         WRITE(IUT0,*) ERMSGC
       3614     1                         GO TO 9999
       3615     1                     ENDIF
       3616                           WRITE(IUT6,*) 'DONE'
       3617                     C
       3618                     C
       3619                     C
       3620                     C            <<<<< COMPUTE ELEMENT FILTER WIDTH >>>>>
       3621                     C
       3622                     C
       3623                     C
       3624     1                     IF(IFILTR.EQ.3) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DELTA, FILTER
                              <<< Loop-information  End >>>
       3625     2  pp   2v                DO 2600 IE = 1, NE
       3626     2   p   2v                    FILTER(IE) = DELTA(IE)
       3627     2   p   2v       2600     CONTINUE
       3628     1                     ELSE
       3629     1                         WRITE(IUT6,*) BLANK
       3630     1                         WRITE(IUT6,*) ' ** COMPUTING ELEMENT FILTER WIDTH **'
       3631     1                         CALL FLT3DX(IFILTR,X,Y,Z,NODE,NE,NP,N2,NEX,FILTER)
       3632     1                     END IF
       3633                     C
       3634                     C
       3635                     C            <<<<< LUMP MASS MATRIX >>>>>
       3636                     C
       3637                           WRITE(IUT6,*) BLANK
       3638                           WRITE(IUT6,*) ' ** LUMPING MASS MATRIX **'
       3639                           CALL LUMPEX(N2,NE,NP,NEX,NELM,EAP1,IENP,NEP,MEP,MP,CM)
       3640                           IDUM=2
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 942
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 192, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK02, WRK01, CM
                              <<< Loop-information  End >>>
       3641     1  pp   2v            DO IP=1,NP
       3642     1   p   2v                WRK01(IP)=CM(IP)
       3643     1   p   2v                WRK02(IP)=CM(IP)
       3644     1   p   2v            ENDDO
       3645                     C
       3646                           IDUM=1
       3647                           CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       3648                          *            CM,CM,CM,NP,IUT0,IERR,RX,RY,MAXBUF)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 762
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 544, MVE: 9)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CM
                              <<< Loop-information  End >>>
       3649     1  pp   2v            DO 2700 IP=1,NP
       3650     1   p   2v                CM(IP)=1.0E0/CM(IP)
       3651     1   p   2v       2700 CONTINUE
       3652                           WRITE(IUT6,*) ' DONE!'
       3653                     C
       3654     1                     IF(IINTRP.EQ.1.OR.(JPRESS.EQ.2.AND.ISTART.EQ.1)) THEN
       3655     1                         WRITE(IUT6,*) BLANK
       3656     1                         WRITE(IUT6,*) ' ** INTERPOLATING PRESSURE TO NODES **'
       3657     1                         CALL NODLEX(NODE,ME,MP,NE,NP,N1,N2,NEX,SN,
       3658     1                    *                IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       3659     1                    *                P,PN,CM,IUT0,IERR,RX,RY,MAXBUF)
       3660     2                         IF(IERRA.NE.0) THEN
       3661     2                             WRITE(IUT0,*) BLANK
       3662     2                             WRITE(IUT0,*) ERMSGC
       3663     2                             GO TO 9999
       3664     2                         ENDIF
       3665     1                         WRITE(IUT6,*) ' DONE!'
       3666     1                     ENDIF
       3667                     C
       3668                     C
       3669                     C            <<<<< SEARCH NEAREST WALL SURFACE FOR ALL ELEMENTS >>>>>
       3670                     C
       3671                     C
       3672                     C
       3673     1                     IF(IMODEL.EQ.1 .AND. NEWALL.GE.1) THEN
       3674     1                         WRITE(IUT6,*) BLANK
       3675     1                         WRITE(IUT6,*) ' ** SEARCH NEAREST WALL SURFACE **'
       3676     1                         IF(IPART.GE.1)
       3677     1                    *    WRITE(IUT6,*) '    WARNING!: MAY BE MISSING',
       3678     1                    *                  ' THE NEAREST WALL'
       3679     1                            CALL NERWLX(X,Y,Z,NODE,NE,NP,N2,NEX,NS,NSP,
       3680     1                    *                   LOCAL,LEWALL,NEWALL,NEAR,DSNEAR,
       3681     1                    *                   WRK01,WRK02,WRK03)
       3682     2                             IF(IERRA.NE.0) THEN
       3683     2                                 WRITE(IUT0,*) BLANK
       3684     2                                 WRITE(IUT0,*) ERMSGC
       3685     2                                 GO TO 9999
       3686     2                             ENDIF
       3687     1                         WRITE(IUT6,*) ' DONE!'
       3688     1                     ENDIF
       3689                     C
       3690                     C
       3691                     C
       3692                     C            <<<<< PREPARE FFO CAL.  >>>>>
       3693                     C
       3694                     C
       3695     1                     IF(NFFO.NE.0) THEN
       3696     1                         WRITE(IUT6,*) BLANK
       3697     1                         WRITE(IUT6,*) ' ** PREPARING FFO CAL. **'
       3698     1                         CALL SETFFO(IPART,N2,NE,NP,NEX,NS,NSP,N2D,LOCAL,NODE,
       3699     1                    *                NEFFO,LEFFO1,LEFFO2,
       3700     1                    *                NPFFO,LPFFO1,LPFFO2,
       3701     1                    *                NFFO,MEFFOI,NDGCOE,NEFFOI,LEFFOI,
       3702     1                    *                XD,YD,ZD,DELTA,FFOVOL,FFOAIN,FFODIM,FFODIR,
       3703     1                    *                AXFFOI,AYFFOI,AZFFOI,
       3704     1                    *                LWRK01,LWRK02,LWRK03,WRK01,IUT6,IUT0,IERR)
       3705     2                             IF(IERRA.NE.0) THEN
       3706     2                                 WRITE(IUT0,*) BLANK
       3707     2                                 WRITE(IUT0,*) ERMSGC
       3708     2                                 GO TO 9999
       3709     2                             ENDIF
       3710     1                         WRITE(IUT6,*) ' DONE! '
       3711     1                     ENDIF
       3712                     C
       3713                     C
       3714                     C
       3715                     C            <<<<< OPEN FIELD SAMPLING FILE >>>>>
       3716                     C
       3717                     C
       3718                     C
       3719     1                     IF(INTFSV.LE.NTIME) THEN
       3720     1                         WRITE(IUT6,*) BLANK
       3721     1                         WRITE(IUT6,*) ' ** OPENING FIELD SAMPLING FILE **'
       3722     1               C
       3723     1                         COMFLE(1) = COMGEN
       3724     1                         WRITE(COMFLE(2),*)' FIELD SAMPLING DATA'
       3725     1                         WRITE(COMFLE(3),9600)
       3726     1                    *      TIMEP*(D000/U000),
       3727     1                    *     (TIMEP+DT*NTIME)*(D000/U000)
       3728     1                         WRITE(COMFLE(4),9700) NTIMEP, NTIMEP  +NTIME
       3729     1               C
       3730     1                         IACT     = 4
       3731     1                         CALL GFALL(IUT0,IUT6,IUTFS,FILEFS,
       3732     1                    *               MCOM,4,COMFLE,
       3733     1                    *               MCOM,0,COMSET,
       3734     1                    *               IACT,IWRITE,INAME,IRESV,
       3735     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       3736     1                    *               ' !',ICHECK)
       3737     2                         IF (IALE.GE.1) THEN
       3738     2                            CALL GFALL(IUT0,IUT6,IUTMR,FILEDM,
       3739     2                    *                  MCOM,4,COMFLE,
       3740     2                    *                  MCOM,0,COMSET,
       3741     2                    *                  IACT,IWRITE,INAME,IRESV,
       3742     2                    *                  ICAST,IDATA0,IALL,ISKIP,IERR,
       3743     2                    *                  ' !',ICHECK)
       3744     2                         ENDIF
       3745     1                         WRITE(IUT6,*) ' DONE! '
       3746     1                     ENDIF
       3747                     C
       3748                     C
       3749                     C
       3750                     C            <<<<< OPEN OVERSET CONDITIONS DATA FILE >>>>>
       3751                     C
       3752                     C
       3753                     C
       3754     1                     IF(JSET.GE.1.AND.JSETOS.EQ.0) THEN
       3755     1                         WRITE(IUT6,*) BLANK
       3756     1                         WRITE(IUT6,*) ' ** OPENING OVERSET DATA FILE (OUTPUT)**'
       3757     1                         IACT     = 3
       3758     1                         CALL GFALL(IUT0,IUT6,IUTOS,FILEOS,
       3759     1                    *               MCOM,NCOMFL,COMFLE,
       3760     1                    *               MCOM,NCOMST,COMSET,
       3761     1                    *               IACT,IWRITE,INAME,IRESV,
       3762     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       3763     1                    *               ' !',ICHECK)
       3764     2                         IF(IERR.NE.0) THEN
       3765     2                             WRITE(IUT0,*) BLANK
       3766     2                             WRITE(IUT0,*) ERMSGC
       3767     2                             GO TO 9999
       3768     2                         ENDIF
       3769     1               C
       3770     1                         WRITE(IUT6,*) ' DONE! '
       3771     1               C
       3772     1                     ELSE IF(JWRTOS.EQ.1) THEN
       3773     1                         WRITE(IUT6,*) BLANK
       3774     1                         WRITE(IUT6,*) ' ** OPENING OVERSET DATA FILE (OUTPUT)**'
       3775     1                         IACT     = 4
       3776     1                         CALL GFALL(IUT0,IUT6,IUTOS,FILEOS,
       3777     1                    *               MCOM,NCOMFL,COMFLE,
       3778     1                    *               MCOM,NCOMST,COMSET,
       3779     1                    *               IACT,IWRITE,INAME,IRESV,
       3780     1                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       3781     1                    *               ' !',ICHECK)
       3782     2                         IF(IERR.NE.0) THEN
       3783     2                             WRITE(IUT0,*) BLANK
       3784     2                             WRITE(IUT0,*) ERMSGC
       3785     2                             GO TO 9999
       3786     2                         ENDIF
       3787     1               C
       3788     1                         WRITE(IUT6,*) ' DONE! '
       3789     1                     ENDIF
       3790                     C
       3791                     C
       3792                     C
       3793                     C            <<<<< OPEN SURFACE SAMPLING FILE >>>>>
       3794                     C
       3795                     C
       3796                     C
       3797     1                     IF(NEBODY.GE.1 .AND. INTPSV.LE.NTIME) THEN
       3798     1                         WRITE(IUT6,*) BLANK
       3799     1                         WRITE(IUT6,*) ' ** OPENING SURFACE SAMPLING FILE **'
       3800     1               C
       3801     1                         COMFLE(1) = COMGEN
       3802     1                         WRITE(COMFLE(2),*)' SURFACE SAMPLING DATA'
       3803     1                         WRITE(COMFLE(3),9600)
       3804     1                    *      TIMEP*(D000/U000),
       3805     1                    *     (TIMEP+DT*NTIME)*(D000/U000)
       3806     1                         WRITE(COMFLE(4),9700) NTIMEP, NTIMEP  +NTIME
       3807     1               C
       3808     2                         IF(JSPADV.EQ.0)THEN
       3809     2                             IACT     = 4
       3810     2                             ITARGT   = 1
       3811     2                             CALL GFALL(IUT0,IUT6,IUTPS,FILEPS,
       3812     2                    *                   MCOM,4,COMFLE,
       3813     2                    *                   MCOM,0,COMSET,
       3814     2                    *                   IACT,IWRITE,INAME,IRESV,
       3815     2                    *                   ICAST,IDATA0,IALL,ISKIP,IERR,
       3816     2                    *                   ' !',ICHECK)
       3817     2               C
       3818     2                             TIME  = 0.E0
       3819     2                             ISTEP = 0
       3820     2                             WRITE(COMSET(1),*) '      TIME:', TIME
       3821     2                             WRITE(COMSET(2),*) '      STEP:', ISTEP
       3822     2                             IACT     = 6
       3823     2                             ITARGT   = 1
       3824     2                             CALL GFALL(IUT0,IUT6,IUTPS,FILEPS,
       3825     2                    *                   MCOM,4,COMFLE,
       3826     2                    *                   MCOM,0,COMSET,
       3827     2                    *                   IACT,IWRITE,INAME,IRESV,
       3828     2                    *                   ICAST,IDATA0,IALL,ISKIP,IERR,
       3829     2                    *                   '*TIME_PS *STEP_PS *GRID_3D *NODE_2D !',
       3830     2                    *                    NAME,TIME,
       3831     2                    *                    NAME,ISTEP,
       3832     2                    *                    NAME,MPBODY,NPBODY,XPS,YPS,ZPS,
       3833     2                    *                    NAME,MPBODY,N2D,NEBODY,N2D,NODEPS,
       3834     2                    *                   ICHECK)
       3835     2               C
       3836     2                             WRITE(IUT6,*) ' DONE! '
       3837     2                         ELSE
       3838     2                             OPEN(IUTPS,FILE=FILEPS,FORM='FORMATTED')
       3839     2                             WRITE(IUTPS,*) 'NPBODY',NPBODY
       3840     2                             WRITE(IUTPS,'(10I13)') (LPBODY(IBP),IBP=1,NPBODY)
       3841     2                         ENDIF
       3842     1                     ENDIF
       3843                     C
       3844                           NCRS=0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
       3845     1  pp    v            DO IP=1,NP
       3846     1   p    v            NCRS=NCRS+NPP(IP)
       3847     1   p    v            ENDDO
       3848                     C
       3849                           NCRS2=0
       3850     1                     IF (JUNROL.EQ.1) THEN
       3851     2                        IF (                 NPPMAX.LE.27) THEN
       3852     2                           NPPMAX=27
       3853     2                        ELSE IF (NPPMAX.GT.27.AND.NPPMAX.LE.40) THEN
       3854     2                           NPPMAX=40
       3855     2                        ELSE IF (NPPMAX.GT.40.AND.NPPMAX.LE.50) THEN
       3856     2                           NPPMAX=50
       3857     2                        ELSE
       3858     2                           NPPMAX=0
       3859     2                           JUNROL=0
       3860     2                        ENDIF
       3861     1                        NCRS2=NP*NPPMAX
       3862     1                     ENDIF
       3863                     C
       3864                           WRITE(IUT6,*) BLANK
       3865                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR W0RK-5'
       3866                           SIZE   = (4*FLOAT(NCRS))*WORD
       3867                           SIZEAL = SIZEAL+SIZE
       3868                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " WORK-5    :",SIZE
       3869                           ALLOCATE( IPCRS(NCRS),STAT=LERR(01))
       3870                           ALLOCATE(  ACRS(NCRS),STAT=LERR(02))
       3871     1                     IF(IMODEL.EQ.2 .OR. JPRESS.EQ.1) THEN
       3872     1                     ALLOCATE(ATESPC(NCRS),STAT=LERR(03))
       3873     1                     ALLOCATE(AAVEPC(NCRS),STAT=LERR(04))
       3874     1                     ELSE
       3875     1                     LERR(3)=0
       3876     1                     LERR(4)=0
       3877     1                     ENDIF
       3878     1                     IF(IALE.NE.0) THEN
       3879     1                     ALLOCATE( ACRS2(9*NCRS),STAT=LERR(05))
       3880     1                     ELSE
       3881     1                     LERR(05)=0
       3882     1                     ENDIF
       3883                           ALLOCATE( TACRS(NCRS2),STAT=LERR(06))
       3884                           ALLOCATE(ITPCRS(NCRS2),STAT=LERR(07))
       3885                           ALLOCATE(LSTCLR(NCRS ),STAT=LERR(08))
       3886                           ALLOCATE(LSTDGN(NCRS ),STAT=LERR(09))
       3887                           CALL ERRCHK(IUT6,IPART,09,LERR,IERR)
       3888     1                     IF(IERR.NE.0) THEN
       3889     1                         WRITE(IUT0,*) BLANK
       3890     1                         WRITE(IUT0,*) ERMSGC
       3891     1                         WRITE(IUT0,*) EREXP1
       3892     1                         GO TO 9999
       3893     1                     ENDIF
       3894                           WRITE(IUT6,*) 'DONE'
       3895                     C
       3896                           WRITE(IUT6,*) BLANK
       3897                           WRITE(IUT6,'(A12,F8.2," MB ALLOCATED")') " TOTAL    :",SIZEAL
       3898                     C
       3899                           WRITE(IUT6,*) BLANK
       3900                           WRITE(IUT6,*) ' ** MAKING CRS FORMAT **'
       3901                           CALL MKCRS(NP,MPP,NCRS,NPP,IPNP,NPP2,IPCRS,IERR)
       3902                     C
       3903                           IF(JUNROL.EQ.1)
       3904                          *CALL CRSCVI(NP,NPPMAX,NCRS,NCRS2,NPP,IPCRS,ITPCRS)
       3905                           WRITE(IUT6,*) ' NUMBER OF NON-ZEROS IN CRS FORMAT; NCRS =',NCRS
       3906     1                     IF (IERR.NE.0) THEN
       3907     1                         WRITE(IUT0,*) BLANK
       3908     1                         WRITE(IUT0,*) ERMSGB
       3909     1                         WRITE(IUT0,*) EREXP7,NCRS
       3910     1                         GOTO 9999
       3911     1                     ENDIF
       3912     1                     IF (NCRS-NPP2(NP) .NE. NPP(NP)) THEN
       3913     1                         WRITE(IUT0,*) BLANK
       3914     1                         WRITE(IUT0,*) ERMSGC
       3915     1                         GOTO 9999
       3916     1                     ENDIF
       3917                     C
       3918                           WRITE(IUT6,*) BLANK
       3919                           WRITE(IUT6,*) ' ** MAKING CRS LIST **'
       3920                           CALL E2PLST(MEP,MPP,N2,N1,NP,NE,NEX,
       3921                          *            NODE,NEP,IENP,JENP,NPP,NPP2,IPNP,
       3922                          *            LTAB,IUT0,IERR)
       3923     1                     IF (IERR.NE.0) THEN
       3924     1                         WRITE(IUT0,*) BLANK
       3925     1                         WRITE(IUT0,*) ERMSGC
       3926     1                         GOTO 9999
       3927     1                         ENDIF
       3928                           WRITE(IUT6,*) ' DONE! '
       3929                     C
       3930     1                     IF(IMODEL.EQ.2 .OR. JPRESS.EQ.1) THEN
       3931     1                     WRITE(IUT6,*) BLANK
       3932     1                     WRITE(IUT6,*) ' ** CAL. L.H.S. FOR PRS. EQ. AND DSM **'
       3933     1                     CALL CALLHS(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       3934     1                    *            ME,NE,NP,NEX,N1,N2,NODE,
       3935     1                    *            APRS,APRS0,ATEST0,AAVER0,
       3936     1                    *            NCRS,ATESPC,AAVEPC,LTAB,
       3937     1                    *            FILTER,GAMDYN,NAVDYN,NELM,
       3938     1                    *            EAP1,EAP3,IENP,JENP,NEP,MEP,MP,
       3939     1                    *            IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       3940     1                    *            NPFREE,LPFREE,NPSLD2,LPSLD2,LWRK01,
       3941     1                    *            RX,RY,LWRK02,IUT0,IERR)
       3942     2                     IF (IERR.NE.0) THEN
       3943     2                         WRITE(IUT0,*) BLANK
       3944     2                         WRITE(IUT0,*) ERMSGC
       3945     2                         WRITE(IUT0,*) "IERR=",IERR
       3946     2                         GOTO 9999
       3947     2                         ENDIF
       3948     1                     WRITE(IUT6,*) ' DONE! '
       3949     1                     ENDIF
       3950                     C
       3951                     #ifdef RCAPCPL
       3952                     C
       3953                           IF (IALE.EQ.1) THEN
       3954                              ALLOCATE( XO (MP), STAT=LERR(01))
       3955                              ALLOCATE( YO (MP), STAT=LERR(02))
       3956                              ALLOCATE( ZO (MP), STAT=LERR(03))
       3957                              ALLOCATE( UO (MP), STAT=LERR(04))
       3958                              ALLOCATE( VO (MP), STAT=LERR(05))
       3959                              ALLOCATE( WO (MP), STAT=LERR(06))
       3960                              ALLOCATE( PNO(MP), STAT=LERR(07))
       3961                              ALLOCATE( PO (ME), STAT=LERR(08))
       3962                              CALL ERRCHK(IUT6,IPART,8,LERR,IERR)
       3963                              IF(IERR.NE.0) THEN
       3964                                 WRITE(IUT0,*) BLANK
       3965                                 WRITE(IUT0,*) ERMSGC
       3966                                 WRITE(IUT0,*) EREXP1
       3967                                 GO TO 9999
       3968                              ENDIF
       3969                           ENDIF
       3970                     C
       3971                           ALLOCATE(BFCPL(3*MB),STAT=LERR(01))
       3972                           ALLOCATE(LPCPL(MB) ,STAT=LERR(02))
       3973                           ALLOCATE(XPCPL(MB) ,STAT=LERR(03))
       3974                           ALLOCATE(YPCPL(MB) ,STAT=LERR(04))
       3975                           ALLOCATE(ZPCPL(MB) ,STAT=LERR(05))
       3976                           CALL ERRCHK(IUT6,IPART,5,LERR,IERR)
       3977                           IF(IERR.NE.0) THEN
       3978                               WRITE(IUT0,*) BLANK
       3979                               WRITE(IUT0,*) ERMSGC
       3980                               WRITE(IUT0,*) EREXP1
       3981                               GO TO 9999
       3982                           ENDIF
       3983                     C
       3984                           NUM_NODES = 0
       3985                           PORTFILE = 'port'//CHAR(0)
       3986                           WRITE(IUT6,*) '    '
       3987                           WRITE(IUT6,*) ' REVOCAP:RCAPF_INIT_FLUID_SOLVER'
       3988                           CALL RCAPF_INIT_FLUID_SOLVER(IPART-1, PORTFILE)
       3989                           WRITE(IUT6,*) ' DONE! '
       3990                     C
       3991                     C  *** REVOCAP COUPLER: OBTAIN NUMBER OF NODES  ***
       3992                     C
       3993                           WRITE(IUT6,*) '    '
       3994                           WRITE(IUT6,*) ' REVOCAP:RCAPF_GET_NUM_OF_MATCHING_NODE'
       3995                           CALL RCAPF_GET_NUM_OF_MATCHING_NODE(NPCPL)
       3996                           NDOF = NPCPL * 3
       3997                           WRITE(IUT6,*) ' DONE! '
       3998                           IF(NPCPL.GT.MB) THEN
       3999                               WRITE(IUT0,*) BLANK
       4000                               WRITE(IUT0,*) ERMSGC
       4001                               GOTO 9999
       4002                           ENDIF
       4003                     C
       4004                     C  *** REVOCAP COUPLER: OBTAIN NODE LIST         ***
       4005                           WRITE(IUT6,*) '    '
       4006                           WRITE(IUT6,*) ' REVOCAP:RCAPF_GET_MATCHING_NODE_ID'
       4007                           CALL RCAPF_GET_MATCHING_NODE_ID(LPCPL,NPCPL)
       4008                           WRITE(IUT6,*) ' DONE! '
       4009                     C
       4010                           WRITE(IUT6,*) '    '
       4011                           WRITE(IUT6,*) ' CALCULATING NORMAL VEC. OF CPL. SURFACES'
       4012                           CALL SRFNVX(IPART,NE,NP,N2,NEX,NS,NSP,N2D,
       4013                          *            LOCAL,NODE,XD,YD,ZD,
       4014                          *            MWRK,NPCPL,LPCPL,LEWRK,
       4015                          *            MDOM,NDOM,LDOM,NBPDOM,MBPDOM,IPSLF,IPSND,
       4016                          *            XPCPL,YPCPL,ZPCPL,
       4017                          *            LWRK01,WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
       4018                          *            RX,RY,IUT6,IUT0,IERR)
       4019                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4020                           IF(IERRA.NE.0) THEN
       4021                               WRITE(IUT0,*) BLANK
       4022                               WRITE(IUT0,*) ERMSGC
       4023                               GO TO 9999
       4024                           ENDIF
       4025                           WRITE(IUT6,*) ' DONE! '
       4026                     C
       4027                     #endif
       4028                     C
       4029                     C
       4030     1                     IF(ISOLID.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 762
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK02, LWRK01, WRK02, WRK01
                              <<< Loop-information  End >>>
       4031     2  pp   2v                DO 1330 IP=1,NP
       4032     2   p   2v                    WRK01(IP)=0.0E0
       4033     2   p   2v                    WRK02(IP)=0.0E0
       4034     2   p   2v                    LWRK01(IP)=0
       4035     2   p   2v                    LWRK02(IP)=0
       4036     2   p   2v       1330     CONTINUE
       4037     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEMEDA
                              <<< Loop-information  End >>>
       4038     2                         DO 1340 IE=1,NE
       4039     2                             IF(IEMEDA(IE).EQ.0) GOTO 1340
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
       4040     3       f                     DO 1350 I=1,N2
       4041     3       f                         IP=NODE(I,IE)
       4042     3       f                         IF(IP.EQ.0) GOTO 1340
       4043     3       f                         WRK01(IP)=1.0E0
       4044     3       f        1350         CONTINUE
       4045     2                1340     CONTINUE
       4046     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEMEDA
                              <<< Loop-information  End >>>
       4047     2                         DO 1360 IE=1,NE
       4048     2                         IF(IEMEDA(IE).EQ.1) GOTO 1360
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
       4049     3       f                     DO 1370 I=1,N2
       4050     3       f                         IP=NODE(I,IE)
       4051     3       f                         IF(IP.EQ.0) GOTO 1360
       4052     3       f                         WRK02(IP)=1.0E0
       4053     3       f        1370         CONTINUE
       4054     2                1360     CONTINUE
       4055     1               C
       4056     1                     IDUM=2
       4057     1                     CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4058     1                    *            WRK01,WRK02,WRK02,NP,IUT0,IERR,RX,RY,MAXBUF)
       4059     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 762
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.62, ITR: 128, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK01, LWRK02, WRK02, LWRK01
                              <<< Loop-information  End >>>
       4060     2  pp   2v                DO 1380 IP=1,NP
       4061     2   p   2v                    IF(WRK01(IP).GE.1.0E0) LWRK01(IP)=1
       4062     2   p   2v                    IF(WRK02(IP).GE.1.0E0) LWRK02(IP)=1
       4063     2   p   2v       1380     CONTINUE
       4064     1               C
       4065     1                         NPSLD1=0
       4066     1                         NPSLD2=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK01
                              <<< Loop-information  End >>>
       4067     2       2s                DO 1390 IP=1,NP
       4068     3       2v                    IF(LWRK01(IP).EQ.1)THEN
       4069     3       2m                        NPSLD1=NPSLD1+1
       4070     3       2s                        LPSLD1(NPSLD1)=IP
       4071     3       2v                    ENDIF
       4072     3       2v                    IF(LWRK01(IP).EQ.1.AND.LWRK02(IP).EQ.0)THEN
       4073     3       2m                        NPSLD2=NPSLD2+1
       4074     3       2s                        LPSLD2(NPSLD2)=IP
       4075     3       2v                    ENDIF
       4076     2       2v       1390     CONTINUE
       4077     1                     ENDIF
       4078                           IF (NTIME.EQ.0) GOTO 5100
       4079                     C
       4080                     CCTT  INITIAL OPERATIONS FOR RANS
       4081                     C
       4082                           MLST = 2
       4083                     C
       4084                           WRITE(IUT6,*) BLANK
       4085                           WRITE(IUT6,*) ' ** SEARCHING WALL ADJACENT ELEMENTS **'
       4086                     C
       4087                           CALL ELWLAD(ME,NE,NP,N2,NEX,NS,NSP,N2D,
       4088                          *            LOCAL,NODE,MPWLAD,LPWALL,NPWALL,
       4089                          *            LEWLAD,NEWLAD,
       4090                          *            LWRK01,
       4091                          *            IUT0,IUT6,IERR)
       4092                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4093     1                     IF(IERRA.NE.0) THEN
       4094     1                         WRITE(IUT0,*) BLANK
       4095     1                         WRITE(IUT0,*) ERMSGC
       4096     1                         GO TO 9999
       4097     1                     ENDIF
       4098                     C
       4099                           WRITE(IUT6,*) ' DONE! '
       4100                           WRITE(IUT6,*) ' WALL-ADJACENT ELEMENTS: ', NEWLAD
       4101                     C
       4102                           WRITE(IUT6,*) BLANK
       4103                           WRITE(IUT6,*) ' ** SEARCHING WALL ADJACENT NODES **'
       4104                     C
       4105                           IFNDNW=0
       4106                           CALL FINDNW(IFNDNW,MLST,ME,NE,NP,N2,NEX,NS,NSP,N2D,
       4107                          *            X,Y,Z,MPWLAD,
       4108                          *            LPWALL,NPWALL,
       4109                          *            LEWALL,NEWALL,XNWALL,YNWALL,ZNWALL,
       4110                          *            LEWLAD,NEWLAD,LPWLAE,LPWLAD,NPWLAD,
       4111                          *            DPWLAD,
       4112                          *            LOCAL,NODE,
       4113                          *            LWRK01,LWRK02,
       4114                          *            IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,
       4115                          *            MBPDOM,WRK01,RX,RY,MAXBUF,
       4116                          *            IUT0,IUT6,IERR)
       4117                     C
       4118                           WRITE(IUT6,*) ' DONE! '
       4119                           WRITE(IUT6,*) ' WALL-ADJACENT NODES: ', NPWLAD
       4120                     C
       4121                           WRITE(IUT6,*) BLANK
       4122                           WRITE(IUT6,*) ' ** CALCULATING INITIAL ELEMENT VALUES **'
       4123                     C
       4124                           CALL ICALEL(N2,NE,NP,NEX,NODE,
       4125                          *            U,V,W,UE,VE,WE)
       4126                     C
       4127                           WRITE(IUT6,*) BLANK
       4128                           NMAXK = NMAXT
       4129                           NMAXEP = NMAXT
       4130                           EPSREV=EPST
       4131                           EPSREP=EPSP
       4132                           EPSREQ=EPSQ
       4133                     C
       4134                     C
       4135                     C
       4136                     C     <<<<< PREPARE DATAS FOR VOF >>>>>
       4137                     C
       4138                     C
       4139                     C
       4140     1                     IF (IVOF.GE.1) THEN
       4141     1               C
       4142     1               CC
       4143     1               CCHY [*] COUNT MAXMUM NUMBER OF INTER-CONNECT BOUNDARY FACE
       4144     1               CC
       4145     1                        CALL SIZF01(IPART,NE,NP,N2,NSP,NS,NODE,LOCAL,
       4146     1                    *               MDOM,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,
       4147     1                    *               MBFDOM,LWRK01,IUT6,IUT0,IERR)
       4148     1                        CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4149     1                        IF(IERRA.NE.0) GOTO 9999
       4150     1                        WRITE(IUT6,*)
       4151     1                    *   'MAXMUM NUMBER OF INTER-CONNECT BOUNDARY FACE : ',MBFDOM
       4152     1               C
       4153     1                        MFACE= NE*6
       4154     1                        MBF  = MFACE
       4155     1                        NDUM = ME
       4156     1                     ELSE
       4157     1                        NDUM = 0
       4158     1                     ENDIF
       4159                     C
       4160                           WRITE(IUT6,*) BLANK
       4161                           WRITE(IUT6,*) 'ALLOCATING VARIABLE FOR VOF'
       4162                           ALLOCATE(LEFACE(6,NDUM),     STAT=LERR(01))
       4163                           ALLOCATE(LFACE (5,MFACE),    STAT=LERR(02))
       4164                           ALLOCATE(AVEC  (4,MFACE),    STAT=LERR(03))
       4165                           ALLOCATE(DVEC  (3,MFACE),    STAT=LERR(04))
       4166                           ALLOCATE(LFWALL(MBF),        STAT=LERR(05))
       4167                           ALLOCATE(LFINLT(MBF),        STAT=LERR(06))
       4168                           ALLOCATE(LFFREE(MBF),        STAT=LERR(07))
       4169                           ALLOCATE(LFSYMT(MBF),        STAT=LERR(08))
       4170                           ALLOCATE(FINLT (MBF),        STAT=LERR(09))
       4171                           ALLOCATE(LDOMF (MDOM),       STAT=LERR(10))
       4172                           ALLOCATE(NBFDOM(MDOM),       STAT=LERR(11))
       4173                           ALLOCATE(IFSLF (MBFDOM,MDOM),STAT=LERR(12))
       4174                           ALLOCATE(IFSND (MBFDOM,MDOM),STAT=LERR(13))
       4175                           ALLOCATE(AAD   (NDUM),       STAT=LERR(14))
       4176                           ALLOCATE(AAE   (6,NDUM),     STAT=LERR(15))
       4177                           ALLOCATE(FFA   (MFACE),      STAT=LERR(16))
       4178                           ALLOCATE(FWRK01(MFACE),      STAT=LERR(17))
       4179                           ALLOCATE(FWRK02(MFACE),      STAT=LERR(18))
       4180                           ALLOCATE(FWRK03(MFACE),      STAT=LERR(19))
       4181                           ALLOCATE(FBWRK1(MBF),        STAT=LERR(20))
       4182                           ALLOCATE(FBWRK2(MBF),        STAT=LERR(21))
       4183                           ALLOCATE(FBWRK3(MBF),        STAT=LERR(22))
       4184                           ALLOCATE(FBWRK4(MBF),        STAT=LERR(23))
       4185                           ALLOCATE(FBWRK5(MBF),        STAT=LERR(24))
       4186                           ALLOCATE(FBWRK6(MBF),        STAT=LERR(25))
       4187                           ALLOCATE(FBWRK7(MBF),        STAT=LERR(26))
       4188                           CALL ERRCHK(IUT6,IPART,26,LERR,IERR)
       4189     1                     IF(IERR.NE.0) THEN
       4190     1                        WRITE(IUT0,*) BLANK
       4191     1                        WRITE(IUT0,*) ERMSGC
       4192     1                        WRITE(IUT0,*) EREXP1
       4193     1                        GO TO 9999
       4194     1                     ENDIF
       4195                           WRITE(IUT6,*) ' ** DONE **'
       4196                     C
       4197     1                     IF (IVOF.GE.1) THEN
       4198     1                        WRITE(IUT6,*) BLANK
       4199     1                        WRITE(IUT6,*) ' ** MAKING FACE LIST DATA **'
       4200     1                        CALL MKFACE(IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBF,
       4201     1                    *               MBFDOM,
       4202     1                    *               NODE,LOCAL,NEP,IENP,XD,YD,ZD,FE,
       4203     1                    *               NPWALL,NPINLT,NPFREE,NPSYMT,
       4204     1                    *               LPWALL,LPINLT,LPFREE,LPSYMT,
       4205     1                    *               MDOM,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
       4206     1                    *               LEFACE,NFACE,NFACE1,NFACE2,NFACE3,LFACE,
       4207     1                    *               AVEC,DVEC,
       4208     1                    *               NFWALL,NFINLT,NFFREE,NFSYMT,
       4209     1                    *               LFWALL,LFINLT,LFFREE,LFSYMT,FINLT,
       4210     1                    *               NDOMF,LDOMF,NBFDOM,IFSLF,IFSND,IMASS,
       4211     1                    *               WRK01,WRK02,WRK03,LWRK01,
       4212     1                    *               FBWRK1,FBWRK2,FBWRK3,
       4213     1                    *               RX,RY,IUT6,IUT0,IERR)
       4214     1                        CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4215     2                        IF(IERRA.NE.0) THEN
       4216     2                           WRITE(IUT0,*) BLANK
       4217     2                           WRITE(IUT0,*) ERMSGC
       4218     2                           GO TO 9999
       4219     2                        ENDIF
       4220     1                        WRITE(IUT6,*) ' ** DONE **'
       4221     1               C
       4222     1                     ENDIF
       4223                     C
       4224     1                     IF(JSSMAP.EQ.1) THEN
       4225     1               C
       4226     1                        WRITE(IUT6,*) ' '
       4227     1                        WRITE(IUT6,*) ' ** MAKING DATA FOR SOUND SOUCE MAPPING **'
       4228     1                        CALL MINMAX(N2,NE,NP,NEX,X,Y,Z,NODE,
       4229     1                    *               WRK01,WRK02,WRK03,WRK04,WRK05,WRK06)
       4230     1               C
       4231     1                        IMODE=1
       4232     1                        ALLOCATE(LPASRC(1),STAT=LERR(01))
       4233     1                        ALLOCATE(LEASRC(1),STAT=LERR(02))
       4234     1                        ALLOCATE(COEAS1(1),STAT=LERR(03))
       4235     1                        ALLOCATE(COEAS2(1),STAT=LERR(04))
       4236     1                        ALLOCATE(COEAS3(1),STAT=LERR(05))
       4237     1                        CALL SSCOEF(1,N2,NEX,NE,NP,NODE,X,Y,Z,NUMSSB,CODSSB,
       4238     1                    *               MZ,MBLK,NBLKX,NBLKY,NBLKZ,NEZ,IELIST,IBSTAT,
       4239     1                    *               XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
       4240     1                    *               WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
       4241     1                    *               NPASRC,LPASRC,LEASRC,COEAS1,COEAS2,COEAS3,
       4242     1                    *               IUT0,IERR)
       4243     1                        CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4244     2                        IF(IERRA.NE.0) THEN
       4245     2                           WRITE(IUT0,*) BLANK
       4246     2                           WRITE(IUT0,*) ERMSGC
       4247     2                           GO TO 9999
       4248     2                        ENDIF
       4249     1                        DEALLOCATE(LPASRC)
       4250     1                        DEALLOCATE(LEASRC)
       4251     1                        DEALLOCATE(COEAS1)
       4252     1                        DEALLOCATE(COEAS2)
       4253     1                        DEALLOCATE(COEAS3)
       4254     1               C
       4255     1                        ALLOCATE(LPASRC(NPASRC),STAT=LERR(01))
       4256     1                        ALLOCATE(LEASRC(NPASRC),STAT=LERR(02))
       4257     1                        ALLOCATE(COEAS1(NPASRC),STAT=LERR(03))
       4258     1                        ALLOCATE(COEAS2(NPASRC),STAT=LERR(04))
       4259     1                        ALLOCATE(COEAS3(NPASRC),STAT=LERR(05))
       4260     1                        ALLOCATE(UASRC (NPASRC),STAT=LERR(06))
       4261     1                        ALLOCATE(VASRC (NPASRC),STAT=LERR(07))
       4262     1                        ALLOCATE(WASRC (NPASRC),STAT=LERR(08))
       4263     1                        CALL ERRCHK(IUT6,IPART,8,LERR,IERR)
       4264     2                        IF(IERR.NE.0) THEN
       4265     2                            WRITE(IUT0,*) BLANK
       4266     2                            WRITE(IUT0,*) ERMSGC
       4267     2                            WRITE(IUT0,*) EREXP1
       4268     2                            GO TO 9999
       4269     2                        ENDIF
       4270     1               C
       4271     1                        CALL SSCOEF(2,N2,NEX,NE,NP,NODE,X,Y,Z,NUMSSB,CODSSB,
       4272     1                    *               MZ,MBLK,NBLKX,NBLKY,NBLKZ,NEZ,IELIST,IBSTAT,
       4273     1                    *               XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
       4274     1                    *               WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
       4275     1                    *               NPASRC,LPASRC,LEASRC,COEAS1,COEAS2,COEAS3,
       4276     1                    *               IUT0,IERR)
       4277     1                        CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4278     2                        IF(IERRA.NE.0) THEN
       4279     2                            WRITE(IUT0,*) BLANK
       4280     2                            WRITE(IUT0,*) ERMSGC
       4281     2                            GO TO 9999
       4282     2                        ENDIF
       4283     1               C
       4284     1                        CALL MFNAME(FILESS,FILE,IPART,IUT0,IERR)
       4285     1                        FILESS=FILE
       4286     1               C
       4287     1                        IACT=4
       4288     1                        CALL GFALL(IUT0,IUT6,IUTSS,FILESS,
       4289     1                    *              MCOM,0,COMFLE,
       4290     1                    *              MCOM,0,COMSET,
       4291     1                    *              IACT,IWRITE,INAME,IRESV,
       4292     1                    *              ICAST,IDATA0,IALL,ISKIP,IERR,
       4293     1                    *              ' !',ICHECK)
       4294     1               C
       4295     2                        IF(NPASRC.GT.0) THEN
       4296     2                            IACT=6
       4297     2                            CALL GFALL(IUT0,IUT6,IUTSS,FILESS,
       4298     2                    *                  MCOM,4,COMFLE,
       4299     2                    *                  MCOM,0,COMSET,
       4300     2                    *                  IACT,IWRITE,INAME,IRESV,
       4301     2                    *                  ICAST,IDATA0,IALL,ISKIP,IERR,
       4302     2                    *                  '*BC_INLT !',
       4303     2                    *                  NAME,NPASRC,NPASRC,LPASRC,
       4304     2                    *                  ICHECK)
       4305     2                        ENDIF
       4306     1               C
       4307     1                        WRITE(IUT6,*) ' ** DONE **'
       4308     1               C
       4309     1                     ENDIF
       4310                           ALLOCATE(ICRS_T(NP),STAT=LERR(01))
       4311                           CALL ERRCHK(IUT6,IPART,1,LERR,IERR)
       4312     1                     IF(IERR.NE.0) THEN
       4313     1                         WRITE(IUT0,*) BLANK
       4314     1                         WRITE(IUT0,*) ERMSGC
       4315     1                         WRITE(IUT0,*) EREXP1
       4316     1                         GO TO 9999
       4317     1                     ENDIF
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2286
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      ICRS_T
                              <<< Loop-information  End >>>
       4318        pp   4v            ICRS_T(:)=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.50, ITR: 6, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NPP, ICRS_T
                              <<< Loop-information  End >>>
       4319     1   s   2s            DO 1430 IP=1,NP-1
       4320     1   s   2s               ICRS_T(IP+1)=ICRS_T(IP)+NPP(IP)
       4321     1   s   2s       1430 CONTINUE
       4322                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 17
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.83, ITR: 48, MVE: 3)
                              <<< Loop-information  End >>>
       4323     1  pp                 DO IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       4324     2   p    v               DO J=1,8
       4325     2   p    v                  DNXYZT(J,1,IE)=DNXI(J,IE)
       4326     2   p    v                  DNXYZT(J,2,IE)=DNYI(J,IE)
       4327     2   p    v                  DNXYZT(J,3,IE)=DNZI(J,IE)
       4328     2   p    v               ENDDO
       4329     1   p                 ENDDO
       4330                     C
       4331                           ALLOCATE(LSTVALID(MP),STAT=LERR(01))
       4332                           CALL ERRCHK(IUT6,IPART,1,LERR,IERR)
       4333     1                     IF(IERR.NE.0) THEN
       4334     1                         WRITE(IUT0,*) BLANK
       4335     1                         WRITE(IUT0,*) ERMSGC
       4336     1                         WRITE(IUT0,*) EREXP1
       4337     1                         GO TO 9999
       4338     1                     ENDIF
       4339                     
       4340                           NUMVALID = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2286
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSTVALID
                              <<< Loop-information  End >>>
       4341        pp   4v            LSTVALID(:) = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NEP
                              <<< Loop-information  End >>>
       4342     1       2s            DO IP=1,NP
       4343     2       2v               IF(NEP(IP) .GT. 8) THEN
       4344     2       2m                  NUMVALID = NUMVALID + 1
       4345     2       2s                  LSTVALID(NUMVALID) = IP
       4346     2       2v               ENDIF
       4347     1       2v            ENDDO
       4348                     C
       4349                     C     <<<<<<< TIME INTEGRATION LOOP START >>>>>>>
       4350                     C
       4351                     CCHY_TMP
       4352     1                     IF (IALEDB.GE.1) THEN
       4353     1                        IF (IPART.EQ.1) OPEN(IUTAL,FILE="ale_res.log")
       4354     1                     ENDIF
       4355                     CCHY_TMP
       4356                     C
       4357                           WRITE(IUT6,*) BLANK
       4358                           WRITE(IUT6,*) ' ** TIME CALCULATING INITIAL ELEMENT VALUES **'
       4359                     C
       4360                     #ifdef cputime
       4361                           IF (IWRTIM.EQ.1) CALL CLTIME('TIME LOOP :START',IUT6)
       4362                     #endif
       4363                           ITIME = 0
       4364                     C
       4365                           WRITE(IUT6,*) BLANK
       4366                           WRITE(IUT6,*) ' ** NOW ENTERING TIME MARCH LOOP **'
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UTAUN, UTAU, P, DPE, VISC, FEA, PA, PR
                              <<<      VISCA, FER, FE, CS, FZVIS, FXVIS, FYVIS
                              <<<      T, PN, FL, W, V, U, WRK04, WRK03, WRK02
                              <<<      WRK01, WRK11, WRK05, WRK06, WRK09, Z, X
                              <<<      Y, LEFRM, LWRK01
                              <<< Loop-information  End >>>
       4367     1                     DO 5000
       4368     1                     CALL USTSTA(1)
       4369     1               #ifdef cputime
       4370     1                         IF (IWRTIM.EQ.1) CALL CLTIME('INTEGRAT. :START',IUT6)
       4371     1               C         CALL CPU_TIME( TBUF1 )
       4372     1                         TBUF1 = MPI_WTIME()
       4373     1                         DTBUF2=0.0E0
       4374     1                         DTBUF3=0.0E0
       4375     1                         DTBUF5=0.0E0
       4376     1                         DTBUF6=0.0E0
       4377     1                         DTBUF7=0.0E0
       4378     2                         IF (IALE.GE.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       4379     3   s    v                   DO I=1,8
       4380     3   p    v                      DTALE(I)=0.0E0
       4381     3   p    v                   ENDDO
       4382     2                         ENDIF
       4383     1               #endif
       4384     1                         CALL DDSYNC
       4385     1               C
       4386     1                         ISTEP = ITIME   +NTIMEP
       4387     1                         TIME  = ITIME*DT+TIMEP
       4388     1                         TIMEW = TIME*(D000/U000)
       4389     1               C
       4390     1                         ITIMEI = 0
       4391     1               C
       4392     1               #ifdef RCAPCPL
       4393     1                         IF (IALE.EQ.1) THEN
       4394     1                            NITRCP=0
       4395     1                            DO 2400 IP=1,NP
       4396     1                               XO(IP)=X(IP)
       4397     1                               YO(IP)=Y(IP)
       4398     1                               ZO(IP)=Z(IP)
       4399     1                               UO(IP)=U(IP)
       4400     1                               VO(IP)=V(IP)
       4401     1                               WO(IP)=W(IP)
       4402     1                               PNO(IP)=PN(IP)
       4403     1                2400        CONTINUE
       4404     1                            DO 2410 IE=1,NE
       4405     1                               PO(IE)=P(IE)
       4406     1                2410        CONTINUE
       4407     1                         ENDIF
       4408     1               C
       4409     1                5002     CONTINUE
       4410     1               #endif
       4411     1               C
       4412     1               C
       4413     1               C
       4414     1               C         <<<<< CALCULATE MESH MOVING VELOCITY >>>>>
       4415     1               C
       4416     1               C
       4417     1               C
       4418     2                         IF (ITIME.GE.1.AND.IALE.GE.1) THEN
       4419     2               C
       4420     2                            CALL SLVALE(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4421     2                    *                  MELM,ME,NELM,NE,NP,N1,N2,NEX,NS,NSP,N2D,NCRS,
       4422     2                    *                  LOCAL,NODE,LTAB,NPP,IPCRS,
       4423     2                    *                  XD,YD,ZD,X,Y,Z,
       4424     2                    *                  UMESH,VMESH,WMESH,UMESH_P,VMESH_P,WMESH_P,EJ,
       4425     2                    *                  NPBODY,NPMVB,LPBODY,LPMVB,UMVB,VMVB,WMVB,
       4426     2                    *                  IALE,NMAXA,NMODE,NITRA,NLYNG,EPSA,EPSREA,RESA,
       4427     2                    *                  STPWR,AOBJ,TOBJ,EYNG,IFLCPL,ITIME,ISTART,
       4428     2                    *                  U000,DT,TIME,
       4429     2                    *                  IPART,MDOM,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
       4430     2                    *                  NUMIP,
       4431     2                    *                  MGAUSS,IGAUSH,IGAUSW,IGAUSP,IGAUST,
       4432     2                    *                  SNI,DNXI,DNYI,DNZI,
       4433     2                    *                  SN,DNXYZ,DELTA,
       4434     2                    *                  EAP1,EAP2,EAP3,EBP,MEP,MP,IENP,JENP,NEP,
       4435     2                    *                  NEBODY,NEHEAT,NSTET,NSPRD,NSWED,NSHEX,
       4436     2                    *                  LEBODY,LEHEAT,SBODY,DXBODY,DYBODY,DZBODY,SHEAT,
       4437     2                    *                  IFILTR,FILTER,IMODEL,JPRESS,NEWALL,LEWALL,
       4438     2                    *                  NEAR,
       4439     2                    *                  DSNEAR,NAVDYN,NPFREE,NPSLD2,LPFREE,LPSLD2,
       4440     2                    *                  GAMDYN,APRS,APRS0,ATEST0,AAVER0,ATESPC,AAVEPC,
       4441     2               #ifdef RCAPCPL
       4442     2                    *                  NPCPL,NDOF,LPCPL,BFCPL,XPCPL,YPCPL,ZPCPL,
       4443     2               #endif
       4444     2                    *                  MPWLAD,NPWALL,NEWLAD,NPWLAD,LPWALL,XNWALL,
       4445     2                    *                  YNWALL,ZNWALL,LEWLAD,LPWLAE,LPWLAD,DPWLAD,
       4446     2                    *                  MAXBUF,MWRK,LWRK01,LWRK02,LWRK03,LEWRK,
       4447     2                    *                  RX,RY,WRKN,
       4448     2                    *                  WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
       4449     2                    *                  DWRK01,DWRK02,DWRK03,DWRK04,DWRK05,
       4450     2                    *                  AWRK01,AWRK02,AWRK03,AWRK04,AWRK05,AWRK06,
       4451     2                    *                  AWRK07,AWRK08,AWRK09,AWRK10,ACRS2,IWRTIM,
       4452     2               #ifdef cputime
       4453     2                    *                  DTALE,TBUF7,TBUF8,TBUF9,
       4454     2               #endif
       4455     2                    *                  MRSALE,IALEDB,ISTEP,IUTAL,IUT6,IUT0,IERR)
       4456     2                            CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
       4457     3                            IF(IERRA.NE.0) THEN
       4458     3                               WRITE(IUT0,*) BLANK
       4459     3                               WRITE(IUT0,*) ERMSGC
       4460     3                               WRITE(IUT0,*) EREXP1
       4461     3                               GO TO 7000
       4462     3                            ENDIF
       4463     2               C
       4464     2                         ENDIF
       4465     1               C
       4466     1                         DEVLP1 = 1.E0-EXP(-TIME/TFINAL)
       4467     1               C
       4468     1                         DEVLP2 = 1.E0/TFINAL*EXP(-TIME/TFINAL)
       4469     1               C
       4470     1                         OMEGA  = DEVLP1*OMEGA0
       4471     2                         IF(NMRF.GE.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1334
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      OMGMRF0, OMGMRF
                              <<< Loop-information  End >>>
       4472     3   s   2v                    DO IMRF=1,NMRF
       4473     3   p   2v                        OMGMRF(IMRF)=DEVLP1*OMGMRF0(IMRF)
       4474     3   p   2v                    ENDDO
       4475     2                         ENDIF
       4476     1               C
       4477     1                         ACCELX = DEVLP2*UFINAL
       4478     1                         ACCELY = DEVLP2*VFINAL
       4479     1                         ACCELZ = DEVLP2*WFINAL
       4480     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 445
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WFRAM0, WFRAME, VFRAM0, VFRAME, UFRAM0
                              <<<      UFRAME
                              <<< Loop-information  End >>>
       4481     2   s    v                DO 6000 IFRAME = 1 , NFRAME
       4482     2   p    v                   UFRAME(1,IFRAME) = 0.E0
       4483     2   p    v                   VFRAME(1,IFRAME) = 0.E0
       4484     2   p    v                   WFRAME(1,IFRAME) = 0.E0
       4485     2   p    v                   UFRAME(2,IFRAME) = DEVLP1*UFRAM0(IFRAME)
       4486     2   p    v                   VFRAME(2,IFRAME) = DEVLP1*VFRAM0(IFRAME)
       4487     2   p    v                   WFRAME(2,IFRAME) = DEVLP1*WFRAM0(IFRAME)
       4488     2   p    v       6000     CONTINUE
       4489     1               C
       4490     1               C
       4491     1               C
       4492     1               C         <<<<< READ NEXT OVERSET CONDITIONS DATA AND COMPILE
       4493     1               C               OVERSET DATA FOR PARALLEL EXECUTIONS >>>>>
       4494     1               C
       4495     1               C
       4496     1               C
       4497     2                         IF(JSET.EQ.0) THEN
       4498     2                             JMOD = 1
       4499     2                         ELSE
       4500     2                             JMOD = MOD(ITIME,JSET)
       4501     2                         ENDIF
       4502     1               C
       4503     2                         IF(JMOD.EQ.0) THEN
       4504     2               C
       4505     3                             IF(JSETOS.EQ.0) THEN
       4506     3                                 IACT     = 5
       4507     3                                 CALL GFALL(IUT0,IUT6,IUTOS,FILEOS,
       4508     3                    *                       MCOM,NCOMFL,COMFLE,
       4509     3                    *                       MCOM,NCOMST,COMSET,
       4510     3                    *                       IACT,IWRITE,INAME,IRESV,
       4511     3                    *                       ICAST,IDATA0,IALLM,ISKIP,IERR,
       4512     3                    *                       '*TIME_PS *STEP_PS
       4513     3                    *                        *BC_PSET *BC_PGET *BC_ESET *BC_EGET !',
       4514     3                    *                       NAME,TIMER,
       4515     3                    *                       NAME,IDUM,
       4516     3                    *                       NAME,MB,NPSETN,LPSET1,LPSET2,LPSET3,
       4517     3                    *                       NAME,MB,NPSETN,COVER1,COVER2,COVER3,
       4518     3                    *                       NAME,MB,NESETN,LESET1,LESET2,LESET3,
       4519     3                    *                       NAME,MB,NESETN,EOVER1,EOVER2,EOVER3,
       4520     3                    *                       ICHECK)
       4521     4                                 IF(IERR.NE.0 .AND. IERR.NE.2) THEN
       4522     4                                     WRITE(IUT0,*) BLANK
       4523     4                                     WRITE(IUT0,*) ERMSGC
       4524     4                                     GO TO 9999
       4525     4                                 ENDIF
       4526     3                                 TIMER=TIMER/(D000/U000)
       4527     3               C
       4528     3                             ELSE
       4529     3                                 WRITE(IUT6,*) BLANK
       4530     3                                 WRITE(IUT6,*) 'GENERATING OVERSET DATA'
       4531     4                                 IF(JSET.GT.NTIME) THEN
       4532     4                                     TIMER=0.0E0
       4533     4                                 ELSE
       4534     4                                     TIMER=TIMEP+DT*ITIME
       4535     4                                 ENDIF
       4536     3                                 NPSET=NPSETR
       4537     3                                 CALL MKLEOS(MB,ME,N1,N2,NP,NE,NODE,
       4538     3                    *                        NPSET,NESET,LPSET1,LPSET4,LESET1,LESET4,
       4539     3                    *                        IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4540     3                    *                        MAXBUF,WRK01,LWRK01,LWRK02,
       4541     3                    *                        RX,RY,IUT0,IERR)
       4542     3                                 WRITE(IUT6,*)  'NESET',NESET
       4543     3               C
       4544     3                                 CALL SETOS(N2,ME,NE,NP,NEX,IPART,NPART,MB,
       4545     3                    *                       NDOM,MFRM,NFRM,
       4546     3                    *                       ITIME,NODE,LEFRM,X,Y,Z,
       4547     3                    *                       OMEGA0,TIMER,IEATTR,IPATTR,
       4548     3                    *                       NPSET,
       4549     3                    *                       LPSET1,LPSET2,LPSET3,LPSET4,
       4550     3                    *                       COVER1,COVER2,COVER3,
       4551     3                    *                       NESET,
       4552     3                    *                       LESET1,LESET2,LESET3,LESET4,
       4553     3                    *                       EOVER1,EOVER2,EOVER3,
       4554     3                    *                       MMRF,NMRF,IFATTR,OMGMRF,AMRF,
       4555     3                    *                       XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,
       4556     3                    *                       MZ,MBLK,NBLKX,NBLKY,NBLKZ,
       4557     3                    *                       NEZ,IELIST,IBSTAT,JNTFND,EPSOS,
       4558     3                    *                       IUT6,IUT0,IERR)
       4559     3                                 NPSETN=NPSET
       4560     3                                 NESETN=NESET
       4561     3                                 CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
       4562     4                                 IF(IERRA.NE.0) THEN
       4563     4                                     WRITE(IUT0,*) BLANK
       4564     4                                     WRITE(IUT0,*) ERMSGC
       4565     4                                     GO TO 9999
       4566     4                                 ENDIF
       4567     3               C
       4568     4                                 IF(JWRTOS.EQ.1) THEN
       4569     4                                     IACT     = 6
       4570     4                                     DUM=TIMER/(D000/U000)
       4571     4                                     CALL GFALL(IUT0,IUT6,IUTOS,FILEOS,
       4572     4                    *                           MCOM,NCOMFL,COMFLE,
       4573     4                    *                           MCOM,NCOMST,COMSET,
       4574     4                    *                           IACT,IWRITE,INAME,IRESV,
       4575     4                    *                           ICAST,IDATA0,IALL,ISKIP,IERR,
       4576     4                    *                           '*TIME_PS *STEP_PS
       4577     4                    *                            *BC_PSET *BC_PGET
       4578     4                    *                            *BC_ESET *BC_EGET !',
       4579     4                    *                           NAME,DUM,
       4580     4                    *                           NAME,ITIME,
       4581     4                    *                           NAME,MB,NPSET,LPSET1,LPSET2,LPSET3,
       4582     4                    *                           NAME,MB,NPSET,COVER1,COVER2,COVER3,
       4583     4                    *                           NAME,MB,NESET,LESET1,LESET2,LESET3,
       4584     4                    *                           NAME,MB,NESET,EOVER1,EOVER2,EOVER3,
       4585     4                    *                           ICHECK)
       4586     5                                     IF(IERR.NE.0) THEN
       4587     5                                         WRITE(IUT0,*) BLANK
       4588     5                                         WRITE(IUT0,*) ERMSGC
       4589     5                                         GO TO 9999
       4590     5                                     ENDIF
       4591     4                                 ENDIF
       4592     3               C
       4593     3                             ENDIF
       4594     2               C
       4595     3                             IF(IACT.EQ.7.AND.JSETOS.EQ.0) THEN
       4596     3                                 JSET = NTIME+1
       4597     3                             ELSE IF(IPART.GE.1) THEN
       4598     3                                 NPSET = NPSETN
       4599     3                                 CALL DDSET0(LPSET1,LPSET3,NPSET,MBPDOM,MDOM,IUT0,
       4600     3                    *                        NPSND,LPSND,NPTSND,IPSET,IPSRC,
       4601     3                    *                        NPRCV,LPRCV,NPTRCV,IERR)
       4602     4                                 IF(IERR.NE.0) THEN
       4603     4                                     WRITE(IUT0,*) BLANK
       4604     4                                     WRITE(IUT0,*) ERMSGC
       4605     4                                     GO TO 9999
       4606     4                                 ENDIF
       4607     3               C
       4608     3                                 NESET = NESETN
       4609     3                                 CALL DDSET0(LESET1,LESET3,NESET,MBPDOM,MDOM,IUT0,
       4610     3                    *                        NESND,LESND,NETSND,IESET,IESRC,
       4611     3                    *                        NERCV,LERCV,NETRCV,IERR)
       4612     4                                 IF(IERR.NE.0) THEN
       4613     4                                     WRITE(IUT0,*) BLANK
       4614     4                                     WRITE(IUT0,*) ERMSGC
       4615     4                                     GO TO 9999
       4616     4                                 ENDIF
       4617     3                             ENDIF
       4618     2               C
       4619     2                             CALL CHKOVS(N2,NE,NODE,NPSET,ERROVS,
       4620     2                    *                    LPSET2,LPSET3,COVER1,COVER2,COVER3,IUT6)
       4621     2               C
       4622     2               C
       4623     2               C
       4624     2               C
       4625     2                         ENDIF
       4626     1               C
       4627     1               C         <<<<< CAL. OVERSET B.C. TYPE COEF >>>>>
       4628     1               C
       4629     1               C
       4630     1               C
       4631     2                         IF(JSET.GE.1) THEN
       4632     2                             CALL OSBCCO(N1,N2,NE,NP,NSP,NS,NBESET,NPSETR,
       4633     2                    *                    NODE,LOCAL,LBESET,LPSET1,
       4634     2                    *                    U,V,W,XNESET,YNESET,ZNESET,
       4635     2                    *                    COSBIN,COSBFR,OSBCOE,
       4636     2                    *                    IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4637     2                    *                    RX,RY,WRK01,LWRK01,IUT0,IERR)
       4638     2                         ENDIF
       4639     1               C
       4640     1               C
       4641     1               C
       4642     1               C     <<<<< CALCULATE WALL SHEAR STRESSES >>>>>
       4643     1               C
       4644     1               C
       4645     1               C
       4646     2                         IF(ITIME.GE.1 .AND. IMODEL.EQ.1 .AND. NEWALL.GE.1) THEN
       4647     2                            CALL TAUWLX
       4648     2                    *          ( VKAP,BCONST,U,V,W,NODE,NE,NP,N2,NEX,NS,NSP,N2D,
       4649     2                    *            LOCAL,DEVLP2,
       4650     2                    *            LPWALL,NPWALL,UWALL,VWALL,WWALL,
       4651     2                    *            LEWALL,NEWALL,YP,XNWALL,YNWALL,ZNWALL,
       4652     2                    *            VISC,NITRWL,UTAUN,TAUXN,TAUYN,TAUZN,
       4653     2                    *            WRK01,WRK02,WRK03,WRK04,WRK05)
       4654     2               C
       4655     2                            COF1 = 1.0E0-ALFTAU
       4656     2                            COF2 = ALFTAU
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UTAUN, UTAU
                              <<< Loop-information  End >>>
       4657     3  pp   2v                   DO 6200 IEWALL = 1, NEWALL
       4658     3   p   2v                      UTAU(IEWALL) = COF1*UTAU(IEWALL) + COF2*UTAUN(IEWALL)
       4659     3   p   2v                      TAUX(IEWALL) = COF1*TAUX(IEWALL) + COF2*TAUXN(IEWALL)
       4660     3   p   2v                      TAUY(IEWALL) = COF1*TAUY(IEWALL) + COF2*TAUYN(IEWALL)
       4661     3   p   2v                      TAUZ(IEWALL) = COF1*TAUZ(IEWALL) + COF2*TAUZN(IEWALL)
       4662     3   p   2v       6200        CONTINUE
       4663     2                         ENDIF
       4664     1               C
       4665     1               C
       4666     1               C
       4667     1               C     <<<<< CALCULATE ELEMENT EFFECTIVE VISCOSITY >>>>>
       4668     1               C
       4669     1               C
       4670     1               C
       4671     2                         IF(ITIME.GE.1 .AND. (IMODEL.EQ.1 .OR. IMODEL.EQ.2)) THEN
       4672     2                             CALL EDY3DX( CS,FILTER,U,V,W,NODE,ME,NE,NP,N1,N2,NEX,
       4673     2                    *                     IPRDWL,DAMPWL,LEWALL,NEWALL,NEAR,
       4674     2                    *                     DSNEAR,UTAU,AP,VISC,VISCAV,
       4675     2                    *                     UPPER,DT,DNXI,DNYI,DNZI,
       4676     2                    *                     WRK01,WRK02,WRK03,WRK04,WRK05,
       4677     2                    *                     WRK06,WRK07,WRK08,WRK09,WRK10,
       4678     2                    *                     IVOF,NEFLD2,LEFLD2,LWRK01)
       4679     2                         ELSE IF(ITIME.GE.1 .AND. IMODEL.EQ.3) THEN
       4680     2               CC           CALL DES3DX
       4681     2                         ENDIF
       4682     1               C
       4683     1               C
       4684     1               C
       4685     1               CCTT      <<<<< CORRECT TURBULENT VISCOSITY IN RANS CALCULATION>>>>>
       4686     1               C
       4687     1               C
       4688     1               C
       4689     1               C     <<<<< COMPUTE TEMPERATURE >>>>>
       4690     1               C
       4691     1               C
       4692     1               C
       4693     2                         IF(IHEAT.GT.0 .AND. ITIMEI.EQ.0) THEN
       4694     2                             CALL STHEAT(N2,NE,NP,NSP,NS,LOCAL,NODE,
       4695     2                    *                    NEHSRC,NPHFIX,NPHTRS,NPHEAT,NEHEAT,
       4696     2                    *                    LEHSRC,LPHEAT,LEHEAT,RHOS,CPS,
       4697     2                    *                    T,TREF,HSRC,HFIX,HTRS,WRK11,HEAT,HEATE,
       4698     2                    *                    RHOCP,WRK01)
       4699     2               CC
       4700     2               CC  NOTE THAT TEMRATURE CHANGE RATE (DT/DT) IS SOTTRETO TO WRK11
       4701     2               CC
       4702     2               C
       4703     2                             CALL HEAT3X(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4704     2                    *                    ISOLT,NSIDR,NLIDR,
       4705     2                    *                    ITIME,JSET,IDIAGV,
       4706     2                    *                    EPSQ,EPSREQ,NITRT,NMAXT,REST,TSUM,
       4707     2                    *                    N1,N2,ME,NELM,NE,NP,MEP,NEX,
       4708     2                    *                    NODE,UE,VE,WE,DT,COND3D,
       4709     2                    *                    EAP1,EAP2,EAP3,EBP,AP1,
       4710     2                    *                    SN,CM,DELTA,
       4711     2                    *                    AWRK,T,WRK01,WRK02,WRK12,ALPHAT,
       4712     2                    *                    NPTEMP,LPTEMP,TEMP,WRK11,
       4713     2                    *                    NEHEAT,LEHEAT,HEATE,SHEAT,
       4714     2                    *                    LPSET1,LPSET2,LPSET3,
       4715     2                    *                    COVER1,COVER2,COVER3,NPSET,
       4716     2                    *                    NPSND ,LPSND ,NPTSND,IPSET,IPSRC,
       4717     2                    *                    NPRCV ,LPRCV ,NPTRCV,
       4718     2                    *                    IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4719     2                    *                    NUMIP,LWRK01,RX,RY,ACRS,MWRK,WRKN,
       4720     2                    *                    WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,WRK09,
       4721     2                    *                    LWRK02,NCRS,NPP,IPCRS,LTAB,
       4722     2                    *                    JUNROL,NPPMAX,NCRS2,WRK13,TACRS,ITPCRS,
       4723     2                    *                    IUT6,IUT0,IERR,RHOCP,ICRS_T)
       4724     2                             CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
       4725     3                             IF(IERRA.NE.0) THEN
       4726     3                                 WRITE(IUT0,*) BLANK
       4727     3                                 WRITE(IUT0,*) ERMSGC
       4728     3                                 GO TO 9999
       4729     3                             ENDIF
       4730     2                         ENDIF
       4731     1               C
       4732     1               C
       4733     1               C
       4734     1               C         <<<<< CALCULATE FRACTIONAL VELOCITY >>>>>
       4735     1               C
       4736     1               C
       4737     1               C
       4738     2                         IF(ITIME.GT.1 .AND. MOD(ITIME,NFRCNT).EQ.0) THEN
       4739     2                             CALL CTLFRX(ALPHAQ,PINLT,QCOEF,NPINLT,
       4740     2                    *                    UINLT0,VINLT0,WINLT0,UINLT,VINLT,WINLT,
       4741     2                    *                    NP,U,V,W)
       4742     2                         ENDIF
       4743     1               C
       4744     1                         IF(IFIXFL.EQ.1)
       4745     1                    *    WRITE(IUT6,*) "DEBUG MODE!! SKIPPING NS EQUATION"
       4746     1               C
       4747     1               #ifdef cputime
       4748     1               C         CALL CPU_TIME( TBUF2 )
       4749     1                         TBUF2 = MPI_WTIME()
       4750     1                         IF (IWRTIM.EQ.1) CALL CLTIME('MOM. EQ.  :START',IUT6)
       4751     1               #endif
       4752     1                         CALL USTSTA(11)
       4753     1                         CALL VEL3D1
       4754     1                    *     (MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4755     1                    *      ISOLV,NSIDR,NLIDR,IFORM,CBTD3D,TIMER,DT,
       4756     1                    *      JSET,IDIAGV,THDT3D,ALPHAV,JFSPRS,JPRESS,OMEGA,
       4757     1                    *      ITIME,DEVLP1,ACCELX,ACCELY,ACCELZ,ISTEP,
       4758     1                    *      NMAXT,EPST,EPSREV,NITRIT,RESU,RESV,RESW,NITRU,NITRV,NITRW,
       4759     1                    *      ME,N1,N2,NE,NP,NEX,NODE,
       4760     1                    *      U,V,W,VISC,P,DT3D,UE,VE,WE,FXFFO,FYFFO,FZFFO,
       4761     1                    *      NELM,
       4762     1                    *      DNXYZ,CM,SN,X,Y,Z,RHO3D,GRAV,
       4763     1                    *      IEATTR,IPATTR,NFRAME,UFRAME,VFRAME,WFRAME,NUMIP,
       4764     1                    *      AWRK,NPP,NCRS,IPCRS,ACRS,LTAB,LSTCLR,LSTDGN,
       4765     1                    *      IALE,UMESH,VMESH,WMESH,
       4766     1                    *      NPINLT,LPINLT,UINLT,VINLT,WINLT,
       4767     1                    *      NPWALL,LPWALL,UWALL,VWALL,WWALL,
       4768     1                    *      NPSYMT,NPSYM2,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
       4769     1                    *      NPSLD1,LPSLD1,
       4770     1                    *      IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4771     1                    *      NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
       4772     1                    *      COVER1,COVER2,COVER3,
       4773     1                    *      NPSND,LPSND,NPTSND,IPSET,IPSRC,NPRCV,LPRCV,NPTRCV,
       4774     1                    *      LWRK01,LWRK02,LWRK03,
       4775     1                    *      WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,
       4776     1                    *      WRK07,WRK08,WRK09,WRK10,WRK11,WRK12,
       4777     1                    *      RX,RY,MWRK,WRKN,ADIAG,IFIXFL,
       4778     1                    *      JUNROL,NPPMAX,NCRS2,WRK13,TACRS,ITPCRS,
       4779     1                    *      NMRF,IFATTR,OMGMRF,AMRF,
       4780     1                    *      IVOF,IMASS,NSP,NS,LOCAL,NFACE,LFACE,AVEC,FFA,
       4781     1                    *      NFINLT,LFINLT,NFFREE,LFFREE,NPFLD2,LPFLD2,NEFLD2,LEFLD2,
       4782     1                    *      NPFREE,LPFREE,XPFREE,YPFREE,ZPFREE,OSBCOE,
       4783     1                    *      EAP1,EAP2,EAP3,EBP,NODP,MEP,MP,IENP,JENP,NEP,
       4784     1                    *      COSBIN,COSBFR,ICAVI,IUT0,IERR,ICRS_T,AP1)
       4785     1                         CALL USTEND(11)
       4786     1               #ifdef cputime
       4787     1                         IF (IWRTIM.EQ.1) CALL CLTIME('MOM. EQ.  :END  ',IUT6)
       4788     1               C         CALL CPU_TIME( TBUF3 )
       4789     1                         TBUF3 = MPI_WTIME()
       4790     1                         IF (IWRTIM.EQ.1) CALL CLTIME('PRESS. EQ.:START',IUT6)
       4791     1               #endif
       4792     1                         IF(IERR.NE.0) GOTO 9999
       4793     1               C
       4794     1                         IF(IFIXFL.EQ.1) GOTO 9998
       4795     1               C
       4796     1               C
       4797     1               C
       4798     1               C         <<<<< SOLVE PRESSURE EQUATION >>>>>
       4799     1               C
       4800     1               C
       4801     1               C
       4802     2                         IF(ITIME.GE.1) THEN
       4803     3                            IF(JPRESS.EQ.1) THEN
       4804     3                               PSFREE=0.0E0
       4805     3                               CALL USTSTA(91)
       4806     3                               CALL PRES3X(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4807     3                    *                IPRESS,JSET,JFSPRS,PLIMIT,
       4808     3                    *                ALPHAP,DT,FSMACH,PSFREE,NMAXP,EPSP,EPSREP,
       4809     3                    *                NITRP,RESP,
       4810     3                    *                ME,MP,N1,N2,NE,NP,NEX,NITRIP,
       4811     3                    *                U,V,W,P,PN,DP,DPE,DT3D,NODE,IEMEDA,
       4812     3                    *                DNXI,DNYI,DNZI,SN,NELM,CM,
       4813     3                    *                APRS,AWRK,NPP,NCRS,IPCRS,ACRS,LTAB,APRS0,
       4814     3                    *                NPFREE,LPFREE,NPSLD2,LPSLD2,NUMIP,
       4815     3                    *                IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4816     3                    *                NPSET,LPSET1,LPSET2,LPSET3,COVER1,COVER2,COVER3,
       4817     3                    *                NPSND,LPSND ,NPTSND,IPSET,IPSRC,
       4818     3                    *                NPRCV,LPRCV,NPTRCV,
       4819     3                    *                LWRK01,LWRK02,WRK01,WRK02,WRK03,WRK04,
       4820     3                    *                WRK05,WRK06,WRK07,WRK08,WRK09,WRK10,
       4821     3                    *                RX,RY,MWRK,WRKN,
       4822     3                    *                JUNROL,NPPMAX,NCRS2,WRK11,TACRS,ITPCRS,
       4823     3                    *                IUT0,IERR,ICRS_T,
       4824     3                    *                EAP1,EAP2,NODP,IENP,JENP,NEP,MEP)
       4825     3                               CALL USTEND(91)
       4826     3                            ELSE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1778
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DT3D
                              <<< Loop-information  End >>>
       4827     4  pp   4v                      DO IE=1,NE
       4828     4   p   4v                        DT3D(IE)=DT
       4829     4   p   4v                      ENDDO
       4830     3                               CALL USTSTA(21)
       4831     3                               CALL PRES3E(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4832     3                    *                JFSPRS,ME,MP,N1,N2,NEX,NE,NP,ISTEP,
       4833     3                    *                MRCM,NMAXP,NMAXB,ISOLP,NSIDR,NLIDR,
       4834     3                    *                EPSP,EPSREP,DT3D,
       4835     3                    *                NODE,CM,SN,DNXYZ,DNXYZP,DNXI,DNYI,DNZI,
       4836     3                    *                U,V,W,NPINLT,LPINLT,NPWALL,LPWALL,
       4837     3                    *                NPSYM2,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
       4838     3                    *                NPSLD1,LPSLD1,
       4839     3                    *                NITRP,RESP,P,DPE,PN,
       4840     3                    *                IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
       4841     3                    *                LWRK01,LWRK02,WRK3,WRK01,WRK02,WRK03,WRK04,
       4842     3                    *                WRK05,WRK06,WRK07,WRK08,WRK09,WRK10,WRK11,
       4843     3                    *                ADIAG,ALPHAP,
       4844     3                    *                PRCM,APRCM,RX,RY,RZ,MWRK,WRKN,
       4845     3                    *                JSET,NFRAME,IEATTR,IPATTR,
       4846     3                    *                X,Y,Z,OMEGA,TIMER,UFRAME,VFRAME,WFRAME,
       4847     3                    *                NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
       4848     3                    *                COVER1,COVER2,COVER3,
       4849     3                    *                NPSND,LPSND,NPTSND,NPRCV,LPRCV,NPTRCV,
       4850     3                    *                IPSET,IPSRC,
       4851     3                    *                NESET,LESET1,LESET2,LESET3,
       4852     3                    *                EOVER1,EOVER2,EOVER3,
       4853     3                    *                NESND,LESND,NETSND,NERCV,LERCV,NETRCV,
       4854     3                    *                IESET,IESRC,
       4855     3                    *                IPRESS,DT,FSMACH,
       4856     3                    *                NMRF,IFATTR,OMGMRF,AMRF,
       4857     3                    *                MEP,NEP,IENP,JENP,
       4858     3                    *                IVOF,IMASS,RHO3D,LWRK03,NSP,NS,LOCAL,
       4859     3                    *                NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
       4860     3                    *                NFFREE,LFFREE,NPFLD2,LPFLD2,NEFLD2,LEFLD2,
       4861     3                    *                NPFREE,LPFREE,XPFREE,YPFREE,ZPFREE,
       4862     3                    *                NBESET,LBESET,
       4863     3                    *                SNESET,OSBCOE,XNESET,YNESET,ZNESET,
       4864     3                    *                WRK12,WRK13,WRK14,WRK15,
       4865     3                    *                COSBIN,COSBFR,ICAVI,FESRC,FLE,SIGMA,
       4866     3                    *                IUT0,IERR,DNXYZT,NUMVALID,LSTVALID)
       4867     3                               CALL USTEND(21)
       4868     3                            ENDIF
       4869     2                            IF(IERR.NE.0) GOTO 9999
       4870     2               C
       4871     2               C
       4872     2               C
       4873     2               C         <<<<< COMPUTE NEXT TIME-STEP VELOCITY >>>>>
       4874     2               C
       4875     2               C
       4876     2               C
       4877     2                            CALL USTSTA(41)
       4878     2                            CALL VEL3D2(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4879     2                    *                JSET,DIVMAX,DIVAV,XDIVMX,YDIVMX,ZDIVMX,
       4880     2                    *                TIMER,ISTEP,DT3D,
       4881     2                    *                DT,U,V,W,DPE,NODE,X,Y,Z,CM,JPRESS,
       4882     2                    *                DNXYZP,DNXI,DNYI,DNZI,
       4883     2                    *                OMEGA,IEATTR,IPATTR,
       4884     2                    *                ME,NE,NP,N1,N2,NEX,
       4885     2                    *                NFRAME,UFRAME,VFRAME,WFRAME,
       4886     2                    *                ITIME,DEVLP1,ITIMEI,
       4887     2                    *                NPINLT,LPINLT,UINLT,VINLT,WINLT,
       4888     2                    *                NPWALL,LPWALL,UWALL,VWALL,WWALL,
       4889     2                    *                NPSYMT,NPSYM2,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
       4890     2                    *                NPSLD1,LPSLD1,
       4891     2                    *                LPSET1,LPSET2,LPSET3,LPSET4,
       4892     2                    *                COVER1,COVER2,COVER3,NPSET,
       4893     2                    *                NPSND ,LPSND ,NPTSND,IPSET,IPSRC,
       4894     2                    *                NPRCV ,LPRCV ,NPTRCV,
       4895     2                    *                IPART ,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4896     2                    *                ADIAG,
       4897     2                    *                NMRF,IFATTR,OMGMRF,AMRF,
       4898     2                    *                IVOF,IMASS,RHO3D,LWRK01,NSP,NS,LOCAL,
       4899     2                    *                NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
       4900     2                    *                NFFREE,LFFREE,NPFLD2,LPFLD2,NEFLD2,LEFLD2,
       4901     2                    *                NPFREE,LPFREE,XPFREE,YPFREE,ZPFREE,
       4902     2                    *                NESET,NESND,NERCV,NBESET,LBESET,
       4903     2                    *                LESET1,LESET2,LESET3,
       4904     2                    *                EOVER1,EOVER2,EOVER3,
       4905     2                    *                LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
       4906     2                    *                SN,SNESET,OSBCOE,XNESET,YNESET,ZNESET,
       4907     2                    *                RX,RY,MWRK,WRKN,WRK3,WRK01,WRK02,WRK03,
       4908     2                    *                WRK04,WRK05,WRK06,WRK07,WRK08,WRK09,WRK10,
       4909     2                    *                ICAVI,IUT0,IERR,
       4910     2                    *                MEP,MP,NEP,IENP,NUMVALID,LSTVALID)
       4911     2                            CALL USTEND(41)
       4912     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      P, DPE
                              <<< Loop-information  End >>>
       4913     3  pp   2v                   DO IE=1,NE
       4914     3   p   2v                      DPE(IE)=P(IE)
       4915     3   p   2v                   ENDDO
       4916     2               C
       4917     2               C         TO AVOID REVERSE FLOW AT THE FREE BOUNDARY
       4918     2               C
       4919     3                            IF(LFREE.NE.0) THEN
       4920     3               *POPTION INDEP(U,V,W)
       4921     3               *$*ASSERT PERMUTATION ( LPFREE )
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      XPFREE, LPFREE, YPFREE, ZPFREE
                              <<< Loop-information  End >>>
       4922     4   s    s                      DO 6300 IBP = 1 , NPFREE
       4923     4   m    m                         FACTOR = XPFREE(IBP)*U(LPFREE(IBP))
       4924     4                    *                    +YPFREE(IBP)*V(LPFREE(IBP))
       4925     4                    *                    +ZPFREE(IBP)*W(LPFREE(IBP))
       4926     5   s    s                         IF(FACTOR.GT.0.E0) THEN
       4927     5   s    s                            U(LPFREE(IBP)) = U(LPFREE(IBP))
       4928     5                    *                               -FACTOR*XPFREE(IBP)
       4929     5   s    s                            V(LPFREE(IBP)) = V(LPFREE(IBP))
       4930     5                    *                               -FACTOR*YPFREE(IBP)
       4931     5   s    s                            W(LPFREE(IBP)) = W(LPFREE(IBP))
       4932     5                    *                               -FACTOR*ZPFREE(IBP)
       4933     5   p    v                         ENDIF
       4934     4   p    v       6300           CONTINUE
       4935     3                            ENDIF
       4936     2               C
       4937     2                            CALL CALFBF(IPART,N2,NE,NP,NSP,NS,NFFO,MEFFOI,MDGCOE,
       4938     2                    *                   LOCAL,NODE,
       4939     2                    *                   NEFFO,LEFFO1,LEFFO2,NEFFOI,LEFFOI,NDGCOE,
       4940     2                    *                   U,V,W,FFOAIN,FFOFR,FFODP,FFODIM,FFODIR,
       4941     2                    *                   AXFFOI,AYFFOI,AZFFOI,FXFFO,FYFFO,FZFFO,COEFFO)
       4942     2               C
       4943     2                            CALL CALFRX(IPART,N2,NE,NP,NS,NSP,NODE,LOCAL,
       4944     2                    *                   U,V,W,PN,
       4945     2                    *                   NEINLT,LEINLT,XNINLT,YNINLT,ZNINLT,AEINLT,
       4946     2                    *                   NEFREE,LEFREE,XNFREE,YNFREE,ZNFREE,AEFREE,
       4947     2                    *                   QINLT,QFREE,PINLT,IUT0,IERR)
       4948     2               C
       4949     2                            CALL USTEND(1)
       4950     2                            IF(ITIMEI.NE.0) GOTO 5000
       4951     2               C
       4952     2                         ENDIF
       4953     1               C
       4954     1               #ifdef cputime
       4955     1                         IF (IWRTIM.EQ.1) CALL CLTIME('PRESS. EQ.:END  ',IUT6)
       4956     1               C         CALL CPU_TIME( TBUF4 )
       4957     1                         TBUF4 = MPI_WTIME()
       4958     1               #endif
       4959     1                         IF(IERR.NE.0) GOTO 9999
       4960     1               C
       4961     1                9998     CONTINUE
       4962     1               C
       4963     2                         IF (ITIMEI.EQ.0) THEN
       4964     2                            CALL CALUEL(N2,NE,NP,NEX,NODE,
       4965     2                    *                   U,V,W,UE,VE,WE,IUT6,IERR)
       4966     2                         ENDIF
       4967     1               C
       4968     1               C
       4969     1               C
       4970     1               C
       4971     1               C     <<<<< COMPUTE LIQUID FRACTION >>>>>
       4972     1               C
       4973     1               C
       4974     1               C
       4975     2                         IF(ICAVI.GE.1) THEN
       4976     2                           EPSF = EPST
       4977     2                           EPSRF= EPST
       4978     2                           CALL LIQUID(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       4979     2                    *                  N1,N2,ME,MELM,NE,NP,MEP,NEX,NODE,NUMIP,
       4980     2                    *                  ICAVI,ISOLT,NSIDR,NLIDR,ITIME,JSET,NMAXT,
       4981     2                    *                  NCRS,NCRS2,NPPMAX,ITPCRS,IUT6,IUT0,JUNROL,
       4982     2                    *                  NPP,IPCRS,LTAB,NITRF,RESF,
       4983     2                    *                  EPSF,EPSRF,SIGMA,CGAS,CLQD,F0,
       4984     2                    *                  FLINLT,FLIMIT,FLMIN,
       4985     2                    *                  EAP1,EAP2,EAP3,EBP,AP1,MP,IENP,NODP,NEP,
       4986     2                    *                  SN,DELTA,CM,
       4987     2                    *                  UE,VE,WE,P,DT,VISC,SCT,FL,FESRC,FLE,
       4988     2                    *                  NPINLT,LPINLT,
       4989     2                    *                  NPSET, LPSET1,LPSET2,LPSET3,
       4990     2                    *                  COVER1,COVER2,COVER3,
       4991     2                    *                  NPSND ,LPSND ,NPTSND,IPSET,IPSRC,
       4992     2                    *                  NPRCV ,LPRCV ,NPTRCV,
       4993     2                    *                  IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       4994     2                    *                  LWRK01,LWRK02,RX,RY,ACRS,AWRK,
       4995     2                    *                  WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,
       4996     2                    *                  WRK08,WRK09,WRK10,TACRS,IERR,ICRS_T)
       4997     2                         IF(IERR.NE.0) GOTO 9999
       4998     2                         ENDIF
       4999     1               C
       5000     1               C
       5001     1               C
       5002     1               CCTT      <<<<<< UPDATE S-SQUARED >>>>>>
       5003     1               C
       5004     1               C
       5005     1               C     <<<<< CALCULATE TRACTION AT BOUNDARY NODES >>>>>
       5006     1               C
       5007     1               C
       5008     1               C
       5009     1               #ifdef cputime
       5010     1                         DTBUF2=DTBUF2+(TBUF3-TBUF2)
       5011     1                         DTBUF3=DTBUF3+(TBUF4-TBUF3)
       5012     2                         IF (IALE.GE.1) THEN
       5013     2                            DTBUF5=DTBUF5+(TBUF8-TBUF7)
       5014     2                            DTBUF6=DTBUF6+(TBUF9-TBUF8)
       5015     2                         ENDIF
       5016     1               #endif
       5017     2                         IF(ITIME.GE.1 .AND. IRCAPC.EQ.1) THEN
       5018     2               #ifdef RCAPCPL
       5019     2               C
       5020     2               #ifdef cputime
       5021     2               C            CALL CPU_TIME(TWRK1)
       5022     2                            TWRK1 = MPI_WTIME()
       5023     2                            IF (IWRTIM.EQ.1) CALL CLTIME('CALC TRAC :START',IUT6)
       5024     2               #endif
       5025     2                            CALL TRACTX(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       5026     2                    *               ME,MP,NE,NP,NODE,N1,N2,NEX,
       5027     2                    *               RHO000,U000,U,V,W,PN,VISC,
       5028     2                    *               NELM,EAP2,IENP,NODP,NEP,MEP,SN,CM,
       5029     2                    *               SIJ,WRK01,WRK02,WRK03,BFCPL,RX,RY,
       5030     2                    *               IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       5031     2                    *               NPCPL,LPCPL,XPCPL,YPCPL,ZPCPL,
       5032     2                    *               IUT0,IERR)
       5033     2               #ifdef cputime
       5034     2                            IF (IWRTIM.EQ.1) CALL CLTIME('CALC TRAC :END  ',IUT6)
       5035     2               C            CALL CPU_TIME(TWRK2)
       5036     2                            TWRK2 = MPI_WTIME()
       5037     2                            IF (IALE.GE.1) DTALE(8)=DTALE(8)+(TWRK2-TWRK1)
       5038     2               C
       5039     2                            IF (IWRTIM.EQ.1) CALL CLTIME('SET TRAC  :START',IUT6)
       5040     2               #endif
       5041     2                            CALL RCAPF_SET_TRAC(LPCPL,NPCPL,BFCPL,NDOF)
       5042     2               #ifdef cputime
       5043     2                            IF (IWRTIM.EQ.1) CALL CLTIME('SET TRAC  :END  ',IUT6)
       5044     2               #endif
       5045     2               C
       5046     2                            IF (IALE.EQ.1) THEN
       5047     2               C
       5048     2                               IFLCPL=1
       5049     2                               NITRCP=NITRCP+1
       5050     2               #ifdef cputime
       5051     2                               IF (IWRTIM.EQ.1) CALL CLTIME('GET CONV. :START',IUT6)
       5052     2               #endif
       5053     2                               CALL RCAPF_GET_CONVERGENCE(ICNCPL)
       5054     2               #ifdef cputime
       5055     2                               IF (IWRTIM.EQ.1) CALL CLTIME('GET CONV. :END  ',IUT6)
       5056     2               #endif
       5057     2               C
       5058     2                               IF (ICNCPL.LT.1) THEN
       5059     2                                  DO 2420 IP=1,NP
       5060     2                                     X(IP)=XO(IP)
       5061     2                                     Y(IP)=YO(IP)
       5062     2                                     Z(IP)=ZO(IP)
       5063     2                                     U(IP)=UO(IP)
       5064     2                                     V(IP)=VO(IP)
       5065     2                                     W(IP)=WO(IP)
       5066     2                                     PN(IP)=PNO(IP)
       5067     2                2420              CONTINUE
       5068     2                                  DO 2430 IE=1,NE
       5069     2                                     P(IE)=PO(IE)
       5070     2                2430              CONTINUE
       5071     2               C
       5072     2                                  GOTO 5002
       5073     2                               ENDIF
       5074     2               C
       5075     2                            ENDIF
       5076     2               C
       5077     2               #endif
       5078     2                         ENDIF
       5079     1               C
       5080     1               C
       5081     1               C
       5082     1               C     <<<<< CALCULATE FLUID FORCE ACTING ON THE BODY >>>>>
       5083     1               C
       5084     1               C
       5085     1               C
       5086     2                         IF(ITIME.GE.1 .AND. NEBODY.GE.1) THEN
       5087     2                            IMODE = 3
       5088     2                            CALL FORC3X(IMODE,U,V,W,P,VISC,NODE,NE,NP,N1,N2,
       5089     2                    *                   AEBODY,XNBODY,YNBODY,ZNBODY,
       5090     2                    *                   DXBODY,DYBODY,DZBODY,LEBODY,NEBODY,
       5091     2                    *                   FX,FY,FZ,IVOF,NEFLD2,LEFLD2,LWRK01,
       5092     2                    *                   FXVIS,FYVIS,FZVIS)
       5093     2               C
       5094     2                         ENDIF
       5095     1               C
       5096     1               C
       5097     1               C
       5098     1               C     <<<<< SOLVE VOF EQUATIONS >>>>>
       5099     1               C
       5100     1               C
       5101     1               C
       5102     2                         IF (IVOF.GE.1) THEN
       5103     2               #ifdef cputime
       5104     2                            TBUF10 = MPI_WTIME()
       5105     2               #endif
       5106     2                            CALL SLVVOF(ITIME,IVOF,NSCYC,
       5107     2                    *                   NE,NP,NFACE,NFACE1,NFACE2,NFACE3,
       5108     2                    *                   N2,NEX,NSP,NS,MELM,NODE,CM,
       5109     2                    *                   LOCAL,LFACE,LEFACE,
       5110     2                    *                   MEP,MP,NEP,IENP,
       5111     2                    *                   U,V,W,DELTA,AVEC,DVEC,DT,
       5112     2                    *                   NPWALL,NPINLT,LPWALL,LPINLT,
       5113     2                    *                   NFWALL,NFINLT,NFFREE,NFSYMT,
       5114     2                    *                   LFWALL,LFINLT,LFFREE,LFSYMT,FINLT,
       5115     2                    *                   IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
       5116     2                    *                   NDOMF,MBFDOM,LDOMF,NBFDOM,IFSLF,IFSND,
       5117     2                    *                   EPSVF,EPSRVF,NMAXVF,
       5118     2                    *                   FE,FFA,FVOL,FMIN,FMAX,CMAX,FLXIN,FLXOUT,
       5119     2                    *                   NVCRR,NVERR,RESVF,
       5120     2                    *                   NITRVF,NEFLD2,NPFLD2,LEFLD2,LPFLD2,
       5121     2                    *                   MWRK,LWRK01,LWRK02,LWRK03,LWRK04,LWRK05,
       5122     2                    *                   AAD,AAE,WRK3,WRK01,WRK02,WRK03,
       5123     2                    *                   WRK04,WRK05,WRK06,WRK07,WRK08,WRK09,WRK10,
       5124     2                    *                   RX,RY,
       5125     2                    *                   FWRK01,FWRK02,FWRK03,
       5126     2                    *                   FBWRK1,FBWRK2,FBWRK3,
       5127     2                    *                   FBWRK4,FBWRK5,FBWRK6,FBWRK7,
       5128     2                    *                   EAP1,
       5129     2                    *                   IUT6,IUT0,IERR)
       5130     2                            CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
       5131     3                            IF(IERRA.NE.0) THEN
       5132     3                               WRITE(IUT0,*) BLANK
       5133     3                               WRITE(IUT0,*) ERMSGC
       5134     3                               GO TO 9999
       5135     3                            ENDIF
       5136     2               #ifdef cputime
       5137     2                            TBUF11 = MPI_WTIME()
       5138     2                            DTBUF7=DTBUF7+(TBUF11-TBUF10)
       5139     2               #endif
       5140     2                         ENDIF
       5141     1               C
       5142     1               C
       5143     1               C
       5144     1               C     <<<<< SET PROPERTIES >>>>>
       5145     1               C
       5146     1               C
       5147     1               C
       5148     1                         CALL SETPRO(IVOF,IPRESS,N2,NE,NP,NEX,NODE,IEPROP,
       5149     1                    *                MAXPRO,LPRO,CPRO0,CPRO1,CPRO2,CTREF,
       5150     1                    *                FE,RHOF,RHOF2,RHOS,VISCM,VISCM2,
       5151     1                    *                CPF,CPS,CONDF,CONDS,PRT,T000,TREF,T,FLE,
       5152     1                    *                RHO3D,VISC,RHOCP,COND3D,WRK01,IUT0,IERR)
       5153     1                         CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
       5154     2                         IF(IERRA.NE.0) THEN
       5155     2                            WRITE(IUT0,*) BLANK
       5156     2                            WRITE(IUT0,*) ERMSGC
       5157     2                            GO TO 9999
       5158     2                         ENDIF
       5159     1               C
       5160     1               C
       5161     1               C
       5162     1               C     <<<<< CALCULATE ELEMENT SMAGORINSKY CONSTANTS >>>>>
       5163     1               C
       5164     1               C
       5165     1               C
       5166     2                         IF(IMODEL.EQ.2 .AND. MOD(ITIME,INTDYN).EQ.0) THEN
       5167     3                            IF (IDSM.EQ.2) THEN
       5168     3                                CALL DYN3DX
       5169     3                    *          ( MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       5170     3                    *            VISCM,ALFDYN,FILTER,U,V,W,RESDYN,NITDYN,
       5171     3                    *            CM,ATEST0,AAVER0,
       5172     3                    *            NODE,ME,MP,NE,NP,N2,NEX,
       5173     3                    *            NELM,EAP1,EAP2,IENP,JENP,NODP,NEP,MEP,
       5174     3                    *            IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       5175     3                    *            NUMIP,CS,AML,AMM,S,UI,UIJ,SIJN,SIJ,SSIJ,
       5176     3                    *            RX,RY,WRK01,WRK02,WRK03,WRK04,WRK05,
       5177     3                    *            WRK06,WRK07,WRK08,WRK09,WRK10,WRK11,LWRK01,
       5178     3                    *            MWRK,WRKN,
       5179     3                    *            NPP,NCRS,IPCRS,ATESPC,AAVEPC,
       5180     3                    *            JUNROL,NPPMAX,NCRS2,WRK12,TACRS,ITPCRS,
       5181     3                    *            CSMAX,
       5182     3                    *            IUT0,IERR,IUT6,ICRS_T)
       5183     3                            ELSE
       5184     3                                CALL DYNA3D
       5185     3                    *                 (MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
       5186     3                    *                  VISC,ALFDYN,GAMDYN,NAVDYN,FILTER,U,V,W,
       5187     3                    *                  DNXI,DNYI,DNZI,SN,CM,
       5188     3                    *                  NODE,ME,MELM,NE,NP,N1,N2,NEX,
       5189     3                    *                  IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       5190     3                    *                  CS,AML,AMM,S,UI,UIJ,SIJN,SIJ,SSIJ,
       5191     3                    *                  RX,RY,RZ,WRK01,WRK02,WRK03,
       5192     3                    *                  WRK04,WRK05,WRK06,WRK07,
       5193     3                    *                  IVOF,NEFLD2,LEFLD2,LWRK01,
       5194     3                    *                  EAP3,NODP,IENP,MEP,MP,NEP,
       5195     3                    *                  IUT0,IERR)
       5196     3                            ENDIF
       5197     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 800
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 416, MVE: 7)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CS
                              <<< Loop-information  End >>>
       5198     3  pp   2v                    DO 535 IE = 1 , NE
       5199     3   p   2v                        CS(IE) = MIN(CS(IE),CSMAX)
       5200     3   p   2v        535         CONTINUE
       5201     2               C
       5202     3                            IF(IERR.NE.0) THEN
       5203     3                               WRITE(IUT0,*) BLANK
       5204     3                               WRITE(IUT0,*) ERMSGC
       5205     3                               GOTO 9999
       5206     3                            ENDIF
       5207     2               C
       5208     3                            IF(MONITR.EQ.2) THEN
       5209     3                               WRITE(IUT6,*) 'FILTERING OPERATIONS IN DYN3DX'
       5210     3                               WRITE(IUT6,'(5I13)')   (NITDYN(I),I=1,23)
       5211     3                               WRITE(IUT6,'(5E13.5)') (RESDYN(I),I=1,23)
       5212     3                            ENDIF
       5213     2                         ENDIF
       5214     1               C
       5215     1               C
       5216     1               C
       5217     1               C     <<<<< CALCULATE STATISTICS >>>>>
       5218     1               C
       5219     1               C
       5220     1               C
       5221     2                         IF(ITIME.GE.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 93
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      TR, VR, T, FLR, TA, FL, PNR, FLA, PN, WR
                              <<<      PNA, W, WA, V, VA, US
                              <<<    PREFETCH(SOFT) : 10
                              <<<     SEQUENTIAL : 10
                              <<<      U: 2, WS: 2, VS: 2, UR: 2, UA: 2
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 13
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5222     3  pp    v                    DO 6400 IP = 1 , NP
       5223     3   p    v                        UA(IP) = UA(IP)+U(IP)/NTIME
       5224     3   p    v                        UR(IP) = UR(IP)+U(IP)*U(IP)/NTIME
       5225     3   p    v                        US(IP) = US(IP)-V(IP)*W(IP)/NTIME
       5226     3               C
       5227     3   p    v                        VA(IP) = VA(IP)+V(IP)/NTIME
       5228     3   p    v                        VR(IP) = VR(IP)+V(IP)*V(IP)/NTIME
       5229     3   p    v                        VS(IP) = VS(IP)-W(IP)*U(IP)/NTIME
       5230     3               C
       5231     3   p    v                        WA(IP) = WA(IP)+W(IP)/NTIME
       5232     3   p    v                        WR(IP) = WR(IP)+W(IP)*W(IP)/NTIME
       5233     3   p    v                        WS(IP) = WS(IP)-U(IP)*V(IP)/NTIME
       5234     3               C
       5235     3   p    v                        PNA(IP) = PNA(IP)+PN(IP)/NTIME
       5236     3   p    v                        PNR(IP) = PNR(IP)+PN(IP)*PN(IP)/NTIME
       5237     3               C
       5238     3   p    v                        FLA(IP) = FLA(IP) + FL(IP)/NTIME
       5239     3   p    v                        FLR(IP) = FLR(IP) + FL(IP)*FL(IP)/NTIME
       5240     3               C
       5241     3   p    v                        TA(IP)  = TA(IP) + T(IP)/NTIME
       5242     3   p    v                        TR(IP)  = TR(IP) + T(IP)*T(IP)/NTIME
       5243     3               C
       5244     3   p    v       6400         CONTINUE
       5245     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 250
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.41, ITR: 96, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FEA, PR, PA, VISC, VISCA, P, FE, FER
                              <<< Loop-information  End >>>
       5246     3  pp    v                    DO 6500 IE = 1 , NE
       5247     3   p    v                        VISCA(IE) = VISCA(IE)+VISC(IE)/NTIME
       5248     3   p    v                        PA(IE)    = PA(IE)+P(IE)/NTIME
       5249     3   p    v                        PR(IE)    = PR(IE)+P(IE)*P(IE)/NTIME
       5250     3   p    v                        FEA(IE)   = FEA(IE)+FE(IE)/NTIME
       5251     3   p    v                        FER(IE)   = FER(IE)+FE(IE)*FE(IE)/NTIME
       5252     3   p    v       6500         CONTINUE
       5253     2                         ENDIF
       5254     1               C
       5255     1               C
       5256     1               C
       5257     1               C     <<<<< SAVE CURRENT FLOW FIELD >>>>>
       5258     1               C
       5259     1               C
       5260     1               C
       5261     2                         IF(ITIME.GE.1 .AND. MOD(ITIME,INTFSV).EQ.0) THEN
       5262     2                             WRITE(COMSET(1),*) '      TIME:',TIMEW
       5263     2                             WRITE(COMSET(2),*) '      STEP:',ISTEP
       5264     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 267
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.44, ITR: 96, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      U, PN, WRK05, WRK04, WRK03, W, T, WRK02
                              <<<      V, FL, WRK01, WRK11
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 4
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5265     3  pp    v                    DO IP=1,NP
       5266     3   p    v                        WRK01(IP)=U (IP)*U000
       5267     3   p    v                        WRK02(IP)=V (IP)*U000
       5268     3   p    v                        WRK03(IP)=W (IP)*U000
       5269     3   p    v                        WRK04(IP)=PN(IP)*(RHO000*U000*U000)
       5270     3   p    v                        WRK05(IP)=TREF+T(IP)*T000
       5271     3   p    v                        WRK11(IP)=FL(IP)
       5272     3   p    v                    ENDDO
       5273     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.25, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      P, WRK06
                              <<< Loop-information  End >>>
       5274     3  pp   2v                    DO IE=1,NE
       5275     3   p   2v                       WRK06(IE)=P(IE)*(RHO000*U000*U000)
       5276     3   p   2v                    ENDDO
       5277     2               C
       5278     3                             IF(IVOF.GE.1) THEN
       5279     3                                NEFRC=NE0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE, WRK09
                              <<< Loop-information  End >>>
       5280     4  pp   2v                       DO IE=1,NE
       5281     4   p   2v                          WRK09(IE)=FE(IE)
       5282     4   p   2v                       ENDDO
       5283     3                             ELSE
       5284     3                                NEFRC=0
       5285     3                             ENDIF
       5286     2               C
       5287     2               C             CONVERTE OUTPUT DATA
       5288     2                             CALL RELCNV(NP,NP,WRK01,LPATOB,WRK10,IERR,IUT0)
       5289     2                             CALL RELCNV(NP,NP,WRK02,LPATOB,WRK10,IERR,IUT0)
       5290     2                             CALL RELCNV(NP,NP,WRK03,LPATOB,WRK10,IERR,IUT0)
       5291     2                             CALL RELCNV(NP,NP,WRK04,LPATOB,WRK10,IERR,IUT0)
       5292     2                             CALL RELCNV(NP,NP,WRK05,LPATOB,WRK10,IERR,IUT0)
       5293     2                             CALL RELCNV(NE,NE,WRK06,LEATOB,WRK10,IERR,IUT0)
       5294     3                             IF (IVOF.GE.1) THEN
       5295     3                             CALL RELCNV(NE,NE,WRK09,LEATOB,WRK10,IERR,IUT0)
       5296     3                             ENDIF
       5297     2               C
       5298     3                             IF (ICAVI.GE.1) THEN
       5299     3                             CALL RELCNV(NP,NP,WRK11,LPATOB,WRK10,IERR,IUT0)
       5300     3                             ENDIF
       5301     2               C
       5302     2                             IACT     = 6
       5303     2                             CALL GFALL(IUT0,IUT6,IUTFS,FILEFS,
       5304     2                    *               MCOM,4,COMFLE,
       5305     2                    *               MCOM,0,COMSET,
       5306     2                    *               IACT,IWRITE,INAME,IRESV,
       5307     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       5308     2                    *               '*TIME_PS *STEP_PS *VELO_3D *PRES_3E
       5309     2                    *                *PRES_3D *TEMP_3D
       5310     2                    *                *VFRC_3E *LIQD_3D !',
       5311     2                    *               NAME,TIMEW,
       5312     2                    *               NAME,ISTEP,
       5313     2                    *               NAME,MP,NP0,WRK01,WRK02,WRK03,
       5314     2                    *               NAME,ME,NE0,WRK06,
       5315     2                    *               NAME,MP,NP0,WRK04,
       5316     2                    *               NAME,MP,NP0,WRK05,
       5317     2                    *               NAME,ME,NEFRC,WRK09,
       5318     2                    *               NAME,MP,NP0  ,WRK11,
       5319     2                    *               ICHECK)
       5320     2               C
       5321     3                             IF (IALE.GE.1) THEN
       5322     3               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 500
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.20, ITR: 128, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      Z, X, Y, WRK02, WRK01, WRK03
                              <<< Loop-information  End >>>
       5323     4  pp    v                       DO IP=1,NP
       5324     4   p    v                          WRK01(IP)=X(IP)*D000
       5325     4   p    v                          WRK02(IP)=Y(IP)*D000
       5326     4   p    v                          WRK03(IP)=Z(IP)*D000
       5327     4   p    v                       ENDDO
       5328     3               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 38
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 80, MVE: 3)
                              <<< Loop-information  End >>>
       5329     4  pp   2                        DO IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       5330     5   p   2v                          DO I=1,8
       5331     5   p   2v                             NODWK1(I,IE)=NODE(I,IE)
       5332     5   p   2v                          ENDDO
       5333     4   p   2                        ENDDO
       5334     3               C
       5335     3               C                CONVERTE OUTPUT DATA
       5336     3                                CALL NODCNV(NP,NE,N2,NODWK1,LPATOB,LEATOB,NODWK2,
       5337     3                    *                       IERR,IUT0)
       5338     3               C
       5339     3                                NDUM=N2
       5340     3                                CALL GFALL(IUT0,IUT6,IUTMR,FILEDM,
       5341     3                    *                      MCOM,4,COMFLE,
       5342     3                    *                      MCOM,0,COMSET,
       5343     3                    *                      IACT,IWRITE,INAME,IRESV,
       5344     3                    *                      ICAST,IDATA0,IALL,ISKIP,IERR,
       5345     3                    *                      '*GRID_3D *NODE_3D !',
       5346     3                    *                      NAME,MP,NP0,WRK01,WRK02,WRK03,
       5347     3                    *                      NAME,ME,N2,NE0,NDUM,NODWK1,
       5348     3                    *                      ICHECK)
       5349     4                                IF(IERR.NE.0) THEN
       5350     4                                   WRITE(IUT0,*) BLANK
       5351     4                                   WRITE(IUT0,*) ERMSGC
       5352     4                                   GO TO 9999
       5353     4                                ENDIF
       5354     3                             ENDIF
       5355     2                             WRITE(IUT6,*) ' DONE!'
       5356     2               C
       5357     2                         ENDIF
       5358     1               C
       5359     1               C
       5360     1               C
       5361     1               C
       5362     1               C     <<<<< SAVE SOUND SOURCE FIELD >>>>>
       5363     1               C
       5364     1               C
       5365     1               C
       5366     2                         IF(ITIME.GE.1 .AND. JSSMAP.EQ.1. AND.
       5367     2                    *        MOD(ITIME,NOUTSS).EQ.0) THEN
       5368     2               C
       5369     2                             WRITE(COMSET(1),*) '      TIME:',TIMEW
       5370     2                             WRITE(COMSET(2),*) '      STEP:',ISTEP
       5371     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 500
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.20, ITR: 128, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      W, U, V, WRK02, WRK01, WRK03
                              <<< Loop-information  End >>>
       5372     3  pp    v                    DO IP=1,NP
       5373     3   p    v                        WRK01(IP)=U(IP)*U000
       5374     3   p    v                        WRK02(IP)=V(IP)*U000
       5375     3   p    v                        WRK03(IP)=W(IP)*U000
       5376     3   p    v                    ENDDO
       5377     2               CC
       5378     2               CC            [1] RELAX (U,V,W)
       5379     2                             CALL RLXVEL(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,NITRSS,
       5380     2                    *                    GAMDYN,FILTER,WRK01,WRK02,WRK03,
       5381     2                    *                    DNXI,DNYI,DNZI,SN,CM,
       5382     2                    *                    NODE,ME,MELM,NE,NP,N1,N2,NEX,
       5383     2                    *                    IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       5384     2                    *                    WRK04,WRK05,WRK06,WRK07,WRK08,WRK09,RX,RY,
       5385     2                    *                    WRK10,WRK11,WRK12,WRK13,
       5386     2                    *                    IVOF,NEFLD2,LEFLD2,LWRK01,
       5387     2                    *                    EAP3,IENP,NEP,MEP,MP,
       5388     2                    *                    IUT0,IERR)
       5389     2               C
       5390     3                                 IF(NPASRC.GT.0) THEN
       5391     3               CC        [2] SET   (U,V,W) TO SOUND SOURCE POIUNT
       5392     3                                     CALL SSVEL3(N2,NEX,NP,NE,NODE,WRK04,WRK05,WRK06,
       5393     3                    *                        NPASRC,LEASRC,COEAS1,COEAS2,COEAS3,
       5394     3                    *                        UASRC,VASRC,WASRC,
       5395     3                    *                        IUT0,IERR)
       5396     3               C
       5397     3               CC        [3] WRITE (U,V,W) TO SOUND SOURCE POIUNT
       5398     3                                    IACT=6
       5399     3                                     CALL GFALL(IUT0,IUT6,IUTSS,FILESS,
       5400     3                    *                           MCOM,4,COMFLE,
       5401     3                    *                           MCOM,0,COMSET,
       5402     3                    *                           IACT,IWRITE,INAME,IRESV,
       5403     3                    *                           ICAST,IDATA0,IALL,ISKIP,IERR,
       5404     3                    *                           '*TIME_PS *STEP_PS *BC_IV3D !',
       5405     3                    *                           NAME,TIMEW,
       5406     3                    *                           NAME,ISTEP,
       5407     3                    *                           NAME,NPASRC,NPASRC,UASRC,VASRC,WASRC,
       5408     3                    *                           ICHECK)
       5409     3               CC
       5410     3                                 ENDIF
       5411     2               C
       5412     2                         ENDIF
       5413     1               C
       5414     1               C
       5415     1               C
       5416     1               C            <<<<< SAVE SURFACE PRESSURE DATA >>>>>
       5417     1               C
       5418     1               C
       5419     1               C
       5420     2                         IF(NEBODY.GE.1.AND.ITIME.GE.1.AND.MOD(ITIME,INTPSV).EQ.0) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 327
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.57, ITR: 160, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK04, FZVIS, FYVIS, WRK03, FXVIS, WRK02
                              <<<      WRK01
                              <<< Loop-information  End >>>
       5421     3  pp    v                    DO 6600 IEBODY = 1 , NEBODY
       5422     3   p    v                        WRK01(IEBODY) = P(LEBODY(1,IEBODY))*(RHO000*U000*U000)
       5423     3   p    v                        WRK02(IEBODY) = FXVIS(IEBODY)
       5424     3                    *                            *(RHO000*U000*U000*D000*D000)
       5425     3   p    v                        WRK03(IEBODY) = FYVIS(IEBODY)
       5426     3                    *                            *(RHO000*U000*U000*D000*D000)
       5427     3   p    v                        WRK04(IEBODY) = FZVIS(IEBODY)
       5428     3                    *                            *(RHO000*U000*U000*D000*D000)
       5429     3   p    v       6600         CONTINUE
       5430     2               C
       5431     2                             WRITE(COMSET(1),*) '      TIME:',TIMEW
       5432     2                             WRITE(COMSET(2),*) '      STEP:',ISTEP
       5433     2               C
       5434     3                             IF(JSPADV.EQ.0) THEN
       5435     3                                 IACT     = 6
       5436     3                                 ITARGT   = 2
       5437     3                                 CALL GFALL(IUT0,IUT6,IUTPS,FILEPS,
       5438     3                    *                       MCOM,0,COMFLE,
       5439     3                    *                       MCOM,2,COMSET,
       5440     3                    *                       IACT,IWRITE,INAME,IRESV,
       5441     3                    *                       ICAST,IDATA0,IALL,ISKIP,IERR,
       5442     3                    *                       '*TIME_PS *STEP_PS
       5443     3                    *                        *PRES_2E *FORC_3E !',
       5444     3                    *                       NAME,TIMEW,
       5445     3                    *                       NAME,ISTEP,
       5446     3                    *                       NAME,MWRK,NEBODY,WRK01,
       5447     3                    *                       NAME,MWRK,NEBODY,WRK02,WRK03,WRK04,
       5448     3                    *                       ICHECK)
       5449     3                             ELSE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      PN, WRK01
                              <<< Loop-information  End >>>
       5450     4  pp   2v                        DO IP=1,NP
       5451     4   p   2v                            WRK01(IP)=PN(IP)
       5452     4   p   2v                        ENDDO
       5453     3                                 CALL RELCNV(NP,NP,WRK01,LPATOB,WRK02,IERR,IUT0)
       5454     3                                 WRITE(IUTPS,*) 'TIME',TIMEW
       5455     3                                 WRITE(IUTPS,*) 'STEP',ISTEP
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPBODY
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5456     3        s                        WRITE(IUTPS,'(10E13.5)')
       5457     3                    *            (WRK01(LPBODY(IBP))*U000*U000*RHOF,IBP=1,NPBODY)
       5458     3                             ENDIF
       5459     2                             WRITE(IUT6,*) ' DONE! '
       5460     2                         ENDIF
       5461     1               C
       5462     1               
       5463     2                         IF(ITIME.GE.1) THEN
       5464     2                             HST( 1,ITIME) = TIMEW
       5465     2                             HST( 2,ITIME) = DIVMAX*(U000/D000)
       5466     2                             HST( 3,ITIME) = VISCAV*(D000*U000)
       5467     2                             HST( 4,ITIME) = NITRP
       5468     2                             HST( 5,ITIME) = RESP
       5469     2                             HST( 6,ITIME) = FX*(RHO000*U000*U000*D000*D000)
       5470     2                             HST( 7,ITIME) = FY*(RHO000*U000*U000*D000*D000)
       5471     2                             HST( 8,ITIME) = FZ*(RHO000*U000*U000*D000*D000)
       5472     2                             HST( 9,ITIME) = FLOAT(NITRU)
       5473     2                             HST(10,ITIME) = FLOAT(NITRV)
       5474     2                             HST(11,ITIME) = FLOAT(NITRW)
       5475     2                             HST(12,ITIME) = FLOAT(NITRT)
       5476     2                             HST(15,ITIME) = RESU
       5477     2                             HST(16,ITIME) = RESV
       5478     2                             HST(17,ITIME) = RESW
       5479     2                             HST(18,ITIME) = REST
       5480     2                             HST(20,ITIME) = RESP
       5481     2                             HST(21,ITIME) = TSUM
       5482     2                             HST(22,ITIME) = ERROVS
       5483     2                             HST(23,ITIME) = FVOL*(D000*D000*D000)
       5484     2                             HST(24,ITIME) = FMIN
       5485     2                             HST(25,ITIME) = FMAX
       5486     2                             HST(26,ITIME) = CMAX
       5487     2                             HST(27,ITIME) = FLXIN *(D000*D000*U000)
       5488     2                             HST(28,ITIME) = FLXOUT*(D000*D000*U000)
       5489     2               C
       5490     2               C  <<<<< INTERPOLATE TOTAL EDDY VISCOSITY FROM ELEMENT TO NODE >>>>>
       5491     2                         CALL NDLEX3(ME,NE,NP,MEP,SNP,IENP,NEP,
       5492     2                    *                IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       5493     2                    *                VISC,WRK01,CM,IUT0,IERR,RX,RY,MAXBUF)
       5494     2               C
       5495     2               C  <<<<< INTERPOLATE PRESSURE FROM ELEMENT TO NODE >>>>>
       5496     2                         CALL NDLEX3(ME,NE,NP,MEP,SNP,IENP,NEP,
       5497     2                    *                IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
       5498     2                    *                P,PN,CM,IUT0,IERR,RX,RY,MAXBUF)
       5499     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IESMPL, GSMPL, ESMPL, TSMPL, LSMPL, HST
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 6
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5500     3   s    s                    DO 6700 ISMPL = 1 , NSMPL
       5501     3   m    m                        DUM = 0.E0
       5502     3   s    s                        IE=IESMPL(ISMPL)
       5503     3   s    s                        XI=GSMPL(ISMPL)
       5504     3   s    s                        ET=ESMPL(ISMPL)
       5505     3   s    s                        ZT=TSMPL(ISMPL)
       5506     4   s    s                        IF(     LSMPL(ISMPL).EQ.1) THEN
       5507     4   s    s                            CALL HOKAN
       5508     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5509     4                    *                        U,IE,XI,ET,ZT,DUM )
       5510     4   m    m                            DUM = DUM*U000
       5511     4   m    m                        ELSE IF(LSMPL(ISMPL).EQ.2) THEN
       5512     4   s    s                            CALL HOKAN
       5513     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5514     4                    *                        V,IE,XI,ET,ZT,DUM )
       5515     4   m    m                            DUM = DUM*U000
       5516     4   m    m                        ELSE IF(LSMPL(ISMPL).EQ.3) THEN
       5517     4   s    s                            CALL HOKAN
       5518     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5519     4                    *                        W,IE,XI,ET,ZT,DUM )
       5520     4   m    m                            DUM = DUM*U000
       5521     4   m    m                        ELSE IF(LSMPL(ISMPL).EQ.4) THEN
       5522     4   s    s                            CALL HOKAN
       5523     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5524     4                    *                        PN,IE,XI,ET,ZT,DUM )
       5525     4   m    m                            DUM = DUM*RHO000*U000*U000
       5526     4   m    m                        ELSE IF(LSMPL(ISMPL).EQ.5) THEN
       5527     4   m    m                            CALL HOKAN
       5528     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5529     4                    *                        FL,IE,XI,ET,ZT,DUM )
       5530     4   m    m                        ELSE IF(LSMPL(ISMPL).EQ.6) THEN
       5531     4   s    s                            CALL HOKAN
       5532     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5533     4                    *                        T,IE,XI,ET,ZT,DUM )
       5534     4   m    m                            DUM = TREF + DUM*T000
       5535     4   s    s                        ELSE IF(LSMPL(ISMPL).EQ.7) THEN
       5536     4               CCTT
       5537     4               C                     // TOTAL VISCOSITY
       5538     4   s    s                            CALL HOKAN
       5539     4                    *                      ( MP,NP,ME,NE,N2,NODE,NEX,IUT0,
       5540     4                    *                        WRK01,IE,XI,ET,ZT,DUM )
       5541     4   m    m                            DUM = DUM * (D000*U000)
       5542     4               CCTT
       5543     4   p    v                        END IF
       5544     3   s    s                        HST(ISMPL+MRESV,ITIME) = DUM
       5545     3   p    s       6700         CONTINUE
       5546     2                         ENDIF
       5547     1               C
       5548     1               C
       5549     1               C
       5550     1               C            <<<<< WRITE CALCULATION SEQUENCE >>>>>
       5551     1               C
       5552     1               C
       5553     1               C
       5554     2                         IF(ITIME.GE.1 .AND. MOD(ITIME,INTPRN).EQ.0) THEN
       5555     2               C
       5556     2                             WRITE(IUT6,9000) ISTEP,NITRP,TIMEW,DIVMAX,RESP
       5557     2               C
       5558     2                             WRITE(IUT6,9100) NITRU,NITRV,NITRW,RESU,RESV,RESW
       5559     2                             IF(IHEAT.GT.0)
       5560     2                    *        WRITE(IUT6,9110) NITRT,            REST, TSUM
       5561     2               C
       5562     2                             IF(NSMPL.GE.1)
       5563     2                    *        WRITE(IUT6,9200)
       5564     2                    *        HST(MRESV+1,ITIME),HST(MRESV+2,ITIME),HST(MRESV+3,ITIME)
       5565     2               C
       5566     2                             IF(NSMPL.GE.4)
       5567     2                    *        WRITE(IUT6,9300)
       5568     2                    *        HST(MRESV+4,ITIME),HST(MRESV+5,ITIME),HST(MRESV+6,ITIME)
       5569     2               C
       5570     2                             IF(NSMPL.GE.7)
       5571     2                    *         WRITE(IUT6,9400)
       5572     2                    *        HST(MRESV+7,ITIME),HST(MRESV+8,ITIME),HST(MRESV+9,ITIME)
       5573     2               C
       5574     2                             IF(NEBODY.GE.1) WRITE(IUT6,9500) FX, FY, FZ
       5575     2               C
       5576     3                             IF (IVOF.GE.1) THEN
       5577     3                                QINLT=FLXIN
       5578     3                                QFREE=FLXOUT
       5579     3                             ENDIF
       5580     2                             QINLT=QINLT*(D000*D000*U000)
       5581     2                             QFREE=QFREE*(D000*D000*U000)
       5582     2                             PINLT=PINLT*(RHO000*U000*U000)
       5583     2                             WRITE(IUT6,9510)QINLT, QFREE, PINLT
       5584     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FFOFR, FFODP
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 4
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5585     3   s    s                    DO IFFO=1,NFFO
       5586     3   m    m                    WRITE(IUT6,9520) IFFO, FFOFR(IFFO), FFODP(IFFO)
       5587     3   p    v                    ENDDO
       5588     2               C
       5589     2                             IF(NFRCNT.LT.NTIME)
       5590     2                    *        WRITE(IUT6,9530) QCOEF(1),QCOEF(2),QCOEF(3)
       5591     2               C
       5592     3                             IF (IALE.EQ.1) THEN
       5593     3               #ifdef RCAPCPL
       5594     3                                WRITE(IUT6,9560) NITRA ,RESA, NITRCP
       5595     3               #endif
       5596     3                             ELSE IF (IALE.EQ.2.OR.IALE.EQ.3) THEN
       5597     3                                WRITE(IUT6,9570) NITRA ,RESA
       5598     3                             ENDIF
       5599     2               C
       5600     3                             IF (IVOF.GE.1) THEN
       5601     3                                WRITE(IUT6,9580) FVOL,FMIN,FMAX
       5602     3                                WRITE(IUT6,9590) CMAX,NVCRR,NVERR
       5603     3                                WRITE(IUT6,9592) NITRVF,RESVF
       5604     3                             ENDIF
       5605     2               C
       5606     2               #ifdef cputime
       5607     2               CC            WRITE(IUT6,'(A10,3E13.5)') "CPU TIME: ", TWRK1,TWRK2,TWRK3
       5608     2                             TWRK1=0.0E0
       5609     2                             TWRK2=0.0E0
       5610     2                             TWRK3=0.0E0
       5611     2               #endif
       5612     2               C
       5613     3                             IF(JSET.NE.0) THEN
       5614     3                                 CALL CALFLO(ITIME,NE,NP,MMRF,MFRM,N2,NSP,NS,
       5615     3                    *                        NODE,LEFRM,LOCAL,
       5616     3                    *                        NBESET,LBESET,NESET,LESET4,
       5617     3                    *                        AESET,XNESET,YNESET,ZNESET,
       5618     3                    *                        NPSETR,LPSET1,LPSET3,LPSET4,LWRK01,
       5619     3                    *                        U,V,W,IUT6,FLSET,IERR)
       5620     3                             ENDIF
       5621     2               C
       5622     2                         ENDIF
       5623     1               C
       5624     1               C
       5625     1               CCTT
       5626     1               C
       5627     1               C
       5628     1                     CALL CALDNR(ITIME,EPSSU,EPSSP,NP,
       5629     1                    *            U,V,W,PN,UPREV,VPREV,WPREV,PNPREV,
       5630     1                    *            DNRU,DNRP,JCONVG,IUT0,IUT6,IERR)
       5631     1               C
       5632     1               CCTT
       5633     1               C
       5634     1               C            <<<<< EMERGENTLY END TIME MARCH TO SAVE FINAL FIELD >>>>>
       5635     1               C
       5636     1               C
       5637     1               C
       5638     2                         IF(DIVMAX.GT.DIVESC) THEN
       5639     2                             WRITE(IUT6,*) BLANK
       5640     2                             WRITE(IUT6,*) ERMSGB
       5641     2                             WRITE(IUT6,*) EREXP6, DIVESC
       5642     2                             XDIVMX=XDIVMX*D000
       5643     2                             YDIVMX=YDIVMX*D000
       5644     2                             ZDIVMX=ZDIVMX*D000
       5645     2                             WRITE(IUT6,'(A32,3E13.5)') EREXP8, XDIVMX,YDIVMX,ZDIVMX
       5646     2                             JESC = 1
       5647     2                             IF(IPART.LT.1) GO TO 7000
       5648     2                         ENDIF
       5649     1               C
       5650     1               C WHEN THE MAXIMUM DIVERGENCE EXCEEDS ESCAPE DIVERGENT LIMIT IN PARALLEL
       5651     1               C MODE, NOTICE OTHER PROCESSES TO STOP THE PROGRAM AFTER WRITING THE
       5652     1               C FIELD.
       5653     1               C
       5654     2                         IF(IPART.GE.1) THEN
       5655     2                             FJESC = FLOAT(JESC)
       5656     2                             CALL DDCOM2(FJESC, FJESCA)
       5657     3                             IF(FJESCA.GT.0.5E0) THEN
       5658     3                                 JESC = 1
       5659     3                                 GO TO 7000
       5660     3                             ENDIF
       5661     2                         ENDIF
       5662     1               C
       5663     1               C
       5664     1               C
       5665     1               C
       5666     1               C
       5667     1               C
       5668     1               C     <<<<<<< TIME-MARCHING LOOP END >>>>>>>
       5669     1               C
       5670     1               C
       5671     1               C
       5672     1               C
       5673     2                     IF(IMONTR.EQ.1)  THEN
       5674     2                         OPEN(IUT5,FILE=FILEIN,FORM='FORMATTED')
       5675     2                         CALL LESRO2(IUT0,IUT5,IUT6,JSTOP,NSTOP,JDUMP,INTDMP,IERR)
       5676     2                         CLOSE(IUT5)
       5677     2                     ENDIF
       5678     1               C
       5679     1                     IF(JSTOP.EQ.1) GOTO 5100
       5680     1                     IF(ITIME.EQ.NSTOP) GOTO 5100
       5681     1                     IF(JCONVG.EQ.1) GOTO 5100
       5682     1               C
       5683     2                     IF(JDUMP.EQ.1 )THEN
       5684     3                     IF(ITIME.GE.1 .AND. MOD(ITIME,INTDMP).EQ.0) THEN
       5685     3                         WRITE(COMSET(1),*) '      TIME:',TIMEW
       5686     3                         WRITE(COMSET(2),*) '      STEP:',ISTEP
       5687     3               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 308
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.37, ITR: 112, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK05, PN, W, V, WRK04, U, T, WRK03
                              <<<      WRK02, WRK01
                              <<< Loop-information  End >>>
       5688     4  pp    v                DO IP=1,NP
       5689     4   p    v                    WRK01(IP)=U (IP)*U000
       5690     4   p    v                    WRK02(IP)=V (IP)*U000
       5691     4   p    v                    WRK03(IP)=W (IP)*U000
       5692     4   p    v                    WRK04(IP)=PN(IP)*(RHO000*U000*U000)
       5693     4   p    v                    WRK05(IP)=TREF+T(IP)*T000
       5694     4   p    v                ENDDO
       5695     3               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.25, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      P, WRK06
                              <<< Loop-information  End >>>
       5696     4  pp   2v                DO IE=1,NE
       5697     4   p   2v                   WRK06(IE)=P(IE)*(RHO000*U000*U000)
       5698     4   p   2v                ENDDO
       5699     3               C
       5700     4                         IF(IVOF.GE.1) THEN
       5701     4                            NEFRC=NE0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE, WRK09
                              <<< Loop-information  End >>>
       5702     5  pp   2v                   DO IE=1,NE
       5703     5   p   2v                      WRK09(IE)=FE(IE)
       5704     5   p   2v                   ENDDO
       5705     4                         ELSE
       5706     4                            NEFRC=0
       5707     4                         ENDIF
       5708     3               C
       5709     3               C         CONVERTE OUTPUT DATA
       5710     3                         CALL RELCNV(NP,NP,WRK01,LPATOB,WRK10,IERR,IUT0)
       5711     3                         CALL RELCNV(NP,NP,WRK02,LPATOB,WRK10,IERR,IUT0)
       5712     3                         CALL RELCNV(NP,NP,WRK03,LPATOB,WRK10,IERR,IUT0)
       5713     3                         CALL RELCNV(NP,NP,WRK04,LPATOB,WRK10,IERR,IUT0)
       5714     3                         CALL RELCNV(NP,NP,WRK05,LPATOB,WRK10,IERR,IUT0)
       5715     3                         CALL RELCNV(NE,NE,WRK06,LEATOB,WRK10,IERR,IUT0)
       5716     4                         IF (IVOF.GE.1) THEN
       5717     4                         CALL RELCNV(NE,NE,WRK09,LEATOB,WRK10,IERR,IUT0)
       5718     4                         ENDIF
       5719     3               C
       5720     3                         NPF=0
       5721     4                         IF (IPRESS.EQ.3) THEN
       5722     4                         NPF=NP
       5723     4                         CALL RELCNV(NP,NP,FL,LPATOB,WRK10,IERR,IUT0)
       5724     4                         ENDIF
       5725     3               C
       5726     3                         IACT     = 2
       5727     3                         CALL GFALL(IUT0,IUT6,IUTFF,FILEFF,
       5728     3                    *               MCOM,0,COMFLE,
       5729     3                    *               MCOM,2,COMSET,
       5730     3                    *               IACT,IWRITE,INAME,IRESV,
       5731     3                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       5732     3                    *               '*TIME_PS *STEP_PS *VELO_3D *PRES_3E
       5733     3                    *                *PRES_3D *VFRC_3E *LIQD_3D !',
       5734     3                    *               NAME,TIMEW,
       5735     3                    *               NAME,ISTEP,
       5736     3                    *               NAME,MP,NP0,WRK01,WRK02,WRK03,
       5737     3                    *               NAME,ME,NE0,WRK06,
       5738     3                    *               NAME,MP,NP0,WRK04,
       5739     3                    *               NAME,MP,NP0,WRK05,
       5740     3                    *               NAME,NP,NPF  ,FL,
       5741     3                    *               ICHECK)
       5742     3               C
       5743     4                         IF (IALE.GE.1) THEN
       5744     4               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 187
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WMESH, UMESH, Z, WMESH_P, WRK09, VMESH_P
                              <<<      WRK08, UMESH_P, WRK07, VMESH, WRK06, Y
                              <<<      WRK04, WRK05, WRK03, WRK02
                              <<<    PREFETCH(SOFT) : 4
                              <<<     SEQUENTIAL : 4
                              <<<      X: 2, WRK01: 2
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 8
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5745     5  pp    v                   DO IP=1,NP
       5746     5   p    v                      WRK01(IP)=X(IP)*D000
       5747     5   p    v                      WRK02(IP)=Y(IP)*D000
       5748     5   p    v                      WRK03(IP)=Z(IP)*D000
       5749     5   p    v                      WRK04(IP)=UMESH  (IP)*U000
       5750     5   p    v                      WRK05(IP)=VMESH  (IP)*U000
       5751     5   p    v                      WRK06(IP)=WMESH  (IP)*U000
       5752     5   p    v                      WRK07(IP)=UMESH_P(IP)*U000
       5753     5   p    v                      WRK08(IP)=VMESH_P(IP)*U000
       5754     5   p    v                      WRK09(IP)=WMESH_P(IP)*U000
       5755     5   p    v                   ENDDO
       5756     4               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 36
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 80, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFRM, LWRK01
                              <<< Loop-information  End >>>
       5757     5  pp   2                    DO IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       5758     6   p   2v                      DO I=1,8
       5759     6   p   2v                         NODWK1(I,IE)=NODE(I,IE)
       5760     6   p   2v                      ENDDO
       5761     5   p   2                       LWRK01(IE)=LEFRM(IE)
       5762     5   p   2                    ENDDO
       5763     4               C
       5764     4               C            CONVERTE OUTPUT DATA
       5765     4                            CALL INTCNV(NE,NE,LWRK01,LEATOB,LWRK02,IERR,IUT0)
       5766     4                            CALL RELCNV(NP,NP,WRK01,LPATOB,WRK10,IERR,IUT0)
       5767     4                            CALL RELCNV(NP,NP,WRK02,LPATOB,WRK10,IERR,IUT0)
       5768     4                            CALL RELCNV(NP,NP,WRK03,LPATOB,WRK10,IERR,IUT0)
       5769     4                            CALL RELCNV(NP,NP,WRK04,LPATOB,WRK10,IERR,IUT0)
       5770     4                            CALL RELCNV(NP,NP,WRK05,LPATOB,WRK10,IERR,IUT0)
       5771     4                            CALL RELCNV(NP,NP,WRK06,LPATOB,WRK10,IERR,IUT0)
       5772     4                            CALL RELCNV(NP,NP,WRK07,LPATOB,WRK10,IERR,IUT0)
       5773     4                            CALL RELCNV(NP,NP,WRK08,LPATOB,WRK10,IERR,IUT0)
       5774     4                            CALL RELCNV(NP,NP,WRK09,LPATOB,WRK10,IERR,IUT0)
       5775     4                            CALL NODCNV(NP,NE,N2,NODWK1,LPATOB,LEATOB,NODWK2,
       5776     4                    *                  IERR,IUT0)
       5777     4               C
       5778     4                            IACT=2
       5779     4                            NDUM=N2
       5780     4                            CALL GFALL(IUT0,IUT6,IUTMR,FILEFM,
       5781     4                    *                  MCOM,0,COMFLE,
       5782     4                    *                  MCOM,2,COMSET,
       5783     4                    *                  IACT,IWRITE,INAME,IRESV,
       5784     4                    *                  ICAST,IDATA0,IALL,ISKIP,IERR,
       5785     4                    *                  '*GRID_3D *NODE_3D *ELM_ATR
       5786     4                    *                   *MOV1_3D *MOV0_3D !',
       5787     4                    *                  NAME,MP,NP0,WRK01,WRK02,WRK03,
       5788     4                    *                  NAME,ME,N2,NE0,NDUM,NODWK1,
       5789     4                    *                  NAME,ME,NE,LWRK01,
       5790     4                    *                  NAME,MP,NP0,WRK04,WRK05,WRK06,
       5791     4                    *                  NAME,MP,NP0,WRK07,WRK08,WRK09,
       5792     4                    *                  ICHECK)
       5793     4                         ENDIF
       5794     3               C
       5795     3                     ENDIF
       5796     2                     ENDIF
       5797     1               C
       5798     1               #ifdef cputime
       5799     1                     IF (IWRTIM.EQ.1) CALL CLTIME('INTEGRAT. :END  ',IUT6)
       5800     1               C     CALL CPU_TIME( TBUF5 )
       5801     1                     TBUF5 = MPI_WTIME()
       5802     1               C
       5803     1                     DTBUF1 = TBUF5 - TBUF1
       5804     1               CC    WRITE(IUT6,'(A16,I8,F10.3)') "ITIME, CPU-TIME:",ITIME,DTBUF1
       5805     1               C      DTBUF2 = TBUF3 - TBUF2
       5806     1               C      DTBUF3 = TBUF4 - TBUF3
       5807     1               C
       5808     1                     TCPU1  = TCPU1 + DTBUF1
       5809     1                     TCPU2  = TCPU2 + DTBUF2
       5810     1                     TCPU3  = TCPU3 + DTBUF3
       5811     1               C
       5812     1                     TWRK1  = TWRK1 + DTBUF1
       5813     1                     TWRK2  = TWRK2 + DTBUF2
       5814     1                     TWRK3  = TWRK3 + DTBUF3
       5815     1               C
       5816     2                     IF (IALE.GE.1 ) THEN
       5817     2                        TCPU5  = TCPU5 + DTBUF5
       5818     2                        TCPU6  = TCPU6 + DTBUF6
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       5819     3   s    v               DO I=1,8
       5820     3   p    v                  TALE(I)=TALE(I)+DTALE(I)
       5821     3   p    v               ENDDO
       5822     2                     ENDIF
       5823     1                     IF (IVOF.GE.1) TCPU7 = TCPU7 + DTBUF7
       5824     1               #endif
       5825     1               C
       5826     1                     IF(ITIME.GE.NTIME) GOTO 5100
       5827     1                     ITIME = ITIME + 1
       5828     1               C
       5829     1                5000 CONTINUE
       5830     1                5100 CONTINUE
       5831     1               #ifdef cputime
       5832     1                     IF (IWRTIM.EQ.1) CALL CLTIME('TIME LOOP :END  ',IUT6)
       5833     1               #endif
       5834     1               CCHY_TMP
       5835     1                     IF (IALEDB.GE.1.AND.IPART.EQ.1) CLOSE(IUTAL)
       5836     1               CCHY_TMP
       5837     1               C
       5838     1                     WRITE(IUT6,*) BLANK
       5839     1                     WRITE(IUT6,*) ' ** TIME MARCH LOOP ENDED **'
       5840     1               C
       5841     1                7000 CONTINUE
       5842     1               C
       5843     1               #ifdef RCAPCPL
       5844     1                     WRITE(IUT6,*) '    '
       5845     1                     WRITE(IUT6,*) ' REVOCAP:RCAPF_FINALIZE'
       5846     1                     CALL RCAPF_FINALIZE()
       5847     1                     WRITE(IUT6,*) ' DONE! '
       5848     1               #endif
       5849     1               C
       5850     1               C
       5851     1               C
       5852     1               C            <<<<< CLOSE OVERSET CONDITIONS DATA FILE >>>>>
       5853     1               C
       5854     1               C
       5855     1               C
       5856     2                     IF(JSET.GE.1.AND.JSETOS.EQ.0) THEN
       5857     2                         WRITE(IUT6,*) BLANK
       5858     2                         WRITE(IUT6,*) ' ** CLOSING OVERSET DATA FILE (IN) **'
       5859     2               C
       5860     2                         IACT     = 7
       5861     2                         CALL GFALL(IUT0,IUT6,IUTOS,FILEOS,
       5862     2                    *               MCOM,NCOMFL,COMFLE,
       5863     2                    *               MCOM,NCOMST,COMSET,
       5864     2                    *               IACT,IWRITE,INAME,IRESV,
       5865     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       5866     2                    *               ' !',ICHECK)
       5867     3                         IF(IERR.NE.0) THEN
       5868     3                             WRITE(IUT0,*) BLANK
       5869     3                             WRITE(IUT0,*) ERMSGC
       5870     3                             GO TO 9999
       5871     3                         ENDIF
       5872     2               C
       5873     2                     ELSE IF(JWRTOS.EQ.1) THEN
       5874     2                         WRITE(IUT6,*) BLANK
       5875     2                         WRITE(IUT6,*) ' ** CLOSING OVERSET DATA FILE (OUT) **'
       5876     2               C
       5877     2                         IACT     = 8
       5878     2                         CALL GFALL(IUT0,IUT6,IUTOS,FILEOS,
       5879     2                    *               MCOM,NCOMFL,COMFLE,
       5880     2                    *               MCOM,NCOMST,COMSET,
       5881     2                    *               IACT,IWRITE,INAME,IRESV,
       5882     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       5883     2                    *               ' !',ICHECK)
       5884     3                         IF(IERR.NE.0) THEN
       5885     3                             WRITE(IUT0,*) BLANK
       5886     3                             WRITE(IUT0,*) ERMSGC
       5887     3                             GO TO 9999
       5888     3                         ENDIF
       5889     2                     ENDIF
       5890     1               C
       5891     1               C
       5892     1               C
       5893     1               C            <<<<< CLOSE FIELD SAMPLING FILE >>>>>
       5894     1               C
       5895     1               C
       5896     1               C
       5897     2                     IF(INTFSV.LE.NTIME) THEN
       5898     2                         WRITE(IUT6,*) BLANK
       5899     2                         WRITE(IUT6,*) ' ** CLOSING FIELD SAMPLING FILE **'
       5900     2               C
       5901     2                         IACT     = 8
       5902     2                         CALL GFALL(IUT0,IUT6,IUTFS,FILEFS,
       5903     2                    *               MCOM,4,COMFLE,
       5904     2                    *               MCOM,0,COMSET,
       5905     2                    *               IACT,IWRITE,INAME,IRESV,
       5906     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       5907     2                    *               ' !',ICHECK)
       5908     2               C
       5909     3                         IF (IALE.GE.1) THEN
       5910     3                            NDUM=N2
       5911     3                            CALL GFALL(IUT0,IUT6,IUTMR,FILEDM,
       5912     3                    *                  MCOM,4,COMFLE,
       5913     3                    *                  MCOM,0,COMSET,
       5914     3                    *                  IACT,IWRITE,INAME,IRESV,
       5915     3                    *                  ICAST,IDATA0,IALL,ISKIP,IERR,
       5916     3                    *                  ' !',ICHECK)
       5917     4                            IF(IERR.NE.0) THEN
       5918     4                               WRITE(IUT0,*) BLANK
       5919     4                               WRITE(IUT0,*) ERMSGC
       5920     4                               GO TO 9999
       5921     4                            ENDIF
       5922     3                         ENDIF
       5923     2                         WRITE(IUT6,*) ' DONE! '
       5924     2                     ENDIF
       5925     1               C
       5926     1               C
       5927     1               C
       5928     1               C            <<<<< CLOSE FIELD SOUND SOURCE FILE >>>>>
       5929     1               C
       5930     1               C
       5931     1               C
       5932     2                     IF(JSSMAP.EQ.1) THEN
       5933     2                         WRITE(IUT6,*) BLANK
       5934     2                         WRITE(IUT6,*) ' ** CLOSING FIELD SAMPLING FILE **'
       5935     2               C
       5936     2                         IACT     = 8
       5937     2                         CALL GFALL(IUT0,IUT6,IUTSS,FILESS,
       5938     2                    *               MCOM,4,COMFLE,
       5939     2                    *               MCOM,0,COMSET,
       5940     2                    *               IACT,IWRITE,INAME,IRESV,
       5941     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       5942     2                    *               ' !',ICHECK)
       5943     2                         WRITE(IUT6,*) ' DONE! '
       5944     2                     ENDIF
       5945     1               C
       5946     1               C
       5947     1               C
       5948     1               C            <<<<< CLOSE SURFACE PRESSURE DATA FILE >>>>>
       5949     1               C
       5950     1               C
       5951     1               C
       5952     2                     IF(NEBODY.GE.1 .AND. INTPSV.LE.NTIME) THEN
       5953     2                         WRITE(IUT6,*) BLANK
       5954     2                         WRITE(IUT6,*) ' ** CLOSING SURFACE SAMPLING FILE **'
       5955     2               C
       5956     3                         IF(JSPADV.EQ.0) THEN
       5957     3                             IACT     = 8
       5958     3                             ITARGT   = 2
       5959     3                             CALL GFALL(IUT0,IUT6,IUTPS,FILEPS,
       5960     3                    *                   MCOM,4,COMFLE,
       5961     3                    *                   MCOM,0,COMSET,
       5962     3                    *                   IACT,IWRITE,INAME,IRESV,
       5963     3                    *                   ICAST,IDATA0,IALL,ISKIP,IERR,
       5964     3                    *                   ' !',ICHECK)
       5965     3                         ELSE
       5966     3                             CLOSE(IUTPS)
       5967     3                         ENDIF
       5968     2                     ENDIF
       5969     1               C
       5970     1               C
       5971     1               C
       5972     1               C            <<<<< MAKING OUTPUT DATA >>>>>
       5973     1               C
       5974     1               C
       5975     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 72
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WA, WR, VA, VR, TA, US, TR, FLA, FLR
                              <<<      PNA, PNR, UA, UR, WS, VS
                              <<< Loop-information  End >>>
       5976     2  pp    v            DO 7100 IP = 1 , NP
       5977     2   p    v               UR(IP)  = SQRT(AMAX1(UR(IP)-UA(IP)*UA(IP), 0.0E0))
       5978     2   p    v               VR(IP)  = SQRT(AMAX1(VR(IP)-VA(IP)*VA(IP), 0.0E0))
       5979     2   p    v               WR(IP)  = SQRT(AMAX1(WR(IP)-WA(IP)*WA(IP), 0.0E0))
       5980     2   p    v               PNR(IP) = SQRT(AMAX1(PNR(IP)-PNA(IP)*PNA(IP), 0.0E0))
       5981     2   p    v               FLR(IP) = SQRT(AMAX1(FLR(IP)-FLA(IP)*FLA(IP), 0.0E0))
       5982     2   p    v               TR(IP)  = SQRT(AMAX1(TR(IP)-TA(IP)*TA(IP), 0.0E0))
       5983     2               C
       5984     2   p    v               US(IP)  = US(IP)+VA(IP)*WA(IP)
       5985     2   p    v               VS(IP)  = VS(IP)+WA(IP)*UA(IP)
       5986     2   p    v               WS(IP)  = WS(IP)+UA(IP)*VA(IP)
       5987     2   p    v       7100 CONTINUE
       5988     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 232
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.21, ITR: 176, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      PA, PR, FEA, FER
                              <<< Loop-information  End >>>
       5989     2  pp    v            DO 7101 IE = 1 , NE
       5990     2   p    v               PR(IE)  = SQRT(AMAX1(PR(IE) -PA (IE)*PA (IE), 0.0E0))
       5991     2   p    v               FER(IE) = SQRT(AMAX1(FER(IE)-FEA(IE)*FEA(IE), 0.0E0))
       5992     2   p    v       7101 CONTINUE
       5993     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 91
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    UNSWITCHING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WMESH_P, VMESH_P, UMESH_P, WMESH, VMESH
                              <<<      UMESH, WS, VS, US, TR, PNR, WR, VR, UR
                              <<<      TA, PNA
                              <<<    PREFETCH(SOFT) : 22
                              <<<     SEQUENTIAL : 22
                              <<<      WA: 2, VA: 2, UA: 2, T: 2, PN: 2, W: 2
                              <<<      V: 2, U: 2, Z: 2, Y: 2, X: 2
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 12  FILL 41
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       5994     2  pp    v            DO 7103 IP=1,NP
       5995     2   p    v               X   (IP) = X(IP)*D000
       5996     2   p    v               Y   (IP) = Y(IP)*D000
       5997     2   p    v               Z   (IP) = Z(IP)*D000
       5998     2   p    v               U   (IP) = U(IP)*U000
       5999     2   p    v               V   (IP) = V(IP)*U000
       6000     2   p    v               W   (IP) = W(IP)*U000
       6001     2   p    v               PN  (IP) = PN(IP)*(RHO000*U000*U000)
       6002     2   p    v               T   (IP) = TREF+T(IP)*T000
       6003     2               C
       6004     2   p    v               UA (IP) = UA(IP)*U000
       6005     2   p    v               VA (IP) = VA(IP)*U000
       6006     2   p    v               WA (IP) = WA(IP)*U000
       6007     2   p    v               PNA(IP) = PNA(IP)*RHO000*U000*U000
       6008     2   p    v               TA (IP) = TA(IP)*T000 + TREF
       6009     2               C
       6010     2   p    v               UR (IP) = UR(IP)*U000
       6011     2   p    v               VR (IP) = VR(IP)*U000
       6012     2   p    v               WR (IP) = WR(IP)*U000
       6013     2   p    v               PNR(IP) = PNR(IP)*RHO000*U000*U000
       6014     2   p    v               TR (IP) = TR(IP)*T000 + TREF
       6015     2               C
       6016     2   p    v               US(IP) = US(IP)*U000*U000
       6017     2   p    v               VS(IP) = VS(IP)*U000*U000
       6018     2   p    v               WS(IP) = WS(IP)*U000*U000
       6019     2               C
       6020     2   p    v               IF (IALE.EQ.0) GOTO 7103
       6021     2   p    v               UMESH(IP)   = UMESH(IP)*U000
       6022     2   p    v               VMESH(IP)   = VMESH(IP)*U000
       6023     2   p    v               WMESH(IP)   = WMESH(IP)*U000
       6024     2   p    v               UMESH_P(IP) = UMESH_P(IP)*U000
       6025     2   p    v               VMESH_P(IP) = VMESH_P(IP)*U000
       6026     2   p    v               WMESH_P(IP) = WMESH_P(IP)*U000
       6027     2   p    v       7103 CONTINUE
       6028     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 433
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.83, ITR: 144, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      PR, P, PA, VISCA
                              <<< Loop-information  End >>>
       6029     2  pp    v            DO 7104 IE=1,NE
       6030     2   p    v               P    (IE) = P (IE)*RHO000*U000*U000
       6031     2   p    v               PA   (IE) = PA(IE)*RHO000*U000*U000
       6032     2   p    v               PR   (IE) = PR(IE)*RHO000*U000*U000
       6033     2   p    v               VISCA(IE) = VISCA(IE)*U000*D000
       6034     2   p    v       7104 CONTINUE
       6035     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 160, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WINLT, UINLT, VINLT
                              <<< Loop-information  End >>>
       6036     2  pp    v            DO 7105 IBP=1,NPINLT
       6037     2   p    v               UINLT(IBP)=UINLT(IBP)*U000
       6038     2   p    v               VINLT(IBP)=VINLT(IBP)*U000
       6039     2   p    v               WINLT(IBP)=WINLT(IBP)*U000
       6040     2   p    v       7105 CONTINUE
       6041     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 160, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WWALL, UWALL, VWALL
                              <<< Loop-information  End >>>
       6042     2  pp    v            DO 7106 IBP=1,NPWALL
       6043     2   p    v               UWALL(IBP)=UWALL(IBP)*U000
       6044     2   p    v               VWALL(IBP)=VWALL(IBP)*U000
       6045     2   p    v               WWALL(IBP)=WWALL(IBP)*U000
       6046     2   p    v       7106 CONTINUE
       6047     1               C
       6048     1               C
       6049     1               C
       6050     1               C            <<<<< CONVERTE OUTPUT DATA >>>>>
       6051     1               C
       6052     1               C
       6053     1               C
       6054     1                     CALL DATCNV(IALE,NP,NE,MWRK,
       6055     1                    *            NPINLT,NPWALL,NPSYMT,NPFREE,NPCCL ,NPBODY,
       6056     1                    *            NPINT ,NEFFO ,NPFFO ,NPTEMP,NEHSRC,NPHEAT,
       6057     1                    *            NPSETR,
       6058     1                    *            LPINLT,LPWALL,LPSYMT,LPFREE,LPCCL1,LPCCL2,
       6059     1                    *            LPBODY,LPINT1,LEFFO1,LPFFO1,LPTEMP,LEHSRC,
       6060     1                    *            LPHEAT,LPSET1,
       6061     1                    *            LEFRM ,IEATTR,IPATTR,IEMEDA,IEPROP,
       6062     1                    *            X,Y,Z,XD,YD,ZD,U,V,W,PN,P,T,FL,FE,
       6063     1                    *            UMESH,VMESH,WMESH,UMESH_P,VMESH_P,WMESH_P,
       6064     1                    *            LPATOB,LEATOB,LWRK01,WRK01,IERR,IUT0)
       6065     1               C
       6066     1                     CALL RELCNV(NP,NP,UA   ,LPATOB,WRK01,IERR,IUT0)
       6067     1                     CALL RELCNV(NP,NP,VA   ,LPATOB,WRK01,IERR,IUT0)
       6068     1                     CALL RELCNV(NP,NP,WA   ,LPATOB,WRK01,IERR,IUT0)
       6069     1                     CALL RELCNV(NP,NP,PNA  ,LPATOB,WRK01,IERR,IUT0)
       6070     1                     CALL RELCNV(NP,NP,TA   ,LPATOB,WRK01,IERR,IUT0)
       6071     1                     CALL RELCNV(NE,NE,FEA  ,LEATOB,WRK01,IERR,IUT0)
       6072     1               C
       6073     1                     CALL RELCNV(NP,NP,UR   ,LPATOB,WRK01,IERR,IUT0)
       6074     1                     CALL RELCNV(NP,NP,VR   ,LPATOB,WRK01,IERR,IUT0)
       6075     1                     CALL RELCNV(NP,NP,WR   ,LPATOB,WRK01,IERR,IUT0)
       6076     1                     CALL RELCNV(NP,NP,PNR  ,LPATOB,WRK01,IERR,IUT0)
       6077     1                     CALL RELCNV(NP,NP,TR   ,LPATOB,WRK01,IERR,IUT0)
       6078     1                     CALL RELCNV(NE,NE,FER  ,LEATOB,WRK01,IERR,IUT0)
       6079     1               C
       6080     1                     CALL RELCNV(NP,NP,US   ,LPATOB,WRK01,IERR,IUT0)
       6081     1                     CALL RELCNV(NP,NP,VS   ,LPATOB,WRK01,IERR,IUT0)
       6082     1                     CALL RELCNV(NP,NP,WS   ,LPATOB,WRK01,IERR,IUT0)
       6083     1               C
       6084     1                     CALL NODCNV(NP,NE,N2,NODE,LPATOB,LEATOB,NODWK1,IERR,IUT0)
       6085     1               C
       6086     1                     NPF=0
       6087     2                     IF(IPRESS.EQ.3) THEN
       6088     2                     NPF=NP
       6089     2                     CALL RELCNV(NP,NP,FLA  ,LPATOB,WRK01,IERR,IUT0)
       6090     2                     CALL RELCNV(NP,NP,FLR  ,LPATOB,WRK01,IERR,IUT0)
       6091     2                     ENDIF
       6092     1               C
       6093     1               C
       6094     1               C
       6095     1               C            <<<<< SAVE REFINED MESH AND B.C. DATA >>>>>
       6096     1               C
       6097     1               C
       6098     1               C
       6099     1               C
       6100     2                     IF(IRFNMW.EQ.1)THEN
       6101     2                         WRITE(IUT6,*) BLANK
       6102     2                         WRITE(IUT6,*) ' ** WRITING REFINED MESH DATA **'
       6103     2                         COMFLE(1) = COMGEN
       6104     2                         WRITE(COMFLE(2),*) ' REFINED MESH  DATA'
       6105     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 38
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 80, MVE: 3)
                              <<< Loop-information  End >>>
       6106     3  pp   2                 DO IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       6107     4   p   2v                   DO I=1,N2
       6108     4   p   2v                       NODWK1(I,IE)=NODE(I,IE)
       6109     4   p   2v                   ENDDO
       6110     3   p   2                 ENDDO
       6111     2               C
       6112     2                         IACT     = 2
       6113     2                         NDUM=N2
       6114     2                         CALL GFALL(IUT0,IUT6,IUTMR,FILEMR,
       6115     2                    *               MCOM,NCOMFL,COMFLE,
       6116     2                    *               MCOM,NCOMST,COMSET,
       6117     2                    *               IACT,IWRITE,INAME,IRESV,
       6118     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       6119     2                    *               '*GRID_3D%D *NODE_3D *ELM_ATR !',
       6120     2                    *               NAME,MP,NP,XD,YD,ZD,
       6121     2                    *               NAME,ME,N2,NE,NDUM,NODWK1,
       6122     2                    *               NAME,ME,NE,LEFRM,
       6123     2                    *               ICHECK)
       6124     3                         IF(IERR.NE.0) THEN
       6125     3                             WRITE(IUT0,*) BLANK
       6126     3                             WRITE(IUT0,*) ERMSGC
       6127     3                             GO TO 9999
       6128     3                         ENDIF
       6129     2                         WRITE(IUT6,*) ' DONE!'
       6130     2               C
       6131     2                         WRITE(IUT6,*) BLANK
       6132     2                         WRITE(IUT6,*) ' ** WRITING REFINED B.C. DATA **'
       6133     2                         IACT     = 2
       6134     2                         NPZERO=0
       6135     2                         CALL GFALL(IUT0,IUT6,IUTBR,FILEBR,
       6136     2                    *               MCOM,NCOMFL,COMFLE,
       6137     2                    *               MCOM,NCOMST,COMSET,
       6138     2                    *               IACT,IWRITE,INAME,IRESV,
       6139     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       6140     2                    *               '*BC_INLT *BC_IV3D *BC_MWAL *BC_WV3D *BC_WALL
       6141     2                    *                *BC_SYMT *BC_FREE *BC_CYCL *BC_BODY *BC_INTR
       6142     2                    *                *BC_PSET  !',
       6143     2                    *               NAME,MB,NPINLT,LPINLT,
       6144     2                    *               NAME,MB,NPINLT,UINLT,VINLT,WINLT,
       6145     2                    *               NAME,MB,NPWALL,LPWALL,
       6146     2                    *               NAME,MB,NPWALL,UWALL,VWALL,WWALL,
       6147     2                    *               NAME,MB,NPZERO,LWRK01,
       6148     2                    *               NAME,MB,NPSYMT,LPSYMT,
       6149     2                    *               NAME,MB,NPFREE,LPFREE,
       6150     2                    *               NAME,MB,NPCCL ,LPCCL1,LPCCL2,
       6151     2                    *               NAME,MB,NPBODY,LPBODY,
       6152     2                    *               NAME,MB,NPINT, LPINT1,LPINT2,LPINT3,
       6153     2                    *               NAME,MB,NPSETR,LPSET1,LPSET4,LPSET3,
       6154     2                    *               ICHECK)
       6155     2                         WRITE(IUT6,*) ' DONE!'
       6156     2               C
       6157     3                         IF(NFRAME.NE.0) THEN
       6158     3                             WRITE(IUT6,*) BLANK
       6159     3                             WRITE(IUT6,*) ' ** WRITING REFINED ATTR. DATA **'
       6160     3                             IACT     = 2
       6161     3                             CALL GFALL(IUT0,IUT6,IUTAR,FILEAR,
       6162     3                    *                   MCOM,NCOMFL,COMFLE,
       6163     3                    *                   MCOM,NCOMST,COMSET,
       6164     3                    *                   IACT,IWRITE,INAME,IRESV,
       6165     3                    *                   ICAST,IDATA0,IALL,ISKIP,IERR,
       6166     3                    *                   '*ELM_ATR !',
       6167     3                    *                   NAME,ME,NE,IEATTR,
       6168     3                    *                   ICHECK)
       6169     3                         WRITE(IUT6,*) ' DONE!'
       6170     3                         ENDIF
       6171     2               C
       6172     2                     ENDIF
       6173     1               C
       6174     1               C
       6175     1               C
       6176     1               C
       6177     1               C            <<<<< SAVE FINAL FIELD DATA >>>>>
       6178     1               C
       6179     1               C
       6180     2                     IF(IVOF.GE.1) THEN
       6181     2                        NEFRC0 = NE0
       6182     2                        NEFRC  = NE
       6183     2                     ELSE
       6184     2                        NEFRC0 = 0
       6185     2                        NEFRC  = 0
       6186     2                     ENDIF
       6187     1               C
       6188     1                     WRITE(IUT6,*) BLANK
       6189     1                     WRITE(IUT6,*) ' ** WRITING FINAL FLOW DATA **'
       6190     1               C
       6191     1                     COMFLE(1) = COMGEN
       6192     1                     WRITE(COMFLE(2),*) ' FINAL FLOW DATA'
       6193     1                     WRITE(COMFLE(3),*) '      TIME:',TIMEW
       6194     1                     WRITE(COMFLE(4),*) '      STEP:',ISTEP
       6195     1                     IACT     = 2
       6196     2                     IF(NRFN.EQ.0) THEN
       6197     2                        CALL GFALL(IUT0,IUT6,IUTFF,FILEFF,
       6198     2                    *              MCOM,4,COMFLE,
       6199     2                    *              MCOM,0,COMSET,
       6200     2                    *              IACT,IWRITE,INAME,IRESV,
       6201     2                    *              ICAST,IDATA0,IALL,ISKIP,IERR,
       6202     2                    *              '*TIME_PS *STEP_PS *VELO_3D *PRES_3E
       6203     2                    *               *PRES_3D *TEMP_3D *VFRC_3E *LIQD_3D !',
       6204     2                    *              NAME,TIMEW,
       6205     2                    *              NAME,ISTEP,
       6206     2                    *              NAME,MP,NP0,U,V,W,
       6207     2                    *              NAME,ME,NE0,P,
       6208     2                    *              NAME,MP,NP0,PN,
       6209     2                    *              NAME,MP,NP0,T,
       6210     2                    *              NAME,ME,NEFRC0,FE,
       6211     2                    *              NAME,ME,NPF   ,FL,
       6212     2                    *              ICHECK)
       6213     2                     ELSE
       6214     2                        CALL GFALL(IUT0,IUT6,IUTFF,FILEFF,
       6215     2                    *              MCOM,4,COMFLE,
       6216     2                    *              MCOM,0,COMSET,
       6217     2                    *              IACT,IWRITE,INAME,IRESV,
       6218     2                    *              ICAST,IDATA0,IALL,ISKIP,IERR,
       6219     2                    *              '*TIME_PS *STEP_PS *VELO_3D
       6220     2                    *               *PRES_3D *TEMP_3D !',
       6221     2                    *              NAME,TIMEW,
       6222     2                    *              NAME,ISTEP,
       6223     2                    *              NAME,MP,NP0,U,V,W,
       6224     2                    *              NAME,MP,NP0,PN,
       6225     2                    *              NAME,MP,NP0,T,
       6226     2                    *              ICHECK)
       6227     2               C
       6228     2                        COMFLE(1) = COMGEN
       6229     2                        WRITE(COMFLE(2),*) ' FINAL FLOW DATA (REFINED)'
       6230     2                        WRITE(COMFLE(3),*) '      TIME:',TIMEW
       6231     2                        WRITE(COMFLE(4),*) '      STEP:',ISTEP
       6232     2                        CALL GFALL(IUT0,IUT6,IUTFR,FILEFR,
       6233     2                    *              MCOM,4,COMFLE,
       6234     2                    *              MCOM,0,COMSET,
       6235     2                    *              IACT,IWRITE,INAME,IRESV,
       6236     2                    *              ICAST,IDATA0,IALL,ISKIP,IERR,
       6237     2                    *              '*TIME_PS *STEP_PS *VELO_3D *PRES_3E
       6238     2                    *               *PRES_3D *TEMP_3D *VFRC_3E !',
       6239     2                    *              NAME,TIMEW,
       6240     2                    *              NAME,ISTEP,
       6241     2                    *              NAME,MP,NP,U,V,W,
       6242     2                    *              NAME,ME,NE,P,
       6243     2                    *              NAME,MP,NP,PN,
       6244     2                    *              NAME,MP,NP,T,
       6245     2                    *              NAME,ME,NEFRC,FE,
       6246     2                    *              ICHECK)
       6247     2                     ENDIF
       6248     1                     WRITE(IUT6,*) ' DONE! '
       6249     1               C
       6250     2                     IF (IALE.GE.1) THEN
       6251     2               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 38
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 80, MVE: 3)
                              <<< Loop-information  End >>>
       6252     3  pp   2                DO IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
       6253     4   p   2v                  DO I=1,N2
       6254     4   p   2v                     NODWK1(I,IE)=NODE(I,IE)
       6255     4   p   2v                  ENDDO
       6256     3   p   2                ENDDO
       6257     2               C
       6258     2                        WRITE(IUT6,*) BLANK
       6259     2                        WRITE(IUT6,*) ' ** WRITING FINAL MESH DATA **'
       6260     2                        COMFLE(1) = COMGEN
       6261     2                        WRITE(COMFLE(2),*) ' FINAL MESH DATA'
       6262     2                        WRITE(COMFLE(3),*) '      TIME:',TIMEW
       6263     2                        WRITE(COMFLE(4),*) '      STEP:',ISTEP
       6264     2                        IACT=2
       6265     2                        NDUM=N2
       6266     2                        CALL GFALL(IUT0,IUT6,IUTMR,FILEFM,
       6267     2                    *              MCOM,4,COMFLE,
       6268     2                    *              MCOM,0,COMSET,
       6269     2                    *              IACT,IWRITE,INAME,IRESV,
       6270     2                    *              ICAST,IDATA0,IALL,ISKIP,IERR,
       6271     2                    *              '*GRID_3D *NODE_3D *ELM_ATR
       6272     2                    *               *MOV1_3D *MOV0_3D !',
       6273     2                    *              NAME,MP,NP0,X,Y,Z,
       6274     2                    *              NAME,ME,N2,NE0,NDUM,NODWK1,
       6275     2                    *              NAME,ME,NE,LEFRM,
       6276     2                    *              NAME,MP,NP0,UMESH,VMESH,WMESH,
       6277     2                    *              NAME,MP,NP0,UMESH_P,VMESH_P,WMESH_P,
       6278     2                    *              ICHECK)
       6279     2                        WRITE(IUT6,*) ' DONE! '
       6280     2               C
       6281     2                     ENDIF
       6282     1               CCC
       6283     1               C
       6284     1               C            <<<<< SAVE TIME HISTORY >>>>>
       6285     1               C
       6286     1               C
       6287     1               C
       6288     1                     WRITE(IUT6,*) BLANK
       6289     1                     WRITE(IUT6,*) ' ** WRITING HISTORY DATA **'
       6290     1               C
       6291     1                     WRITE(COMFLE(2),*)' TIME HISTORY DATA'
       6292     1                     WRITE(COMFLE(3),9600) TIMEP*(D000/U000),TIMEW
       6293     1                     WRITE(COMFLE(4),9700) NTIMEP, ISTEP
       6294     1               C
       6295     1                     IACT     = 2
       6296     1                     CALL GFALL(IUT0,IUT6,IUTHS,FILEHS,
       6297     1                    *           MCOM,4,COMFLE,
       6298     1                    *           MHST,NHST,COMHST,
       6299     1                    *           IACT,IWRITE,INAME,IRESV,
       6300     1                    *           ICAST,IDATA0,IALL,ISKIP,IERR,
       6301     1                    *           '*HSTLIST *HISTORY  !',
       6302     1                    *           NAME,      MHST,      NHST,LHIST,
       6303     1                    *           NAME,MTIME,MHST,NTIME,NHST,HST,
       6304     1                    *           ICHECK)
       6305     1               C
       6306     1                     WRITE(IUT6,*) ' DONE! '
       6307     1               C
       6308     1               C
       6309     1               C
       6310     1               C            <<<<< SAVE AVERAGED FLOW FIELD >>>>>
       6311     1               C
       6312     1               C
       6313     1               C
       6314     2                     IF(IOUT.GE.1 .AND. JESC.EQ.0) THEN
       6315     2                         WRITE(IUT6,*) BLANK
       6316     2                         WRITE(IUT6,*) ' ** WRITING AVERAGE FLOW DATA **'
       6317     2               C
       6318     2                         WRITE(COMFLE(2),*)' AVERAGE FLOW DATA'
       6319     2               C
       6320     2                         IACT     = 2
       6321     2                         CALL GFALL(IUT0,IUT6,IUTAV,FILEAV,
       6322     2                    *               MCOM,4,COMFLE,
       6323     2                    *               MCOM,0,COMSET,
       6324     2                    *               IACT,IWRITE,INAME,IRESV,
       6325     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       6326     2                    *               '*TIME_PS *STEP_PS *VELO_3D
       6327     2                    *                *PRES_3D *TEMP_3D *VFRC_3E *LIQD_3D !',
       6328     2                    *               NAME,TIMEW,
       6329     2                    *               NAME,ISTEP,
       6330     2                    *               NAME,MP,NP0,UA,VA,WA,
       6331     2                    *               NAME,MP,NP0,PNA,
       6332     2                    *               NAME,MP,NP0,TA,
       6333     2                    *               NAME,ME,NEFRC,FEA,
       6334     2                    *               NAME,MP,NPF  ,FLA,
       6335     2                    *               ICHECK)
       6336     2               C
       6337     2                         WRITE(IUT6,*) ' DONE! '
       6338     2                     ENDIF
       6339     1               C
       6340     1               C
       6341     1               C
       6342     1               C            <<<<< SAVE RMS      FLOW FIELD >>>>>
       6343     1               C
       6344     1               C
       6345     1               C
       6346     2                     IF(IOUT.GE.2 .AND. JESC.EQ.0) THEN
       6347     2                         WRITE(IUT6,*) BLANK
       6348     2                         WRITE(IUT6,*) ' ** WRITING RMS     FLOW DATA **'
       6349     2               C
       6350     2                         WRITE(COMFLE(2),*)' RMS     FLOW DATA'
       6351     2               C
       6352     2                         IACT     = 2
       6353     2                         NPT1     = 0
       6354     2                         NPT2     = 0
       6355     2                         NPT3     = 0
       6356     2                         IF(IPRESS.EQ.3) NPT1 = NP
       6357     2                         IF(IHEAT.GT.0)  NPT2 = NP
       6358     2                         IF(IMODEL.GE.3) NPT3 = NP
       6359     2               C
       6360     2                         CALL GFALL(IUT0,IUT6,IUTRM,FILERM,
       6361     2                    *               MCOM,4,COMFLE,
       6362     2                    *               MCOM,0,COMSET,
       6363     2                    *               IACT,IWRITE,INAME,IRESV,
       6364     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       6365     2                    *               '*TIME_PS *STEP_PS *VELO_3D *PRES_3D
       6366     2                    *                *TEMP_3D *VFRC_3E *LIQD_3D !',
       6367     2                    *               NAME,TIMEW,
       6368     2                    *               NAME,ISTEP,
       6369     2                    *               NAME,MP,NP0,UR,VR,WR,
       6370     2                    *               NAME,MP,NP0,PNR,
       6371     2                    *               NAME,MP,NP0,TR,
       6372     2                    *               NAME,ME,NEFRC,FER,
       6373     2                    *               NAME,MP,NPF  ,FLR,
       6374     2                    *               ICHECK)
       6375     2               C
       6376     2                         WRITE(IUT6,*) ' DONE! '
       6377     2                     ENDIF
       6378     1               C
       6379     1               C
       6380     1               C
       6381     1               C
       6382     1               C            <<<<< SAVE STRESS   FLOW FIELD >>>>>
       6383     1               C
       6384     1               C
       6385     1               C
       6386     2                     IF(IOUT.GE.2 .AND. JESC.EQ.0) THEN
       6387     2                         WRITE(IUT6,*) BLANK
       6388     2                         WRITE(IUT6,*) ' ** WRITING STRESS  FLOW DATA **'
       6389     2               C
       6390     2                         WRITE(COMFLE(2),*)' STRESS  FLOW DATA'
       6391     2               C
       6392     2                         IACT     = 2
       6393     2                         CALL GFALL(IUT0,IUT6,IUTST,FILEST,
       6394     2                    *               MCOM,4,COMFLE,
       6395     2                    *               MCOM,0,COMSET,
       6396     2                    *               IACT,IWRITE,INAME,IRESV,
       6397     2                    *               ICAST,IDATA0,IALL,ISKIP,IERR,
       6398     2                    *               '*TIME_PS *STEP_PS *VELO_3D !',
       6399     2                    *               NAME,TIMEW,
       6400     2                    *               NAME,ISTEP,
       6401     2                    *               NAME,MP,NP0,US,VS,WS,
       6402     2                    *               ICHECK)
       6403     2               C
       6404     2                         WRITE(IUT6,*) ' DONE! '
       6405     2                     ENDIF
       6406     1               C
       6407     1               C      IF(JESC.EQ.1) GO TO 9999
       6408     1               C
       6409     1               #ifdef cputime
       6410     1               C
       6411     1                     CALL USTWRT(IUT6)
       6412     1               C
       6413     1                     NTIME=ITIME
       6414     1                     IF(NTIME.EQ.0) GOTO 8000
       6415     1                     IF(IFIXFL.EQ.1) GOTO 8000
       6416     1               C
       6417     1                     TCPU1=TCPU1/FLOAT(NTIME)
       6418     1                     TCPU2=TCPU2/FLOAT(NTIME)
       6419     1                     TCPU3=TCPU3/FLOAT(NTIME)
       6420     1                     TCPU4=TCPU1-(TCPU2+TCPU3)
       6421     1                     TBUF2=1.0E2*TCPU2/TCPU1
       6422     1                     TBUF3=1.0E2*TCPU3/TCPU1
       6423     1                     TBUF4=1.0E2*TCPU4/TCPU1
       6424     1                     TBUF5=DTCRSA/FLOAT(NTIME)
       6425     1                     TBUF6=1.0E2*TBUF5/TCPU1
       6426     1               C
       6427     1                     WRITE(IUT6,'(A40)') CTIME( 1)
       6428     1                     WRITE(IUT6,'(A40)') CTIME( 2)
       6429     1                     WRITE(IUT6,'(A40,F8.3,F5.1)') CTIME(3),TCPU1
       6430     1                     WRITE(IUT6,'(A40,F8.3,F5.1)') CTIME(4),TCPU2,TBUF2
       6431     1                     WRITE(IUT6,'(A40,F8.3,F5.1)') CTIME(5),TCPU3,TBUF3
       6432     1                     WRITE(IUT6,'(A40,F8.3,F5.1)') CTIME(6),TCPU4,TBUF4
       6433     1                     WRITE(IUT6,*)BLANK
       6434     1                     WRITE(IUT6,'(A40,F8.3,F5.1)') CTIME(7),TBUF5,TBUF6
       6435     2                     IF (IALE.GE.1) THEN
       6436     2                        WRITE(IUT6,*)BLANK
       6437     2                        TCPU5=TCPU5/FLOAT(NTIME)
       6438     2                        TCPU6=TCPU6/FLOAT(NTIME)
       6439     2                        TBUF7=1.0E2*TCPU5/TCPU1
       6440     2                        TBUF8=1.0E2*TCPU6/TCPU1
       6441     2                        WRITE(IUT6,'(A40,F8.3,F5.1)')CTIME(28),TCPU5,TBUF7
       6442     2                        WRITE(IUT6,'(A40,F8.3,F5.1)')CTIME(29),TCPU6,TBUF8
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      TALE
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 1
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
       6443     3   s    s               DO I=1,8
       6444     3   p    v                  TALE(I)=TALE(I)/FLOAT(NTIME)
       6445     3   p    v                  TWRK1=1.0E2*TALE(I)/TCPU1
       6446     3   m    m                  WRITE(IUT6,'(A40,F8.3,F5.1)')CTALE(I),TALE(I),TWRK1
       6447     3   p    v               ENDDO
       6448     2                     ENDIF
       6449     2                     IF (IVOF.GE.1) THEN
       6450     2                        WRITE(IUT6,*)BLANK
       6451     2                        TCPU7=TCPU7/FLOAT(NTIME)
       6452     2                        TBUF7=1.0E2*TCPU7/TCPU1
       6453     2                        WRITE(IUT6,'(A40,F8.3,F5.1)')CTIME(30),TCPU7,TBUF7
       6454     2                     ENDIF
       6455     1                     WRITE(IUT6,*)BLANK
       6456     1                     WRITE(IUT6,*)BLANK
       6457     1               C
       6458     1                8000 CONTINUE
       6459     1               C
       6460     1                     IF(NUMCRS.EQ.0) GOTO 8010
       6461     1                     DTCRSA=DTCRSA/FLOAT(NUMCRS)
       6462     1                     DTCRS2=DTCRS2/FLOAT(NUMCRS)
       6463     1                     DTCRSR=DTCRSR/FLOAT(NUMCRS)
       6464     1                     DTCRSR=SQRT(DTCRSR-DTCRSA*DTCRSA)
       6465     1                     TBUF1=2.0E0*FLOAT(NCRS)/1.0E6
       6466     1                     TBUF2=(DTCRSR*1.0E2/DTCRSA)
       6467     1                     TBUF3=1.0E-3*TBUF1/DTCRSA
       6468     1                     WRITE(IUT6,'(A40)')      CTIME( 8)
       6469     1                     WRITE(IUT6,'(A40,I8)')   CTIME( 9),NUMCRS
       6470     1                     WRITE(IUT6,'(A40,I8)')   CTIME(10),NCRS
       6471     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(11),TBUF1
       6472     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(12),1.0E3*DTCRSA
       6473     1                     WRITE(IUT6,'(A40,F8.1)') CTIME(13),TBUF2
       6474     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(14),TBUF3
       6475     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(15),1.0E3*DTCRS2
       6476     1                     WRITE(IUT6,*)BLANK
       6477     1                     WRITE(IUT6,*)BLANK
       6478     1                8010 CONTINUE
       6479     1               C
       6480     1                     IF(NUMLAP.EQ.0) GOTO 8020
       6481     1                     DTLAPA=DTLAPA/FLOAT(NUMLAP)
       6482     1                     DTLAPR=DTLAPR/FLOAT(NUMLAP)
       6483     1                     DTLAPR=SQRT(DTLAPR-DTLAPA*DTLAPA)
       6484     1                     TBUF1=( 48.0E0*FLOAT(NETET)
       6485     1                    *       +60.0E0*FLOAT(NEPRD)
       6486     1                    *       +72.0E0*FLOAT(NEWED)
       6487     1                    *       +96.0E0*FLOAT(NEHEX))/1.0E6
       6488     1                     TBUF2=(DTLAPR*1.0E2/DTLAPA)
       6489     1                     TBUF3=1.0E-3*TBUF1/DTLAPA
       6490     1                     WRITE(IUT6,'(A40)')      CTIME(16)
       6491     1                     WRITE(IUT6,'(A40,I8)')   CTIME(17),NUMLAP
       6492     1                     WRITE(IUT6,'(A40,I8)')   CTIME(18),NE
       6493     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(19),TBUF1
       6494     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(20),1.0E3*DTLAPA
       6495     1                     WRITE(IUT6,'(A40,F8.1)') CTIME(21),TBUF2
       6496     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(22),TBUF3
       6497     1                     WRITE(IUT6,*)BLANK
       6498     1                     WRITE(IUT6,*)BLANK
       6499     1                8020 CONTINUE
       6500     1               C
       6501     1                     IF(NUMALL.EQ.0) GOTO 8100
       6502     1               C
       6503     1                     DTALLA=DTALLA/FLOAT(NUMALL)
       6504     1                     DTALLR=DTALLR/FLOAT(NUMALL)
       6505     1                     DTALLR=SQRT(DTALLR-DTALLA*DTALLA)
       6506     1                     TBUF1=(DTALLR*1.0E2/DTALLA)
       6507     1                     WRITE(IUT6,'(A40)')      CTIME(23)
       6508     1                     WRITE(IUT6,'(A40,I8)')   CTIME(24),NUMALL
       6509     1                     WRITE(IUT6,'(A40,F8.3)') CTIME(25),1.0E3*DTALLA
       6510     1               C
       6511     1                8100 CONTINUE
       6512     1                     WRITE(IUT6,'(A40)') CTIME(27)
       6513     1               C
       6514     1               #endif
       6515     2                     IF(JESC.EQ.0) THEN
       6516     2                         WRITE(IUT6,*) BLANK
       6517     2                         WRITE(IUT6,*) ' ** LES3X: SUCCESSFULLY TERMINATED **'
       6518     2                     ELSE
       6519     2                         WRITE(IUT6,*) BLANK
       6520     2                         WRITE(IUT6,*) ' ** LES3X: TERMINATED **'
       6521     2                     ENDIF
       6522     1               C
       6523     2                     IF(JSTOP.EQ.1.OR.
       6524     2                    *   (NSTOP.GE.0. AND. NSTOP.LT.NTIME) ) THEN
       6525     2                         WRITE(IUT6,*) BLANK
       6526     2                         WRITE(IUT6,*) ' NOTE THAT STOP-FUNCTION IS SPECIFIED'
       6527     2                     ENDIF
       6528     1                     IF(IPART.GE.2) CLOSE(IUT6)
       6529     1                     CALL DDEXIT
       6530     1               C
       6531     1               C
       6532     1                     STOP
       6533     1               C
       6534     1                9999 CONTINUE
       6535     1               C
       6536     1               CC    CALL DDSTOP(IPART,IUT0)
       6537     1                     WRITE(IUT6,*) BLANK
       6538     1                     WRITE(IUT6,*) ' ** LES3X: TERMINATED **'
       6539     1                     IF(IPART.GE.2) CLOSE(IUT6)
       6540     1               CCHY_TMP
       6541     1                     IF (IALEDB.GE.1.AND.IPART.EQ.1) CLOSE(IUTAL)
       6542     1               CCHY_TMP
       6543     1                     CALL DDEXIT
       6544     1               C
       6545     1                     STOP
       6546     1               C
       6547     1                9000 FORMAT(/,
       6548     1                    *' STEP' , I6 , ' N=' , I4 ,
       6549     1                    *     ' TIME=', 1PE12.5 , ' MAXD=', 1PE12.5 , ' RESP=' , 1PE12.5)
       6550     1                9100 FORMAT(
       6551     1                    &18X, ' NU  =', I12 , ' NV  =', I12 , ' NW  =', I12 , /,
       6552     1                    &18X, ' RESU=', 1PE12.5 , ' RESV=', 1PE12.5 , ' RESW=', 1PE12.5)
       6553     1                9110 FORMAT(
       6554     1                    &18X, ' NT  =', I12 , ' REST=', 1PE12.5, ' TSUM=', 1PE12.5 )
       6555     1                9200 FORMAT(
       6556     1                    *18X, ' HST1=', 1PE12.5 , ' HST2=', 1PE12.5 , ' HST3=', 1PE12.5)
       6557     1                9300 FORMAT(
       6558     1                    *18X, ' HST4=', 1PE12.5 , ' HST5=', 1PE12.5 , ' HST6=', 1PE12.5)
       6559     1                9400 FORMAT(
       6560     1                    *18X, ' HST7=', 1PE12.5 , ' HST8=', 1PE12.5 , ' HST9=', 1PE12.5)
       6561     1                9500 FORMAT(
       6562     1                    *18X, ' FX  =', 1PE12.5 , ' FY  =', 1PE12.5 , ' FZ  =', 1PE12.5)
       6563     1                9510 FORMAT(
       6564     1                    *18X, ' QIN =', 1PE12.5 , ' QOUT=', 1PE12.5 , ' DP  =', 1PE12.5)
       6565     1                9520 FORMAT(
       6566     1                    *18X, ' IFFO=', I12     , ' Q   =', 1PE12.5 , ' DP  =', 1PE12.5)
       6567     1                9530 FORMAT(
       6568     1                    *18X, ' QMIN=', 1PE12.5 , ' QNOW=', 1PE12.5 , ' QMAX=', 1PE12.5)
       6569     1                9550 FORMAT(18X, ' NITRE=', I11 , ' RESE=', 1PE12.5)
       6570     1                9560 FORMAT(18X, ' NITRA=', I11 , ' RESA=', 1PE12.5, ' NITRCP=',I11)
       6571     1                9570 FORMAT(18X, ' NITRA=', I11 , ' RESA=', 1PE12.5)
       6572     1                9580 FORMAT(
       6573     1                    *18X, ' FVOL=', 1PE12.5 , ' FMIN=', 1PE12.5 , ' FMAX=', 1PE12.5)
       6574     1                9590 FORMAT(
       6575     1                    *18X, ' CMAX=', 1PE12.5 , ' NCRR=', I12 , ' NERR=', I12)
       6576     1                9592 FORMAT(18X, ' NITR=', I12 , ' RES =', 1PE12.5)
       6577     1                9600 FORMAT('      TIME:', 1PE12.5 ,'  -  ', 1PE12.5)
       6578     1                9700 FORMAT('      STEP:',     I12 ,'  -  ',     I12)
       6579     1                     END

 Diagnostic messages: program name(LES3X)
   jwd8220o-i  "les3x.f", line 17: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "les3x.f", line 71: この名前'TDIFS'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 71: この名前'TDIFF'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 71: この名前'RCPS'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 71: この名前'RCPF'は、宣言だけされていて引用されていません。
   jwd8658i-w  "les3x.f", line 94: この領域に対して複数回初期値を与えることはできません。(名前:JSETOS)
   jwd2006i-i  "les3x.f", line 249: この名前'IPB'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 273: この名前'FILSFR'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 273: この名前'FILSFO'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 319: この名前'DUMMYC'は、宣言だけされていて引用されていません。
   jwd8653i-w  "les3x.f", line 552: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:NUMCRS)
   jwd8653i-w  "les3x.f", line 553: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTCRSA)
   jwd8653i-w  "les3x.f", line 554: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTCRSR)
   jwd8653i-w  "les3x.f", line 555: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTCRS2)
   jwd8653i-w  "les3x.f", line 560: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:NUMLAP)
   jwd8653i-w  "les3x.f", line 561: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTLAPA)
   jwd8653i-w  "les3x.f", line 562: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTLAPR)
   jwd8653i-w  "les3x.f", line 563: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTLAP2)
   jwd8653i-w  "les3x.f", line 568: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:NUMALL)
   jwd8653i-w  "les3x.f", line 569: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTALLA)
   jwd8653i-w  "les3x.f", line 570: 初期値設定副プログラム以外で共通ブロックの要素は初期化できません。(名前:DTALLR)
   jwd2006i-i  "les3x.f", line 623: この名前'NER'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 659: この名前'iV'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 659: この名前'IELM0'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 693: この名前'LPOSFR'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 693: この名前'LPOSIN'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 879: この名前'COUNTA'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 970: この名前'NEBUF'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 970: この名前'ISEND'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 970: この名前'NPDUM'は、宣言だけされていて引用されていません。
   jwd2006i-i  "les3x.f", line 970: この名前'IELM'は、宣言だけされていて引用されていません。
   jwd5003p-i  "les3x.f", line 2067: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 2067: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 2067: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2067: ループを展開数4回でアンローリングしました。
   jwd5003p-i  "les3x.f", line 2068: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 2068: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 2068: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2068: ループを展開数4回でアンローリングしました。
   jwd5003p-i  "les3x.f", line 2069: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 2069: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 2069: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2069: ループを展開数4回でアンローリングしました。
   jwd8209o-i  "les3x.f", line 2137: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 2335: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 2413: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 2440: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 2484: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2484: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 2484: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2484: ループの繰返し数が72回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2485: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2486: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2487: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 2507: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2507: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 2507: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2507: ループの繰返し数が72回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2508: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2509: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2510: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 2524: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2524: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 2524: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2524: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2525: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2526: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2527: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2528: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2529: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2530: 除算を逆数の乗算に変更しました。
   jwd5003p-i  "les3x.f", line 2534: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 2534: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 2534: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2534: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 2535: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 2535: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2535: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 2536: このDOループをSIMD化しました。(名前:I)
   jwd5001p-i  "les3x.f", line 2552: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 2552: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 2552: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2552: ループを展開数4回でアンローリングしました。
   jwd5208p-i  "les3x.f", line 2580: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IPATTR)
   jwd8663o-i  "les3x.f", line 2580: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2580: ループを展開数2回でアンローリングしました。
   jwd6001s-i  "les3x.f", line 2582: このDOループをSIMD化しました。(名前:I)
   jwd5209p-i  "les3x.f", line 2585: 配列'IPATTR'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5001p-i  "les3x.f", line 2590: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 2590: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 2590: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2590: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 2616: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 2616: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 2616: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2616: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 2622: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 2622: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 2622: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2622: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 2669: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2669: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2669: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2669: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2670: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2671: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2672: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 2675: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2675: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2675: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2675: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2676: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2677: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2678: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 2681: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2681: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2681: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2681: ループの繰返し数が768回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2682: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 2685: このDOループを並列化しました。(名前:IBE)
   jwd6001s-i  "les3x.f", line 2685: このDOループをSIMD化しました。(名前:IBE)
   jwd8209o-i  "les3x.f", line 2685: 多項式の演算順序を変更しました。
   jwd8204o-i  "les3x.f", line 2685: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2685: ループの繰返し数が512回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 2686: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 2698: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2698: このDOループをSIMD化しました。(名前:IBP)
   jwd8663o-i  "les3x.f", line 2698: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2698: ループを展開数2回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 2719: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2719: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2719: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2719: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 2725: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2725: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "les3x.f", line 2725: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2725: ループを展開数4回でアンローリングしました。
   jwd6001s-i  "les3x.f", line 2729: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2729: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2729: ループの繰返し数が224回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "les3x.f", line 2731: 配列'LWRK02'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5131p-i  "les3x.f", line 2734: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "les3x.f", line 2734: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "les3x.f", line 2734: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。
   jwd5001p-i  "les3x.f", line 2753: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2753: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2753: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2753: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 2756: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 2756: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 2756: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2756: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 2766: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2766: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "les3x.f", line 2766: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2766: ループを展開数2回でアンローリングしました。
   jwd8209o-i  "les3x.f", line 2794: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 2795: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2795: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 2795: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2795: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2796: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2797: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2798: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2799: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 2800: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 2803: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 2803: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 2803: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2803: ループの繰返し数が512回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 2804: 除算を逆数の乗算に変更しました。
   jwd8204o-i  "les3x.f", line 2848: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2848: ループの繰返し数が8回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 2849: 多項式の演算順序を変更しました。
   jwd5202p-i  "les3x.f", line 2850: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:LLAYER)
   jwd6202s-i  "les3x.f", line 2850: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:LLAYER)
   jwd5302p-i  "les3x.f", line 2853: 部分的な並列化による性能向上が得られない可能性があるため、このDOループの並列化を抑止しました。
   jwd8667o-i  "les3x.f", line 2853: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd5121p-i  "les3x.f", line 2854: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "les3x.f", line 2854: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd8204o-i  "les3x.f", line 2862: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2862: ループの繰返し数が8回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 2863: 多項式の演算順序を変更しました。
   jwd5202p-i  "les3x.f", line 2864: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:LLAYRT)
   jwd6202s-i  "les3x.f", line 2864: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:LLAYRT)
   jwd5302p-i  "les3x.f", line 2867: 部分的な並列化による性能向上が得られない可能性があるため、このDOループの並列化を抑止しました。
   jwd8667o-i  "les3x.f", line 2867: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd5121p-i  "les3x.f", line 2868: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "les3x.f", line 2868: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5131p-i  "les3x.f", line 2899: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5001p-i  "les3x.f", line 2933: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 2933: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 2933: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 2933: ループの繰返し数が64回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5208p-i  "les3x.f", line 2951: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IPATTR)
   jwd8663o-i  "les3x.f", line 2951: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 2951: ループを展開数2回でアンローリングしました。
   jwd6001s-i  "les3x.f", line 2953: このDOループをSIMD化しました。(名前:I)
   jwd5209p-i  "les3x.f", line 2956: 配列'IPATTR'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5001p-i  "les3x.f", line 3024: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 3024: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 3024: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3024: ループの繰返し数が48回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5004p-i  "les3x.f", line 3072: リダクション演算を含むDOループを並列化しました。(名前:IE)
   jwd6229s-i  "les3x.f", line 3072: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd6202s-i  "les3x.f", line 3073: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:MFRM)
   jwd8209o-i  "les3x.f", line 3127: 多項式の演算順序を変更しました。
   jwd8321o-i  "les3x.f", line 3166: ループをループアンスイッチングしました。
   jwd5001p-i  "les3x.f", line 3166: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 3166: このDOループをSIMD化しました。(名前:IP)
   jwd8222o-i  "les3x.f", line 3166: このループで必要なプリフェッチの数が、ハードウェアプリフェッチの許容数を超えたため、prefetch命令を出力しました。
   jwd8665o-i  "les3x.f", line 3166: 整数レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd8321o-i  "les3x.f", line 3198: ループをループアンスイッチングしました。
   jwd5001p-i  "les3x.f", line 3198: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 3198: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 3198: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd5001p-i  "les3x.f", line 3214: このDOループを並列化しました。(名前:IE)
   jwd6229s-i  "les3x.f", line 3214: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "les3x.f", line 3214: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "les3x.f", line 3224: 多項式の演算順序を変更しました。
   jwd8206o-i  "les3x.f", line 3227: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "les3x.f", line 3227: 多項式の演算順序を変更しました。
   jwd8206o-i  "les3x.f", line 3230: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "les3x.f", line 3230: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 3233: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 3238: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 3238: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 3238: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 3238: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 3243: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 3243: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "les3x.f", line 3243: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 3243: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 3250: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 3250: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 3250: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 3250: ループを展開数4回でアンローリングしました。
   jwd8211o-i  "les3x.f", line 3318: ループを入れ換えました。(行:3319)
   jwd6229s-i  "les3x.f", line 3318: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8203o-i  "les3x.f", line 3318: ループをフルアンローリングしました。
   jwd8211o-i  "les3x.f", line 3319: ループを入れ換えました。(行:3318)
   jwd5001p-i  "les3x.f", line 3319: このDOループを並列化しました。(名前:IE)
   jwd8670o-i  "les3x.f", line 3319: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd6208s-i  "les3x.f", line 3322: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WRK04)
   jwd6208s-i  "les3x.f", line 3323: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WRK05)
   jwd6208s-i  "les3x.f", line 3324: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WRK06)
   jwd6208s-i  "les3x.f", line 3325: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WRK07)
   jwd6208s-i  "les3x.f", line 3326: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WRK08)
   jwd6208s-i  "les3x.f", line 3327: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WRK09)
   jwd8667o-i  "les3x.f", line 3333: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK08)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK07)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK09)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:Z)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:Y)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:X)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK06)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK05)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK04)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NEX)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NODE)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NE)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NP)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IUT0)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IERR)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ZSMPL)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:YSMPL)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:XSMPL)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:TSMPL)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ESMPL)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:GSMPL)
   jwd5208p-i  "les3x.f", line 3334: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IESMPL)
   jwd5122p-i  "les3x.f", line 3334: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 3334: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd6202s-i  "les3x.f", line 3339: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:I)
   jwd5228p-i  "les3x.f", line 3347: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "les3x.f", line 3347: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8667o-i  "les3x.f", line 3347: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd5121p-i  "les3x.f", line 3349: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "les3x.f", line 3349: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5001p-i  "les3x.f", line 3435: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 3435: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3435: ループの繰返し数が27回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 3436: このDOループをSIMD化しました。(名前:J)
   jwd5001p-i  "les3x.f", line 3448: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 3449: このDOループをSIMD化しました。(名前:J)
   jwd8663o-i  "les3x.f", line 3449: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 3449: ループを展開数2回でアンローリングしました。
   jwd8209o-i  "les3x.f", line 3466: 多項式の演算順序を変更しました。
   jwd5003p-i  "les3x.f", line 3476: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 3476: この配列記述をSIMD化しました。
   jwd5003p-i  "les3x.f", line 3477: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 3477: この配列記述をSIMD化しました。
   jwd5003p-i  "les3x.f", line 3478: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 3478: この配列記述をSIMD化しました。
   jwd5003p-i  "les3x.f", line 3479: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 3479: この配列記述をSIMD化しました。
   jwd5001p-i  "les3x.f", line 3490: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 3490: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 3490: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 3490: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 3529: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 3529: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3529: ループの繰返し数が36回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 3530: このDOループをSIMD化しました。(名前:J)
   jwd5001p-i  "les3x.f", line 3537: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 3538: このDOループをSIMD化しました。(名前:I)
   jwd8204o-i  "les3x.f", line 3538: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3538: ループの繰返し数が144回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5003p-i  "les3x.f", line 3549: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 3549: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 3549: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 3549: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 3550: このDOループを並列化しました。(名前:IP)
   jwd8670o-i  "les3x.f", line 3551: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd6001s-i  "les3x.f", line 3555: このDOループをSIMD化しました。(名前:kt)
   jwd5001p-i  "les3x.f", line 3625: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 3625: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 3625: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3625: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 3641: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 3641: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 3641: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3641: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 3649: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 3649: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 3649: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 3649: ループの繰返し数が544回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5004p-i  "les3x.f", line 3845: リダクション演算を含むDOループを並列化しました。(名前:IP)
   jwd6004s-i  "les3x.f", line 3845: リダクション演算を含むDOループをSIMD化しました。(名前:IP)
   jwd8209o-i  "les3x.f", line 3866: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 4031: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 4031: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "les3x.f", line 4031: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 4031: ループを展開数2回でアンローリングしました。
   jwd5208p-i  "les3x.f", line 4038: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK01)
   jwd8670o-i  "les3x.f", line 4038: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5131p-i  "les3x.f", line 4040: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "les3x.f", line 4040: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8203o-i  "les3x.f", line 4040: ループをフルアンローリングしました。
   jwd5208p-i  "les3x.f", line 4047: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK02)
   jwd8670o-i  "les3x.f", line 4047: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5131p-i  "les3x.f", line 4049: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "les3x.f", line 4049: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8203o-i  "les3x.f", line 4049: ループをフルアンローリングしました。
   jwd5001p-i  "les3x.f", line 4060: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 4060: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 4060: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 4060: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5228p-i  "les3x.f", line 4067: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "les3x.f", line 4067: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "les3x.f", line 4067: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "les3x.f", line 4067: ループを展開数2回でアンローリングしました。
   jwd5003p-i  "les3x.f", line 4318: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 4318: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 4318: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 4318: ループを展開数4回でアンローリングしました。
   jwd8204o-i  "les3x.f", line 4319: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 4319: ループの繰返し数が6回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5202p-i  "les3x.f", line 4320: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:ICRS_T)
   jwd6202s-i  "les3x.f", line 4320: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:ICRS_T)
   jwd5001p-i  "les3x.f", line 4323: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 4323: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 4323: ループの繰返し数が48回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 4324: このDOループをSIMD化しました。(名前:J)
   jwd5003p-i  "les3x.f", line 4341: この配列記述を並列化しました。
   jwd6003s-i  "les3x.f", line 4341: この配列記述をSIMD化しました。
   jwd8663o-i  "les3x.f", line 4341: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 4341: ループを展開数4回でアンローリングしました。
   jwd5228p-i  "les3x.f", line 4342: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "les3x.f", line 4342: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "les3x.f", line 4342: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "les3x.f", line 4342: ループを展開数2回でアンローリングしました。
   jwd5133p-i  "les3x.f", line 4367: このDOループは構造が複雑なため、並列化できません。
   jwd5131p-i  "les3x.f", line 4367: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5143p-i  "les3x.f", line 4379: DOループの繰返し数が少ないため、このDOループは並列化できません。
   jwd6001s-i  "les3x.f", line 4379: このDOループをSIMD化しました。(名前:I)
   jwd8209o-i  "les3x.f", line 4468: 多項式の演算順序を変更しました。
   jwd5143p-i  "les3x.f", line 4472: DOループの繰返し数が少ないため、このDOループは並列化できません。
   jwd6001s-i  "les3x.f", line 4472: このDOループをSIMD化しました。(名前:IMRF)
   jwd8674o-i  "les3x.f", line 4472: ループの繰返し数が96回より小さく、最適化の効果を得られないため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 4472: ループを展開数2回でアンローリングしました。
   jwd5143p-i  "les3x.f", line 4481: DOループの繰返し数が少ないため、このDOループは並列化できません。
   jwd6001s-i  "les3x.f", line 4481: このDOループをSIMD化しました。(名前:IFRAME)
   jwd8674o-i  "les3x.f", line 4481: ループの繰返し数が48回より小さく、最適化の効果を得られないため、ソフトウェアパイプライニングを抑止しました。
   jwd8209o-i  "les3x.f", line 4526: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 4570: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 4657: このDOループを並列化しました。(名前:IEWALL)
   jwd6001s-i  "les3x.f", line 4657: このDOループをSIMD化しました。(名前:IEWALL)
   jwd8204o-i  "les3x.f", line 4657: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 4657: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 4827: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 4827: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "les3x.f", line 4827: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "les3x.f", line 4827: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "les3x.f", line 4913: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 4913: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 4913: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 4913: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6229s-i  "les3x.f", line 4922: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "les3x.f", line 4922: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "les3x.f", line 4923: 多項式の演算順序を変更しました。
   jwd5228p-i  "les3x.f", line 4923: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6228s-i  "les3x.f", line 4923: データの定義引用の順序が逐次実行と異なる可能性があるため、このDOループはSIMD化できません。
   jwd5001p-i  "les3x.f", line 5198: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5198: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5198: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5198: ループの繰返し数が416回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 5222: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5222: このDOループをSIMD化しました。(名前:IP)
   jwd8222o-i  "les3x.f", line 5222: このループで必要なプリフェッチの数が、ハードウェアプリフェッチの許容数を超えたため、prefetch命令を出力しました。
   jwd8665o-i  "les3x.f", line 5222: 整数レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd8206o-i  "les3x.f", line 5223: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5224: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5225: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5227: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5228: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5229: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5231: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5232: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5233: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5235: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5236: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5238: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5239: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5241: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5242: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 5246: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5246: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5246: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5246: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "les3x.f", line 5247: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5248: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5249: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5250: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "les3x.f", line 5251: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "les3x.f", line 5265: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5265: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 5265: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5265: ループの繰返し数が96回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 5269: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 5274: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5274: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5274: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5274: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 5275: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 5280: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5280: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5280: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5280: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 5323: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5323: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 5323: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5323: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 5329: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5329: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5329: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 5330: このDOループをSIMD化しました。(名前:I)
   jwd5001p-i  "les3x.f", line 5372: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5372: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 5372: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5372: ループの繰返し数が128回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 5421: このDOループを並列化しました。(名前:IEBODY)
   jwd6001s-i  "les3x.f", line 5421: このDOループをSIMD化しました。(名前:IEBODY)
   jwd8204o-i  "les3x.f", line 5421: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5421: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 5423: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 5450: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5450: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 5450: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5450: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 5456: 多項式の演算順序を変更しました。
   jwd5121p-i  "les3x.f", line 5456: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "les3x.f", line 5456: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd8667o-i  "les3x.f", line 5456: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "les3x.f", line 5469: 多項式の演算順序を変更しました。
   jwd6229s-i  "les3x.f", line 5500: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8667o-i  "les3x.f", line 5500: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "les3x.f", line 5501: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:DUM)
   jwd6208s-i  "les3x.f", line 5501: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:DUM)
   jwd5208p-i  "les3x.f", line 5502: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IESMPL)
   jwd5208p-i  "les3x.f", line 5502: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IE)
   jwd6208s-i  "les3x.f", line 5502: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:IESMPL)
   jwd6208s-i  "les3x.f", line 5502: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:IE)
   jwd5208p-i  "les3x.f", line 5503: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:GSMPL)
   jwd5208p-i  "les3x.f", line 5503: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:XI)
   jwd6208s-i  "les3x.f", line 5503: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:GSMPL)
   jwd6208s-i  "les3x.f", line 5503: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:XI)
   jwd5208p-i  "les3x.f", line 5504: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ESMPL)
   jwd5208p-i  "les3x.f", line 5504: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ET)
   jwd6208s-i  "les3x.f", line 5504: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ESMPL)
   jwd6208s-i  "les3x.f", line 5504: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ET)
   jwd5208p-i  "les3x.f", line 5505: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:TSMPL)
   jwd5208p-i  "les3x.f", line 5505: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ZT)
   jwd6208s-i  "les3x.f", line 5505: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:TSMPL)
   jwd6208s-i  "les3x.f", line 5505: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ZT)
   jwd5208p-i  "les3x.f", line 5506: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LSMPL)
   jwd6208s-i  "les3x.f", line 5506: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:LSMPL)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:U)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NEX)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:ME)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:MP)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NODE)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NE)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:NP)
   jwd5208p-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IUT0)
   jwd5122p-i  "les3x.f", line 5507: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NEX)
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:ME)
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:MP)
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NODE)
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NE)
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:IUT0)
   jwd6208s-i  "les3x.f", line 5507: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:NP)
   jwd6122s-i  "les3x.f", line 5507: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5208p-i  "les3x.f", line 5512: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:V)
   jwd5122p-i  "les3x.f", line 5512: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 5512: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5208p-i  "les3x.f", line 5517: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:W)
   jwd5122p-i  "les3x.f", line 5517: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 5517: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5208p-i  "les3x.f", line 5522: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:PN)
   jwd5122p-i  "les3x.f", line 5522: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 5522: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd8209o-i  "les3x.f", line 5525: 多項式の演算順序を変更しました。
   jwd5208p-i  "les3x.f", line 5527: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FL)
   jwd5122p-i  "les3x.f", line 5527: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 5527: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5208p-i  "les3x.f", line 5531: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:T)
   jwd5122p-i  "les3x.f", line 5531: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 5531: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5208p-i  "les3x.f", line 5538: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WRK01)
   jwd5122p-i  "les3x.f", line 5538: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd6122s-i  "les3x.f", line 5538: DOループ内に、SIMD化の制約となる手続引用が存在します。
   jwd5208p-i  "les3x.f", line 5544: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:HST)
   jwd6208s-i  "les3x.f", line 5544: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:HST)
   jwd8209o-i  "les3x.f", line 5582: 多項式の演算順序を変更しました。
   jwd5302p-i  "les3x.f", line 5585: 部分的な並列化による性能向上が得られない可能性があるため、このDOループの並列化を抑止しました。
   jwd8667o-i  "les3x.f", line 5585: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd5121p-i  "les3x.f", line 5586: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "les3x.f", line 5586: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5001p-i  "les3x.f", line 5688: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5688: このDOループをSIMD化しました。(名前:IP)
   jwd8204o-i  "les3x.f", line 5688: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5688: ループの繰返し数が112回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 5692: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 5696: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5696: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5696: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5696: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 5697: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 5702: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5702: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5702: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5702: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 5745: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5745: このDOループをSIMD化しました。(名前:IP)
   jwd8222o-i  "les3x.f", line 5745: このループで必要なプリフェッチの数が、ハードウェアプリフェッチの許容数を超えたため、prefetch命令を出力しました。
   jwd8665o-i  "les3x.f", line 5745: 整数レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd5001p-i  "les3x.f", line 5757: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5757: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5757: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 5758: このDOループをSIMD化しました。(名前:I)
   jwd5143p-i  "les3x.f", line 5819: DOループの繰返し数が少ないため、このDOループは並列化できません。
   jwd6001s-i  "les3x.f", line 5819: このDOループをSIMD化しました。(名前:I)
   jwd5001p-i  "les3x.f", line 5976: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5976: このDOループをSIMD化しました。(名前:IP)
   jwd8665o-i  "les3x.f", line 5976: 整数レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd5001p-i  "les3x.f", line 5989: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 5989: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 5989: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 5989: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8321o-i  "les3x.f", line 5994: ループをループアンスイッチングしました。
   jwd5001p-i  "les3x.f", line 5994: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "les3x.f", line 5994: このDOループをSIMD化しました。(名前:IP)
   jwd8222o-i  "les3x.f", line 5994: このループで必要なプリフェッチの数が、ハードウェアプリフェッチの許容数を超えたため、prefetch命令を出力しました。
   jwd8665o-i  "les3x.f", line 5994: 整数レジスタが不足しているため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "les3x.f", line 6007: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6013: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6016: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6017: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6018: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 6029: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "les3x.f", line 6029: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 6029: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 6029: ループの繰返し数が144回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "les3x.f", line 6030: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6031: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6032: 多項式の演算順序を変更しました。
   jwd8209o-i  "les3x.f", line 6033: 多項式の演算順序を変更しました。
   jwd5001p-i  "les3x.f", line 6036: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 6036: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 6036: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 6036: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 6042: このDOループを並列化しました。(名前:IBP)
   jwd6001s-i  "les3x.f", line 6042: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "les3x.f", line 6042: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 6042: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "les3x.f", line 6106: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 6106: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 6106: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 6107: このDOループをSIMD化しました。(名前:I)
   jwd5001p-i  "les3x.f", line 6252: このDOループを並列化しました。(名前:IE)
   jwd8204o-i  "les3x.f", line 6252: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "les3x.f", line 6252: ループの繰返し数が80回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6001s-i  "les3x.f", line 6253: このDOループをSIMD化しました。(名前:I)
   jwd8209o-i  "les3x.f", line 6420: 多項式の演算順序を変更しました。
   jwd6302s-i  "les3x.f", line 6443: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8667o-i  "les3x.f", line 6443: ループを含む手続が巨大なため、ソフトウェアパイプライニングを適用できません。
   jwd8206o-i  "les3x.f", line 6444: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "les3x.f", line 6445: 多項式の演算順序を変更しました。
   jwd5121p-i  "les3x.f", line 6446: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "les3x.f", line 6446: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd8206o-i  "les3x.f", line 6465: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "les3x.f", line 6465: 多項式の演算順序を変更しました。
   jwd8206o-i  "les3x.f", line 6484: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "les3x.f", line 6484: 多項式の演算順序を変更しました。

 Procedure information
   Lines      : 10608
   Statements : 6682
   Stack(byte): 104096
   Prefetch num: 56

 Total information
   Procedures       : 1
   Total lines      : 10608
   Total statements : 6682
   Total stack(byte): 104096
   Total prefetch num: 56

