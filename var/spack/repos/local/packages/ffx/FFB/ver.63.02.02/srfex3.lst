
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:35 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : srfex3.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "SRFEX3"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE : SRFEX3                                                C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY H.YOSHIMURA         C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         11                     C                                                                      C
         12                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         13                     C                                                                      C
         14                     C======================================================================C
         15                           SUBROUTINE SRFEX3(MESURF,MLST,MB,NE,NP,N2,NEX,NS,NSP,N2D,
         16                          *                  LPNT,NPNT,LPNT2,NPNT2,LOCAL,NODE,
         17                          *                  LESURF,NESURF,NPNTN,MWRK,IWRK,IWRK2,IUT0,IERR)
         18                     C
         19                           IMPLICIT NONE
         20                     C
         21                           INTEGER*4 MESURF,MLST,MB,NE,NP,N2,NEX,NS,NSP,N2D,
         22                          *          LPNT,NPNT,LPNT2,NPNT2,LOCAL,NODE,
         23                          *          LESURF,NESURF,NPNTN,MWRK,IWRK,IWRK2,IUT0,IERR
         24                     C
         25                           DIMENSION LPNT(MB),LPNT2(NPNT2),
         26                          1          LOCAL(NSP,NS,4),NODE(N2,NE),NEX(8),
         27                          2          LESURF(MLST,MESURF),IWRK(MWRK),IWRK2(MWRK)
         28                     C
         29                           CHARACTER*60 ERMSGB
         30                          & /' ## SUBROUTINE SRFEXX: FATAL      ERROR OCCURENCE; RETURNED' /
         31                           CHARACTER*60 EREXP1
         32                          & /' THE FIRST DIMENSION OF OUTPUT LIST PASSED IS NOT SUFFICIENT'/
         33                           CHARACTER*60 EREXP2
         34                          & /' THE PASSED NODAL POINT LIST CONTAINS ILLEGAL NODE NUMBER   '/
         35                           CHARACTER*60 EREXP3
         36                          & /' NUMBER OF SURFACE ELEMENTS EXCEEDED LIMIT OF               '/
         37                           CHARACTER*60 EREXP4
         38                          & /' NUMBER OF SYMMETRIC BOUNDARY NODE EXCEEDED LIMIT OF        '/
         39                     C
         40                           INTEGER*4 IPNT,IP,IS,IE,IETYPE,NSURF,IBMAX,I,II,IPF,JP,J,J1,J2,
         41                          *          IS1,IE1,IS2,IE2,IETYPE1,IETYPE2,LIST1,LIST2,NBUF,IMATCH
         42                     C
         43                           DIMENSION LIST1(4),LIST2(4)
         44                     C
         45                     C
         46                     C      EXTRACT ALL BOUNDARY SURFACES / ALL SURFACES COMPOSED OF A GIVEN
         47                     C     GROUP OF NODAL POINTS
         48                     C         ( 3-D CALCULATION : SINGLE WORD & MULTI ELEMENT VERSION )
         49                     C                                           CODED BASED ON 'SURFEX'
         50                     C
         51                     C     ARGUMENT LISTINGS
         52                     C       (1) INPUT
         53                     C          LPNT  (IPNT); NODE NUMBERS    FOR SURFACE EXTRACTION
         54                     C          NPNT        ; NUMBER OF NODES FOR SURFACE EXTRACTION
         55                     C          LOCAL (I,IS); NODE NUMBER TABLE DEFINING ELEMENT SURFACES
         56                     C          NODE  (I,IE); NODE NUMBER TABLE BASED ON ELEMENT
         57                     C          NEP     (IP); NUMBER OF ADJACENT ELEMENTS TO NODE IP
         58                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         59                     C          NP          ; NUMBER OF TOTAL    NODES
         60                     C          MESURF      ; THE MAXIMUM NUMBER  OF SURFACE ELEMENTS
         61                     C          MLST        ; THE FIRST DIMENSION OF ARRAY LESURF
         62                     C                        MLST SHOULD BE 2 IN THIS VERSION
         63                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         64                     C          IUT0        ; FILE NUMBER TO WRITE  ERROR MESSAGE
         65                     C          IERR        ; RETURN CODE WHOSE VALUE WILL BE EITHER
         66                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
         67                     C                OR 1 --- INDICATING OCCURENCE OF SOME ERROR CONDITIONS
         68                     C
         69                     C       (2) OUTPUT
         70                     C          LESURF(I,IESURF); THE EXTRACTED SURFACES ARE REPRESENTED
         71                     C               BY ELEMENT NUMBER FACING ON THE SURFACE, CONTAINED IN
         72                     C               ARGUMENT LESURF(1,IESURF), AND THE LOCAL SURFACE NUMBER
         73                     C               IN THE ELEMENT, CONTAINED IN ARGUMENT LESURF(2,IESURF).
         74                     C               THE LOCAL SURFACE NUMBER IS THE SAME AS THE PASSED
         75                     C               LOCAL SURFACE NODE LIST ARGUMENT 'LOCAL'.
         76                     C
         77                     C          NESURF      ; NUMBER OF SURFACE ELEMENTS EXTRACTED
         78                     C
         79                     C
         80                           IERR = 0
         81                     C
         82                     C CHECK PASSED PARAMETERS
         83                     C
         84     1                     IF(MLST.NE.2) THEN
         85     1                         WRITE(IUT0,*) ERMSGB
         86     1                         WRITE(IUT0,*) EREXP1
         87     1                         IERR = 1
         88     1                         RETURN
         89     1                     ENDIF
         90                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPNT
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 2  FILL 9
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
         91     1   s    s            DO 100 IPNT = 1 , NPNT
         92     2   p    m                IF(LPNT(IPNT).LT.1 .OR. LPNT(IPNT).GT.NP) THEN
         93     2   m    s                    WRITE(IUT0,*) ERMSGB
         94     2   m    s                    WRITE(IUT0,*) EREXP2
         95     2   m    s                    WRITE(IUT0,*)
         96     2                    &        ' *** POINT NO. = ',IPNT,' *** NODE NO. = ',LPNT(IPNT)
         97     2   p    s                    IERR = 1
         98     2   p    v                ENDIF
         99     1   p    v        100 CONTINUE
        100                           IF(IERR.EQ.1) RETURN
        101                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPNT2
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 2  FILL 9
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        102     1   s    s            DO 150 IPNT = 1 , NPNT2
        103     2   p    m                IF(LPNT2(IPNT).LT.1 .OR. LPNT2(IPNT).GT.NP) THEN
        104     2   m    s                    WRITE(IUT0,*) ERMSGB
        105     2   m    s                    WRITE(IUT0,*) EREXP2
        106     2   m    s                    WRITE(IUT0,*)
        107     2                    &        ' *** POINT NO. = ',IPNT,' *** NODE NO. = ',LPNT2(IPNT)
        108     2   p    s                    IERR = 1
        109     2   p    v                ENDIF
        110     1   p    v       150  CONTINUE
        111                           IF(IERR.EQ.1) RETURN
        112                     C
        113                           NESURF = 0
        114                     C
        115                     C EXTRACT ALL THE SURFACES COMPOSED OF GIVEN SET OF NODES
        116                     C
        117                     C
        118                     C EXTRACT ALL THE SURFACES COMPOSED OF GIVEN SET OF NODES
        119                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IWRK2, IWRK
                              <<< Loop-information  End >>>
        120     1  pp   2v            DO 200 IP=1,NP
        121     1   p   2v                IWRK (IP)=0
        122     1   p   2v                IWRK2(IP)=0
        123     1   p   2v        200 CONTINUE
        124                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.83, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPNT
                              <<< Loop-information  End >>>
        125     1   s   4v            DO 300 IPNT=1,NPNT
        126     1   p   4v                IP = LPNT(IPNT)
        127     1   m   4v                IWRK(IP)=2
        128     1   p   4v        300 CONTINUE
        129                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.83, ITR: 320, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPNT2
                              <<< Loop-information  End >>>
        130     1   s   4v            DO 350 IPNT=1,NPNT2
        131     1   p   4v                IP = LPNT2(IPNT)
        132     1   m   4v                IWRK(IP)=1
        133     1   p   4v        350 CONTINUE
        134                     C
        135     1                     DO 400 IE = 1 , NE
        136     1               C
        137     2                        IF(NESURF+6.GT.MESURF) THEN
        138     2                           WRITE(IUT0,*) ERMSGB
        139     2                           WRITE(IUT0,*) EREXP3, MESURF
        140     2                           IERR   = 1
        141     2                           RETURN
        142     2                        ENDIF
        143     1               C
        144     2                        IF(     NODE(8,IE).GE.1) THEN ! HEX
        145     2                           IETYPE = 4
        146     2                           NSURF  = 6
        147     2                        ELSE IF(NODE(6,IE).GE.1) THEN ! PRS
        148     2                           IETYPE = 3
        149     2                           NSURF  = 5
        150     2                        ELSE IF(NODE(5,IE).GE.1) THEN ! PYR
        151     2                           IETYPE = 2
        152     2                           NSURF  = 5
        153     2                        ELSE                          ! TET
        154     2                           IETYPE = 1
        155     2                           NSURF  = 4
        156     2                        ENDIF
        157     1               C
        158     2                        DO 401 IS=1,NSURF
        159     2                           IBMAX=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LOCAL
                              <<< Loop-information  End >>>
        160     3                           DO 402 I=1,N2D
        161     3                              II = LOCAL(I,IS,IETYPE)
        162     4                              IF(II.GE.1) THEN
        163     4                                 IPF = NODE(II,IE)
        164     4                                 IF(IWRK(IPF).EQ.0) GOTO 401
        165     4                                 IBMAX=MAX(IBMAX,IWRK(IPF))
        166     4                              ENDIF
        167     3                402        CONTINUE
        168     2                           IF (IBMAX.EQ.1) GOTO 401
        169     2                           NESURF = NESURF +1
        170     2                           LESURF(1,NESURF) = IE
        171     2                           LESURF(2,NESURF) = IS
        172     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LOCAL
                              <<< Loop-information  End >>>
        173     3   s   2s                  DO 403 I=1,N2D
        174     3   p   2v                     II = LOCAL(I,IS,IETYPE)
        175     4   p   2s                     IF(II.GE.1) THEN
        176     4   p   2s                        IPF = NODE(II,IE)
        177     4   p   2s                        IF (IWRK(IPF).EQ.1) IWRK2(IPF)=1
        178     4   p   2v                     ENDIF
        179     3   p   2v       403        CONTINUE
        180     2                401     CONTINUE
        181     1               C
        182     1                400  CONTINUE
        183                     C
        184                           NPNTN=NPNT
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IWRK2
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        185     1                     DO 450 IP=1,NP
        186     1                        IF (IWRK2(IP).EQ.0) GOTO 450
        187     1                        NPNTN=NPNTN+1
        188     2                        IF (NPNTN.GT.MB) THEN
        189     2                           WRITE(IUT0,*) ERMSGB
        190     2                           WRITE(IUT0,*) EREXP4
        191     2                           IERR = 1
        192     2                           RETURN
        193     2                        ENDIF
        194     1                        LPNT(NPNTN)=IP
        195     1                450  CONTINUE
        196                     C
        197                     C REMOVE INNER SURFACE
        198                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IWRK
                              <<< Loop-information  End >>>
        199     1  pp   4v            DO 500 J=1,NESURF
        200     1   p   4v                IWRK (J)=0
        201     1   p   4v        500 CONTINUE
        202                     C
        203     1                     DO 610 J1=1,NESURF-1
        204     1                        IF(IWRK(J1).EQ.1) GOTO 610
        205     1                        IE1=LESURF(1,J1)
        206     1                        IS1=LESURF(2,J1)
        207     2                        IF(     NODE(8,IE1).GE.1) THEN ! HEX
        208     2                           IETYPE1 = 4
        209     2                        ELSE IF(NODE(6,IE1).GE.1) THEN ! PRS
        210     2                           IETYPE1 = 3
        211     2                        ELSE IF(NODE(5,IE1).GE.1) THEN ! PYR
        212     2                           IETYPE1 = 2
        213     2                        ELSE                           ! TET
        214     2                           IETYPE1 = 1
        215     2                        ENDIF
        216     1                        LIST1(1) = NODE(LOCAL(1,IS1,IETYPE1),IE1)
        217     1                        LIST1(2) = NODE(LOCAL(2,IS1,IETYPE1),IE1)
        218     1                        LIST1(3) = NODE(LOCAL(3,IS1,IETYPE1),IE1)
        219     2                        IF(LOCAL(4,IS1,IETYPE1).GE.1) THEN
        220     2                           LIST1(4) = NODE(LOCAL(4,IS1,IETYPE1),IE1)
        221     2                        ELSE
        222     2                           LIST1(4) = 0
        223     2                        ENDIF
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IWRK
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 2  FILL 4
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        224     2                        DO 600 J2=J1+1,NESURF
        225     2                           IF(IWRK(J2).EQ.1) GOTO 600
        226     2                           IE2=LESURF(1,J2)
        227     2                           IS2=LESURF(2,J2)
        228     3                           IF(     NODE(8,IE2).GE.1) THEN ! HEX
        229     3                              IETYPE2 = 4
        230     3                           ELSE IF(NODE(6,IE2).GE.1) THEN ! PRS
        231     3                              IETYPE2 = 3
        232     3                           ELSE IF(NODE(5,IE2).GE.1) THEN ! PYR
        233     3                              IETYPE2 = 2
        234     3                           ELSE
        235     3                              IETYPE2 = 1                 ! TET
        236     3                           ENDIF
        237     2                           LIST2(1) = NODE(LOCAL(1,IS2,IETYPE2),IE2)
        238     2                           LIST2(2) = NODE(LOCAL(2,IS2,IETYPE2),IE2)
        239     2                           LIST2(3) = NODE(LOCAL(3,IS2,IETYPE2),IE2)
        240     3                           IF(LOCAL(4,IS2,IETYPE2).GE.1) THEN
        241     3                              LIST2(4) = NODE(LOCAL(4,IS2,IETYPE2),IE2)
        242     3                           ELSE
        243     3                              LIST2(4) = 0
        244     3                           ENDIF
        245     2               C
        246     2                           IMATCH=0
        247     2                           CALL MATCH4(LIST1,LIST2,IMATCH)
        248     3                           IF(IMATCH.EQ.1) THEN
        249     3                              IWRK(J1)=1
        250     3                              IWRK(J2)=1
        251     3                              GOTO 610
        252     3                           ENDIF
        253     2                600     CONTINUE
        254     1                610  CONTINUE
        255                     C
        256                           NBUF=NESURF
        257                           NESURF=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IWRK
                              <<< Loop-information  End >>>
        258     1   s   2s            DO 700 J=1,NBUF
        259     1   p   2v                IF(IWRK(J).EQ.1)GOTO 700
        260     1   s   2s                NESURF=NESURF+1
        261     1   m   2m                LESURF(1,NESURF)=LESURF(1,J)
        262     1   s   2s                LESURF(2,NESURF)=LESURF(2,J)
        263     1   p   2v        700 CONTINUE
        264                     C
        265                           RETURN
        266                           END

 Diagnostic messages: program name(SRFEX3)
   jwd8220o-i  "srfex3.f", line 15: 副作用の可能性のある最適化を行いました。
   jwd2008i-i  "srfex3.f", line 25: この仮引数'NEX'は、副プログラム中で使用されていません。
   jwd2006i-i  "srfex3.f", line 40: この名前'JP'は、宣言だけされていて引用されていません。
   jwd6229s-i  "srfex3.f", line 91: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8664o-i  "srfex3.f", line 91: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5121p-i  "srfex3.f", line 93: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "srfex3.f", line 93: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5121p-i  "srfex3.f", line 94: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "srfex3.f", line 94: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5121p-i  "srfex3.f", line 95: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "srfex3.f", line 95: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd6229s-i  "srfex3.f", line 102: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8664o-i  "srfex3.f", line 102: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5121p-i  "srfex3.f", line 104: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "srfex3.f", line 104: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5121p-i  "srfex3.f", line 105: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "srfex3.f", line 105: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5121p-i  "srfex3.f", line 106: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "srfex3.f", line 106: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5001p-i  "srfex3.f", line 120: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "srfex3.f", line 120: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "srfex3.f", line 120: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "srfex3.f", line 120: ループを展開数2回でアンローリングしました。
   jwd6001s-i  "srfex3.f", line 125: このDOループをSIMD化しました。(名前:IPNT)
   jwd8204o-i  "srfex3.f", line 125: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "srfex3.f", line 125: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "srfex3.f", line 127: 配列'IWRK'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd6001s-i  "srfex3.f", line 130: このDOループをSIMD化しました。(名前:IPNT)
   jwd8204o-i  "srfex3.f", line 130: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "srfex3.f", line 130: ループの繰返し数が320回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "srfex3.f", line 132: 配列'IWRK'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5131p-i  "srfex3.f", line 135: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5202p-i  "srfex3.f", line 158: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NESURF)
   jwd5208p-i  "srfex3.f", line 158: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:IWRK2)
   jwd5208p-i  "srfex3.f", line 158: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LESURF)
   jwd5131p-i  "srfex3.f", line 160: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "srfex3.f", line 160: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "srfex3.f", line 160: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。
   jwd6229s-i  "srfex3.f", line 173: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "srfex3.f", line 173: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "srfex3.f", line 173: ループを展開数2回でアンローリングしました。
   jwd8209o-i  "srfex3.f", line 174: 多項式の演算順序を変更しました。
   jwd5209p-i  "srfex3.f", line 177: 配列'IWRK2'の添字式中の変数'IPF'をループ中で定義しているため、このDOループは並列化できません。
   jwd5131p-i  "srfex3.f", line 185: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "srfex3.f", line 185: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "srfex3.f", line 185: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。
   jwd5001p-i  "srfex3.f", line 199: このDOループを並列化しました。(名前:J)
   jwd6001s-i  "srfex3.f", line 199: このDOループをSIMD化しました。(名前:J)
   jwd8663o-i  "srfex3.f", line 199: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "srfex3.f", line 199: ループを展開数4回でアンローリングしました。
   jwd5122p-i  "srfex3.f", line 203: DOループ内に、自動並列化の制約となる手続引用が存在します。
   jwd5133p-i  "srfex3.f", line 203: このDOループは構造が複雑なため、並列化できません。
   jwd5131p-i  "srfex3.f", line 224: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "srfex3.f", line 224: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "srfex3.f", line 224: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd6229s-i  "srfex3.f", line 258: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "srfex3.f", line 258: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "srfex3.f", line 258: ループを展開数2回でアンローリングしました。
   jwd5202p-i  "srfex3.f", line 260: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。(名前:NESURF)
   jwd6202s-i  "srfex3.f", line 260: データの定義引用の順序が逐次実行と異なるため、このDOループはSIMD化できません。(名前:NESURF)
   jwd5209p-i  "srfex3.f", line 261: 配列'LESURF'の添字式中の変数'NESURF'をループ中で定義しているため、このDOループは並列化できません。
   jwd6209s-i  "srfex3.f", line 261: 配列'LESURF'の添字式中の変数'NESURF'をループ中で定義しているため、このDOループはSIMD化できません。

 Procedure information
   Lines      : 266
   Statements : 168
   Stack(byte): 2816
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 266
   Total statements : 168
   Total stack(byte): 2816
   Total prefetch num: 0

