
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:52:53 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : bcgsxe.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "BCGSXE"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE BCGSXE(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
          2                          *                  ME,MP,N1,N2,NEX,NE,NP,NMAX,EPS,EPSRE,
          3                          *                  NODE,CM,DNXYZP,DNXI,DNYI,DNZI,
          4                          *                  B,PG,NPFIX,LPFIX,LEFIX,
          5                          *                  NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,NITR,RESR,S,
          6                          *                  IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
          7                          *                  R0,RK,PK,APK,ATK,TK,FXYZ,RX,RY,MWRK,WRKN,
          8                          *                  ADIAG,
          9                          *                  JSET,NFRAME,IEATTR,IPATTR,
         10                          *                  X,Y,Z,OMEGA,TIMER,UFRAME,VFRAME,WFRAME,
         11                          *                  NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
         12                          *                  COVER1,COVER2,COVER3,
         13                          *                  NPSND,LPSND,NPTSND,NPRCV,LPRCV,NPTRCV,
         14                          *                  IPSET,IPSRC,IPRES,DT,FSMACH,
         15                          *                  NMRF,IFATTR,OMGMRF,AMRF,
         16                          *                  IVOF,IMASS,RHO3D,NSP,NS,LOCAL,
         17                          *                  NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
         18                          *                  NFFREE,LFFREE,NPFREE,LPFREE,
         19                          *                  XPFREE,YPFREE,ZPFREE,
         20                          *                  NESET,NESND,NERCV,NBESET,LBESET,
         21                          *                  LESET1,LESET2,LESET3,
         22                          *                  EOVER1,EOVER2,EOVER3,
         23                          *                  LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
         24                          *                  SN,SNESET,OSBCOE,XNESET,YNESET,ZNESET,
         25                          *                  SOSP,SOSWRK,WRKOS1,WRKOS2,FESRC,FLE,
         26                          *                  MEP,NEP,IENP,JENP,
         27                          *                  IUT0,IERR,DNXYZ,NUMVALID,LSTVALID)
         28                           IMPLICIT NONE
         29                     C
         30                           REAL*4    FESRC(NE),FLE(NE)
         31                     C
         32                     CCC   [LOOP]
         33                           INTEGER*4 MCOLOR,MCPART
         34                           INTEGER*4 NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
         35                     C
         36                     CCC   [INPUT]
         37                           INTEGER*4 ME,MP,N1,N2,NEX(8),NE,NP,NMAX,IUT0
         38                           REAL*4    EPS,EPSRE
         39                           INTEGER*4 NODE(N2,NE)
         40                           INTEGER*4 MEP,NEP(NP),IENP(MEP,NP),JENP(MEP,NP)
         41                           REAL*4    CM(NP),
         42                          *          DNXYZP(MEP,3,NP),
         43                          *          DNXI(N1,ME),DNYI(N1,ME),DNZI(N1,ME),
         44                          *          B(NE),PG(NE)
         45                           REAL*4    XPSYMT(NPSYMT),YPSYMT(NPSYMT),ZPSYMT(NPSYMT)
         46                           INTEGER*4 NPFIX,LPFIX(NPFIX),LEFIX(NE),NPSYMT,LPSYMT(NPSYMT)
         47                           INTEGER*4 IPART,NDOM,MBPDOM,
         48                          *          LDOM(NDOM),NBPDOM(NDOM),
         49                          *          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM)
         50                     C
         51                           INTEGER*4 IPRES,JSET,NFRAME,IEATTR(NE),IPATTR(NP)
         52                           REAL*4    DT,FSMACH,X(NP),Y(NP),Z(NP),OMEGA,TIMER,
         53                          *          UFRAME(NFRAME),VFRAME(NFRAME),WFRAME(NFRAME)
         54                     C
         55                     CCCC  [INPUT:OVERSET NODE DATA]
         56                           INTEGER*4 NPSET,NPSND,NPRCV,
         57                          *          LPSET1(NPSET),LPSET2(NPSET),
         58                          *          LPSET3(NPSET),LPSET4(NPSET),
         59                          *          LPSND(NDOM),NPTSND(NDOM),LPRCV(NDOM),NPTRCV(NDOM),
         60                          *          IPSET(MBPDOM,NDOM),IPSRC(MBPDOM,NDOM)
         61                           REAL*4    COVER1(NPSET),COVER2(NPSET),COVER3(NPSET)
         62                     C
         63                     CCCC  [INPUT:OVERSET ELEMENT DATA]
         64                           INTEGER*4 NESET,NESND,NERCV,NBESET,LBESET(2,NBESET),
         65                          *          LESET1(NESET),LESET2(NESET),LESET3(NESET),
         66                          *          LESND(NDOM),NETSND(NDOM),LERCV(NDOM),NETRCV(NDOM),
         67                          *          IESET(MBPDOM,NDOM),IESRC(MBPDOM,NDOM)
         68                           REAL*4    EOVER1(NESET),EOVER2(NESET),EOVER3(NESET),
         69                          *          SN(N1,NE),SNESET(N1,NE),OSBCOE(NP),
         70                          *          XNESET(NBESET),YNESET(NBESET),ZNESET(NBESET),
         71                          *          SOSP(NP),SOSWRK(NE),WRKOS1(NE),WRKOS2(NE)
         72                     C
         73                     C     [INPUT:VOF]
         74                           INTEGER*4 IVOF,IMASS,NFACE,NSP,NS,NFINLT,NFFREE,NPFREE
         75                           INTEGER*4 LOCAL,LFACE,LFINLT,LFFREE,LPFREE
         76                           REAL*4    RHO3D,AVEC,FFA,
         77                          *          XPFREE,YPFREE,ZPFREE
         78                     C
         79                     C     [INPUT:MRF]
         80                           INTEGER*4 NMRF
         81                           INTEGER*4 IFATTR(*)
         82                           REAL*4    OMGMRF(NMRF),AMRF(3,NMRF)
         83                     C
         84                     CCC [INPUT/OUTPUT]
         85                           REAL*4    S(NE)
         86                     C
         87                     CCC [OUTPUT]
         88                           INTEGER*4 NITR,IERR
         89                           REAL*4    RES
         90                     C
         91                     CCC [WORK]
         92                           REAL*4    RX(0:N2,ME),RY(0:N2,ME),
         93                          1          R0(NE),RK(NE),PK(NE),APK(NE),ATK(NE),TK(NE),
         94                          2          FXYZ(3,NP)
         95                           INTEGER*4 MWRK
         96                           REAL*4    WRKN(MWRK,9)
         97                     
         98                           REAL*4    DNXYZ(8,3,ME)
         99                     C
        100                           INTEGER*4 LSTVALID(MP)
        101                           INTEGER*4 NUMVALID
        102                     C
        103                     CCCC  [LOCL]
        104                           INTEGER*4 IE
        105                           REAL*4    RKDOT,RKDOTA,BDOT,BDOTA,RESR,APDOT,APDOTA,
        106                          *          ATTDOT,ATTDTA,AT2DOT,AT2DTA,
        107                          *          RKDOTP,RSDOT,RSDOTA,
        108                          *          ALFA,BETA,QK
        109                           REAL*4    EPS0
        110                           DATA EPS0 / 1.E-30 /
        111                     C
        112                           CHARACTER*60 ERMSGC
        113                          & /' ## SUBROUTINE BCGSXE: FATAL      ERROR REPORT   ; RETURNED' /
        114                     C
        115                     CCTT 110317 ADDITION OF ARUMENT ADIAG
        116                           REAL*4    ADIAG(NP)
        117                     CCTT 110317
        118                     C
        119                     C      SOLVE MATRIX EQUATION AT ELEMENTS BY BI-CGSTAB METHOS
        120                     C         ( 3-D CALCULATION : SINGLE WORD & MULTI ELEMENT VERSION )
        121                     C
        122                     C       WRITTEN BY Y. YAMADE 2011.01.20
        123                     C
        124                     C          OPERATION COUNTS:    FLOP /ELEMENT/ITERATION
        125                     C          DATA LOADINGS   :    WORDS/ELEMENT/ITERATION
        126                     C                           (   WORDS CONTIGUOUSLY,
        127                     C                               WORDS BY 4-WORD STRIDE, AND
        128                     C                               WORDS BY LIST )
        129                     C
        130                     C     ARGUMENT LISTINGS
        131                     C (1) INPUT
        132                     C INT *4 ME           ; MAX. NUMBER OF TOTAL ELEMENTS
        133                     C INT *4 N1           ; THE DIMENSION SIZE OF THE FIRST ELEMENTS OF THE
        134                     C                       PASSED ARRAYS 'NODET'
        135                     C INT *4 NE           ; NUMBER OF ELEMENTS
        136                     C INT *4 NP           ; NUMBER OF NODES
        137                     C INT *4 NEX       (I); INCLUDES NUMBER OF ELEMENTS AND NUMBER OF LOCAL NODES
        138                     C INT *4 NE           ; NUMBER OF ELEMENTS
        139                     C INT *4 NP           ; NUMBER OF NODES
        140                     C INT *4 NMAX         ; NUMBER OF MATRIX SOLVER ITERATIONS
        141                     C INT *4 IUT0         ; FILE NUMBER TO REPORT ERROR OCCURENCE
        142                     C REAL*4 EPS          ; MAXIMUM ALLOWABLE ERROR
        143                     C INT *4 NODE   (I,IE); NODE TABLE
        144                     C REAL*4 CM       (IP); INVERSED LUMPED MASS MATRIX
        145                     C REAL*4 DNX    (I,IE); ELEMENT CENTER VALUE OF NX
        146                     C REAL*4 DNY    (I,IE); ELEMENT CENTER VALUE OF NY
        147                     C REAL*4 DNZ    (I,IE); ELEMENT CENTER VALUE OF NZ
        148                     C REAL*4 DNXI   (I,IE); ELEMENT CENTER VALUE OF NX
        149                     C REAL*4 DNYI   (I,IE); ELEMENT CENTER VALUE OF NX
        150                     C REAL*4 DNZI   (I,IE); ELEMENT CENTER VALUE OF NX
        151                     C
        152                     C REAL*4 B        (IE); GLOBAL FORCE VECTOR
        153                     C INT *4 NFIX         ; NUMBER OF FIX BOUNDARY NODES
        154                     C INT *4 LPFIX    (IB); FIX BOUNDARY NODES
        155                     C
        156                     C INT *4 IPART        ; SUB-DOMAIN NUMBER THAT THIS TASK SHOULD TAKE/IS
        157                     C                       TAKING CARE OF. IPART BEING SET ZERO MEANS THAT
        158                     C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL
        159                     C                       MODE.
        160                     C INT *4 NDOM         ; NUMBER OF THE NERIBERING SUB-DOMAINS
        161                     C INT*4  MBPDOM       ; THE MAXIMUM NUMBER OF THE INTER-CONNECT
        162                     C                       BOUNDARY NODES FOR ONE NEIBERING SUB-DOMAIN
        163                     C INT *4 LDOM   (IDOM); NEIBERING SUB-DOMAIN NUMBER
        164                     C INT *4 NBPDOM (IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
        165                     C                       SHARING WITH THE IDOM'TH NEIBERING SUB-DOMAIN,
        166                     C                       LDOM(IDOM)
        167                     C INT *4 IPSLF(I,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        168                     C                       CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
        169                     C                       NEIBERING SUB-DOMAIN, LDOM(IDOM)
        170                     C INT *4 IPSND(I,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
        171                     C                       SUB-DOMAIN THAT IS RECEIVING THE CALLING
        172                     C                       TASK'S RESIDUALS.
        173                     C
        174                     C (2) INPUT/OUTPUT
        175                     C REAL*4 S        (IE); GLOBAL SOLUTION VECTOR (PROVIDE INITIAL GUESS)
        176                     C
        177                     C (3) OUTPUT
        178                     C INT *4 NITR         ; NUMBER OF ITERATIONS DONE
        179                     C REAL*4 RES          ; L2-NORM RESIDUAL OF THE FINAL SOLUTION VECTOR
        180                     C INT *4 IERR         ; RETURN CODE TO REPORT ERROR OCCURRENCE
        181                     C                   0 --- NORMAL TERMINATION
        182                     C                   1 --- A FATAL ERROR HAS OCCURRED
        183                     C
        184                     C (4) WORK
        185                     C REAL*4 RX     (I,IE); WORK REGION PASSED FOR CALLAP
        186                     C REAL*4 RY     (I,IE); WORK REGION PASSED FOR CALLAP
        187                     C REAL*4 R0       (IE); WORK REGION
        188                     C REAL*4 RK       (IE); WORK REGION
        189                     C REAL*4 PK       (IE); WORK REGION
        190                     C REAL*4 APK      (IE); WORK REGION
        191                     C REAL*4 ATK      (IE); WORK REGION
        192                     C REAL*4 TK       (IE); WORK REGION
        193                     C REAL*4 FX       (IE); WORK REGION
        194                     C REAL*4 FY       (IE); WORK REGION
        195                     C REAL*4 FZ       (IE); WORK REGION
        196                     C
        197                     C
        198     1                     IF(NMAX.EQ.0) THEN
        199     1                        RETURN
        200     1                     ENDIF
        201                     C
        202                           NITR=0
        203                     C
        204                     C
        205                     CCC   1. SET INITIAL RESIDUAL VECTOR AND SEARCH-DIRECTION VECTOR
        206                     C
        207                     C
        208                     C          OPERATION COUNTS:   FLOP /ELEMENT
        209                     C          DATA LOADINGS   :   WORDS/ELEMENT
        210                     C                           (  WORDS CONTIGUOUSLY,
        211                     C                              WORDS BY 4-WORD STRIDE, AND
        212                     C                              WORDS BY LIST )
        213                           CALL USTSTA(24)
        214                           CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        215                          *            JSET,IPRES,
        216                          *            ME,MP,N1,N2,NE,NP,NEX,NODE,IEATTR,IPATTR,
        217                          *            S,RK,PG,DNXYZP,DNXI,DNYI,DNZI,
        218                          *            CM,X,Y,Z,OMEGA,TIMER,DT,FSMACH,ADIAG,
        219                          *            NFRAME,UFRAME,VFRAME,WFRAME,
        220                          *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
        221                          *            NPFIX,LPFIX,LEFIX,
        222                          *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
        223                          *            NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
        224                          *            COVER1,COVER2,COVER3,
        225                          *            NPSND,LPSND,NPTSND,NPRCV,LPRCV,NPTRCV,IPSET,IPSRC,
        226                          *            FXYZ,RX,RY,MWRK,WRKN,
        227                          *            NMRF,IFATTR,OMGMRF,AMRF,
        228                          *            IVOF,IMASS,RHO3D,NSP,NS,LOCAL,
        229                          *            NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
        230                          *            NFFREE,LFFREE,NPFREE,LPFREE,
        231                          *            XPFREE,YPFREE,ZPFREE,
        232                          *            NESET,NESND,NERCV,NBESET,LBESET,
        233                          *            LESET1,LESET2,LESET3,
        234                          *            EOVER1,EOVER2,EOVER3,
        235                          *            LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
        236                          *            SN,SNESET,OSBCOE,XNESET,YNESET,ZNESET,
        237                          *            SOSP,SOSWRK,WRKOS1,WRKOS2,FESRC,FLE,
        238                          *            MEP,NEP,IENP,JENP,
        239                          *            IUT0,IERR,DNXYZ,NUMVALID,LSTVALID)
        240                           CALL USTEND(24)
        241                     C
        242     1                     IF(IERR.EQ.1) THEN
        243     1                         WRITE(IUT0,*) ERMSGC
        244     1                         RETURN
        245     1                     ENDIF
        246                     C
        247                           RKDOT = 0.E0
        248                           BDOT = 0.E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 572
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        249     1  pp    v            DO 300 IE = 1 , NE
        250     1   p    v                RK (IE) = B (IE)-RK (IE)
        251     1   p    v                R0 (IE) = RK(IE)
        252     1   p    v                PK (IE) = RK(IE)
        253     1   p    v                TK (IE) = 0.E0
        254     1   p    v                RKDOT = RKDOT+R0(IE)*RK(IE)
        255     1   p    v                BDOT =  BDOT +B (IE)*B (IE)
        256     1   p    v        300 CONTINUE
        257                     
        258                     C
        259     1                     IF(IPART.GE.1) THEN
        260     1                         CALL DDCOM2(RKDOT,RKDOTA)
        261     1                         CALL DDCOM2(BDOT,BDOTA)
        262     1                         RKDOT = RKDOTA
        263     1                         BDOT = BDOTA
        264     1                     ENDIF
        265                     C
        266                           IF(ABS(BDOT).LE.EPS0) BDOT = 1.0E0
        267                     C
        268                           RES  = SQRT(RKDOT)
        269                           RESR = RES/SQRT(BDOT)
        270                     C
        271     1                     IF(RES.LE.EPS.OR.RESR.LE.EPSRE) THEN
        272     1                        RETURN
        273     1                     ENDIF
        274                     C
        275                     C
        276                     CCC   2. COMPUTE PRODUCT OF COEFFICIENT MATRIX AND SEARCH-DIRECTION VECTOR
        277                     CCC      AND INNER PRODUCT OF COMPUTED PRODUCT AND SEARCH-DIRECTION VECTOR
        278                     C
        279                     C
        280                      10   CONTINUE
        281                     C
        282                           NITR=NITR+1
        283                     C
        284                     C
        285                     CCC   2.1 COMPUTE APK,ALFA
        286                     C
        287                     C
        288                     C          OPERATION COUNTS:   FLOP /ELEMENT
        289                     C          DATA LOADINGS   :   WORDS/ELEMENT
        290                     C                           (  WORDS CONTIGUOUSLY,
        291                     C                              WORDS BY 4-WORD STRIDE, AND
        292                     C                              WORDS BY LIST )
        293                           CALL USTSTA(24)
        294                           CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        295                          *            JSET,IPRES,
        296                          *            ME,MP,N1,N2,NE,NP,NEX,NODE,IEATTR,IPATTR,
        297                          *            PK,APK,PG,DNXYZP,DNXI,DNYI,DNZI,
        298                          *            CM,X,Y,Z,OMEGA,TIMER,DT,FSMACH,ADIAG,
        299                          *            NFRAME,UFRAME,VFRAME,WFRAME,
        300                          *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
        301                          *            NPFIX,LPFIX,LEFIX,
        302                          *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
        303                          *            NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
        304                          *            COVER1,COVER2,COVER3,
        305                          *            NPSND,LPSND,NPTSND,NPRCV,LPRCV,NPTRCV,IPSET,IPSRC,
        306                          *            FXYZ,RX,RY,MWRK,WRKN,
        307                          *            NMRF,IFATTR,OMGMRF,AMRF,
        308                          *            IVOF,IMASS,RHO3D,NSP,NS,LOCAL,
        309                          *            NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
        310                          *            NFFREE,LFFREE,NPFREE,LPFREE,
        311                          *            XPFREE,YPFREE,ZPFREE,
        312                          *            NESET,NESND,NERCV,NBESET,LBESET,
        313                          *            LESET1,LESET2,LESET3,
        314                          *            EOVER1,EOVER2,EOVER3,
        315                          *            LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
        316                          *            SN,SNESET,OSBCOE,XNESET,YNESET,ZNESET,
        317                          *            SOSP,SOSWRK,WRKOS1,WRKOS2,FESRC,FLE,
        318                          *            MEP,NEP,IENP,JENP,
        319                          *            IUT0,IERR,DNXYZ,NUMVALID,LSTVALID)
        320                           CALL USTEND(24)
        321                     C
        322     1                     IF(IERR.EQ.1) THEN
        323     1                         WRITE(IUT0,*) ERMSGC
        324     1                         RETURN
        325     1                     ENDIF
        326                     C
        327                           APDOT = 0.E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        328     1  pp    v            DO 400 IE = 1 , NE
        329     1   p    v                APDOT = APDOT+R0(IE)*APK(IE)
        330     1   p    v        400 CONTINUE
        331                     C
        332     1                     IF(IPART.GE.1) THEN
        333     1                         CALL DDCOM2(APDOT,APDOTA)
        334     1                         APDOT = APDOTA
        335     1                     ENDIF
        336                     C
        337     1                     IF(APDOT .EQ. 0.0E0) THEN
        338     1                        RETURN
        339     1                     ENDIF
        340                           ALFA = RKDOT/APDOT
        341                     C
        342                     C
        343                     CCC   2.2 COMPUTE TK=RK-ALFA*APK
        344                     C
        345                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.25, ITR: 288, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      APK, RK, TK
                              <<< Loop-information  End >>>
        346     1  pp   2v            DO 500 IE = 1 , NE
        347     1   p   2v                TK (IE) = RK(IE)-ALFA*APK(IE)
        348     1   p   2v        500 CONTINUE
        349                     C
        350                     C
        351                     CCC   2.3 COMPUTE ATK
        352                     C
        353                     C
        354                     C          OPERATION COUNTS:   36 FLOP /ELEMENT
        355                     C          DATA LOADINGS   :   48 WORDS/ELEMENT
        356                     C                           (  32 WORDS CONTIGUOUSLY,
        357                     C                               4 WORDS BY 4-WORD STRIDE, AND
        358                     C                              12 WORDS BY LIST )
        359                           CALL USTSTA(24)
        360                           CALL CALLAP(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
        361                          *            JSET,IPRES,
        362                          *            ME,MP,N1,N2,NE,NP,NEX,NODE,IEATTR,IPATTR,
        363                          *            TK,ATK,PG,DNXYZP,DNXI,DNYI,DNZI,
        364                          *            CM,X,Y,Z,OMEGA,TIMER,DT,FSMACH,ADIAG,
        365                          *            NFRAME,UFRAME,VFRAME,WFRAME,
        366                          *            IPART,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
        367                          *            NPFIX,LPFIX,LEFIX,
        368                          *            NPSYMT,LPSYMT,XPSYMT,YPSYMT,ZPSYMT,
        369                          *            NPSET,LPSET1,LPSET2,LPSET3,LPSET4,
        370                          *            COVER1,COVER2,COVER3,
        371                          *            NPSND,LPSND,NPTSND,NPRCV,LPRCV,NPTRCV,IPSET,IPSRC,
        372                          *            FXYZ,RX,RY,MWRK,WRKN,
        373                          *            NMRF,IFATTR,OMGMRF,AMRF,
        374                          *            IVOF,IMASS,RHO3D,NSP,NS,LOCAL,
        375                          *            NFACE,LFACE,AVEC,FFA,NFINLT,LFINLT,
        376                          *            NFFREE,LFFREE,NPFREE,LPFREE,
        377                          *            XPFREE,YPFREE,ZPFREE,
        378                          *            NESET,NESND,NERCV,NBESET,LBESET,
        379                          *            LESET1,LESET2,LESET3,
        380                          *            EOVER1,EOVER2,EOVER3,
        381                          *            LESND,NETSND,LERCV,NETRCV,IESET,IESRC,
        382                          *            SN,SNESET,OSBCOE,XNESET,YNESET,ZNESET,
        383                          *            SOSP,SOSWRK,WRKOS1,WRKOS2,FESRC,FLE,
        384                          *            MEP,NEP,IENP,JENP,
        385                          *            IUT0,IERR,DNXYZ,NUMVALID,LSTVALID)
        386                           CALL USTEND(24)
        387                     C
        388     1                     IF(IERR.EQ.1) THEN
        389     1                         WRITE(IUT0,*) ERMSGC
        390     1                         RETURN
        391     1                     ENDIF
        392                     C
        393                     C
        394                     CCC   2.4 COMPUTE QK
        395                     C
        396                     C
        397                           ATTDOT  = 0.E0
        398                           AT2DOT  = 0.E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        399     1  pp    v            DO 600 IE = 1 , NE
        400     1   p    v                ATTDOT = ATTDOT+ATK(IE)* TK(IE)
        401     1   p    v                AT2DOT = AT2DOT+ATK(IE)*ATK(IE)
        402     1   p    v        600 CONTINUE
        403                     C
        404     1                     IF(IPART.GE.1) THEN
        405     1                         CALL DDCOM2(ATTDOT,ATTDTA)
        406     1                         CALL DDCOM2(AT2DOT,AT2DTA)
        407     1                         ATTDOT = ATTDTA
        408     1                         AT2DOT = AT2DTA
        409     1                     ENDIF
        410                     C
        411     1                     IF(AT2DOT .EQ. 0.E0) THEN
        412     1                        RETURN
        413     1                     ENDIF
        414                           QK = ATTDOT/AT2DOT
        415                     C
        416                     C
        417                     CCC   2.5 UPDATE SOLUTION VECTOR AND RESIDUAL VECTOR
        418                     CCC   2.6 RETURN IF L2-NORM OF UPDATED SOLUTION VECTOR IS LESS THAN CRITERIA
        419                     C
        420                     C
        421                           RKDOTP = RKDOT
        422                           RKDOT  = 0.E0
        423                           RSDOT  = 0.E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 445
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        424     1  pp    v            DO 700 IE = 1 , NE
        425     1   p    v                S  (IE) = S (IE)+ ALFA*PK(IE) + QK*TK (IE)
        426     1   p    v                RK (IE) = TK(IE)              - QK*ATK(IE)
        427     1   p    v                RKDOT = RKDOT+R0(IE)*RK(IE)
        428     1   p    v                RSDOT = RSDOT+RK(IE)*RK(IE)
        429     1   p    v        700 CONTINUE
        430                     C
        431                     C
        432     1                     IF(IPART.GE.1) THEN
        433     1                         CALL DDCOM2(RKDOT,RKDOTA)
        434     1                         CALL DDCOM2(RSDOT,RSDOTA)
        435     1                         RKDOT = RKDOTA
        436     1                         RSDOT = RSDOTA
        437     1                     ENDIF
        438                     C
        439                           RES  = SQRT(RSDOT)
        440                           RESR = RES/SQRT(BDOT)
        441                     C
        442     1                     IF(RES.LE.EPS.OR.RESR.LE.EPSRE) THEN
        443     1                        RETURN
        444     1                     ENDIF
        445                     C
        446                     C
        447                     CCC   2.7 UPDATE SEARCH-DIRECTION VECTOR
        448                     C
        449                     C
        450     1                     IF(QK     .EQ. 0.E0) THEN
        451     1                        RETURN
        452     1                     ENDIF
        453     1                     IF(RKDOTP .EQ. 0.E0) THEN
        454     1                        RETURN
        455     1                     ENDIF
        456                           BETA = (ALFA/QK)*(RKDOT/RKDOTP)
        457                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 762
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.40, ITR: 416, MVE: 7)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      APK, PK, RK
                              <<< Loop-information  End >>>
        458     1  pp   2v            DO 800 IE = 1 , NE
        459     1   p   2v                PK (IE) = RK(IE)+BETA*(PK(IE)-QK*APK(IE))
        460     1   p   2v        800 CONTINUE
        461                     C
        462                     C
        463                     CCC   2.7 RETURN IF ITERATION NUMBER HAS REACHED THE GIVEN MAXIMUM NUMBER,
        464                     CCC       OTHERWISE CONTINUE ITERATIONS UNTIL SOLUTION IS CONVERGED
        465                     C
        466                     C
        467     1                     IF(NITR.EQ.NMAX) THEN
        468     1                         RETURN
        469     1                     END IF
        470                     C
        471                           GO TO 10
        472                     C
        473                           END

 Diagnostic messages: program name(BCGSXE)
   jwd8220o-i  "bcgsxe.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd5004p-i  "bcgsxe.f", line 249: リダクション演算を含むDOループを並列化しました。(名前:IE)
   jwd6004s-i  "bcgsxe.f", line 249: リダクション演算を含むDOループをSIMD化しました。(名前:IE)
   jwd8206o-i  "bcgsxe.f", line 269: 除算を逆数の乗算に変更しました。
   jwd5132p-i  "bcgsxe.f", line 280: DO WHILE文、DO UNTIL文、およびIF/GO TO文によるループは並列化できません。
   jwd5004p-i  "bcgsxe.f", line 328: リダクション演算を含むDOループを並列化しました。(名前:IE)
   jwd6004s-i  "bcgsxe.f", line 328: リダクション演算を含むDOループをSIMD化しました。(名前:IE)
   jwd5001p-i  "bcgsxe.f", line 346: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "bcgsxe.f", line 346: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "bcgsxe.f", line 346: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "bcgsxe.f", line 346: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5004p-i  "bcgsxe.f", line 399: リダクション演算を含むDOループを並列化しました。(名前:IE)
   jwd6004s-i  "bcgsxe.f", line 399: リダクション演算を含むDOループをSIMD化しました。(名前:IE)
   jwd5004p-i  "bcgsxe.f", line 424: リダクション演算を含むDOループを並列化しました。(名前:IE)
   jwd6004s-i  "bcgsxe.f", line 424: リダクション演算を含むDOループをSIMD化しました。(名前:IE)
   jwd8209o-i  "bcgsxe.f", line 425: 多項式の演算順序を変更しました。
   jwd8206o-i  "bcgsxe.f", line 440: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "bcgsxe.f", line 456: 多項式の演算順序を変更しました。
   jwd5001p-i  "bcgsxe.f", line 458: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "bcgsxe.f", line 458: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "bcgsxe.f", line 458: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "bcgsxe.f", line 458: ループの繰返し数が416回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。

 Procedure information
   Lines      : 473
   Statements : 155
   Stack(byte): 97248
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 473
   Total statements : 155
   Total stack(byte): 97248
   Total prefetch num: 0

