C======================================================================C
C                                                                      C
C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
C                                                                      C
C  SUB ROUTINE : DYN3DX                                                C
C                                                                      C
C                                       WRITTEN BY Y.YAMADE            C
C                                                                      C
C                                                                      C
C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
C                                                                      C
C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
C                                                                      C
C======================================================================C
      SUBROUTINE DYN3DX(MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *                  VISCM,ALFDYN,FILTER,U,V,W,RES,NITR,
     *                  CM,ATEST0,AAVER0,
     *                  NODE,ME,MP,NE,NP,N2,NEX,
     *                  MELM,EAP1,EAP2,IENP,JENP,NODP,NEP,MEP,
     *                  IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     *                  NUMIP,CS,AML,AMM,S,UI,UIJ,SIJN,SIJ,SSIJ,
     *                  RX,RY,FX,FY,FZ,WRK01,WRK02,WRK03,
     *                  WRK04,WRK05,WRK06,WRK07,WRK08,LFIX3D,
     *                  MWRK,WRKN,
     *                  NPP,NCRS,IPCRS,ATESPC,AAVEPC,
     *                  JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS,
     *                  CSMAX,
     *                  IUT0,IERR,IUT6,ICRS_T)
      IMPLICIT NONE
C
      INTEGER*4 MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     *          NITR,NODE,ME,MP,NE,NP,N2,NEX,
     *          MELM,IPART,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     *          NUMIP,LFIX3D,MWRK,NPP,NCRS,IPCRS,
     *          IUT0,IERR,IUT6,IENP,JENP,NODP,NEP,MEP
C
      REAL*4    VISCM,ALFDYN,FILTER,U,V,W,RES,
     *          CM,ATEST0,AAVER0,EAP1,EAP2,
     *          CS,AML,AMM,S,UI,UIJ,SIJN,SIJ,SSIJ,
     *          RX,RY,FX,FY,FZ,WRK01,WRK02,WRK03,
     *          WRK04,WRK05,WRK06,WRK07,WRK08,WRKN,
     *          ATESPC,AAVEPC,CSMAX
C
      INTEGER*4 NMAX,NETET,NEPRD,NEWED,NEHEX,NTET,NPRD,NWED,NHEX,
     *          IES1,IEE1,IES2,IEE2,IES3,IEE3,IES4,IEE4,MAXBUF,
     *          IERR1,IERR2,IERR3,IDUM,IP,IE
C
      REAL*4    CLEAR,EPS,EPSDYN,ALF2,DUMMY,UKK,COEF,AMLE,AMME,SE,SGS
C
      DIMENSION NCOLOR(4),NCPART(MCOLOR,4),LLOOP(MCPART,MCOLOR,4)
      DIMENSION FILTER(NE),U(NP),V(NP),W(NP),CM(NP),
     *          ATEST0(NP),AAVER0(NP),NODE(N2,NE),NEX(12)
      DIMENSION NPP(NP)
      DIMENSION IPCRS(NCRS),ATESPC(NCRS),AAVEPC(NCRS)
C
      DIMENSION LDOM(NDOM),NBPDOM(NDOM),
     1          IPSLF(MBPDOM,NDOM),IPSND(MBPDOM,NDOM),NUMIP(NP)
C
      DIMENSION CS  (NE),AML  (NP),AMM   (NP),S     (NP),
     1          UI(MP,3),UIJ(MP,6),SIJN(MP,6),SIJ (MP,6),SSIJ(MP,6)
C
      DIMENSION RX(0:N2,NE),RY(0:N2,NE),
     1          FX(NP),FY(NP),FZ(NP),
     2          WRK01(NE),WRK02(NE),WRK03(NE),WRK04(NP),
     3          WRK05(NP),WRK06(NP),WRK07(NP),WRK08(NP),
     4          LFIX3D(NP),WRKN(MWRK,2)
C
      DIMENSION EAP1(N2,MEP,NP), EAP2(3,N2,MEP,NP)
      DIMENSION IENP(MEP,MP),JENP(MEP,MP),NODP(N2,MEP,NP),NEP(MP)
C
      DIMENSION RES(23),NITR(23)
C
C     [FULL UNROOL]
      INTEGER*4 JUNROL
      INTEGER*4 NPPMAX,NCRS2,ITPCRS(NCRS2)
      REAL*4    TS(0:NP),TACRS(NCRS2)
C      
      INTEGER*4 ICRS_T(NP)

      CHARACTER*60 ERMSGC
     & /' ## SUBROUTINE DYN3DX: FATAL      ERROR REPORT   ; RETURNED' /
C
      DATA CLEAR  / 0.15   /
      DATA EPS    / 1.0E-2 /
C
      DATA EPSDYN  / 1.0E-6 /
      DATA NMAX    / 10     /
C
      REAL*4 EPSE
C
      INTEGER*4 IBCGS
      DATA IBCGS  / 0 /
C
C      COMPUTE SMAGIRINSKY CONSTANT BY DYNAMIC PROCEDURE PROPOSED
C     BY GERMANO AND LILLY
C         ( 3-D CALCULATION : SINGLE WORD & MULTI ELEMENT VERSION )
C                                           CODED BASED ON 'DYNA3D'
C
C ************ COMPUTATIONAL COST EXCEPT FOR MATRIX SOLVER *******
C =============================TET======================================
C          OPERATION COUNTS:    408 FLOP /ELEMENT
C          DATA LOADINGS   :    496 WORDS/ELEMENT
C                           (     0 WORDS CONTIGUOUSLY,
C                               244 WORDS BY STRIDE, AND
C                               252 WORDS BY LIST )
C
C =============================WED======================================
C          OPERATION COUNTS:   1002 FLOP /ELEMENT
C          DATA LOADINGS   :    972 WORDS/ELEMENT
C                           (    32 WORDS CONTIGUOUSLY,
C                               522 WORDS BY STRIDE, AND
C                               450 WORDS BY LIST )
C
C =============================HEX======================================
C          OPERATION COUNTS:   1704 FLOP /ELEMENT
C          DATA LOADINGS   :   1600 WORDS/ELEMENT
C                           (    41 WORDS CONTIGUOUSLY,
C                               904 WORDS BY STRIDE, AND
C                               696 WORDS BY LIST )
C
C        MODIFIED TO APPLY IMPLICIT METHOD FOR TEST AND AVERAGING 
C      OPERATION, BY Y.YAMADE 2005.11.15 
C
C
C     NOTE ; IN-DOMAIN NOR INTER-DOMAIN CYCLIC BOUNDARY CONDITIONS HAVE
C           NOT BEEN SUPPORTED YET.
C
C     OPERATION COUNTS AND DATA LOADING FOR THE OPERATIONS IN THIS ROUTINE
C    ARE ABLE TO BE ESTIMETED AS FOLLOWS. 
C
C          OPERATION COUNTS:  9361 FLOP /ELEMENT/ITERATION
C          DATA LOADINGS   : 12591 WORDS/ELEMENT/ITERATION
C                           ( 8423 WORDS CONTIGUOUSLY,
C                             1016 WORDS BY 4-WORD STRIDE, AND
C                             3152 WORDS BY LIST )
C     ARGUMENT LISTINGS
C       (1) INPUT
C          NLOOP       ;NUMBER OF LOOPS
C          LLOOP       ;POINTER FOR SPLITTED ELEMENT LIST
C
C          VISCM       ; MOLECULAR VISCOSITY (USED TO CLEAR CS VALUES)
C          ALFDYN      ; RATIO OF WIDTH OF TEST-FILTERED GRID FILTER TO
C                       THAT OF GRID FILTER
C          FILTER  (IE); ELEMENT GRID FILTER WIDTH
C
C          U       (IP); X-DIR. VELOCITY COMPONENT
C          V       (IP); Y-DIR. VELOCITY COMPONENT
C          W       (IP); Z-DIR. VELOCITY COMPONENT
C
C
C          VOL     (IE); ELEMENT VOLUME
C          CM      (IP); LUMPED MASS MATRIX
C
C          ATEST(I,J,IE);ELEMNT-WIZE MATRIX FOR TEST FILTERING
C          AAVER(I,J,IE);ELEMNT-WIZE MATRIX FOR AVERAGING
C          NPP     (IP); NUMBER OF ADJACENT NODES    TO NODE    IP
C          NCRS   ; NUMBER OF NONZERO ELEMENTS IN MATRIX OF CRS FORMAT
C          IPCRS (ICRS); NODE NO. TABLE BASED ON CRS FORMAT
C          ATESPC(ICRS);NODE-BASE MATRIX COEFFICIENT FOR TEST FILTERING
C          AAVEPC(ICRS);NODE-BASE MATRIX COEFFICIENT FOR AVERAGING
C          ATEST0  (IP) ;0.25/(DISGONAL TERM OF ATEST)
C          AAVER0  (IP) ;0.25/(DISGONAL TERM OF AAVER)
C
C          NODE  (I,IE); NODE NO. TABLE BASED ON ELEMENT
C          ME          ; MAX. NUMBER OF TOTAL ELEMENTS
C          NE          ; NUMBER OF TOTAL ELEMENTS
C          NP          ; NUMBER OF TOTAL    NODES
C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT ( = 8 )
C
C          IPART       ; SUB-DOMAIN NUMBER THAT THIS TASK SHOULD TAKE/IS
C                       TAKING CARE OF. IPART BEING SET ZERO MEANS THAT
C                       THE PROGRAM SHOULD RUN/IS RUNNING IN SERIAL 
C                       MODE.
C
C          LDOM  (IDOM); NEIBERING SUB-DOMAIN NUMBER
C          NBPDOM(IDOM); NUMBER OF INTER-CONNECT BOUNDARY NODES
C                       SHARING WITH THE IDOM'TH NEIBERING SUB-DOMAIN,
C                       LDOM(IDOM)
C          NDOM        ; NUMBER OF THE NERIBERING SUB-DOMAINS
C          IPSLF (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
C                           CALLING TASK'S SUB-DOMAIN, FOR THE IDOM'TH
C                           NEIBERING SUB-DOMAIN, LDOM(IDOM)
C          IPSND (IBP,IDOM); INTER-CONNECT BOUNDARY NODE NUMBER IN THE
C                           SUB-DOMAIN THAT IS RECEIVING THE CALLING
C                           TASK'S RESIDUALS.
C          MBPDOM      ; THE MAXIMUM NUMBER OF THE INTER-CONNECT 
C                       BOUNDARY NODES FOR ONE NEIBERING SUB-DOMAIN
C
C          IUT0        ; FILE NUMBER TO REPORT ERROR OCCURENCE
C
C       (2) OUTPUT
C          CS      (IE); ELEMENT SMAGORINSKY CONSTANT
C          AML     (IP); LEAST-SQUARE AVERAGED LEONARD STRESS
C          AMM     (IP); LEAST-SQUARE AVERAGED MODELED REYNOLDS STRESS
C          S       (IP); TEST-FILTERED STRAIN VELOCITY TENSOR MAGNITUDE
C          UI    (3,IP); TEST-FILTERED VELOCITIES
C          UIJ   (6,IP); TEST-FILTERED VELOCITY CORRELATIONS
C          SIJN  (6,IP); NODAL STRAIN VELOCITY TENSOR
C          SIJ   (6,IP); TEST-FILTERED STRAIN VELOCITY TENSOR
C          SSIJ  (6,IP); TEST-FILTERED STRAIN VELOCITY TENSOR MULTIPLIED
C                       BY ITS MAGNITUDE
C
C          IERR        ; RETURN CODE TO REPORT ERROR OCCURENCE
C                   0 --- NORMAL TERMINATION
C                   1 --- A FATAL ERROR HAS OCCURED
C
C       (4) WORK
C          RX    (I,IE); HOLDS X-DIR. ELEMENT RESIDUAL
C          RY    (I,IE); HOLDS Y-DIR. ELEMENT RESIDUAL
C          FX      (IP); HOLDS X-DIR. NODE    RESIDUAL
C          FY      (IP); HOLDS Y-DIR. NODE    RESIDUAL
C          FZ      (IP); HOLDS Z-DIR. NODE    RESIDUAL
C
      EPSE=EPSDYN        
C
      NETET=NEX(1)
      NEPRD=NEX(2)
      NEWED=NEX(3)
      NEHEX=NEX(4)
      NE   =NETET+NEPRD+NEWED+NEHEX
C
      NTET =NEX(5)
      NPRD =NEX(6)
      NWED =NEX(7)
      NHEX =NEX(8)
C
C     * TET *
      IES1=1
      IEE1=NETET
C
C     * PYRAMID *
      IES2=NETET+1
      IEE2=NETET+NEPRD
C
C     * WEDGE *
      IES3=NETET+NEPRD+1
      IEE3=NETET+NEPRD+NEWED
C
C     * HEX *
      IES4=NETET+NEPRD+NEWED+1
      IEE4=NETET+NEPRD+NEWED+NEHEX
C
C
      ALF2   = ALFDYN*ALFDYN
C
      MAXBUF = NE*(N2+1)
      IERR1=0
      IERR2=0
      IERR3=0
C
      IDUM=3
C
      DO 50 IP=1,NP
          LFIX3D(IP)=0
   50 CONTINUE   
C
C
CCYY 1. COMPUTE NODAL VALUE OF STRAIN VELOCITY TENSOR
C
C
C  (1) DIAGONAL TERMS
C
C
      CALL NNXYZ
     &   ( "DIAGONAL    ",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,
     &     MELM,EAP2,IENP,JENP,NEP,MEP,
     &     FX,FY,FZ,U,V,W)
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 101 IP=1,NP
         SIJN(IP,1)=FX(IP)*CM(IP)
         SIJN(IP,2)=FY(IP)*CM(IP)
         SIJN(IP,3)=FZ(IP)*CM(IP)
 101  CONTINUE   
C
C
C  (2) OFF-DIAGONAL TERMS
C
C
      CALL NNXYZ
     &   ( "OFF-DIAGONAL",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,
     &     MELM,EAP2,IENP,JENP,NEP,MEP,
     &     FX,FY,FZ,U,V,W)
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 102 IP=1,NP
         SIJN(IP,4)=FX(IP)*CM(IP)
         SIJN(IP,5)=FY(IP)*CM(IP)
         SIJN(IP,6)=FZ(IP)*CM(IP)
 102  CONTINUE   
C
C
CCYY 2. COMPUTE CONTRACTION OF STRAIN VELOCITY TENSOR
C
C
      DO 200 IP = 1 , NP
          S(IP) = SQRT(2.E0*SIJN(IP,1)*SIJN(IP,1)
     &                +2.E0*SIJN(IP,2)*SIJN(IP,2)
     &                +2.E0*SIJN(IP,3)*SIJN(IP,3)
     &                +4.E0*SIJN(IP,4)*SIJN(IP,4)
     &                +4.E0*SIJN(IP,5)*SIJN(IP,5)
     &                +4.E0*SIJN(IP,6)*SIJN(IP,6))
  200 CONTINUE
C
C
C
CCYY 3. TEST-FILTER VELOCITY VECTOR
C
C
C
      CALL NNLUMP
     &   ( "ONE",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,U,V,W,DUMMY,DUMMY,DUMMY,
     &     EAP1,IENP,NEP,MEP )
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 330 IP = 1 , NP
          UI(IP,1)=FX(IP)
          UI(IP,2)=FY(IP)
          UI(IP,3)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  330 CONTINUE
C
      IF(JUNROL.EQ.1)
     *CALL CRSCVA(NP,NPPMAX,NCRS,NCRS2,NPP,ATESPC,TACRS,ICRS_T)
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,UI(1,1),NITR(1),RES(1),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,UI(1,2),NITR(2),RES(2),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,UI(1,3),NITR(3),RES(3),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
CCYY 4. TEST-FILTER VELOCITY CORRELATION TENSOR
C
C
C  (1) DIAGONAL TERMS
C
C
      CALL NNLUMP
     &   ( "TWO",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,U,V,W,U,V,W,
     &     EAP1,IENP,NEP,MEP )
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 430 IP = 1 , NP
          UIJ(IP,1)=FX(IP)
          UIJ(IP,2)=FY(IP)
          UIJ(IP,3)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  430 CONTINUE
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,UIJ(1,1),NITR(4),RES(4),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,UIJ(1,2),NITR(5),RES(5),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,UIJ(1,3),NITR(6),RES(6),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR3,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
C  (2) OFF-DIAGONAL TERMS
C
C
      CALL NNLUMP
     &   ( "TWO",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,V,W,U,W,U,V,
     &     EAP1,IENP,NEP,MEP )
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 530 IP = 1 , NP
          UIJ(IP,4)=FX(IP)
          UIJ(IP,5)=FY(IP)
          UIJ(IP,6)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  530 CONTINUE
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,UIJ(1,4),NITR(7),RES(7),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,UIJ(1,5),NITR(8),RES(8),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,UIJ(1,6),NITR(9),RES(9),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR3,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
CCYY 5. TEST-FILTER STRAIN VELOCITY TENSOR
C
C
C  (1) DIAGONAL TERMS
C
C
      CALL NNLUMP
     &   ( "ONE",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,SIJN(1,1),SIJN(1,2),SIJN(1,3),DUMMY,DUMMY,DUMMY,
     &     EAP1,IENP,NEP,MEP )
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 630 IP = 1 , NP
          SIJ(IP,1)=FX(IP)
          SIJ(IP,2)=FY(IP)
          SIJ(IP,3)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  630 CONTINUE
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,SIJ(1,1),NITR(10),RES(10),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,SIJ(1,2),NITR(11),RES(11),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,SIJ(1,3),NITR(12),RES(12),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR3,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
C  (2) OFF-DIAGONAL TERMS
C
C
      CALL NNLUMP
     &   ( "ONE",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,SIJN(1,4),SIJN(1,5),SIJN(1,6),DUMMY,DUMMY,DUMMY,
     &     EAP1,IENP,NEP,MEP )
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 730 IP = 1 , NP
          SIJ(IP,4)=FX(IP)
          SIJ(IP,5)=FY(IP)
          SIJ(IP,6)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  730 CONTINUE
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,SIJ(1,4),NITR(13),RES(13),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,SIJ(1,5),NITR(14),RES(14),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,SIJ(1,6),NITR(15),RES(15),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR3,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
CCYY 6. TEST-FILTER STRAIN VELOCITY TENSOR MULTIPLIED BY ITS MAGNITUDE
C
C
C  (1) DIAGONAL TERMS
C
C
      CALL NNLUMP
     &   ( "TWO",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,S,S,S,SIJN(1,1),SIJN(1,2),SIJN(1,3),
     &     EAP1,IENP,NEP,MEP )        
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 830 IP = 1 , NP
          SSIJ(IP,1)=FX(IP)
          SSIJ(IP,2)=FY(IP)
          SSIJ(IP,3)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  830 CONTINUE
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,SSIJ(1,1),NITR(16),RES(16),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,SSIJ(1,2),NITR(17),RES(17),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,SSIJ(1,3),NITR(18),RES(18),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR3,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
C  (2) OFF-DIAGONAL TERMS
C
C
C
      CALL NNLUMP
     &   ( "TWO",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,S,S,S,SIJN(1,4),SIJN(1,5),SIJN(1,6),
     &     EAP1,IENP,NEP,MEP )         
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 930 IP = 1 , NP
          SSIJ(IP,4)=FX(IP)
          SSIJ(IP,5)=FY(IP)
          SSIJ(IP,6)=FZ(IP)
          FX(IP)=FX(IP)*ATEST0(IP)
          FY(IP)=FY(IP)*ATEST0(IP)
          FZ(IP)=FZ(IP)*ATEST0(IP)
  930 CONTINUE
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FX,SSIJ(1,4),NITR(19),RES(19),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FY,SSIJ(1,5),NITR(20),RES(20),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,ATESPC,NODE,FZ,SSIJ(1,6),NITR(21),RES(21),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR3,ATEST0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0.OR.IERR3.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
CCYY 7. COMPUTE CONTRACTION OF TEST-FILTERED STRAIN VELOCITY TENSOR
C
C
C
      DO 1000 IP = 1 , NP
          S(IP) = SQRT(2.E0*SIJ(IP,1)*SIJ(IP,1)
     &                +2.E0*SIJ(IP,2)*SIJ(IP,2)
     &                +2.E0*SIJ(IP,3)*SIJ(IP,3)
     &                +4.E0*SIJ(IP,4)*SIJ(IP,4)
     &                +4.E0*SIJ(IP,5)*SIJ(IP,5)
     &                +4.E0*SIJ(IP,6)*SIJ(IP,6))
 1000 CONTINUE
C
C
C
CCYY 8. LEAST-SQUARE AVERAGE LEONARD STRESS TENSOR AND SGS STRESS TENSOR
C
C
C
      DO 1100 IP = 1 , NP
          UKK     = 0.333333E0*(UIJ(IP,1)-UI(IP,1)*UI(IP,1)
     &                         +UIJ(IP,2)-UI(IP,2)*UI(IP,2)
     &                         +UIJ(IP,3)-UI(IP,3)*UI(IP,3))
C
          AML(IP) = (SSIJ(IP,1)-ALF2*S(IP)*SIJ(IP,1))
     &             *( UIJ(IP,1)-UI(IP,1)*UI(IP,1)-UKK)
     &             +(SSIJ(IP,2)-ALF2*S(IP)*SIJ(IP,2))
     &             *( UIJ(IP,2)-UI(IP,2)*UI(IP,2)-UKK)
     &             +(SSIJ(IP,3)-ALF2*S(IP)*SIJ(IP,3))
     &             *( UIJ(IP,3)-UI(IP,3)*UI(IP,3)-UKK)
     &        +2.E0*(SSIJ(IP,4)-ALF2*S(IP)*SIJ(IP,4))
     &             *( UIJ(IP,4)-UI(IP,2)*UI(IP,3))
     &        +2.E0*(SSIJ(IP,5)-ALF2*S(IP)*SIJ(IP,5))
     &             *( UIJ(IP,5)-UI(IP,3)*UI(IP,1))
     &        +2.E0*(SSIJ(IP,6)-ALF2*S(IP)*SIJ(IP,6))
     &             *( UIJ(IP,6)-UI(IP,1)*UI(IP,2))
C
          AMM(IP) = (SSIJ(IP,1)-ALF2*S(IP)*SIJ(IP,1))**2
     &             +(SSIJ(IP,2)-ALF2*S(IP)*SIJ(IP,2))**2
     &             +(SSIJ(IP,3)-ALF2*S(IP)*SIJ(IP,3))**2
     &        +2.E0*(SSIJ(IP,4)-ALF2*S(IP)*SIJ(IP,4))**2
     &        +2.E0*(SSIJ(IP,5)-ALF2*S(IP)*SIJ(IP,5))**2
     &        +2.E0*(SSIJ(IP,6)-ALF2*S(IP)*SIJ(IP,6))**2
 1100 CONTINUE
C
C
CCYY 9.  RECURSIVELY TEST-FILTER LEAST-SQUARE AVERAGED LEONARD STRESS
CCCYY    AND SGS STRESS FOR AVERAGING PURPOSE
C
C
      IDUM=2
      CALL NNLUMP
     &   ( "ONE",MCOLOR,MCPART,NCOLOR,NCPART,LLOOP,
     &     ME,MP,NE,NP,NODE,N2,NEX,MELM,
     &     FX,FY,FZ,AML,AMM,AMM,DUMMY,DUMMY,DUMMY,
     &     EAP1,IENP,NEP,MEP )
      CALL DDCOMX(IPART,IDUM,LDOM,NBPDOM,NDOM,IPSLF,IPSND,MBPDOM,
     &            FX,FY,FZ,NP,IUT0,IERR,
     &            RX,RY,MAXBUF)
      IF(IERR.NE.0) THEN
         WRITE(IUT0,*)
         WRITE(IUT0,*) ERMSGC
         RETURN
      ENDIF   
      DO 1230 IP = 1 , NP
          AML(IP)=FX(IP)
          AMM(IP)=FY(IP)
          FX(IP)=FX(IP)*AAVER0(IP)
          FY(IP)=FY(IP)*AAVER0(IP)
 1230 CONTINUE
C
      IF(JUNROL.EQ.1)
     *CALL CRSCVA(NP,NPPMAX,NCRS,NCRS2,NPP,AAVEPC,TACRS,ICRS_T)
C
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,AAVEPC,NODE,FX,AML,NITR(22),RES(22),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR1,AAVER0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
      CALL BCGS3X
     *   ( IBCGS,IPART,NMAX,EPSDYN,ME,N2,NE,NEX,NP,
     *     NPP,NCRS,IPCRS,AAVEPC,NODE,FY,AMM,NITR(23),RES(23),
     *     NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,NUMIP,
     *     WRK01,WRK02,WRK03,WRK04,WRK05,WRK06,WRK07,WRK08,RX,RY,
     *     MWRK,WRKN,IUT0,IERR2,AAVER0,LFIX3D,
     *     JUNROL,NPPMAX,NCRS2,TS,TACRS,ITPCRS)
C
      IF(IERR1.NE.0.OR.IERR2.NE.0) THEN
          IERR=1
          WRITE(IUT0,*)
          WRITE(IUT0,*) ERMSGC
          RETURN
      ENDIF
C
C
CCYY 10.  COMPUTE ELEMENT SMAGORINSKY CONSTANT
C
C
C
C     * TET *
      COEF=1.0E0/FLOAT(NTET)
      DO 3000 IE = IES1, IEE1
          AMLE = COEF*(AML(NODE(1,IE))+AML(NODE(2,IE))
     &                +AML(NODE(3,IE))+AML(NODE(4,IE)))
C
          AMME = COEF*(AMM(NODE(1,IE))+AMM(NODE(2,IE))
     &                +AMM(NODE(3,IE))+AMM(NODE(4,IE)))
C
          IF(AMLE.GT.0.E0 .AND. AMME.GT.0.E0) THEN
              CS(IE) = SQRT(0.5E0*AMLE/AMME)/FILTER(IE)
          ELSE
              CS(IE) = 0.E0
          ENDIF
 3000 CONTINUE
C
C     * PYRAMID *
      COEF=1.0E0/FLOAT(NPRD)
      DO 3001 IE = IES2, IEE2
          AMLE = COEF*(AML(NODE(1,IE))+AML(NODE(2,IE))
     &                +AML(NODE(3,IE))+AML(NODE(4,IE))
     &                +AML(NODE(5,IE)))
C
          AMME = COEF*(AMM(NODE(1,IE))+AMM(NODE(2,IE))
     &                +AMM(NODE(3,IE))+AMM(NODE(4,IE))
     &                +AMM(NODE(5,IE)))
C
          IF(AMLE.GT.0.E0 .AND. AMME.GT.0.E0) THEN
              CS(IE) = SQRT(0.5E0*AMLE/AMME)/FILTER(IE)
          ELSE
              CS(IE) = 0.E0
          ENDIF
 3001  CONTINUE
C
C     * WEDGE *
      COEF=1.0E0/FLOAT(NWED)
      DO 3002 IE = IES3, IEE3
          AMLE = COEF*(AML(NODE(1,IE))+AML(NODE(2,IE))
     &                +AML(NODE(3,IE))+AML(NODE(4,IE))
     &                +AML(NODE(5,IE))+AML(NODE(6,IE)))
C
          AMME = COEF*(AMM(NODE(1,IE))+AMM(NODE(2,IE))
     &                +AMM(NODE(3,IE))+AMM(NODE(4,IE))
     &                +AMM(NODE(5,IE))+AMM(NODE(6,IE)))
C
          IF(AMLE.GT.0.E0 .AND. AMME.GT.0.E0) THEN
              CS(IE) = SQRT(0.5E0*AMLE/AMME)/FILTER(IE)
          ELSE
              CS(IE) = 0.E0
          ENDIF
 3002  CONTINUE
C
C     * HEX *
      COEF=1.0E0/FLOAT(NHEX)
      DO 3003 IE = IES4, IEE4
          AMLE = COEF*(AML(NODE(1,IE))+AML(NODE(2,IE))
     &                +AML(NODE(3,IE))+AML(NODE(4,IE))
     &                +AML(NODE(5,IE))+AML(NODE(6,IE))
     &                +AML(NODE(7,IE))+AML(NODE(8,IE)))
C
          AMME = COEF*(AMM(NODE(1,IE))+AMM(NODE(2,IE))
     &                +AMM(NODE(3,IE))+AMM(NODE(4,IE))
     &                +AMM(NODE(5,IE))+AMM(NODE(6,IE))
     &                +AMM(NODE(7,IE))+AMM(NODE(8,IE)))
C
          IF(AMLE.GT.0.E0 .AND. AMME.GT.0.E0) THEN
              CS(IE) = SQRT(0.5E0*AMLE/AMME)/FILTER(IE)
          ELSE
              CS(IE) = 0.E0
          ENDIF
 3003  CONTINUE
C
C
C
CCCYY 11.  FINALLY, CLEAR ELEMENT SMAGORINSKY CONSTANT DOMINATED BY
CCYY       THE ROUND-OFF ERRORS
C
C
C     * TET*
      COEF=1.0E0/FLOAT(NTET)  
      DO 4000 IE = IES1, IEE1
          SE = COEF*(S(NODE(1,IE))+S(NODE(2,IE))
     &              +S(NODE(3,IE))+S(NODE(4,IE)))
C
          SGS = CLEAR*CLEAR*FILTER(IE)*FILTER(IE)*SE
          IF(SGS .LT. EPS*VISCM) CS(IE) = 0.E0
 4000 CONTINUE
C
C     * PYRAMID *
      COEF=1.0E0/FLOAT(NPRD)  
      DO 4001 IE = IES2, IEE2
          SE = COEF*(S(NODE(1,IE))+S(NODE(2,IE))
     &              +S(NODE(3,IE))+S(NODE(4,IE))
     &              +S(NODE(5,IE)))
C
          SGS = CLEAR*CLEAR*FILTER(IE)*FILTER(IE)*SE
          IF(SGS .LT. EPS*VISCM) CS(IE) = 0.E0
 4001  CONTINUE
C
C     * WEDGE *
      COEF=1.0E0/FLOAT(NWED)
      DO 4002 IE = IES3, IEE3
          SE = COEF*(S(NODE(1,IE))+S(NODE(2,IE))
     &              +S(NODE(3,IE))+S(NODE(4,IE))
     &              +S(NODE(5,IE))+S(NODE(6,IE)))
C
          SGS = CLEAR*CLEAR*FILTER(IE)*FILTER(IE)*SE
          IF(SGS .LT. EPS*VISCM) CS(IE) = 0.E0
 4002  CONTINUE
C
C     * HEX *
      COEF=1.0E0/FLOAT(NHEX)
      DO 4003 IE = IES4, IEE4
          SE = COEF*(S(NODE(1,IE))+S(NODE(2,IE))
     &              +S(NODE(3,IE))+S(NODE(4,IE))
     &              +S(NODE(5,IE))+S(NODE(6,IE))
     &              +S(NODE(7,IE))+S(NODE(8,IE)))
C
          SGS = CLEAR*CLEAR*FILTER(IE)*FILTER(IE)*SE
          IF(SGS .LT. EPS*VISCM) CS(IE) = 0.E0
          IF(CS(IE).GT.CSMAX)    CS(IE) = CSMAX
 4003  CONTINUE
C
      RETURN
      END
