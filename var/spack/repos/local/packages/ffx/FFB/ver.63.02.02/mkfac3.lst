
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:33 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : mkfac3.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "MKFAC3"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE : MKFAC3                                                C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY H.YOSHIMURA         C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         11                     C                                                                      C
         12                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         13                     C                                                                      C
         14                     C======================================================================C
         15                           SUBROUTINE MKFAC3(IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBFDOM,
         16                          *                  NODE,LOCAL,NEP,IENP,X,Y,Z,
         17                          *                  MDOM,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
         18                          *                  NFACE,NFACE1,NFACE2,LFACE,AVEC,DVEC,
         19                          *                  LWRK01,LEFACE,IUT6,IUT0,IERR)
         20                     C
         21                           IMPLICIT NONE
         22                     C
         23                     C     [INPUT]
         24                           INTEGER*4 IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBFDOM
         25                           INTEGER*4 NODE(N2,NE),LOCAL(NSP,NS,4),NEP(NP),IENP(MEP,NP)
         26                           REAL*8    X(NP),Y(NP),Z(NP)
         27                           INTEGER*4 MDOM,NDOM,MBPDOM
         28                           INTEGER*4 LDOM(MDOM),NBPDOM(MDOM),
         29                          *          IPSLF(MBPDOM,MDOM),IPSND(MBPDOM,MDOM)
         30                           INTEGER*4 NFACE1,NFACE2
         31                     C
         32                     C     [IN-OUTPUT]
         33                           INTEGER*4 NFACE
         34                           INTEGER*4 LFACE(5,MFACE)
         35                           REAL*4    AVEC(4,MFACE),DVEC(3,MFACE)
         36                           INTEGER*4 LEFACE(6,NE)
         37                           INTEGER*4 IUT6,IUT0,IERR
         38                     C
         39                     C     [WORK]
         40                           INTEGER*4 LWRK01(NP)
         41                     C
         42                     C     [LOCAL]
         43                           INTEGER*4 MBFDM6
         44                           INTEGER*4,ALLOCATABLE::
         45                          *          NFSND(:),NFRCV(:),NFSND2(:),NFRCV2(:),
         46                          *          LFSND(:,:),LFRCV(:,:)
         47                           INTEGER*4 IP,IP1,IP2,IP3,IP4,IMATCH,JBC,IFACE
         48                           INTEGER*4 IE,NSD,IETYPE,NLS,IE1,IE2,IS,IS1,I,I1,I2
         49                           INTEGER*4 IBP,IBP1,IBP2,IBP3,IBP4,IDOM
         50                           INTEGER*4 IFS1,IFS2,IFS3,IFS4,IFS5,IFS6
         51                           INTEGER*4 IFR1,IFR2,IFR3,IFR4,IFR5,IFR6
         52                           INTEGER*4 NFACE3,IFACES,IFACEN,LISTS(4),LISTR(4),NUM1
         53                           INTEGER*4 IERRA,LERR(6)
         54                           DATA NUM1 /1/
         55                     C
         56                           CHARACTER*60 ERMSGC
         57                          * / ' ## SUBROUTINE MKFAC3: ERROR OCCURED            ; RETURNED' /
         58                           CHARACTER*60 EREXP1
         59                          * / ' ALLOCATING FAILED                                        ' /
         60                           CHARACTER*60 EREXP2
         61                          * / ' THE NUMBER OF INTER-CONNECT BOUNDARY FACE IS OVER MBFDOM ' /
         62                           CHARACTER*60 EREXP3
         63                          * / ' THE NUMBER OF FACE IS OVER MFACEM                        ' /
         64                     C
         65                     CC
         66                     CCHY [2] ALLOCATE WORK ARRAY
         67                     CC
         68                           MBFDM6=6*MBFDOM
         69                           ALLOCATE(NFSND (       NDOM),STAT=LERR(01))
         70                           ALLOCATE(NFSND2(       NDOM),STAT=LERR(02))
         71                           ALLOCATE(LFSND (MBFDM6,NDOM),STAT=LERR(03))
         72                           ALLOCATE(NFRCV (       NDOM),STAT=LERR(04))
         73                           ALLOCATE(NFRCV2(       NDOM),STAT=LERR(05))
         74                           ALLOCATE(LFRCV (MBFDM6,NDOM),STAT=LERR(06))
         75                           CALL ERRCHK(IUT6,IPART,6,LERR,IERRA)
         76     1                     IF(IERRA.NE.0) THEN
         77     1                        WRITE(IUT0,*) EREXP1
         78     1                        GOTO 9999
         79     1                     ENDIF
         80                     CC
         81                     CCHY [3] MAKE REQUEST INTER-CONNECT BOUNDARY FACE LIST
         82                     CC
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF
                              <<< Loop-information  End >>>
         83     1                     DO 1000 IDOM=1,NDOM
         84     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK01
                              <<< Loop-information  End >>>
         85     2  pp   4v               DO 1100 IP=1,NP
         86     2   p   4v                  LWRK01(IP)=0
         87     2   p   4v       1100    CONTINUE
         88     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.25, ITR: 192, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IPSLF
                              <<< Loop-information  End >>>
         89     2   s   2v               DO 1200 IBP=1,NBPDOM(IDOM)
         90     2   p   2v                  IP=IPSLF(IBP,IDOM)
         91     2   m   2v                  LWRK01(IP)=IBP
         92     2   p   2v       1200    CONTINUE
         93     1               C
         94     1                        NFSND(IDOM)=0
         95     2                        DO 1300 IE=1,NE
         96     3                           IF(     NODE(8,IE).GE.1) THEN ! HEX
         97     3                              IETYPE=4
         98     3                              NLS=6
         99     3                           ELSE IF(NODE(6,IE).GE.1) THEN ! PRS
        100     3                              IETYPE=3
        101     3                              NLS=5
        102     3                           ELSE IF(NODE(5,IE).GE.1) THEN ! PYR
        103     3                              IETYPE=2
        104     3                              NLS=5
        105     3                           ELSE                          ! TET
        106     3                              IETYPE=1
        107     3                              NLS=4
        108     3                           ENDIF
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFACE
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 1
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        109     3                           DO 1400 IS=1,NLS
        110     3                              IF (LEFACE(IS,IE).NE.0) GOTO 1400
        111     3               C
        112     3                              IP1=NODE(LOCAL(1,IS,IETYPE),IE)
        113     3                              IP2=NODE(LOCAL(2,IS,IETYPE),IE)
        114     3                              IP3=NODE(LOCAL(3,IS,IETYPE),IE)
        115     3               C
        116     4                              IF ((IETYPE.EQ.1            ).OR. ! TRI
        117     4                    *             (IETYPE.EQ.2.AND.IS.LE.4).OR.
        118     4                    *             (IETYPE.EQ.3.AND.IS.LE.2)) THEN
        119     4                                 IP4=0
        120     4                                 JBC=LWRK01(IP1)*LWRK01(IP2)*LWRK01(IP3)
        121     4                              ELSE                             ! QUAD
        122     4                                 IP4=NODE(LOCAL(4,IS,IETYPE),IE)
        123     4                                 JBC=LWRK01(IP1)*LWRK01(IP2)*LWRK01(IP3)*LWRK01(IP4)
        124     4                              ENDIF
        125     3               C
        126     3                              IF (JBC.EQ.0) GOTO 1400
        127     3               C
        128     3                              NFSND(IDOM)=NFSND(IDOM)+1
        129     4                              IF (NFSND(IDOM).GT.MBFDOM) THEN
        130     4                                 WRITE(IUT0,*) EREXP2,MBFDOM
        131     4                                 GOTO 9999
        132     4                              ENDIF
        133     3               C
        134     3                              IFS1=NFSND(IDOM)
        135     3                              IFS2=NFSND(IDOM)+MBFDOM
        136     3                              IFS3=NFSND(IDOM)+MBFDOM*2
        137     3                              IFS4=NFSND(IDOM)+MBFDOM*3
        138     3                              IFS5=NFSND(IDOM)+MBFDOM*4
        139     3                              IFS6=NFSND(IDOM)+MBFDOM*5
        140     3                              LFSND(IFS1,IDOM)=LWRK01(IP1)
        141     3                              LFSND(IFS2,IDOM)=LWRK01(IP2)
        142     3                              LFSND(IFS3,IDOM)=LWRK01(IP3)
        143     4                              IF (IP4.EQ.0) THEN
        144     4                                 LFSND(IFS4,IDOM)=0
        145     4                              ELSE
        146     4                                 LFSND(IFS4,IDOM)=LWRK01(IP4)
        147     4                              ENDIF
        148     3                              LFSND(IFS5,IDOM)=IE
        149     3                              LFSND(IFS6,IDOM)=IS
        150     3               C
        151     3                1400       CONTINUE
        152     2                1300    CONTINUE
        153     1               C
        154     1                1000 CONTINUE
        155                     C
        156                     CC
        157                     CCHY [4] COMMUNICATE LFSND
        158                     CC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LWRK01
                              <<< Loop-information  End >>>
        159     1  pp   4v            DO 2000 IDOM=1,NDOM
        160     1   p   4v               LWRK01(IDOM)=1
        161     1   p   4v       2000 CONTINUE
        162                     C
        163                           CALL DDSET5(IPART,NUM1,
        164                          *            NDOM,LDOM,LWRK01,NFSND,
        165                          *            NDOM,LDOM,LWRK01,NFRCV,IERR)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NFRCV2, NFSND2
                              <<< Loop-information  End >>>
        166     1  pp   2v            DO 2100 IDOM=1,NDOM
        167     1   p   2v               NFSND2(IDOM)=MBFDM6
        168     1   p   2v               NFRCV2(IDOM)=MBFDM6
        169     1   p   2v       2100 CONTINUE
        170                           CALL DDSET5(IPART,MBFDM6,
        171                          *            NDOM,LDOM,NFSND2,LFSND,
        172                          *            NDOM,LDOM,NFRCV2,LFRCV,IERR)
        173                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        174                           IF(IERRA.NE.0) GOTO 9999
        175                     C
        176                     CC
        177                     CCHY [5] MAKE INTER-CONNECT BOUNDARY FACE LIST
        178                     CC
        179                           NFACE3=0
        180     1                     DO 3000 IDOM=1,NDOM
        181     1               C
        182     2                        DO 3100 I1=1,NFSND(IDOM)
        183     2                           IFS1=I1
        184     2                           IFS2=I1+MBFDOM
        185     2                           IFS3=I1+MBFDOM*2
        186     2                           IFS4=I1+MBFDOM*3
        187     2                           IFS5=I1+MBFDOM*4
        188     2                           IFS6=I1+MBFDOM*5
        189     2                           IBP1=LFSND(IFS1,IDOM)
        190     2                           IBP2=LFSND(IFS2,IDOM)
        191     2                           IBP3=LFSND(IFS3,IDOM)
        192     2                           IBP4=LFSND(IFS4,IDOM)
        193     2                           IE1 =LFSND(IFS5,IDOM)
        194     2                           IS1 =LFSND(IFS6,IDOM)
        195     2                           IF (LEFACE(IS1,IE1).NE.0) GOTO 3100
        196     2               C
        197     2                           LISTS(1)=IPSLF(IBP1,IDOM)
        198     2                           LISTS(2)=IPSLF(IBP2,IDOM)
        199     2                           LISTS(3)=IPSLF(IBP3,IDOM)
        200     3                           IF (IBP4.EQ.0) THEN
        201     3                              LISTS(4)=0
        202     3                           ELSE
        203     3                              LISTS(4)=IPSLF(IBP4,IDOM)
        204     3                           ENDIF
        205     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFRCV
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 4  FILL 6
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        206     3                           DO 3200 I2=1,NFRCV(IDOM)
        207     3                              IFR1=I2
        208     3                              IFR2=I2+MBFDOM
        209     3                              IFR3=I2+MBFDOM*2
        210     3                              IFR4=I2+MBFDOM*3
        211     3                              IFR5=I2+MBFDOM*4
        212     3                              IFR6=I2+MBFDOM*5
        213     3                              IF (LFRCV(IFR1,IDOM).LT.0) GOTO 3200
        214     3               C
        215     3                              IBP1 =LFRCV(IFR1,IDOM)
        216     3                              IBP2 =LFRCV(IFR2,IDOM)
        217     3                              IBP3 =LFRCV(IFR3,IDOM)
        218     3                              IBP4 =LFRCV(IFR4,IDOM)
        219     3                              LISTR(1)=IPSND(IBP1,IDOM)
        220     3                              LISTR(2)=IPSND(IBP2,IDOM)
        221     3                              LISTR(3)=IPSND(IBP3,IDOM)
        222     4                              IF (IBP4.EQ.0) THEN
        223     4                                 LISTR(4)=0
        224     4                              ELSE
        225     4                                 LISTR(4)=IPSND(IBP4,IDOM)
        226     4                              ENDIF
        227     3               C
        228     3                              CALL MATCHX(LISTS,LISTR,IMATCH)
        229     4                              IF (IMATCH.NE.0) THEN
        230     4                                 NFACE =NFACE +1
        231     4                                 NFACE3=NFACE3+1
        232     5                                 IF (NFACE.GT.MFACE) THEN
        233     5                                    WRITE(IUT0,*) EREXP3,MFACE
        234     5                                    GOTO 9999
        235     5                                 ENDIF
        236     4                                 LEFACE(IS1,IE1)=IE1
        237     4                                 LFACE(1,NFACE)=IE1
        238     4                                 LFACE(2,NFACE)=0
        239     4                                 LFACE(3,NFACE)=IS1
        240     4                                 LFACE(4,NFACE)=0
        241     4                                 LFACE(5,NFACE)=LDOM(IDOM)
        242     4                                 CALL CALAVC(IE1,IS1,NE,NP,N2,NSP,NS,NODE,LOCAL,
        243     4                    *                        X,Y,Z,AVEC(1,NFACE))
        244     4                                 LFRCV(IFR1,IDOM)=-NFACE3
        245     4                                 LFSND(IFS2,IDOM)= NFACE3
        246     4                                 LFSND(IFS6,IDOM)=LFRCV(IFR5,IDOM)
        247     4                                 GOTO 3100
        248     4                              ENDIF
        249     3                3200       CONTINUE
        250     2                           LFSND(IFS2,IDOM)=0
        251     2                3100    CONTINUE
        252     1               C
        253     1                3000 CONTINUE
        254                     C
        255                     CC
        256                     CCHY [5] COMMUNICATE LFRCV
        257                     CC
        258                           CALL DDSET5(IPART,MBFDM6,
        259                          *            NDOM,LDOM,NFRCV,LFRCV,
        260                          *            NDOM,LDOM,NFSND,LFSND,IERR)
        261                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        262                           IF(IERRA.NE.0) GOTO 9999
        263                     C
        264                     CC
        265                     CCHY [7] SET INDEX NUMBER AT NEIBHGOR DOMAIN
        266                     CC
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFSND
                              <<< Loop-information  End >>>
        267     1                     DO 4000 IDOM=1,NDOM
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.13, ITR: 160, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFSND
                              <<< Loop-information  End >>>
        268     2   s   2v               DO 4100 I1=1,NFSND(IDOM)
        269     2   p   2v                  IFS1=I1
        270     2   p   2v                  IFS2=I1+MBFDOM
        271     2   p   2v                  IFS3=I1+MBFDOM*2
        272     2   p   2v                  IFS4=I1+MBFDOM*3
        273     2   p   2v                  IFS5=I1+MBFDOM*4
        274     2   p   2v                  IFS6=I1+MBFDOM*5
        275     3   p   2v                  IF (LFSND(IFS1,IDOM).LT.0) THEN
        276     3   p   2v                     IFACEN=LFSND(IFS1,IDOM) ! NEIGHBOR
        277     3   p   2v                     IFACES=LFSND(IFS2,IDOM) ! SELF
        278     3   p   2v                     IFACE=NFACE1+NFACE2+IFACES
        279     3   m   2v                     LFACE(2,IFACE)=IFACEN
        280     3   p   2v                  ENDIF
        281     2   p   2v       4100    CONTINUE
        282     1                4000 CONTINUE
        283                     C
        284                     CC
        285                     CCHY [8] DEALLOCATE WORK ARRAY
        286                     CC
        287                           DEALLOCATE(NFSND )
        288                           DEALLOCATE(NFSND2)
        289                           DEALLOCATE(LFSND )
        290                           DEALLOCATE(NFRCV )
        291                           DEALLOCATE(NFRCV2)
        292                           DEALLOCATE(LFRCV )
        293                     C
        294                           RETURN
        295                     C
        296                      9999 CONTINUE
        297                           WRITE(IUT0,*)
        298                           WRITE(IUT0,*) ERMSGC
        299                           IERR=1
        300                     C
        301                           RETURN
        302                           END
        303                     C

 Diagnostic messages: program name(MKFAC3)
   jwd2008i-i  "mkfac3.f", line 25: この仮引数'IENP'は、副プログラム中で使用されていません。
   jwd2008i-i  "mkfac3.f", line 25: この仮引数'NEP'は、副プログラム中で使用されていません。
   jwd2008i-i  "mkfac3.f", line 35: この仮引数'DVEC'は、副プログラム中で使用されていません。
   jwd2006i-i  "mkfac3.f", line 48: この名前'I'は、宣言だけされていて引用されていません。
   jwd2006i-i  "mkfac3.f", line 48: この名前'IE2'は、宣言だけされていて引用されていません。
   jwd2006i-i  "mkfac3.f", line 48: この名前'NSD'は、宣言だけされていて引用されていません。
   jwd5131p-i  "mkfac3.f", line 83: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5001p-i  "mkfac3.f", line 85: このDOループを並列化しました。(名前:IP)
   jwd6001s-i  "mkfac3.f", line 85: このDOループをSIMD化しました。(名前:IP)
   jwd8663o-i  "mkfac3.f", line 85: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "mkfac3.f", line 85: ループを展開数4回でアンローリングしました。
   jwd6001s-i  "mkfac3.f", line 89: このDOループをSIMD化しました。(名前:IBP)
   jwd8204o-i  "mkfac3.f", line 89: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "mkfac3.f", line 89: ループの繰返し数が192回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "mkfac3.f", line 91: 配列'LWRK01'の添字式中の変数'IP'をループ中で定義しているため、このDOループは並列化できません。
   jwd5131p-i  "mkfac3.f", line 95: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5131p-i  "mkfac3.f", line 109: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "mkfac3.f", line 109: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "mkfac3.f", line 109: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。
   jwd5001p-i  "mkfac3.f", line 159: このDOループを並列化しました。(名前:IDOM)
   jwd6001s-i  "mkfac3.f", line 159: このDOループをSIMD化しました。(名前:IDOM)
   jwd8663o-i  "mkfac3.f", line 159: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "mkfac3.f", line 159: ループを展開数4回でアンローリングしました。
   jwd5001p-i  "mkfac3.f", line 166: このDOループを並列化しました。(名前:IDOM)
   jwd6001s-i  "mkfac3.f", line 166: このDOループをSIMD化しました。(名前:IDOM)
   jwd8663o-i  "mkfac3.f", line 166: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "mkfac3.f", line 166: ループを展開数2回でアンローリングしました。
   jwd5131p-i  "mkfac3.f", line 180: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5131p-i  "mkfac3.f", line 182: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd5131p-i  "mkfac3.f", line 206: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "mkfac3.f", line 206: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "mkfac3.f", line 206: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "mkfac3.f", line 267: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:LFACE)
   jwd6001s-i  "mkfac3.f", line 268: このDOループをSIMD化しました。(名前:I1)
   jwd8204o-i  "mkfac3.f", line 268: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "mkfac3.f", line 268: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "mkfac3.f", line 279: 配列'LFACE'の添字式中の変数'IFACES'をループ中で定義しているため、このDOループは並列化できません。

 Procedure information
   Lines      : 303
   Statements : 211
   Stack(byte): 4192
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 303
   Total statements : 211
   Total stack(byte): 4192
   Total prefetch num: 0

