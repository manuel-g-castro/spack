
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:10 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : lesrpx.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "LESRPX"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE LESRPX(IACT,IUT0,IUT5,IUT6,
          2                          *                  IPART,COMGEN,MSMPL,MTIME,MRESV,MFRAME,
          3                          *                  IMODEL,IFORM ,IPRESS,FSMACH,
          4                          *                  D000  ,U000  ,T000  ,TREF  ,RHO000,
          5                          *                  IHEAT ,ISOLID,ICAV  ,IBUSNQ,
          6                          *                  NFRAME,JSET  ,OMEGA,
          7                          *                  UFRAM0,VFRAM0,WFRAM0,
          8                          *                  VISCM ,SIGMA ,RHOF  ,RHOS  ,
          9                          *                  CONDF ,CONDS ,CPF   ,CPS   ,
         10                          *                  ISTART,NTIME ,DT    ,NMAXSE,NMAXSI,
         11                          *                  NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS  ,
         12                          *                  TFINAL,UFINAL,VFINAL,WFINAL,
         13                          *                  IOUT  ,INTFSV,INTPSV,
         14                          *                  NSMPL,LSMPL,XSMPL,YSMPL,ZSMPL,
         15                          *                  NHST,COMHST,
         16                          *                  FILEMS,FILEBC,FILEIF,FILEFF,FILEHS,
         17                          *                  FILEAT,FILEMD,FILEOS,
         18                          *                  FILEAV,FILERM,FILEST,FILEFS,FILEPS,
         19                          *                  FILEMR,FILEBR,FILEFR,FILEAR,
         20                          *                  JSETOS,FILEDM,FILEFM,
         21                          *                  IERR)
         22                           IMPLICIT NONE
         23                     C
         24                           INTEGER*4 IACT,IUT0,IUT5,IUT6,IPART,MSMPL,MTIME,MRESV,MFRAME,
         25                          *          ITRANS,IMODEL,IFORM,IPRESS,IHEAT,ISOLID,ICAV,IBUSNQ,
         26                          *          NFRAME,ISET,JSET,ISTART,NTIME,NMAXSE,NMAXSI,
         27                          *          NMAXT,NMAXP,IOUT,INTFSV,INTPSV,
         28                          *          NSMPL,LSMPL(MSMPL),NHST,JSETOS,IERR
         29                           REAL*4 FSMACH,D000,U000,T000,TREF,RHO000,OMEGA,
         30                          *       UFRAM0(MFRAME),VFRAM0(MFRAME),WFRAM0(MFRAME),
         31                          *       VISCM,SIGMA,RHOF,RHOS,CONDF,CONDS,CPF,CPS,
         32                          *       DT,EPST,EPSP,EPSS,TFINAL,UFINAL,VFINAL,WFINAL,
         33                          *       XSMPL(MSMPL),YSMPL(MSMPL),ZSMPL(MSMPL)
         34                           CHARACTER*60 COMGEN,COMHST(MRESV+MSMPL)
         35                           CHARACTER*60 FILEMS,FILEBC,FILEIF,FILEFF,FILEHS,
         36                          *             FILEAT,FILEMD,FILEOS,
         37                          *             FILEAV,FILERM,FILEST,FILEFS,FILEPS,
         38                          *             FILEMR,FILEBR,FILEFR,FILEAR,
         39                          *             FILEDM,FILEFM,FILE
         40                     C
         41                           CHARACTER*15 COMDAT(10)
         42                           DATA COMDAT( 1) / ' VELOCITY-U   ;' /
         43                           DATA COMDAT( 2) / ' VELOCITY-V   ;' /
         44                           DATA COMDAT( 3) / ' VELOCITY-W   ;' /
         45                           DATA COMDAT( 4) / ' PRESSURE     ;' /
         46                           DATA COMDAT( 5) / ' LIQUID FRACT.;' /
         47                           DATA COMDAT( 6) / ' TEMPRATURE   ;' /
         48                           DATA COMDAT( 7) / ' TOTAL VISC.  ;' /
         49                           DATA COMDAT( 8) / ' KINETIC NERGY;' /
         50                           DATA COMDAT( 9) / ' EPSOLON      ;' /
         51                           DATA COMDAT(10) / ' OMEGA        ;' /
         52                     C
         53                     C
         54                           CHARACTER*60 COMMNT(24)
         55                           DATA COMMNT(01) /'#GIVE ITRANS IMODEL IFORM  IPRESS FSMACH '/
         56                           DATA COMMNT(02) /'#GIVE D000  U000  T000  TREF          '/
         57                           DATA COMMNT(03) /'#GIVE IHEAT  ICAV   IBUSNQ               '/
         58                           DATA COMMNT(04) /'#GIVE NFRAME ISET   JSET   OMEGA         '/
         59                           DATA COMMNT(05) /'#GIVE VISCM  SIGMA  RHOF   RHOS          '/
         60                           DATA COMMNT(06) /'#GIVE CONDF  CONDS  CPF    CPS           '/
         61                           DATA COMMNT(07) /'#GIVE ISTART NTIME  DT     NMAXSE NMAXSI '/
         62                           DATA COMMNT(08) /'#GIVE NMAXT  NMAXP  EPST   EPSP   EPSS   '/
         63                           DATA COMMNT(09) /'#GIVE TFINAL UFINAL VFINAL WFINAL        '/
         64                           DATA COMMNT(10) /'#GIVE IOUT   INTFSV INTPSV               '/
         65                           DATA COMMNT(11) /'#GIVE NSMPL  LSMPL  XSMPL  YSMPL ZSMPL   '/
         66                           DATA COMMNT(12) /'#GIVE MESH         FILE NAME             '/
         67                           DATA COMMNT(13) /'#GIVE B.C.         FILE NAME             '/
         68                           DATA COMMNT(14) /'#GIVE INITIAL FLOW FILE NAME             '/
         69                           DATA COMMNT(15) /'#GIVE FINALE  FLOW FILE NAME             '/
         70                           DATA COMMNT(16) /'#GIVE HISTORY      FILE NAME             '/
         71                           DATA COMMNT(17) /'#GIVE ATTRIBUE     FILE NAME             '/
         72                           DATA COMMNT(18) /'#GIVE MID-NODE     FILE NAME             '/
         73                           DATA COMMNT(19) /'#GIVE OVERSET      FILE NAME             '/
         74                           DATA COMMNT(20) /'#GIVE AVERAGE      FILE NAME             '/
         75                           DATA COMMNT(21) /'#GIVE RMS          FILE NAME             '/
         76                           DATA COMMNT(22) /'#GIVE STRESS       FILE NAME             '/
         77                           DATA COMMNT(23) /'#GIVE CURRENT FLOW FILE NAME             '/
         78                           DATA COMMNT(24) /'#GIVE SURFACE PRS. FILE NAME             '/
         79                     C
         80                           INTEGER*4 ISMPL,IERRS,ILINE,IFRAME
         81                     C
         82                           CHARACTER*8  CKEYWD
         83                           CHARACTER*60 HEADMY
         84                           DATA CKEYWD / '#FFB_V07' /
         85                     C
         86                           CHARACTER*60 ERRMSG
         87                          & / ' ## SUBROUTINE LESRPX: FATAL      ERROR OCCURENCE; RETURNED' /
         88                     C
         89                           CHARACTER*60 EREXP0,EREXP1,EREXP2,EREXP3,EREXP4,EREXP5
         90                           DATA EREXP0
         91                          & / ' READING FAILED AT LINE OF ' /
         92                           DATA EREXP1
         93                          & / ' FILE FORMAT OF THE  FILE IS NOT FOR LES3X OF FFB VER.8.1  ' /
         94                           DATA EREXP2
         95                          & / ' AN ILLEGAL VALUE WAS SPECIFIED FOR CONTROL PARAMETER      ' /
         96                           DATA EREXP3
         97                          & / ' NUMBER OF TIME STEPS HAS EXCEEDED THE LIMIT OF            ' /
         98                           DATA EREXP4
         99                          & / ' NUMBER OF DATA SMPLING POINTS HAS EXCEEDED THE LIMIT OF  ' /
        100                           DATA EREXP5
        101                          & / ' NUMBER OF TRANSLATING FRAMES HAS EXCEEDED THE LIMIT OF    ' /
        102                     C
        103                           INCLUDE 'gf.h'
        104                           INCLUDE 'gfdummy.h'
        105                     C
        106                     C
        107                     C      READ & WRITE CALCULATION PARAMETERS AND FILE NAMES FOR LES3C
        108                     C
        109                     C     ARGUMENT LISTINGS
        110                     C
        111                     C     IACT       ; SPECIFY ACTION MODE (1:READ, 2:WRITE)
        112                     C     IUT0       ; FILE NUMBER TO WRITE  ERROR MESSAGE
        113                     C     IUT5       ; FILE NUMBER TO READ PARAMETERS AND FILE NAMES
        114                     C     IUT6       ; FILE NUMBER TO WRITE CALCULATION SEQUENCE
        115                     C
        116                     C    [1] ANALYSIS MODE
        117                     C     ITRANS     ;SPECIFIES TIME-LOOP MODE
        118                     C                  1 --- UNSTEADY
        119                     C                  2 ---   STEADY (SIMPLE)
        120                     C                  3 ---   STEADY (SIMPEC)
        121                     C
        122                     C     IMODEL     ;SPECIFIES SUBGRID-SCALE MODEL TO BE USED
        123                     C                  0 --- NO SGS MODEL USED
        124                     C                  1 --- STATIC SMAGORINSKY MODEL INCORPORATED WITH
        125                     C                         VAN-DRIEST WALL DAMPING FUNCTION
        126                     C                  2 --- DYNAMIC SMAGORINSKY MODEL
        127                     C                 11 --- K-EPSION (STANDARD)
        128                     C                 12 --- K-EPSION (LOW-RE TYPE:A)
        129                     C                 13 --- K-EPSION (LOW-RE TYPE:A)
        130                     C                 21 --- K-OMEGA SST
        131                     C
        132                     C     IFORM       ;SPECIFIES MOMENTUM EQUATIONS METHOD
        133                     C           MOMENTUM EQUATIONS ARE SOLVED BY CRANK-NICOLSON METHOD (C.N.) IN
        134                     C          THIS VERSION. TWO OPTIONAL FUNCTIONS ARE SUPPORTED TO STABILAZE
        135                     C          COMPUTATIONS. THE FIRST ONE IS BLANCED TENSOR DIFFUSITIVITY (BTD).
        136                     C          COMPUTATIONS WITH DSM IN THIS VERSION TENDS TO BE UNSTABLE. BTD
        137                     C          TERM IS USEFULL IN SUCH CASES. THE SECOND ONE IS EULER BACKWARD
        138                     C          (E.B.) METHOD FOR ONLY DIFFUSION TERM. WE RECOMMEND THIS FUNCTION
        139                     C          FOR LOW REYNOLDS FLOW (RE<100).
        140                     C           IFORM CONTROLS THESE OPTIONAL FUNCTIONS AS FOLLOWS;
        141                     C
        142                     C                  1 --- C.N. FOR DIFF. TERM / NO   BTD TERM  (DEFAULT)
        143                     C                  2 --- C.N. FOR DIFF. TERM / WITH BTD TERM
        144                     C                  3 --- E.B. FOR DIFF. TERM / NO   BTD TERM
        145                     C                  4 --- E.B. FOR DIFF. TERM / WITH BTD TERM
        146                     C
        147                     C     IPRESS     ;SPECIFIES PRESSURE-COUPLING ALGORITHM
        148                     C                  1 --- STANDARD FRACTIONAL STEP
        149                     C                  2 --- FRACTIONAL STEP WITH LOW-MACH-NO. ASSUMPTION
        150                     C
        151                     C     FSMACH     ;FREE-STREAM MACH NUMBER
        152                     C
        153                     C    [2] SCALE
        154                     C    D000        ;CHARACTARISTIC LENGTH
        155                     C    U000        ;CHARACTARISTIC VELOCITY
        156                     C    T000        ;CHARACTARISTIC TEMPRATURE
        157                     C    TREF        ;REFERENCE TEMPERATURE
        158                     C
        159                     C    [3] PHYSICAL FUNCTION FLAG
        160                     C    IHEAT       ;FLAG FOR HEAT-TRANSFER COMPUTATION
        161                     C                  0 --- NO CAL. (DEFAULT)
        162                     C                  1 --- FORCED CONVECTION MODE WITH DISSIPATION TERM
        163                     C                  2 --- FORCED CONVECTION MODE W.O. DISSIPATION TERM
        164                     C                  3 --- NATURE CONVECTION MODE
        165                     C    ICAV        ;FLAG FOR CAVITATION COMPUTATION
        166                     C                  0 --- OFF (DEFALT)
        167                     C                  1 --- ON
        168                     C    IBUSNQ      ; FLAG FOR BOUSSINESQ ASSUMPTION
        169                     C                  0  -- CAL. DENSITY CHANGE FOR ONLY GRAVITY TERM
        170                     C                  1  -- CAL. DENSITY CHANGE FOR ALL THE TERM
        171                     C
        172                     C    [4] FRAME OF REFERENCE
        173                     C    ISET        ; MID-NODE MODE FLGA
        174                     C                  0 --- OFF (DEFALT)
        175                     C                  1 --- ON
        176                     C
        177                     C    JSET        ; OVERSET COMPUTATION WILL BE ACTIVATED WHEN THIS
        178                     C                  PARAMETER IS SET TO A POSITIVE INTEGER VALUE, AS
        179                     C                  LISTED BELOW:
        180                     C    VALUE OF 'JSET' ACTIONS TO BE TAKEN
        181                     C        NEGATIVE INT.  : ILLEGAL, REGARDED AS AN ERROR
        182                     C        ZERO(0)        : NO OVERSET WILL BE DONE
        183                     C        POSITIVE INT.  : READ THE SPECIFIED OVERSET CONDITIONS DATA FILE
        184                     C                         AT EVERY 'JSET' TIME STEP(S) FOR A NEW OVERSET DATA,
        185                     C                         MAKE APPROPRIATE TRANSACTIONS FOR THE OVERSET.
        186                     C                         IF NO OVERSET DATA IS FOUND DURING THE TIME
        187                     C                         INTEGRATIONS, 'LES3X' WILL USE THE OVERSET
        188                     C                         DATA READ-IN LATEST FOR THE REMAINING TIME INTEGRATIONS.
        189                     C
        190                     C    OMEGA       ; ANGULAR VELOCITY OF REFERENCE FRAME -1
        191                     C    UACCE       ; ACCELERATION IN X-DIR. OF REFERENCE FRAME 1
        192                     C    VACCE       ; ACCELERATION IN Y-DIR. OF REFERENCE FRAME 1
        193                     C    WACCE       ; ACCELERATION IN Z-DIR. OF REFERENCE FRAME 1
        194                     C    GRAVX       ;X-DIR. COMPONENT OF GRAVITY ACCERATION VECTOR
        195                     C    GRAVY       ;X-DIR. COMPONENT OF GRAVITY ACCERATION VECTOR
        196                     C    GRAVZ       ;X-DIR. COMPONENT OF GRAVITY ACCERATION VECTOR
        197                     C
        198                     C    [5] CONSTANT
        199                     C    VISCM       ;MOLECULAR VISCOSITY
        200                     C    SIGMA       ;CAVITATION NUMBER
        201                     C    RHOF        ;DENSITY           OF FLUID
        202                     C    RHOS        ;DENSITY           OF SOLID
        203                     C    CONDF       ;HEAT CONDUCTIVITY OF FLUID
        204                     C    CONDS       ;HEAT CONDUCTIVITY OF SOLID
        205                     C    CPF         ;SPECIFIC HEAT     OF FLUID
        206                     C    CPS         ;SPECIFIC HEAT     OF SOLID
        207                     C
        208                     C    [6] TIME INTEGRATION
        209                     C    ISTART      ; CONTROLS DEVELOPMENT OF THE FLOW FIELD
        210                     C                  0 --- SET  ZERO INITIAL FLOW FIELD
        211                     C                  1 --- READ INITIAL FLOW FIELD FROM GIVEN FILE
        212                     C    NMAXSE      ; MAXIMUM ITERATIONS FOR EXTERNAL LOOP OF SIMPLE METHOD
        213                     C    NMAXSI      ; MAXIMUM ITERATIONS FOR EXTERNAL LOOP OF SIMPLE METHOD
        214                     C    NMAXT       ; MAXIMUM ITERATIONS     FOR TRANSPORT EQUATIONS
        215                     C    NMAXP       ; MAXIMUM ITERATIONS     FOR PRESSURE  EQUATION
        216                     C    EPST        ; CONVERGENCE CRITERIA   FOR TRANSPORT EQUATIONS
        217                     C    EPSP        ; CONVERGENCE CRITERIA   FOR PRESSURE  EQUATION
        218                     C    EPSS        ; CONVERGENCE CRITERIA   FOR SIMPLE (SIMPLEC) METHOD
        219                     C    TFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
        220                     C    UFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
        221                     C    VFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
        222                     C    WFINAL      ; FLOW FIELD DEVELOPMENT PARAMETER
        223                     C
        224                     C    [7] ADDITION OUTPUT
        225                     C    IOUT        ;CONTROLS OPTIONAL OUTPUT FILES
        226                     C                  0 --- OUTPUT NO OPTIONAL FILES
        227                     C                  1 --- OUTPUT AVERAGE              FLOW FIELD FILE
        228                     C                  2 --- OUTPUT AVERAGE, RMS, STRESS FLOW FIELD FILES
        229                     C    INTFSV       ; FIELD DATA SAMPLING INTERVAL
        230                     C           NOTES ; FIELD DATA, NAMELY U, V, W, AND P AT ALL THE NODES
        231                     C                  OR ELEMENTS, WILL BE OUTPUT TO THE SPECIFIED FILE
        232                     C                  AT EVERY 'INTFSV' TIME STEPS. NO DATA WILL BE OUTPUT
        233                     C                  WHEN 'INTFSV' IS SET TO 0.
        234                     C    INTPSV       ; SURFACE PRESSURE DATA SAMPLING INTERVAL
        235                     C           NOTES ; SURFACE PRESSURE DATA, NAMELY P AT SURFACE ELEMENTS
        236                     C                  DETERMINED BY THE BODY FORCE CALCULATION BOUNDARY
        237                     C                  NODES, WILL BE OUTPUT TO THE SPECIFIED FILE AT EVERY
        238                     C                  'INTPSV' TIME STEPS. NO DATA WILL BE OUTPUT WHEN
        239                     C                  'INTPSV' IS SET TO 0.
        240                     C
        241                     C
        242                     C    [8] SAMPLING DATA In HISTORY FILE
        243                     C    MSAMPL      ;
        244                     C    NSMPL       ; NUMBER OF DATA SAMPLING POINTS
        245                     C    LSMPL(ISMPL); TYPE OF DATA TO BE SAMPLED
        246                     C                   1 --- X-DIR. VELOCITY COMPONENT
        247                     C                   2 --- Y-DIR. VELOCITY COMPONENT
        248                     C                   3 --- Z-DIR. VELOCITY COMPONENT
        249                     C                   4 --- PRESSURE
        250                     C                   5 --- VOLUMETRIC FRACTION OF LIQUID PHASE (NOT SUPPORTED)
        251                     C                   6 --- TEMPRATURE
        252                     C          XSMPL(ISMPL); X     COORDINATE OF  SAMPLING POINT ISMPL
        253                     C          YSMPL(ISMPL); Y     COORDINATE OF  SAMPLING POINT ISMPL
        254                     C          ZSMPL(ISMPL); Z     COORDINATE OF  SAMPLING POINT ISMPL
        255                     C
        256                     C    [9] FILE NAMES
        257                     C    FILEMS      ; FILE NAME TO READ MESH DATA
        258                     C    FILEBC      ; FILE NAME TO READ BOUNDARY CONDITIONS
        259                     C    FILEIF      ; FILE NAME TO READ INITIAL FLOW FIELD
        260                     C    FILEFF      ; FILE NAME TO WRITE FINAL FLOW FIELD
        261                     C    FILEHS      ; FILE NAME TO WRITE TIME HISTORIES
        262                     C    FILEAT      ; FILE NAME TO READ  ELEMENT ATTRIBUTE
        263                     C    FILEMD      ; FILE NAME TO READ  MID-NODES DATA
        264                     C    FILEOS      ; FILE NAME TO READ  OVERSET DATA
        265                     C    FILEAV      ; FILE NAME TO WRITE AVERAGE   FIELD  (IOUT)
        266                     C    FILERM      ; FILE NAME TO WRITE RMS       FIELD  (IOUT)
        267                     C    FILEST      ; FILE NAME TO WRITE STRESS    FIELD  (IOUT)
        268                     C    FILEFS      ; FILE NAME TO WRITE CURRENT   FIELD  (INTFSV)
        269                     C    FILEPS      ; FILE NAME TO WRITE SURFACE PRESSURE (INTPSV)
        270                     C
        271                           IERR = 0
        272                           ILINE= 0
        273                     C
        274                           WRITE(IUT6,*)
        275                           WRITE(IUT6,*) '  LESRPX : READING CONTROLL PARAMETERS (VER.7.1)'
        276                     C
        277                     C
        278                     C READ CONTROL PARAMETERS
        279                     C
        280                     C
        281     1                     IF(IACT.EQ.2) THEN
        282     1                         WRITE(IUT0,*) 'WRITE MODE IS NOT SUPPORTED NOW'
        283     1                         IERR=1
        284     1                         RETURN
        285     1                     ENDIF
        286                     C
        287                           WRITE(IUT6,  610)
        288                           ILINE=ILINE+1
        289                           READ (IUT5,FMTAM) HEADMY
        290     1                     IF(HEADMY(1:8).NE.CKEYWD) THEN
        291     1                         WRITE(IUT0,*) ERRMSG
        292     1                         WRITE(IUT0,*) EREXP1
        293     1                         IERR=1
        294     1                         RETURN
        295     1                     ENDIF
        296                     C
        297                           ILINE=ILINE+1
        298                           READ (IUT5,FMTAM,ERR=900,END=900) COMGEN
        299                           WRITE(IUT6,  620) COMGEN
        300                     C
        301                     C    [1] ANALYSIS MODE
        302                           ILINE=ILINE+1
        303                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        304                           ILINE=ILINE+1
        305                           READ (IUT5,*,ERR=900,END=900) ITRANS,IMODEL,IFORM ,IPRESS,FSMACH
        306                           WRITE(IUT6,621)               ITRANS,IMODEL,IFORM ,IPRESS,FSMACH
        307                     C
        308     1                     IF(ITRANS.LT.1 .OR. ITRANS.GT.3) THEN
        309     1                         WRITE(IUT0,*) ERRMSG
        310     1                         WRITE(IUT0,*) EREXP2, 'ITRANS'
        311     1                         IERR = 1
        312     1                         RETURN
        313     1                     ENDIF
        314                     C
        315     1                     IF(      IMODEL.NE. 0 .AND. IMODEL.NE. 1
        316     1                    *   .AND. IMODEL.NE. 2 .AND. IMODEL.NE.10
        317     1                    *   .AND. IMODEL.NE.11 .AND. IMODEL.NE.12
        318     1                    *   .AND. IMODEL.NE.13 .AND. IMODEL.NE.14 ) THEN
        319     1                         WRITE(IUT0,*) ERRMSG
        320     1                         WRITE(IUT0,*) EREXP2, 'IMODEL'
        321     1                         IERR = 1
        322     1                         RETURN
        323     1                     ENDIF
        324                     C
        325     1                     IF( ITRANS.GE.2 .AND.
        326     1                    *   (IMODEL.EQ.1 .OR. IMODEL.EQ.2 ) ) THEN
        327     1                         WRITE(IUT0,*) ERRMSG
        328     1                         WRITE(IUT0,*) 'STEADY & LES MODE MUST NOT BE SPECIFIED'
        329     1                         IERR = 1
        330     1                         RETURN
        331     1                     ENDIF
        332                     C
        333     1                     IF( ITRANS.EQ.1 .AND. IMODEL.GE.10 ) THEN
        334     1                         WRITE(IUT0,*) ERRMSG
        335     1                         WRITE(IUT0,*) 'UNSTEADY RANS MODE IS NOT SUPPORTED NOW'
        336     1                         IERR = 1
        337     1                         RETURN
        338     1                     ENDIF
        339                     C
        340     1                     IF(IFORM.LT.1 .OR. IFORM.GT.5) THEN
        341     1                         WRITE(IUT0,*) ERRMSG
        342     1                         WRITE(IUT0,*) EREXP2, 'IFORM '
        343     1                         IERR = 1
        344     1                         RETURN
        345     1                     ENDIF
        346                     C
        347     1                     IF(ITRANS.GT.1 .AND. IFORM.LT.3) THEN
        348     1                         WRITE(IUT0,*) ERRMSG
        349     1                         WRITE(IUT0,*) 'ONLY EULER-BACKWARD IS ALLOWED '
        350     1                         WRITE(IUT0,*) ' FOR STADY MODE'
        351     1                         IERR = 1
        352     1                         RETURN
        353     1                     ENDIF
        354                     C
        355     1                     IF(IPRESS.LT.1 .OR. IPRESS.GT.2) THEN
        356     1                         WRITE(IUT0,*) ERRMSG
        357     1                         WRITE(IUT0,*) EREXP2, 'IPRESS'
        358     1                         IERR = 1
        359     1                         RETURN
        360     1                     ENDIF
        361                     C
        362     1                     IF(FSMACH.LT.0.0E0 ) THEN
        363     1                         WRITE(IUT0,*) ERRMSG
        364     1                         WRITE(IUT0,*) EREXP2, 'FSMACH'
        365     1                         IERR = 1
        366     1                         RETURN
        367     1                     ENDIF
        368                     C
        369                     C    [2] SCALE
        370                           ILINE=ILINE+1
        371                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        372                           ILINE=ILINE+1
        373                           READ (IUT5,*,ERR=900,END=900) D000 ,U000 ,T000 ,TREF
        374                           WRITE(IUT6,622)               D000 ,U000 ,T000 ,TREF
        375                     C
        376     1                     IF(D000.LT.0.0E0 ) THEN
        377     1                         WRITE(IUT0,*) ERRMSG
        378     1                         WRITE(IUT0,*) EREXP2, 'D000'
        379     1                         IERR = 1
        380     1                         RETURN
        381     1                     ENDIF
        382                     C
        383     1                     IF(U000.LT.0.0E0 ) THEN
        384     1                         WRITE(IUT0,*) ERRMSG
        385     1                         WRITE(IUT0,*) EREXP2, 'U000'
        386     1                         IERR = 1
        387     1                         RETURN
        388     1                     ENDIF
        389                     C
        390     1                     IF(T000.LT.0.0E0 ) THEN
        391     1                         WRITE(IUT0,*) ERRMSG
        392     1                         WRITE(IUT0,*) EREXP2, 'T000'
        393     1                         IERR = 1
        394     1                         RETURN
        395     1                     ENDIF
        396                     C
        397     1                     IF(TREF.LE.0.0E0 ) THEN
        398     1                         WRITE(IUT0,*) ERRMSG
        399     1                         WRITE(IUT0,*) EREXP2, 'TREF'
        400     1                         IERR = 1
        401     1                         RETURN
        402     1                     ENDIF
        403                     C
        404                     C    [3] PHYSICAL FUNCTION FLAGS
        405                           ILINE=ILINE+1
        406                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        407                           ILINE=ILINE+1
        408                     CC    READ (IUT5,*,ERR=900,END=900) IHEAT ,ICAV  ,IBUSNQ
        409                     CC    WRITE(IUT6,623)               IHEAT ,ICAV  ,IBUSNQ
        410                           READ (IUT5,*,ERR=900,END=900) IHEAT ,ISOLID,ICAV  ,IBUSNQ
        411                           WRITE(IUT6,623)               IHEAT ,ISOLID,ICAV  ,IBUSNQ
        412                     C
        413     1                     IF(IHEAT.LT.0 .OR. IHEAT.GT.3) THEN
        414     1                         WRITE(IUT0,*) ERRMSG
        415     1                         WRITE(IUT0,*) EREXP2, 'IHEAT '
        416     1                         IERR = 1
        417     1                         RETURN
        418     1                     ENDIF
        419                     C
        420     1                     IF(ISOLID.LT.0 .OR. ISOLID.GT.1) THEN
        421     1                         WRITE(IUT0,*) ERRMSG
        422     1                         WRITE(IUT0,*) EREXP2, 'ISOLID'
        423     1                         IERR = 1
        424     1                         RETURN
        425     1                     ENDIF
        426                     C
        427                     CC      IF(ICAV.LT.0 .OR. ICAV.GT.1) THEN
        428                     CC          WRITE(IUT0,*) ERRMSG
        429                     CC          WRITE(IUT0,*) EREXP2, 'ICAV'
        430                     CC          IERR = 1
        431                     CC          RETURN
        432                     CC      ENDIF
        433                     C
        434                     CC      IF(ICAV.EQ.1) THEN
        435                     CC          WRITE(IUT0,*) ERRMSG
        436                     CC          WRITE(IUT0,*) 'CAVITATION IS NOT SUPPORTED NOW'
        437                     CC          IERR = 1
        438                     CC          RETURN
        439                     CC      ENDIF
        440                     C
        441     1                     IF(IBUSNQ.LT.0 .OR. IBUSNQ.GT.1) THEN
        442     1                         WRITE(IUT0,*) ERRMSG
        443     1                         WRITE(IUT0,*) EREXP2, 'IBUSNQ'
        444     1                         IERR = 1
        445     1                         RETURN
        446     1                     ENDIF
        447                     C
        448                     C    [4] FRAME OF REFERENCE
        449                           ILINE=ILINE+1
        450                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        451                           ILINE=ILINE+1
        452                           ILINE=ILINE+1
        453                           READ (IUT5,*,ERR=900,END=900) NFRAME,ISET  ,JSET  ,OMEGA
        454                           WRITE(IUT6,624)               NFRAME,ISET  ,JSET  ,OMEGA
        455                     C
        456     1                     IF(JSET.LT.0) THEN
        457     1                         JSET=-JSET
        458     1                         JSETOS=1
        459     1                     ENDIF
        460                     C
        461                     C
        462     1                     IF(NFRAME.LT.-1) THEN
        463     1                         WRITE(IUT0,*) ERRMSG
        464     1                         WRITE(IUT0,*) EREXP2, 'NFRAME'
        465     1                         IERR = 1
        466     1                         RETURN
        467     1                     ENDIF
        468                     C
        469     1                     IF(NFRAME.GT.MFRAME) THEN
        470     1                         WRITE(IUT0,*) ERRMSG
        471     1                         WRITE(IUT0,*) EREXP5, MFRAME
        472     1                         IERR = 1
        473     1                         RETURN
        474     1                     ENDIF
        475                     C
        476     1                     IF(JSET.LT.0) THEN
        477     1                         WRITE(IUT0,*) ERRMSG
        478     1                         WRITE(IUT0,*) EREXP2, 'JSET'
        479     1                         IERR = 1
        480     1                         RETURN
        481     1                     ENDIF
        482                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WFRAM0, VFRAM0, UFRAM0
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 10
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        483     1   s    s            DO 10 IFRAME = 1 , NFRAME
        484     1   m    s                READ (IUT5,  *) UFRAM0(IFRAME), VFRAM0(IFRAME), WFRAM0(IFRAME)
        485     1   m    m                WRITE(IUT6,635) IFRAME ,
        486     1                    &                    UFRAM0(IFRAME), VFRAM0(IFRAME), WFRAM0(IFRAME)
        487     1   s    s                UFRAM0(IFRAME)=UFRAM0(IFRAME)/U000
        488     1   s    s                VFRAM0(IFRAME)=VFRAM0(IFRAME)/U000
        489     1   s    s                WFRAM0(IFRAME)=WFRAM0(IFRAME)/U000
        490     1   p    v         10 CONTINUE
        491                     C
        492                     C    [5] CONSTANT
        493                           ILINE=ILINE+1
        494                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        495                           ILINE=ILINE+1
        496                           READ (IUT5,*,ERR=900,END=900) VISCM ,SIGMA ,RHOF  ,RHOS
        497                           WRITE(IUT6,625)               VISCM ,SIGMA ,RHOF  ,RHOS
        498                     C
        499                           ILINE=ILINE+1
        500                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        501                           ILINE=ILINE+1
        502                           READ (IUT5,*,ERR=900,END=900) CONDF ,CONDS ,CPF   ,CPS
        503                           WRITE(IUT6,626)               CONDF ,CONDS ,CPF   ,CPS
        504                     C
        505     1                     IF(VISCM.LT.0.0E0 ) THEN
        506     1                         WRITE(IUT0,*) ERRMSG
        507     1                         WRITE(IUT0,*) EREXP2, 'VISCM'
        508     1                         IERR = 1
        509     1                         RETURN
        510     1                     ENDIF
        511                     C
        512     1                     IF(RHOF.LT.0.0E0 .OR. RHOS.LT.0.0E0) THEN
        513     1                         WRITE(IUT0,*) ERRMSG
        514     1                         WRITE(IUT0,*) EREXP2, 'RHOSF, RHOSS'
        515     1                         IERR = 1
        516     1                         RETURN
        517     1                     ENDIF
        518                     C
        519     1                     IF(CONDF.LT.0.0E0 .OR. CONDS.LE.0.0E0) THEN
        520     1                         WRITE(IUT0,*) ERRMSG
        521     1                         WRITE(IUT0,*) EREXP2, 'CONDF, CONDS'
        522     1                         IERR = 1
        523     1                         RETURN
        524     1                     ENDIF
        525                     C
        526     1                     IF(CPF.LT.0.0E0 .OR. CPS.LE.0.0E0) THEN
        527     1                         WRITE(IUT0,*) ERRMSG
        528     1                         WRITE(IUT0,*) EREXP2, 'CPF, CPS'
        529     1                         IERR = 1
        530     1                         RETURN
        531     1                     ENDIF
        532                     C
        533                     C    [6] TIME INTEGRATION
        534                           ILINE=ILINE+1
        535                           READ (IUT5,FMTAM) HEADMY
        536                           ILINE=ILINE+1
        537                           READ (IUT5,*,ERR=900,END=900) ISTART,NTIME ,DT    ,NMAXSE,NMAXSI
        538                           WRITE(IUT6,627)               ISTART,NTIME ,DT    ,NMAXSE,NMAXSI
        539                     C
        540                           ILINE=ILINE+1
        541                           READ (IUT5,FMTAM) HEADMY
        542                           ILINE=ILINE+1
        543                           READ (IUT5,*,ERR=900,END=900) NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS
        544                           WRITE(IUT6,628)               NMAXT ,NMAXP ,EPST  ,EPSP  ,EPSS
        545                     C
        546                           ILINE=ILINE+1
        547                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        548                           ILINE=ILINE+1
        549                           READ (IUT5,*,ERR=900,END=900) TFINAL,UFINAL,VFINAL,WFINAL
        550                           WRITE(IUT6,629)               TFINAL,UFINAL,VFINAL,WFINAL
        551                     C
        552     1                     IF(ISTART.NE.0 .AND. ISTART.NE.1) THEN
        553     1                         WRITE(IUT0,*) ERRMSG
        554     1                         WRITE(IUT0,*) EREXP2, 'ISTART'
        555     1                         IERR = 1
        556     1                         RETURN
        557     1                     ENDIF
        558                     C
        559     1                     IF(NTIME.LT.0) THEN
        560     1                         WRITE(IUT0,*) ERRMSG
        561     1                         WRITE(IUT0,*) EREXP2, 'NTIME'
        562     1                         IERR = 1
        563     1                         RETURN
        564     1                     ENDIF
        565                     C
        566     1                     IF(NTIME.GT.MTIME) THEN
        567     1                         WRITE(IUT0,*) ERRMSG
        568     1                         WRITE(IUT0,*) EREXP3, MTIME
        569     1                         IERR = 1
        570     1                         RETURN
        571     1                     ENDIF
        572                     C
        573     1                     IF(NMAXSE.LT.1) THEN
        574     1                         WRITE(IUT0,*) ERRMSG
        575     1                         WRITE(IUT0,*) EREXP2, 'NMAXSE'
        576     1                         IERR = 1
        577     1                         RETURN
        578     1                     ENDIF
        579                     C
        580     1                     IF(NMAXSI.LT.1) THEN
        581     1                         WRITE(IUT0,*) ERRMSG
        582     1                         WRITE(IUT0,*) EREXP2, 'NMAXSI'
        583     1                         IERR = 1
        584     1                         RETURN
        585     1                     ENDIF
        586                     C
        587                     C    [7] ADDITION OUTPUT
        588                           ILINE=ILINE+1
        589                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        590                           ILINE=ILINE+1
        591                           READ (IUT5,*,ERR=900,END=900) IOUT  ,INTFSV,INTPSV
        592                           WRITE(IUT6,630)               IOUT  ,INTFSV,INTPSV
        593                     C
        594     1                     IF(IOUT.NE.0 .AND. IOUT.NE.1 .AND. IOUT.NE.2) THEN
        595     1                         WRITE(IUT0,*) ERRMSG
        596     1                         WRITE(IUT0,*) EREXP2, 'IOUT'
        597     1                         IERR = 1
        598     1                         RETURN
        599     1                     ENDIF
        600                     C
        601                     C    [8] SMPLING DATA IN HISTORY FILE
        602                           ILINE=ILINE+1
        603                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        604                           ILINE=ILINE+1
        605                           READ (IUT5,*,ERR=900,END=900) NSMPL
        606                           WRITE(IUT6,631)               NSMPL
        607                     C
        608                     C
        609     1                     IF(NSMPL.GT.MSMPL) THEN
        610     1                         WRITE(IUT0,*) ERRMSG
        611     1                         WRITE(IUT0,*) EREXP4, MSMPL
        612     1                         IERR = 1
        613     1                         RETURN
        614     1                     ENDIF
        615                     C
        616                           NHST=MRESV
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 7  FILL 16
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        617     1                     DO 20 ISMPL = 1 , NSMPL
        618     1                         ILINE=ILINE+1
        619     1                         READ (IUT5,*,ERR=900,END=900)
        620     1                    *    LSMPL(ISMPL) ,
        621     1                    *    XSMPL(ISMPL) , YSMPL(ISMPL) , ZSMPL(ISMPL)
        622     1               C
        623     2                         IF(LSMPL(ISMPL).LT.1 .OR. LSMPL(ISMPL).GT.9) THEN
        624     2                             WRITE(IUT0,*) ERRMSG
        625     2                             WRITE(IUT0,*) EREXP1, 'LSMPL '
        626     2                             IERR = 1
        627     2                             RETURN
        628     2                         ENDIF
        629     1               
        630     1                         WRITE(IUT6,632) COMDAT(LSMPL(ISMPL)) ,
        631     1                    *                     XSMPL(ISMPL) , YSMPL(ISMPL) , ZSMPL(ISMPL)
        632     1                         NHST = NHST+1
        633     1                         WRITE(COMHST(NHST),701)
        634     1                    *                    COMDAT(LSMPL(ISMPL)) ,
        635     1                    *                    XSMPL(ISMPL) , YSMPL(ISMPL) , ZSMPL(ISMPL)
        636     1                  20 CONTINUE
        637                     C
        638                     C
        639                     C    [9] FILE NAMES
        640                     C
        641                     C    [9-01] NAME OF MESH FILE [IN]
        642                           ILINE=ILINE+1
        643                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        644                           ILINE=ILINE+1
        645                           READ (IUT5,FMTAM,ERR=900,END=900) FILEMS
        646                           CALL RFNAME(FILEMS,FILEMR,IUT0,IERR)
        647                     C
        648                     C
        649                     C    [9-02] NAME OF B.C. FILE [IN]
        650                           ILINE=ILINE+1
        651                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        652                           ILINE=ILINE+1
        653                           READ (IUT5,FMTAM,ERR=900,END=900) FILEBC
        654                           CALL RFNAME(FILEBC,FILEBR,IUT0,IERR)
        655                     C
        656                     C
        657                     C    [9-03] NAME OF INITIAL FLOW FILE [IN]
        658                           ILINE=ILINE+1
        659                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        660                           ILINE=ILINE+1
        661                           READ (IUT5,FMTAM,ERR=900,END=900) FILEIF
        662                     C
        663                     C
        664                     C    [9-04] NAME OF FLOW FILE [OUT]
        665                           ILINE=ILINE+1
        666                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        667                           ILINE=ILINE+1
        668                           READ (IUT5,FMTAM,ERR=900,END=900) FILEFF
        669                           CALL RFNAME(FILEFF,FILEFR,IUT0,IERR)
        670                     C
        671                     C    [9-05] NAME OF HISTORY FILE [OUT]
        672                           ILINE=ILINE+1
        673                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        674                           ILINE=ILINE+1
        675                           READ (IUT5,FMTAM,ERR=900,END=900) FILEHS
        676                     C
        677                     C    [9-06] NAME OF ATTRIBUTE FILE [IN]
        678                           ILINE=ILINE+1
        679                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        680                           ILINE=ILINE+1
        681                           READ (IUT5,FMTAM,ERR=900,END=900) FILEAT
        682                           CALL RFNAME(FILEAT,FILEAR,IUT0,IERR)
        683                     C
        684                     C    [9-07] NAME OF MID-NODE FILE [IN]
        685                           ILINE=ILINE+1
        686                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        687                           ILINE=ILINE+1
        688                           READ (IUT5,FMTAM,ERR=900,END=900) FILEMD
        689                     C
        690                     C    [9-08] NAME OF OVERSET FILE [IN]
        691                           ILINE=ILINE+1
        692                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        693                           ILINE=ILINE+1
        694                           READ (IUT5,FMTAM,ERR=900,END=900) FILEOS
        695                     C
        696                     C    [9-09] NAME OF AVERAGE FLOW FILE [OUT]
        697                           ILINE=ILINE+1
        698                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        699                           ILINE=ILINE+1
        700                           READ (IUT5,FMTAM,ERR=900,END=900) FILEAV
        701                     C
        702                     C    [9-10] NAME OF RMS FLOW FILE [OUT]
        703                           ILINE=ILINE+1
        704                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        705                           ILINE=ILINE+1
        706                           READ (IUT5,FMTAM,ERR=900,END=900) FILERM
        707                     C
        708                     C    [9-11] NAME OF STRESS FLOW FILE [OUT]
        709                           ILINE=ILINE+1
        710                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        711                           ILINE=ILINE+1
        712                           READ (IUT5,FMTAM,ERR=900,END=900) FILEST
        713                     C
        714                     C    [9-12] NAME OF CURRENT FLOW FILE [OUT]
        715                           ILINE=ILINE+1
        716                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        717                           ILINE=ILINE+1
        718                           READ (IUT5,FMTAM,ERR=900,END=900) FILEFS
        719                     C
        720                     C    [9-13] NAME OF SURFACE PRESSURE FILE [OUT]
        721                           ILINE=ILINE+1
        722                           READ (IUT5,FMTAM,ERR=900,END=900) HEADMY
        723                           ILINE=ILINE+1
        724                           READ (IUT5,FMTAM,ERR=900,END=900) FILEPS
        725                     C
        726                     C
        727     1                     IF(IPART.GE.1) THEN
        728     1                         IERRS = 0
        729     1               C
        730     1                         CALL MFNAME(FILEMS,FILE,IPART,IUT0,IERR)
        731     1                         FILEMS = FILE
        732     1                         IERRS = IERRS+IERR
        733     1               C
        734     1                         CALL MFNAME(FILEMR,FILE,IPART,IUT0,IERR)
        735     1                         FILEMR = FILE
        736     1                         IERRS = IERRS+IERR
        737     1               C
        738     1                         CALL MFNAME(FILEBC,FILE,IPART,IUT0,IERR)
        739     1                         FILEBC = FILE
        740     1                         IERRS = IERRS+IERR
        741     1               C
        742     1                         CALL MFNAME(FILEBR,FILE,IPART,IUT0,IERR)
        743     1                         FILEBR = FILE
        744     1                         IERRS = IERRS+IERR
        745     1               C
        746     1                         CALL MFNAME(FILEIF,FILE,IPART,IUT0,IERR)
        747     1                         FILEIF = FILE
        748     1                         IERRS = IERRS+IERR
        749     1               C
        750     1                         CALL MFNAME(FILEFF,FILE,IPART,IUT0,IERR)
        751     1                         FILEFF = FILE
        752     1                         IERRS = IERRS+IERR
        753     1               C
        754     1                         CALL MFNAME(FILEFR,FILE,IPART,IUT0,IERR)
        755     1                         FILEFR = FILE
        756     1                         IERRS = IERRS+IERR
        757     1               C
        758     1                         CALL MFNAME(FILEHS,FILE,IPART,IUT0,IERR)
        759     1                         FILEHS = FILE
        760     1                         IERRS = IERRS+IERR
        761     1               C
        762     1                         CALL MFNAME(FILEAT,FILE,IPART,IUT0,IERR)
        763     1                         FILEAT = FILE
        764     1                         IERRS = IERRS+IERR
        765     1               C
        766     1                         CALL MFNAME(FILEAR,FILE,IPART,IUT0,IERR)
        767     1                         FILEAR = FILE
        768     1                         IERRS = IERRS+IERR
        769     1               C
        770     1                         CALL MFNAME(FILEMD,FILE,IPART,IUT0,IERR)
        771     1                         FILEMD = FILE
        772     1                         IERRS = IERRS+IERR
        773     1               C
        774     1                         CALL MFNAME(FILEOS,FILE,IPART,IUT0,IERR)
        775     1                         FILEOS = FILE
        776     1                         IERRS = IERRS+IERR
        777     1               C
        778     1                         CALL MFNAME(FILEAV,FILE,IPART,IUT0,IERR)
        779     1                         FILEAV = FILE
        780     1                         IERRS = IERRS+IERR
        781     1               C
        782     1                         CALL MFNAME(FILERM,FILE,IPART,IUT0,IERR)
        783     1                         FILERM = FILE
        784     1                         IERRS = IERRS+IERR
        785     1               C
        786     1                         CALL MFNAME(FILEST,FILE,IPART,IUT0,IERR)
        787     1                         FILEST = FILE
        788     1                         IERRS = IERRS+IERR
        789     1               C
        790     1                         CALL MFNAME(FILEFS,FILE,IPART,IUT0,IERR)
        791     1                         FILEFS = FILE
        792     1                         IERRS = IERRS+IERR
        793     1               C
        794     1                         CALL MFNAME(FILEPS,FILE,IPART,IUT0,IERR)
        795     1                         FILEPS = FILE
        796     1                         IERRS = IERRS+IERR
        797     1               C
        798     1                         CALL MFNAME(FILEDM,FILE,IPART,IUT0,IERR)
        799     1                         FILEDM = FILE
        800     1                         IERRS = IERRS+IERR
        801     1               C
        802     1                         CALL MFNAME(FILEFM,FILE,IPART,IUT0,IERR)
        803     1                         FILEFM = FILE
        804     1                         IERRS = IERRS+IERR
        805     1               C
        806     2                         IF(IERRS.NE.0) THEN
        807     2                             WRITE(IUT0,*) ERRMSG
        808     2                             IERR = IERRS
        809     2                             RETURN
        810     2                         ENDIF
        811     1                     ENDIF
        812                     C
        813                           WRITE(IUT6,    *) 'MESH     DAT.FILE=' , FILEMS
        814                           WRITE(IUT6,    *) 'BOUNDARY DAT.FILE=' , FILEBC
        815                           WRITE(IUT6,    *) 'FLOW_IN  DAT.FILE=' , FILEIF
        816                           WRITE(IUT6,    *) 'FLOW_OUT DAT.FILE=' , FILEFF
        817                           WRITE(IUT6,    *) 'HISTORY  DAT.FILE=' , FILEHS
        818                           WRITE(IUT6,    *) 'ATTRIB.  DAT.FILE=' , FILEAT
        819                           WRITE(IUT6,    *) 'MID-NODE DAT.FILE=' , FILEMD
        820                           WRITE(IUT6,    *) 'OVERSET  DAT.FILE=' , FILEOS
        821                           WRITE(IUT6,    *) 'AVERAGE  DAT.FILE=' , FILEAV
        822                           WRITE(IUT6,    *) 'RMS      DAT.FILE=' , FILERM
        823                           WRITE(IUT6,    *) 'STRESS   DAT.FILE=' , FILEST
        824                           WRITE(IUT6,    *) 'SAMPLING DAT.FILE=' , FILEFS
        825                           WRITE(IUT6,    *) 'SURFACE  DAT.FILE=' , FILEPS
        826                           WRITE(IUT6,    *) 'DEF-MESH DAT.FILE=' , FILEDM
        827                     C
        828                           RHO000=RHOF
        829                           VISCM=VISCM/(U000*D000)
        830                           RHOF  =RHOF/RHO000
        831                           RHOS  =RHOS/RHO000
        832                           CPF   =CPF/(U000*U000/T000)
        833                           CPS   =CPS/(U000*U000/T000)
        834                           CONDF =CONDF/(RHO000*U000*U000*U000*D000/T000)
        835                           CONDS =CONDS/(RHO000*U000*U000*U000*D000/T000)
        836                     C
        837                           OMEGA=OMEGA  /(U000/D000)
        838                           DT=DT        /(D000/U000)
        839                           TFINAL=TFINAL/(D000/U000)
        840                           UFINAL=UFINAL/U000
        841                           VFINAL=VFINAL/U000
        842                           WFINAL=WFINAL/U000
        843                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 616
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 160, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      ZSMPL, XSMPL, YSMPL
                              <<< Loop-information  End >>>
        844     1  pp    v            DO 30 ISMPL = 1 , NSMPL
        845     1   p    v                XSMPL(ISMPL)=XSMPL(ISMPL)/D000
        846     1   p    v                YSMPL(ISMPL)=YSMPL(ISMPL)/D000
        847     1   p    v                ZSMPL(ISMPL)=ZSMPL(ISMPL)/D000
        848     1   p    v       30    CONTINUE
        849                     C
        850                           WRITE(IUT6,*) '  LESRPX SUCCESFULLY TERMINATED'
        851                           WRITE(IUT6,*)
        852                     C
        853                           RETURN
        854                     C
        855                       610 FORMAT(' LESRPX: READING CALCULATION PARAMETERS AND FILE NAMES')
        856                       620 FORMAT(' COMGEN=',A60)
        857                       621 FORMAT(' ITRANS=', I12,     ' IMODEL=', I12,
        858                          *       ' IFORM =', I12,     /
        859                          *       ' IPRESS=', I12,     ' FSMACH=', 1PE12.5  )
        860                       622 FORMAT(' D000  =', 1PE12.5, ' U000  =', 1PE12.5,
        861                          *       ' T000  =', 1PE12.5, ' TREF  =', 1PE12.5  )
        862                     C 623 FORMAT(' IHEAT =', I12,     ' ICAV  =', I12,
        863                     C    *       ' IBUSNQ=', I12                           )
        864                       623 FORMAT(' IHEAT =', I12,  ' ISOLID=', I12,
        865                          *       ' ICAV  =', I12,  ' IBUSNQ=', I12       )
        866                       624 FORMAT(' NFRAME=', I12,    ' ISET  =', I12,
        867                          *     ' JSET  =', I12,    ' OMEGA =', 1PE12.5   )
        868                       625 FORMAT(' VISCM =', 1PE12.5, ' SIGMA =', 1PE12.5,
        869                          *     ' RHOF  =', 1PE12.5, ' RHOS  =', 1PE12.5  )
        870                       626 FORMAT(' CONDF =', 1PE12.5, ' CONDS =', 1PE12.5,
        871                          *     ' CPF   =' ,1PE12.5, ' CPS   =', 1PE12.5  )
        872                       627 FORMAT(' ISTART=', I12,     ' NTIME =', I12,
        873                          *     ' DT    =', 1PE12.5, /
        874                          *     ' NMAXSE=', I12,     ' NMAXSI=', I12      )
        875                       628 FORMAT(' NMAXT =', I12,     ' NMAXP =', I12,/
        876                          *     ' EPST  =' ,1PE12.5, ' EPSP  =', 1PE12.5,
        877                          *     ' EPSS  =' ,1PE12.5                       )
        878                       629 FORMAT(' TFINAL=', 1PE12.5, ' UFINAL=', 1PE12.5,
        879                          *     ' VFINAL=' ,1PE12.5, ' WFINAL=', 1PE12.5  )
        880                       630 FORMAT(' IOUT  =', I12,     ' INTFSV=', I12,
        881                          *     ' INTPSV=' ,  I12.5                       )
        882                       631 FORMAT(' NSMPL =', I12                           )
        883                       632 FORMAT(' LSMPL =', A15    , ' XSMPL =' ,1PE12.5,
        884                          *       ' YSMPL =', 1PE12.5, ' ZSMPL =' ,1PE12.5  )
        885                       635 FORMAT(' IFRAME=', I12    , ' UFRAME=' ,1PE12.5,
        886                          &       ' VFRAME=', 1PE12.5, ' WFRAME=' ,1PE12.5)
        887                      701  FORMAT(A15 , '  X=' , F11.5 , '  Y=', F11.5 , '  Z=', F11.5 )
        888                     C
        889                       900 CONTINUE
        890                           WRITE(IUT0,*) ERRMSG
        891                           WRITE(IUT0,'(A28,I8)') EREXP0, ILINE
        892                           IERR=1
        893                           RETURN
        894                     C
        895                           END

 Diagnostic messages: program name(LESRPX)
   jwd8220o-i  "lesrpx.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd5302p-i  "lesrpx.f", line 483: 部分的な並列化による性能向上が得られない可能性があるため、このDOループの並列化を抑止しました。
   jwd6302s-i  "lesrpx.f", line 483: 部分的なSIMD化による性能向上が得られない可能性があるため、このDOループのSIMD化を抑止しました。
   jwd8664o-i  "lesrpx.f", line 483: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd5208p-i  "lesrpx.f", line 484: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:WFRAM0)
   jwd5208p-i  "lesrpx.f", line 484: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:VFRAM0)
   jwd5208p-i  "lesrpx.f", line 484: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:UFRAM0)
   jwd5121p-i  "lesrpx.f", line 484: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6208s-i  "lesrpx.f", line 484: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:WFRAM0)
   jwd6208s-i  "lesrpx.f", line 484: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:VFRAM0)
   jwd6208s-i  "lesrpx.f", line 484: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループはSIMD化できません。(名前:UFRAM0)
   jwd6121s-i  "lesrpx.f", line 484: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5121p-i  "lesrpx.f", line 485: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "lesrpx.f", line 485: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd8206o-i  "lesrpx.f", line 487: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "lesrpx.f", line 488: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "lesrpx.f", line 489: 除算を逆数の乗算に変更しました。
   jwd5131p-i  "lesrpx.f", line 617: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "lesrpx.f", line 617: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8664o-i  "lesrpx.f", line 617: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "lesrpx.f", line 832: 多項式の演算順序を変更しました。
   jwd8209o-i  "lesrpx.f", line 833: 多項式の演算順序を変更しました。
   jwd8209o-i  "lesrpx.f", line 834: 多項式の演算順序を変更しました。
   jwd8209o-i  "lesrpx.f", line 835: 多項式の演算順序を変更しました。
   jwd8209o-i  "lesrpx.f", line 837: 多項式の演算順序を変更しました。
   jwd8209o-i  "lesrpx.f", line 838: 多項式の演算順序を変更しました。
   jwd8209o-i  "lesrpx.f", line 839: 多項式の演算順序を変更しました。
   jwd5001p-i  "lesrpx.f", line 844: このDOループを並列化しました。(名前:ISMPL)
   jwd6001s-i  "lesrpx.f", line 844: このDOループをSIMD化しました。(名前:ISMPL)
   jwd8204o-i  "lesrpx.f", line 844: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "lesrpx.f", line 844: ループの繰返し数が160回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8206o-i  "lesrpx.f", line 845: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "lesrpx.f", line 846: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "lesrpx.f", line 847: 除算を逆数の乗算に変更しました。

 Procedure information
   Lines      : 975
   Statements : 567
   Stack(byte): 20512
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 975
   Total statements : 567
   Total stack(byte): 20512
   Total prefetch num: 0

