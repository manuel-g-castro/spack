
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:33 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : mkface.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "MKFACE"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE : MKFACE                                                C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY H.YOSHIMURA         C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         11                     C                                                                      C
         12                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         13                     C                                                                      C
         14                     C======================================================================C
         15                           SUBROUTINE MKFACE(IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBF,
         16                          *                  MBFDOM,
         17                          *                  NODE,LOCAL,NEP,IENP,X,Y,Z,FE,
         18                          *                  NPWALL,NPINLT,NPFREE,NPSYMT,
         19                          *                  LPWALL,LPINLT,LPFREE,LPSYMT,
         20                          *                  MDOM,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
         21                          *                  LEFACE,NFACE,NFACE1,NFACE2,NFACE3,LFACE,
         22                          *                  AVEC,DVEC,
         23                          *                  NFWALL,NFINLT,NFFREE,NFSYMT,
         24                          *                  LFWALL,LFINLT,LFFREE,LFSYMT,FINLT,
         25                          *                  NDOMF,LDOMF,NBFDOM,IFSLF,IFSND,IMASS,
         26                          *                  WRK01,WRK02,WRK03,LWRK01,
         27                          *                  FBWRK1,FBWRK2,FBWRK3,
         28                          *                  BUFSND,BUFRCV,IUT6,IUT0,IERR)
         29                     C
         30                           IMPLICIT NONE
         31                     C
         32                     C     [INPUT]
         33                           INTEGER*4 IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBF,MBFDOM
         34                           INTEGER*4 NODE(N2,NE),LOCAL(NSP,NS,4),NEP(NP),IENP(MEP,NP)
         35                           REAL*8    X(NP),Y(NP),Z(NP)
         36                           REAL*4    FE(NE)
         37                           INTEGER*4 NPWALL,NPINLT,NPFREE,NPSYMT
         38                           INTEGER*4 LPWALL(NPWALL),LPINLT(NPINLT),
         39                          *          LPFREE(NPFREE),LPSYMT(NPSYMT)
         40                           INTEGER*4 MDOM,NDOM,MBPDOM
         41                           INTEGER*4 LDOM(MDOM),NBPDOM(MDOM),
         42                          *          IPSLF(MBPDOM,MDOM),IPSND(MBPDOM,MDOM)
         43                     C
         44                     C     [IN-OUTPUT]
         45                           INTEGER*4 LEFACE(6,NE),NFACE,NFACE1,NFACE2,NFACE3,LFACE(5,MFACE)
         46                           REAL*4    AVEC(4,MFACE),DVEC(3,MFACE)
         47                           INTEGER*4 NFWALL,NFINLT,NFFREE,NFSYMT
         48                           INTEGER*4 LFWALL(MBF),LFINLT(MBF),LFFREE(MBF),LFSYMT(MBF)
         49                           REAL*4    FINLT(MBF)
         50                           INTEGER*4 NDOMF,LDOMF(MDOM),NBFDOM(MDOM)
         51                           INTEGER*4 IFSLF(MBFDOM,MDOM),IFSND(MBFDOM,MDOM)
         52                           INTEGER*4 IMASS,IUT6,IUT0,IERR
         53                     C
         54                     C     [WORK]
         55                           INTEGER*4 LWRK01(NP)
         56                           REAL*4    WRK01(NE),WRK02(NE),WRK03(NE),
         57                          *          FBWRK1(MBF),FBWRK2(MBF),FBWRK3(MBF),BUFSND,BUFRCV
         58                     C
         59                     C     [LOCAL]
         60                           INTEGER*4 IP,IP1,IP2,IP3,IP4,IFACE,IFACE2,IFACE3,IA0,IA1,IB0,IB1
         61                           INTEGER*4 IE,IE1,IE2,NSD,IETYPE,NLS,IS,I,
         62                          *          IERRA,NERRFC,IDIM,MAXBUF
         63                           REAL*8    XP,YP,ZP
         64                           REAL*4    AFINLT,AFFREE,VAL1,VAL2
         65                     C
         66                           CHARACTER*60 ERMSGC
         67                          & /' ## SUBROUTINE MKFACE: ERROR OCCURED             ; RETURNED' /
         68                     C
         69                     CC
         70                     CCHY [1] INITIALIZE
         71                     CC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 364
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.66, ITR: 48, MVE: 2)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DVEC, AVEC, LFACE, (unknown)
                              <<< Loop-information  End >>>
         72     1  pp    v            DO 1000 IFACE=1,MFACE
         73     1   p    v               LFACE(1,IFACE)=0
         74     1   p    v               LFACE(2,IFACE)=0
         75     1   p    v               LFACE(3,IFACE)=0
         76     1   p    v               LFACE(4,IFACE)=0
         77     1   p    v               LFACE(5,IFACE)=0
         78     1   p    v               AVEC (1,IFACE)=0.0E0
         79     1   p    v               AVEC (2,IFACE)=0.0E0
         80     1   p    v               AVEC (3,IFACE)=0.0E0
         81     1   p    v               AVEC (4,IFACE)=0.0E0
         82     1   p    v               DVEC (1,IFACE)=0.0E0
         83     1   p    v               DVEC (2,IFACE)=0.0E0
         84     1   p    v               DVEC (3,IFACE)=0.0E0
         85     1   p    v       1000 CONTINUE
         86                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1600
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFACE, (unknown)
                              <<< Loop-information  End >>>
         87     1  pp   4v            DO 2000 IE=1,NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    COLLAPSED
                              <<< Loop-information  End >>>
         88     2   p   4                DO 2100 IS=1,6
         89     2   p   4v                  LEFACE(IS,IE)=0
         90     2   p   4v       2100    CONTINUE
         91     1   p            2000 CONTINUE
         92                     CC
         93                     CCHY [2] MKFAC1 : MAKE FACE LIST FOR INNER REGION
         94                     CC
         95                           WRITE(IUT6,*)
         96                           WRITE(IUT6,*) ' **MKFAC1** : MAKING FACE LIST FOR INNER REGION'
         97                           NFACE=0
         98                           CALL MKFAC1(IPART,NE,NP,N2,NSP,NS,MEP,MFACE,
         99                          *            NODE,LOCAL,NEP,IENP,X,Y,Z,
        100                          *            NFACE,LFACE,AVEC,DVEC,
        101                          *            LEFACE,IUT6,IUT0,IERR)
        102                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        103                           IF(IERRA.NE.0) GOTO 9999
        104                           NFACE1=NFACE
        105                           WRITE(IUT6,*) ' NUMBER OF FACE = ',NFACE1,NFACE
        106                           WRITE(IUT6,*) ' **MKFAC1** : DONE'
        107                     C
        108                     CC
        109                     CCHY [3] MKFAC2 : MAKE BOUNDARY FACE LIST
        110                     CC
        111                           WRITE(IUT6,*)
        112                           WRITE(IUT6,*) ' **MKFAC2** : MAKING BOUNDARY FACE LIST'
        113                           CALL MKFAC2(IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBF,
        114                          *            NODE,LOCAL,NEP,IENP,X,Y,Z,FE,
        115                          *            NPWALL,NPINLT,NPFREE,NPSYMT,
        116                          *            LPWALL,LPINLT,LPFREE,LPSYMT,
        117                          *            NFACE,LFACE,AVEC,DVEC,
        118                          *            NFWALL,NFINLT,NFFREE,NFSYMT,
        119                          *            LFWALL,LFINLT,LFFREE,LFSYMT,FINLT,
        120                          *            LWRK01,LEFACE,IUT6,IUT0,IERR)
        121                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        122                           IF(IERRA.NE.0) GOTO 9999
        123                           NFACE2=NFACE-NFACE1
        124                           WRITE(IUT6,*) ' NUMBER OF FACE = ',NFACE2,NFACE
        125                           WRITE(IUT6,*) ' **MKFAC2** : DONE'
        126                     C
        127                           AFINLT=FLOAT(NFINLT)
        128                           AFFREE=FLOAT(NFFREE)
        129     1                     IF(IPART.GE.1) THEN
        130     1                        CALL DDCOM2(AFINLT, VAL1)
        131     1                        CALL DDCOM2(AFFREE, VAL2)
        132     1                        AFINLT=VAL1
        133     1                        AFFREE=VAL2
        134     1                     ENDIF
        135     1                     IF(AFINLT.GE.1.0E0.AND.AFFREE.GE.1.0E0) THEN
        136     1                        WRITE(IUT6,*) ' SET MASS IMBALANCE CORRECTION TO ACTIVE'
        137     1                        WRITE(IUT6,*) ' FOR VOF CALCULATION.'
        138     1                        IMASS=1
        139     1                     ENDIF
        140                     C
        141                     CC
        142                     CCHY [4] MKFAC3 : MAKE INTER-CONNECT BOUNDARY FACE LIST
        143                     CC
        144                           IF (IPART.EQ.0) GOTO 3000
        145                           WRITE(IUT6,*)
        146                           WRITE(IUT6,*)
        147                          *' **MKFAC3** : MAKING INTER-CONNECT BOUNDARY FACE LIST'
        148                           CALL MKFAC3(IPART,NE,NP,N2,NSP,NS,MEP,MFACE,MBFDOM,
        149                          *            NODE,LOCAL,NEP,IENP,X,Y,Z,
        150                          *            MDOM,NDOM,MBPDOM,LDOM,NBPDOM,IPSLF,IPSND,
        151                          *            NFACE,NFACE1,NFACE2,LFACE,AVEC,DVEC,
        152                          *            LWRK01,LEFACE,IUT6,IUT0,IERR)
        153                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        154                           IF(IERRA.NE.0) GOTO 9999
        155                           NFACE3=NFACE-NFACE2-NFACE1
        156                           WRITE(IUT6,*) ' NUMBER OF FACE = ',NFACE3,NFACE
        157                           WRITE(IUT6,*) ' **MKFAC3** : DONE'
        158                     C
        159                      3000 CONTINUE
        160                     C
        161                     CC
        162                     CCHY [5] CHECK FACE LIST
        163                     CC
        164                           WRITE(IUT6,*)
        165                           WRITE(IUT6,*) ' **MKFACE** : CHECKING FACE LIST'
        166                           NERRFC=0
        167     1                     DO 4000 IE=1,NE
        168     2                        IF(     NODE(8,IE).GE.1) THEN ! HEX
        169     2                           IETYPE=4
        170     2                           NLS=6
        171     2                        ELSE IF(NODE(6,IE).GE.1) THEN ! PRS
        172     2                           IETYPE=3
        173     2                           NLS=5
        174     2                        ELSE IF(NODE(5,IE).GE.1) THEN ! PYR
        175     2                           IETYPE=2
        176     2                           NLS=5
        177     2                        ELSE                          ! TET
        178     2                           IETYPE=1
        179     2                           NLS=4
        180     2                        ENDIF
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEFACE
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 3
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        181     2   s    s               DO 4100 IS=1,NLS
        182     2   p    v                  IF (LEFACE(IS,IE).NE.0) GOTO 4100
        183     2               C
        184     2   p    v                  NERRFC=NERRFC+1
        185     2   p    v                  IP1=NODE(LOCAL(1,IS,IETYPE),IE)
        186     2   p    v                  IP2=NODE(LOCAL(2,IS,IETYPE),IE)
        187     2   p    v                  IP3=NODE(LOCAL(3,IS,IETYPE),IE)
        188     2               C
        189     3   p    v                  IF ((IETYPE.EQ.1            ).OR. ! TRI
        190     3                    *          (IETYPE.EQ.2.AND.IS.LE.4).OR.
        191     3                    *          (IETYPE.EQ.3.AND.IS.LE.2)) THEN
        192     3   p    v                     XP=(X(IP1)+X(IP2)+X(IP3))/3.0E0
        193     3   p    v                     YP=(Y(IP1)+Y(IP2)+Y(IP3))/3.0E0
        194     3   p    v                     ZP=(Z(IP1)+Z(IP2)+Z(IP3))/3.0E0
        195     3   p    v                  ELSE                              ! QUAD
        196     3   p    v                     IP4=NODE(LOCAL(4,IS,IETYPE),IE)
        197     3   p    v                     XP=(X(IP1)+X(IP2)+X(IP3)+X(IP4))/4.0E0
        198     3   p    v                     YP=(Y(IP1)+Y(IP2)+Y(IP3)+Y(IP4))/4.0E0
        199     3   p    v                     ZP=(Z(IP1)+Z(IP2)+Z(IP3)+Z(IP4))/4.0E0
        200     3   p    v                  ENDIF
        201     2   m    m                  WRITE(IUT6,'(A5,2I8,3E13.5)') 'N.F.',IE,IS,XP,YP,ZP
        202     2   p    v       4100    CONTINUE
        203     1                4000 CONTINUE
        204     1                     IF (NERRFC.GT.0) THEN
        205     1                        WRITE(IUT6,*) 'ERROR FACES ARE EXIST'
        206     1                        GOTO 9999
        207     1                     ENDIF
        208                           WRITE(IUT6,*) ' **MKFACE** : DONE'
        209                     C
        210                     CC
        211                     CCHY [6] SET BOUNDARY CONDITION TO LEFACE
        212                     CC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 696
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 176, MVE: 5)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFACE, (unknown)
                              <<< Loop-information  End >>>
        213     1   m   2v            DO 4200 IFACE2=1,NFACE2
        214     1   p   2v               IFACE=NFACE1+IFACE2
        215     1   p   2v               IE=LFACE(1,IFACE)
        216     1   p   2v               IS=LFACE(3,IFACE)
        217     1   m   2v               LEFACE(IS,IE)=0
        218     1   p   2v       4200 CONTINUE
        219                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 288, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFACE
                              <<< Loop-information  End >>>
        220     1   s   2v            DO 4300 IFACE3=1,NFACE3
        221     1   p   2v               IFACE=NFACE1+NFACE2+IFACE3
        222     1   p   2v               IE=LFACE(1,IFACE)
        223     1   p   2v               IS=LFACE(3,IFACE)
        224     1   m   2v               LEFACE(IS,IE)=-IFACE3
        225     1   p   2v       4300 CONTINUE
        226                     C
        227                     CC
        228                     CCHY [7] GENERATE NEIGHBORING DOMAIN FACE LISTS
        229                     CC
        230                           IF (IPART.EQ.0) GOTO 5000
        231                           WRITE(IUT6,*)
        232                           WRITE(IUT6,*)
        233                          *' **MKFACE** : GENERATING NEIGHBORING DOMAIN FACE LISTS'
        234                           CALL DDFAC0(IPART,NFACE3,LFACE(1,NFACE1+NFACE2+1),MDOM,MBFDOM,
        235                          *            NDOMF,LDOMF,NBFDOM,IFSLF,IFSND,IUT0,IERR)
        236                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        237                           IF(IERRA.NE.0) GOTO 9999
        238                     C
        239                           IDIM=0
        240                           MAXBUF=5*NFACE
        241                           CALL DDFAC1(IDIM,MBFDOM,NDOMF,LDOMF,NBFDOM,IFSLF,IFSND,NFACE3,
        242                          *            LWRK01,LWRK01,LWRK01,BUFSND,BUFRCV,MAXBUF,IUT0,IERR)
        243                           CALL ERRCHK(IUT6,IPART,1,IERR,IERRA)
        244                           IF(IERRA.NE.0) GOTO 9999
        245                           WRITE(IUT6,*) ' **MKFACE** : DONE'
        246                     C
        247                      5000 CONTINUE
        248                     C
        249                     CC
        250                     CCHY [8] CALCULATE DIRECTION VECTOR FROM DONOR TO ACCEPTOR
        251                     CC
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 46
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WRK01, WRK02, WRK03, (unknown)
                              <<< Loop-information  End >>>
        252     1  pp                 DO 6000 IE=1,NE
        253     1   p                    XP=0.0E0
        254     1   p                    YP=0.0E0
        255     1   p                    ZP=0.0E0
        256     1   p                    NSD=0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        257     2   p   fs               DO 6100 I=1,8
        258     2   p   fv                  IP=NODE(I,IE)
        259     2   p   fs                  IF (IP.EQ.0) GOTO 6100
        260     2   p   fs                  XP=XP+X(IP)
        261     2   p   fs                  YP=YP+Y(IP)
        262     2   p   fs                  ZP=ZP+Z(IP)
        263     2   p   fs                  NSD=NSD+1
        264     2   p   fv       6100    CONTINUE
        265     1   p                    WRK01(IE)=XP/FLOAT(NSD)
        266     1   p                    WRK02(IE)=YP/FLOAT(NSD)
        267     1   p                    WRK03(IE)=ZP/FLOAT(NSD)
        268     1   p            6000 CONTINUE
        269                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 500
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.71, ITR: 288, MVE: 4)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFACE, FBWRK3, FBWRK2, FBWRK1, (unknown)
                              <<< Loop-information  End >>>
        270     1  pp   2v            DO 6200 IFACE3=1,NFACE3
        271     1   p   2v               IFACE=NFACE1+NFACE2+IFACE3
        272     1   p   2v               IE=LFACE(1,IFACE)
        273     1   p   2v               FBWRK1(IFACE3)=WRK01(IE)
        274     1   p   2v               FBWRK2(IFACE3)=WRK02(IE)
        275     1   p   2v               FBWRK3(IFACE3)=WRK03(IE)
        276     1   p   2v       6200 CONTINUE
        277                     C
        278                           IF (IPART.EQ.0) GOTO 6250
        279                           IDIM=3
        280                           CALL DDFAC1(IDIM,MBFDOM,NDOMF,LDOMF,NBFDOM,IFSLF,IFSND,NFACE3,
        281                          *            FBWRK1,FBWRK2,FBWRK3,BUFSND,BUFRCV,MAXBUF,IUT0,IERR)
        282                           CALL ERCHK2(IUT6,IPART,1,IERR,IERRA)
        283                           IF(IERRA.NE.0) GOTO 9999
        284                     C
        285                      6250 CONTINUE
        286                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 180
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LFACE, (unknown)
                              <<< Loop-information  End >>>
        287     1  pp    s            DO 6300 IFACE=1,NFACE
        288     1   p    v               IE1=LFACE(1,IFACE)
        289     1   p    v               IE2=LFACE(2,IFACE)
        290     1               C
        291     1   p    s               IF (IE2.EQ.0) GOTO 6300 ! BOUNDARY FACE
        292     1               C
        293     2   p    s               IF (IE2.LT.0) THEN
        294     2   p    s                  IFACE3=IFACE-NFACE1-NFACE2
        295     2   p    s                  DVEC(1,IFACE)=FBWRK1(IFACE3)-WRK01(IE1)
        296     2   p    s                  DVEC(2,IFACE)=FBWRK2(IFACE3)-WRK02(IE1)
        297     2   p    s                  DVEC(3,IFACE)=FBWRK3(IFACE3)-WRK03(IE1)
        298     2   p    s               ELSE
        299     2   p    s                  DVEC(1,IFACE)=WRK01(IE2)-WRK01(IE1)
        300     2   p    s                  DVEC(2,IFACE)=WRK02(IE2)-WRK02(IE1)
        301     2   p    s                  DVEC(3,IFACE)=WRK03(IE2)-WRK03(IE1)
        302     2   p    s               ENDIF
        303     1   p    v       6300 CONTINUE
        304                     C
        305                           RETURN
        306                     C
        307                      9999 CONTINUE
        308                           WRITE(IUT0,*) ERMSGC
        309                           IERR=1
        310                           RETURN
        311                     C
        312                           END
        313                     C

 Diagnostic messages: program name(MKFACE)
   jwd8220o-i  "mkface.f", line 15: 副作用の可能性のある最適化を行いました。
   jwd2006i-i  "mkface.f", line 60: この名前'IB1'は、宣言だけされていて引用されていません。
   jwd2006i-i  "mkface.f", line 60: この名前'IB0'は、宣言だけされていて引用されていません。
   jwd2006i-i  "mkface.f", line 60: この名前'IA1'は、宣言だけされていて引用されていません。
   jwd2006i-i  "mkface.f", line 60: この名前'IA0'は、宣言だけされていて引用されていません。
   jwd5001p-i  "mkface.f", line 72: このDOループを並列化しました。(名前:IFACE)
   jwd6001s-i  "mkface.f", line 72: このDOループをSIMD化しました。(名前:IFACE)
   jwd8204o-i  "mkface.f", line 72: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "mkface.f", line 72: ループの繰返し数が48回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd6002s-i  "mkface.f", line 87: このDOループをSIMD化しました。
   jwd8663o-i  "mkface.f", line 87: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "mkface.f", line 87: ループを展開数4回でアンローリングしました。
   jwd5002p-i  "mkface.f", line 88: このDOループを並列化しました。
   jwd8330o-i  "mkface.f", line 89: 多重DOループをDO変数IE,...,ISで1重化しました。
   jwd5121p-i  "mkface.f", line 167: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6229s-i  "mkface.f", line 181: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8664o-i  "mkface.f", line 181: ループ内に関数呼出しなどの最適化対象外の命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8206o-i  "mkface.f", line 192: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "mkface.f", line 193: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "mkface.f", line 194: 除算を逆数の乗算に変更しました。
   jwd8209o-i  "mkface.f", line 197: 多項式の演算順序を変更しました。
   jwd8209o-i  "mkface.f", line 198: 多項式の演算順序を変更しました。
   jwd8209o-i  "mkface.f", line 199: 多項式の演算順序を変更しました。
   jwd5121p-i  "mkface.f", line 201: DOループ内に、自動並列化の制約となる入出力文が存在します。
   jwd6121s-i  "mkface.f", line 201: DOループ内に、SIMD化の制約となる入出力文が存在します。
   jwd5005p-i  "mkface.f", line 213: このDOループを部分的に並列化しました。(名前:IFACE2)
   jwd6001s-i  "mkface.f", line 213: このDOループをSIMD化しました。(名前:IFACE2)
   jwd8204o-i  "mkface.f", line 213: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "mkface.f", line 213: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "mkface.f", line 217: 配列'LEFACE'の添字式中の変数'IE'をループ中で定義しているため、このDOループは並列化できません。
   jwd6001s-i  "mkface.f", line 220: このDOループをSIMD化しました。(名前:IFACE3)
   jwd8204o-i  "mkface.f", line 220: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "mkface.f", line 220: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5209p-i  "mkface.f", line 224: 配列'LEFACE'の添字式中の変数'IE'をループ中で定義しているため、このDOループは並列化できません。
   jwd5001p-i  "mkface.f", line 252: このDOループを並列化しました。(名前:IE)
   jwd8670o-i  "mkface.f", line 252: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd6229s-i  "mkface.f", line 257: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8203o-i  "mkface.f", line 257: ループをフルアンローリングしました。
   jwd8206o-i  "mkface.f", line 265: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "mkface.f", line 266: 除算を逆数の乗算に変更しました。
   jwd8206o-i  "mkface.f", line 267: 除算を逆数の乗算に変更しました。
   jwd5001p-i  "mkface.f", line 270: このDOループを並列化しました。(名前:IFACE3)
   jwd6001s-i  "mkface.f", line 270: このDOループをSIMD化しました。(名前:IFACE3)
   jwd8204o-i  "mkface.f", line 270: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "mkface.f", line 270: ループの繰返し数が288回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5001p-i  "mkface.f", line 287: このDOループを並列化しました。(名前:IFACE)
   jwd6229s-i  "mkface.f", line 287: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "mkface.f", line 287: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。

 Procedure information
   Lines      : 313
   Statements : 201
   Stack(byte): 4944
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 313
   Total statements : 201
   Total stack(byte): 4944
   Total prefetch num: 0

