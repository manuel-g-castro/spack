
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:03 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : flt3dx.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "FLT3DX"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.8.1                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE : FLT3DX                                                C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY Y.YAMADE            C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C CONTACT ADDRESS : IIS, THE UNIVERSITY OF TOKYO, CISS                 C
         11                     C                                                                      C
         12                     C THERMO-FLUID ANALYSIS SOLVERS FOR LARGE-SCALE-ASSEMBLY               C
         13                     C                                                                      C
         14                     C======================================================================C
         15                           SUBROUTINE FLT3DX(IFILTR,X,Y,Z,NODE,NE,NP,N2,NEX,FILTER)
         16                     C
         17                           IMPLICIT NONE
         18                     C
         19                           INTEGER*4 IFILTR,NODE,NE,NP,N2,NEX
         20                           REAL*4    X,Y,Z,FILTER
         21                     C
         22                           INTEGER*4 NETET,NEPRD,NEWED,NEHEX,NTET,NWED,NHEX,
         23                          *          IES1,IEE1,IES2,IEE2,IES3,IEE3,IES4,IEE4,IE,I,
         24                          *          NPRD,I1,I2
         25                           REAL*4    DIST
         26                     C
         27                           DIMENSION X(NP),Y(NP),Z(NP),NODE(N2,NE),FILTER(NE),NEX(8)
         28                     C
         29                     CC    INTEGER*4 LSIDE(2,6)
         30                     CC   & / 2,3, 3,4, 4,2, 1,2, 1,3, 1,4 /
         31                           INTEGER*4 EDGTET(2,6)
         32                          & / 2,3, 3,4, 4,2, 1,2, 1,3, 1,4 /
         33                           INTEGER*4 EDGHEX(2,12)
         34                          & / 1,5, 2,6, 3,7, 4,8,
         35                          &   1,4, 2,3, 6,7, 5,8,
         36                          &   1,2, 4,3, 8,7, 5,6 /
         37                           INTEGER*4 EDGPRS(2,9)
         38                          & / 1,2, 2,3, 3,1, 4,5, 5,6, 6,4,
         39                          &   1,4, 2,5, 3,6 /
         40                           INTEGER*4 EDGPYR(2,8)
         41                          & / 1,2, 2,3, 3,4, 4,1,
         42                          &   5,1, 5,2, 5,3, 5,4 /
         43                     C
         44                     C
         45                     C
         46                     C      COMPUTE ELEMENT (GRID) FILTER WIDTH
         47                     C         ( 3-D CALCULATION : SINGLE WORD & MULTU ELEMENT VERSION )
         48                     C                                           CODED BASED ON 'FILT3D'
         49                     C
         50                     C     ARGUMENT LISTINGS
         51                     C       (1) INPUT
         52                     C          IFILTR      ; CONTROLS GRID-FILTER WIDTH COMPUTATIONS AS:
         53                     C                   1 --- THE MINIMUM SIDE LENGTH
         54                     C                   2 --- INVERSE SQUARE AVERAGE OF SIDE LENGTH
         55                     C          X      (IP) ; X-DIR. COORDINATE         OF NODE
         56                     C          Y      (IP) ; Y-DIR. COORDINATE         OF NODE
         57                     C          Z      (IP) ; Y-DIR. COORDINATE         OF NODE
         58                     C          NODE (I,IE) ; NODE TABLE
         59                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         60                     C          NP          ; NUMBER OF TOTAL    NODES
         61                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         62                     C
         63                     C       (2) OUTPUT
         64                     C          FILTER (IE) ; ELEMENT FILTER WIDTH
         65                     C
         66                     C
         67                           NETET=NEX(1)
         68                           NEPRD=NEX(2)
         69                           NEWED=NEX(3)
         70                           NEHEX=NEX(4)
         71                           NE   =NETET+NEPRD+NEWED+NEHEX
         72                     C
         73                           NTET =NEX(5)
         74                           NPRD =NEX(6)
         75                           NWED =NEX(7)
         76                           NHEX =NEX(8)
         77                     C
         78                     C     * TET *
         79                           IES1=1
         80                           IEE1=NETET
         81                     C
         82                     C     * PYRAMID *
         83                           IES2=NETET+1
         84                           IEE2=NETET+NEPRD
         85                     C
         86                     C     * WEDGE *
         87                           IES3=NETET+NEPRD+1
         88                           IEE3=NETET+NEPRD+NEWED
         89                     C
         90                     C     * HEX *
         91                           IES4=NETET+NEPRD+NEWED+1
         92                           IEE4=NETET+NEPRD+NEWED+NEHEX
         93                     C
         94     1                     IF(IFILTR.EQ.2) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
         95     2  pp   4v                DO 100 IE = 1 , NE
         96     2   p   4v                    FILTER(IE) = 0.E0
         97     2   p   4v        100     CONTINUE
         98     1               C
         99     1               C         * TET *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        100     2                         DO 210 I = 1 , 6
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    FUSED(lines: 101,108)
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.73, ITR: 352, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        101     3  pp   2v                    DO 200 IE = IES1, IEE1
        102     3   p   2v                        I1 = NODE(EDGTET(1, I),IE)
        103     3   p   2v                        I2 = NODE(EDGTET(2, I),IE)
        104     3   p   2v                        FILTER(IE) = FILTER(IE)
        105     3                    &        +1.E0/((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2+(Z(I2)-Z(I1))**2)
        106     3   p   2v        200         CONTINUE
        107     2   p    v        210     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
        108     2                         DO 300 IE = IES1, IEE1
        109     2                             FILTER(IE) = SQRT(6.E0/FILTER(IE))
        110     2                 300     CONTINUE
        111     1               C
        112     1               C         * PYRAMID *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        113     2                         DO 211 I = 1 , 8
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    FUSED(lines: 114,121)
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.73, ITR: 352, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        114     3  pp   2v                    DO 201 IE = IES2, IEE2
        115     3   p   2v                        I1 = NODE(EDGPYR(1, I),IE)
        116     3   p   2v                        I2 = NODE(EDGPYR(2, I),IE)
        117     3   p   2v                        FILTER(IE) = FILTER(IE)
        118     3                    &        +1.E0/((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2+(Z(I2)-Z(I1))**2)
        119     3   p   2v       201          CONTINUE
        120     2   p    v       211      CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
        121     2                         DO 301 IE = IES2, IEE2
        122     2                             FILTER(IE) = SQRT(8.E0/FILTER(IE))
        123     2                301       CONTINUE
        124     1               C
        125     1               C         * WEDGE *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        126     2                         DO 212 I = 1 , 9
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 254
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.92, ITR: 176, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        127     3  pp    v                    DO 202 IE = IES3, IEE3
        128     3   p    v                        I1 = NODE(EDGPRS(1, I),IE)
        129     3   p    v                        I2 = NODE(EDGPRS(2, I),IE)
        130     3   p    v                        FILTER(IE) = FILTER(IE)
        131     3                    &        +1.E0/((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2+(Z(I2)-Z(I1))**2)
        132     3   p    v       202          CONTINUE
        133     2                212      CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.73, ITR: 352, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        134     2  pp   2v                DO 302 IE = IES3, IEE3
        135     2   p   2v                    FILTER(IE) = SQRT(9.E0/FILTER(IE))
        136     2   p   2v       302       CONTINUE
        137     1               C
        138     1               C         * HEX *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        139     2                         DO 213 I = 1 , 12
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 254
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.92, ITR: 176, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        140     3  pp    v                    DO 203 IE = IES4, IEE4
        141     3   p    v                        I1 = NODE(EDGHEX(1, I),IE)
        142     3   p    v                        I2 = NODE(EDGHEX(2, I),IE)
        143     3   p    v                        FILTER(IE) = FILTER(IE)
        144     3                    &        +1.E0/((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2+(Z(I2)-Z(I1))**2)
        145     3   p    v       203          CONTINUE
        146     2                213      CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.73, ITR: 352, MVE: 6)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        147     2  pp   2v                DO 303 IE = IES4, IEE4
        148     2   p   2v                    FILTER(IE) = SQRT(12.E0/FILTER(IE))
        149     2   p   2v       303       CONTINUE
        150     1                     ELSE
        151     1               C
        152     1               C         * TET *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        153     2                         DO 410 I = 1 , 6
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 243
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.52, ITR: 144, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        154     3  pp    v                    DO 400 IE = IES1, IEE1
        155     3   p    v                        I1 = NODE(EDGTET(1, I),IE)
        156     3   p    v                        I2 = NODE(EDGTET(2, I),IE)
        157     3   p    v                        DIST = SQRT((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2
        158     3                    &                       +(Z(I2)-Z(I1))**2)
        159     3   p    v                        IF(I.EQ.1 .OR. DIST.LE.FILTER(IE)) FILTER(IE) = DIST
        160     3   p    v        400         CONTINUE
        161     2                 410     CONTINUE
        162     1               C
        163     1               C         * PYRAMID *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        164     2                         DO 411 I = 1 , 8
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 243
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.52, ITR: 144, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        165     3  pp    v                    DO 401 IE = IES2, IEE2
        166     3   p    v                        I1 = NODE(EDGPYR(1, I),IE)
        167     3   p    v                        I2 = NODE(EDGPYR(2, I),IE)
        168     3   p    v                        DIST = SQRT((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2
        169     3                    &                       +(Z(I2)-Z(I1))**2)
        170     3   p    v                        IF(I.EQ.1 .OR. DIST.LE.FILTER(IE)) FILTER(IE) = DIST
        171     3   p    v       401          CONTINUE
        172     2                411      CONTINUE
        173     1               C
        174     1               C         * WEDGE *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        175     2                         DO 412 I = 1 , 9
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 243
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.52, ITR: 144, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        176     3  pp    v                    DO 402 IE = IES3, IEE3
        177     3   p    v                        I1 = NODE(EDGPRS(1, I),IE)
        178     3   p    v                        I2 = NODE(EDGPRS(2, I),IE)
        179     3   p    v                        DIST = SQRT((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2
        180     3                    &                       +(Z(I2)-Z(I1))**2)
        181     3   p    v                        IF(I.EQ.1 .OR. DIST.LE.FILTER(IE)) FILTER(IE) = DIST
        182     3   p    v       402          CONTINUE
        183     2                412      CONTINUE
        184     1               C
        185     1               C         * HEX *
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        186     2                         DO 413 I = 1 , 12
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 243
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.52, ITR: 144, MVE: 3)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FILTER
                              <<< Loop-information  End >>>
        187     3  pp    v                    DO 403 IE = IES4, IEE4
        188     3   p    v                        I1 = NODE(EDGHEX(1, I),IE)
        189     3   p    v                        I2 = NODE(EDGHEX(2, I),IE)
        190     3   p    v                        DIST = SQRT((X(I2)-X(I1))**2+(Y(I2)-Y(I1))**2
        191     3                    &                       +(Z(I2)-Z(I1))**2)
        192     3   p    v                        IF(I.EQ.1 .OR. DIST.LE.FILTER(IE)) FILTER(IE) = DIST
        193     3   p    v       403          CONTINUE
        194     2                413      CONTINUE
        195     1                     ENDIF
        196                     C
        197                     C
        198                           RETURN
        199                           END

 Diagnostic messages: program name(FLT3DX)
   jwd8220o-i  "flt3dx.f", line 15: 副作用の可能性のある最適化を行いました。
   jwd5001p-i  "flt3dx.f", line 95: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 95: このDOループをSIMD化しました。(名前:IE)
   jwd8663o-i  "flt3dx.f", line 95: ソフトウェアパイプライニングの効果がないループと判断したため、ソフトウェアパイプライニングを抑止しました。
   jwd8202o-i  "flt3dx.f", line 95: ループを展開数4回でアンローリングしました。
   jwd5208p-i  "flt3dx.f", line 100: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd8210o-i  "flt3dx.f", line 101: ループを融合しました。(行:108)
   jwd5001p-i  "flt3dx.f", line 101: このDOループを並列化しました。(名前:IE)
   jwd8215o-i  "flt3dx.f", line 101: 不完全多重ループを分割して、完全多重ループにしました。
   jwd6001s-i  "flt3dx.f", line 101: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 101: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 101: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8205o-i  "flt3dx.f", line 101: ループの繰返し数が352回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 104: 多項式の演算順序を変更しました。
   jwd5208p-i  "flt3dx.f", line 113: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd8210o-i  "flt3dx.f", line 114: ループを融合しました。(行:121)
   jwd5001p-i  "flt3dx.f", line 114: このDOループを並列化しました。(名前:IE)
   jwd8215o-i  "flt3dx.f", line 114: 不完全多重ループを分割して、完全多重ループにしました。
   jwd6001s-i  "flt3dx.f", line 114: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 114: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 114: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8205o-i  "flt3dx.f", line 114: ループの繰返し数が352回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 117: 多項式の演算順序を変更しました。
   jwd5208p-i  "flt3dx.f", line 126: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd5001p-i  "flt3dx.f", line 127: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 127: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 127: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 127: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 130: 多項式の演算順序を変更しました。
   jwd5001p-i  "flt3dx.f", line 134: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 134: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 134: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 134: ループの繰返し数が352回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5208p-i  "flt3dx.f", line 139: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd5001p-i  "flt3dx.f", line 140: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 140: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 140: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 140: ループの繰返し数が176回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 143: 多項式の演算順序を変更しました。
   jwd5001p-i  "flt3dx.f", line 147: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 147: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 147: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 147: ループの繰返し数が352回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd5208p-i  "flt3dx.f", line 153: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd5001p-i  "flt3dx.f", line 154: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 154: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 154: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 154: ループの繰返し数が144回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 157: 多項式の演算順序を変更しました。
   jwd5208p-i  "flt3dx.f", line 164: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd5001p-i  "flt3dx.f", line 165: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 165: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 165: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 165: ループの繰返し数が144回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 168: 多項式の演算順序を変更しました。
   jwd5208p-i  "flt3dx.f", line 175: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd5001p-i  "flt3dx.f", line 176: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 176: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 176: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 176: ループの繰返し数が144回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 179: 多項式の演算順序を変更しました。
   jwd5208p-i  "flt3dx.f", line 186: 定義引用の順序が分からないため、定義引用順序が逐次実行と異なる可能性があり、このDOループは並列化できません。(名前:FILTER)
   jwd5001p-i  "flt3dx.f", line 187: このDOループを並列化しました。(名前:IE)
   jwd6001s-i  "flt3dx.f", line 187: このDOループをSIMD化しました。(名前:IE)
   jwd8204o-i  "flt3dx.f", line 187: ループにソフトウェアパイプライニングを適用しました。
   jwd8205o-i  "flt3dx.f", line 187: ループの繰返し数が144回以上の時、ソフトウェアパイプライニングを適用したループが実行時に選択されます。
   jwd8209o-i  "flt3dx.f", line 190: 多項式の演算順序を変更しました。

 Procedure information
   Lines      : 199
   Statements : 108
   Stack(byte): 5408
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 199
   Total statements : 108
   Total stack(byte): 5408
   Total prefetch num: 0

