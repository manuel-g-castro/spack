
 Fujitsu Fortran Version 4.1.0  Tue Apr 28 18:53:14 2020

 Compilation information
   Current directory : /vol0001/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/ver.63.02.02
   Source file       : ovrst1.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Knointentopt
   Cpp options          : -I/home/g9300001/u93021/09.FFB/2020.04.28a_v630202_from_Yamade/FFB.63.02.02/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI014/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI014/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=1 -D__FRT_patchlevel__=0 -D__FRT_version__="4.1.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Kassume=noshortloop
                          -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kfz -Khpctag
                          -Kilfunc=procedure -Knointentopt -Klargepage
                          -Kloop_blocking -Kloop_fission
                          -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping -Kswp
                          -Kswp_freg_rate=100 -Kswp_ireg_rate=100
                          -Kswp_preg_rate=100 -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnoalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "OVRST1"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE OVRST1(IPART,NPSET,N1,N2,ME,NE,NP,NEX,NODE,S,
          2                          *                  LPSET1,LPSET2,LPSET3,COVER1,COVER2,COVER3,
          3                          *                  NDOM,MBPDOM,NPSND,NPRCV,
          4                          *                  LPSND,NPTSND,LPRCV,NPTRCV,IPSET,IPSRC,
          5                          *                  WRK01,WRK02,RX,RY,IUT0,IERR)
          6                           IMPLICIT NONE
          7                           INTEGER*4 IPART,NPSET,N1,N2,ME,NE,NP,NEX(12)
          8                           INTEGER*4 NODE(N2,NE)
          9                           REAL*4    S(NP)
         10                           INTEGER*4 LPSET1(NPSET),LPSET2(NPSET),LPSET3(NPSET)
         11                           REAL*4    COVER1(NPSET),COVER2(NPSET),COVER3(NPSET)
         12                           INTEGER*4 NDOM,MBPDOM,NPSND,NPRCV,
         13                          *          LPSND(NDOM),NPTSND(NDOM),
         14                          *          LPRCV(NDOM),NPTRCV(NDOM),
         15                          *          IPSET (MBPDOM,NDOM),IPSRC (MBPDOM,NDOM)
         16                           REAL*4    WRK01(NP),WRK02(NP),RX(N1,ME),RY(N1,ME)
         17                           INTEGER*4 IUT0,IERR
         18                     C
         19                           INTEGER*4 NETET,NEPRD,NEWED,NEHEX,NTET,NPRD,NWED,NHEX,
         20                          *          IBP,ISEND,IE,IP,NB,MAXBUF,IDIM,
         21                          *          IP1,IP2,IP3,IP4,IP5,IP6,IP7,IP8
         22                           REAL*4    GP,EP,TP,T1,T2,T3,T4,T5,T6,T7,T8
         23                     C
         24                           CHARACTER*60 ERMSGC
         25                          & / ' ## SUBROUTINE OVRST1: FATAL      ERROR REPORT   ; RETURNED' /
         26                     C
         27                           MAXBUF = ME*N1
         28                     C
         29                           NETET =NEX( 1)
         30                           NEPRD =NEX( 2)
         31                           NEWED =NEX( 3)
         32                           NEHEX =NEX( 4)
         33                           NTET  =NEX( 5)
         34                           NPRD  =NEX( 6)
         35                           NWED  =NEX( 7)
         36                           NHEX  =NEX( 8)
         37                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSET3
                              <<< Loop-information  End >>>
         38     1                     DO 1000 IBP = 1 , NPSET
         39     1                         ISEND = LPSET3(IBP)
         40     1                         IF(ISEND.LT.0) GO TO 1000
         41     1               C
         42     1                         IE = LPSET2(IBP)
         43     1                         GP = COVER1(IBP)
         44     1                         EP = COVER2(IBP)
         45     1                         TP = COVER3(IBP)
         46     1               CCYY---
         47     2                         IF(IE.EQ.0) THEN
         48     2               !NOTE THAT: THIS IS SPECICAL VALUE FOR LOQUID FRACTION
         49     2                             WRK01(IBP)=1.0
         50     2                             GOTO 1000
         51     2                         ENDIF
         52     1               CCYY---
         53     1               C
         54     2                         IF(NODE(NHEX,IE).NE.0) THEN
         55     2                             IP1=NODE(1,IE)
         56     2                             IP2=NODE(2,IE)
         57     2                             IP3=NODE(3,IE)
         58     2                             IP4=NODE(4,IE)
         59     2                             IP5=NODE(5,IE)
         60     2                             IP6=NODE(6,IE)
         61     2                             IP7=NODE(7,IE)
         62     2                             IP8=NODE(8,IE)
         63     2                             T1=0.125E0*(1.-GP)*(1.-EP)*(1.-TP)
         64     2                             T2=0.125E0*(1.+GP)*(1.-EP)*(1.-TP)
         65     2                             T3=0.125E0*(1.+GP)*(1.+EP)*(1.-TP)
         66     2                             T4=0.125E0*(1.-GP)*(1.+EP)*(1.-TP)
         67     2                             T5=0.125E0*(1.-GP)*(1.-EP)*(1.+TP)
         68     2                             T6=0.125E0*(1.+GP)*(1.-EP)*(1.+TP)
         69     2                             T7=0.125E0*(1.+GP)*(1.+EP)*(1.+TP)
         70     2                             T8=0.125E0*(1.-GP)*(1.+EP)*(1.+TP)
         71     2                             WRK01(IBP)=T1*S(IP1)+T2*S(IP2)+T3*S(IP3)+T4*S(IP4)
         72     2                    *                  +T5*S(IP5)+T6*S(IP6)+T7*S(IP7)+T8*S(IP8)
         73     2                         ELSE IF(NODE(NWED,IE).NE.0) THEN
         74     2                             IP1=NODE(1,IE)
         75     2                             IP2=NODE(2,IE)
         76     2                             IP3=NODE(3,IE)
         77     2                             IP4=NODE(4,IE)
         78     2                             IP5=NODE(5,IE)
         79     2                             IP6=NODE(6,IE)
         80     2                             T1=0.5E0*GP        *(1.-TP)
         81     2                             T2=0.5E0*EP        *(1.-TP)
         82     2                             T3=0.5E0*(1.-GP-EP)*(1.-TP)
         83     2                             T4=0.5E0*GP        *(1.+TP)
         84     2                             T5=0.5E0*EP        *(1.+TP)
         85     2                             T6=0.5E0*(1.-GP-EP)*(1.+TP)
         86     2                             WRK01(IBP)=T1*S(IP1)+T2*S(IP2)+T3*S(IP3)+T4*S(IP4)
         87     2                    *                  +T5*S(IP5)+T6*S(IP6)
         88     2                         ELSE IF(NODE(NPRD,IE).NE.0) THEN
         89     2                             IP1=NODE(1,IE)
         90     2                             IP2=NODE(2,IE)
         91     2                             IP3=NODE(3,IE)
         92     2                             IP4=NODE(4,IE)
         93     2                             IP5=NODE(5,IE)
         94     2                             T1=0.25E0*((1.-GP)*(1.-EP)-TP+GP*EP*TP/(1.-TP))
         95     2                             T2=0.25E0*((1.+GP)*(1.-EP)-TP-GP*EP*TP/(1.-TP))
         96     2                             T3=0.25E0*((1.+GP)*(1.+EP)-TP+GP*EP*TP/(1.-TP))
         97     2                             T4=0.25E0*((1.-GP)*(1.+EP)-TP-GP*EP*TP/(1.-TP))
         98     2                             T5= TP
         99     2                             WRK01(IBP)=T1*S(IP1)+T2*S(IP2)+T3*S(IP3)+T4*S(IP4)
        100     2                    *                  +T5*S(IP5)
        101     2                         ELSE IF(NODE(NTET,IE).NE.0) THEN
        102     2                             IP1=NODE(1,IE)
        103     2                             IP2=NODE(2,IE)
        104     2                             IP3=NODE(3,IE)
        105     2                             IP4=NODE(4,IE)
        106     2                             T1=GP
        107     2                             T2=EP
        108     2                             T3=TP
        109     2                             T4=1.0E0-(GP+EP+TP)
        110     2                             WRK01(IBP)=T1*S(IP1)+T2*S(IP2)+T3*S(IP3)+T4*S(IP4)
        111     2                         ELSE
        112     2                             WRITE(IUT0,*)'HEAT3X:INVALID NODE TABLE:ERROR'
        113     2                             IERR=1
        114     2                             RETURN
        115     2                         ENDIF
        116     1                1000 CONTINUE
        117                     C
        118                     C         PERFORM SELF-DOMAIN VELOCITY OVERSETS
        119                     C
        120                           NB = 0
        121                     *POPTION INDEP(T)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LPSET3
                              <<< Loop-information  End >>>
        122     1       2s            DO 2000 IBP = 1 , NPSET
        123     1       2v                ISEND = LPSET3(IBP)
        124     1       2v                IF(ISEND.LT.0) GO TO 2000
        125     1               C
        126     1       2v                IP = LPSET1(IBP)
        127     2       2v                IF(ISEND.EQ.0) THEN
        128     2       2v                    S(IP) = WRK01(IBP)
        129     2       2v                ELSE
        130     2       2m                    NB = NB+1
        131     2       2s                    WRK02(NB) = WRK01(IBP)
        132     2       2v                ENDIF
        133     1       2v       2000 CONTINUE
        134                     C
        135                     C         PERFORM INTER-DOMAIN VELOCITY OVERSETS
        136                     C
        137     1                     IF(IPART.GE.1) THEN
        138     1                         IDIM=1
        139     1                         CALL DDSET3(NPSND,LPSND,NPTSND,IPSET,IPSRC,
        140     1                    *                WRK02,WRK02,WRK02,NB,
        141     1                    *                NPRCV,LPRCV,NPTRCV,S,S,S,NP,
        142     1                    *                IDIM,MBPDOM,IUT0,IERR,RX,RY,MAXBUF)
        143     2                         IF(IERR.NE.0) THEN
        144     2                             WRITE(IUT0,*)
        145     2                             WRITE(IUT0,*) ERMSGC
        146     2                             RETURN
        147     2                         ENDIF
        148     1                     ENDIF
        149                     C
        150                           RETURN
        151                           END

 Diagnostic messages: program name(OVRST1)
   jwd8220o-i  "ovrst1.f", line 1: 副作用の可能性のある最適化を行いました。
   jwd5131p-i  "ovrst1.f", line 38: ループ出口が2つ以上あるため、このDOループは並列化できません。
   jwd6131s-i  "ovrst1.f", line 38: ループ出口が2つ以上あるため、このDOループはSIMD化できません。
   jwd8671o-i  "ovrst1.f", line 38: ループの形状が最適化の対象外であるため、ソフトウェアパイプライニングを適用できません。
   jwd8209o-i  "ovrst1.f", line 71: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst1.f", line 86: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst1.f", line 99: 多項式の演算順序を変更しました。
   jwd8209o-i  "ovrst1.f", line 110: 多項式の演算順序を変更しました。
   jwd5228p-i  "ovrst1.f", line 122: データの定義引用の順序が逐次実行と異なるため、このDOループは並列化できません。
   jwd6229s-i  "ovrst1.f", line 122: IF文が存在するため、このDOループのSIMD化を抑止しました。
   jwd8670o-i  "ovrst1.f", line 122: ループ内に分岐命令があるため、ソフトウェアパイプライニングを適用できません。
   jwd8202o-i  "ovrst1.f", line 122: ループを展開数2回でアンローリングしました。

 Procedure information
   Lines      : 151
   Statements : 116
   Stack(byte): 768
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 151
   Total statements : 116
   Total stack(byte): 768
   Total prefetch num: 0

