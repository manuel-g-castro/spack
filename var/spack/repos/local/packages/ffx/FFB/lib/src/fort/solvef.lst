
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:30 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : solvef.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "SOLVEF"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    SOLVEF                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE SOLVEF(IDIM,IMASS,AC,CM,IPNP,NPP,MAXP,MAXPP,NP,
         14                          *                  F,LB,NB,S,DF,IUT0,IERR)
         15                           IMPLICIT REAL*8(A-H,O-Z)
         16                           REAL*4   AC,CM
         17                           DIMENSION AC(MAXPP,NP),CM(NP),IPNP(MAXPP,NP),NPP(NP),F(NP),LB(NB),
         18                          1          S(NP),DF(NP)
         19                     C
         20                           CHARACTER*72 ERMSG
         21                          & /' *** SUBROUTINE SOLVEF REPORTS A FATAL ERROR OCCURENCE ***' /
         22                           CHARACTER*72 EREXP1
         23                          & /' NO ROOM LEFT IN S(MAXP) FOR CONDUCTING SOLVEF OPERATIONS' /
         24                           CHARACTER*72 EREXP2
         25                          & /' MAXPP IS TOO SMALL TO CONDUCT SOLVEF OPERATIONS' /
         26                     C
         27                     C
         28                     C      SOLVE MATRIX-EQUATION ' MV = F ' BY MULTIPASS ALGORITHM
         29                     C         ( 2-D , 3-D CALCULATION )
         30                     C
         31                     C
         32                     C     ARGUMENT LISTINGS
         33                     C       (1) INPUT
         34                     C          IDIM        ; SPECIFIES THE SPACE DIMENSION AS FOLLOWS
         35                     C                   2 --- TWO   DIMENSIONAL PROBLEM
         36                     C                   3 --- THREE DIMENSIONAL PROBLEM
         37                     C          IMASS       ; ITERATION NUMBER OF MULTI-PASS ALGORITHM
         38                     C                      ( FOR LUMPED MASS CALCULATION , SET IMASS TO 1 )
         39                     C          AC  (IPP,IP); CONDENSED MASS     MATRIX
         40                     C          CM      (IP); GLOBAL LUMPED MASS MATRIX ( INVERSED )
         41                     C          IPNP(IPP,IP); ADJACENT NODE NUMBER TO NODE IP
         42                     C                      ( IF NPP(IP).LT.MINPP , THEN IPNP(NPP(IP)+1,IP),
         43                     C                       IPNP(MINPP,IP) MUST BE SET TO AN IMAGINARY
         44                     C                       NODE NO. BETWEEN NP+1,MAXP.)
         45                     C          NPP     (IP); NUMBER OF ADJACENT NODES TO NODE IP
         46                     C          MAXP        ; THE       DIMENSION OF ARRAY S
         47                     C          MAXPP       ; THE FIRST DIMENSION OF ARRAY IPNP
         48                     C          NP          ; NUMBER OF TOTAL NODES
         49                     C          F       (IP); GLOBAL FORCE VECTOR
         50                     C          LB      (IB); PRESCRIBED NODES LIST VECTOR
         51                     C          NB          ; NUMBER OF NODE PRESCRIBED TO ZERO
         52                     C          IUT0        ; DEVICE NO. TO REPORT ERROR OCCURENCE
         53                     C
         54                     C       (2) OUTPUT
         55                     C          S       (IP); SOLUTION OF M*V = F
         56                     C          IERR        ; RETURN CODE TO REPORT ERROR OCCURENCE
         57                     C                   0 --- NORMAL TERMINATION
         58                     C                   1 --- A FATAL ERROR HAS OCCURED
         59                     C
         60                     C       (3) WORK
         61                     C          DF(IP)      ; GLOBAL FORCE VECTOR M*V
         62                     C
         63                     C
         64     1                     IF(IDIM.EQ.2) THEN
         65     1                         MINPP = 9
         66     1                     ELSE
         67     1                         MINPP = 27
         68     1                     ENDIF
         69                     C
         70                           IERR = 0
         71                     C
         72     1                     IF(MAXP.LE.NP) THEN
         73     1                         WRITE(IUT0,6300) ERMSG
         74     1                         WRITE(IUT0,6300) EREXP1
         75     1                         IERR = 1
         76     1                         RETURN
         77     1                     ENDIF
         78                     C
         79     1                     IF(MAXPP.LT.MINPP) THEN
         80     1                         WRITE(IUT0,6300) ERMSG
         81     1                         WRITE(IUT0,6300) EREXP2
         82     1                         IERR = 1
         83     1                         RETURN
         84     1                     ENDIF
         85                     C
         86                     C      CLEAR THE ARRAY S(IP) FOR SOLVEF OPERATIONS
         87                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      S
                              <<< Loop-information  End >>>
         88     1  pp   4v            DO 100 IP = NP+1 , MAXP
         89     1   p   4v                S(IP) = 0.D0
         90     1   p   4v        100 CONTINUE
         91                     C
         92                     C      SET INITIAL VALUES
         93                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 889
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 144, MVE: 3, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      CM, F, S
                              <<< Loop-information  End >>>
         94     1  pp   2v            DO 200 IP = 1 , NP
         95     1   p   2v                S(IP) = CM(IP)*F(IP)
         96     1   p   2v        200 CONTINUE
         97                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.33, ITR: 144, MVE: 5, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LB
                              <<< Loop-information  End >>>
         98     1   s   2v            DO 300 IB = 1 , NB
         99     1   m   2v                S(LB(IB)) = 0.D0
        100     1   p   2v        300 CONTINUE
        101                     C
        102                     C      MULTIPASS LOOP START
        103                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DF, LB
                              <<< Loop-information  End >>>
        104     1                     DO 2000 ITER = 2 , IMASS
        105     1               C
        106     1               C      CALCULATION OF  DF = M*V
        107     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 100
                              <<<  [OPTIMIZATION]
                              <<<    FUSED(lines: 108,113)
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.12, ITR: 56, MVE: 3, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DF
                              <<< Loop-information  End >>>
        108     2  pp    v                DO 400 IP = 1 , NP
        109     2   p    v                    DF(IP) = AC(1,IP)*S(IPNP(1,IP))+AC(2,IP)*S(IPNP(2,IP))
        110     2                    &                +AC(3,IP)*S(IPNP(3,IP))+AC(4,IP)*S(IPNP(4,IP))
        111     2                    &                +AC(5,IP)*S(IPNP(5,IP))
        112     2   p    v        400     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
        113     2                         DO 500 IP = 1 , NP
        114     2                             DF(IP) = DF(IP)
        115     2                    &                +AC(6,IP)*S(IPNP(6,IP))+AC(7,IP)*S(IPNP(7,IP))
        116     2                    &                +AC(8,IP)*S(IPNP(8,IP))+AC(9,IP)*S(IPNP(9,IP))
        117     2                 500     CONTINUE
        118     1               C
        119     2                         IF(IDIM.EQ.3) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 51
                              <<<  [OPTIMIZATION]
                              <<<    FUSED(lines: 120,126,132)
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 1.88, ITR: 48, MVE: 3, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DF
                              <<< Loop-information  End >>>
        120     3  pp    v                DO 600 IP = 1 , NP
        121     3   p    v                    DF(IP) = DF(IP)
        122     3                    &                +AC(10,IP)*S(IPNP(10,IP))+AC(11,IP)*S(IPNP(11,IP))
        123     3                    &                +AC(12,IP)*S(IPNP(12,IP))+AC(13,IP)*S(IPNP(13,IP))
        124     3                    &                +AC(14,IP)*S(IPNP(14,IP))+AC(15,IP)*S(IPNP(15,IP))
        125     3   p    v        600     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
        126     3                         DO 700 IP = 1 , NP
        127     3                             DF(IP) = DF(IP)
        128     3                    &                +AC(16,IP)*S(IPNP(16,IP))+AC(17,IP)*S(IPNP(17,IP))
        129     3                    &                +AC(18,IP)*S(IPNP(18,IP))+AC(19,IP)*S(IPNP(19,IP))
        130     3                    &                +AC(20,IP)*S(IPNP(20,IP))+AC(21,IP)*S(IPNP(21,IP))
        131     3                 700     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
        132     3                         DO 800 IP = 1 , NP
        133     3                             DF(IP) = DF(IP)
        134     3                    &                +AC(22,IP)*S(IPNP(22,IP))+AC(23,IP)*S(IPNP(23,IP))
        135     3                    &                +AC(24,IP)*S(IPNP(24,IP))+AC(25,IP)*S(IPNP(25,IP))
        136     3                    &                +AC(26,IP)*S(IPNP(26,IP))+AC(27,IP)*S(IPNP(27,IP))
        137     3                 800     CONTINUE
        138     2                         ENDIF
        139     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 3)
                              <<< Loop-information  End >>>
        140     2   p   2s                DO 910 IPP = MINPP+1 , MAXPP
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<< Loop-information  End >>>
        141     3  pp   2                     DO 900 IP = 1 , NP
        142     4   p   2m                        IF(NPP(IP).GE.IPP) THEN
        143     4   p   2s                            DF(IP) = DF(IP)
        144     4                    &                        +AC(IPP,IP)*S(IPNP(IPP,IP))
        145     4   p   2v                        ENDIF
        146     3   p   2         900         CONTINUE
        147     2   p   2         910     CONTINUE
        148     1               C
        149     1               C      SOLVE
        150     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 616
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.14, ITR: 128, MVE: 4, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      DF, S, F, CM
                              <<< Loop-information  End >>>
        151     2  pp   2v                DO 1000 IP = 1 , NP
        152     2   p   2v                    S(IP) = S(IP)+CM(IP)*(F(IP)-DF(IP))
        153     2   p   2v       1000     CONTINUE
        154     1               C
        155     1               C     GIVE DERICLET B.C.
        156     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.33, ITR: 144, MVE: 5, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LB
                              <<< Loop-information  End >>>
        157     2   s   2v                DO 1100 IB = 1 , NB
        158     2   m   2v                    S(LB(IB)) = 0.D0
        159     2   p   2v       1100     CONTINUE
        160     1               C
        161     1               C      MULTIPASS LOOP END
        162     1               C
        163     1                2000 CONTINUE
        164                     C
        165                     C
        166                           RETURN
        167                      6300 FORMAT(A72)
        168                           END

 Diagnostic messages: program name(SOLVEF)
   jwd5001p-i  "solvef.f", line 88: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "solvef.f", line 88: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8663o-i  "solvef.f", line 88: This loop is not software pipelined because the software pipelining does not improve the performance.
   jwd8202o-i  "solvef.f", line 88: Loop unrolled 4 times.
   jwd5001p-i  "solvef.f", line 94: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "solvef.f", line 94: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "solvef.f", line 94: This loop is software pipelined.
   jwd8205o-i  "solvef.f", line 94: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 144.
   jwd6001s-i  "solvef.f", line 98: SIMD conversion is applied to DO loop with DO variable 'IB'.
   jwd8204o-i  "solvef.f", line 98: This loop is software pipelined.
   jwd8205o-i  "solvef.f", line 98: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 144.
   jwd5228p-i  "solvef.f", line 99: DO loop is not parallelized: data dependency of variable may cause different results from serial execution for loop.
   jwd5208p-i  "solvef.f", line 104: DO loop is not parallelized: the assign-refer order of 'DF' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "solvef.f", line 104: DO loop is not parallelized: the assign-refer order of 'S' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd8210o-i  "solvef.f", line 108: Loops fused at line 113.
   jwd5001p-i  "solvef.f", line 108: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "solvef.f", line 108: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "solvef.f", line 108: This loop is software pipelined.
   jwd8205o-i  "solvef.f", line 108: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 56.
   jwd8210o-i  "solvef.f", line 120: Loops fused at line 126.
   jwd8210o-i  "solvef.f", line 120: Loops fused at line 132.
   jwd5001p-i  "solvef.f", line 120: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "solvef.f", line 120: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "solvef.f", line 120: This loop is software pipelined.
   jwd8205o-i  "solvef.f", line 120: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 48.
   jwd8211o-i  "solvef.f", line 140: Loops interchanged at line 141.
   jwd6229s-i  "solvef.f", line 140: SIMD conversion is not applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "solvef.f", line 140: This loop cannot be software pipelined because the loop contains a branch instruction.
   jwd8202o-i  "solvef.f", line 140: Loop unrolled 2 times.
   jwd8211o-i  "solvef.f", line 141: Loops interchanged at line 140.
   jwd5001p-i  "solvef.f", line 141: DO loop with DO variable 'IP' is parallelized.
   jwd5001p-i  "solvef.f", line 151: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "solvef.f", line 151: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "solvef.f", line 151: This loop is software pipelined.
   jwd8205o-i  "solvef.f", line 151: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd6001s-i  "solvef.f", line 157: SIMD conversion is applied to DO loop with DO variable 'IB'.
   jwd8204o-i  "solvef.f", line 157: This loop is software pipelined.
   jwd8205o-i  "solvef.f", line 157: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 144.
   jwd5228p-i  "solvef.f", line 158: DO loop is not parallelized: data dependency of variable may cause different results from serial execution for loop.

 Procedure information
   Lines      : 168
   Statements : 69
   Stack(byte): 2352
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 168
   Total statements : 69
   Total stack(byte): 2352
   Total prefetch num: 0

