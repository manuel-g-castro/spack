
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:08 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : liner2.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "LINER2"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    LINER2                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE LINER2(XS,YS,XE,YE,NPNT,X,Y,SR,NODE,NE,NP,N,
         14                          *                  IENE,NEE,MAXEE,RPNT,XPNT,YPNT,IEPNT,SRPNT,
         15                          *                  NMAX,EPS)
         16                           IMPLICIT REAL*4(A-H,O-Z)
         17                           DIMENSION X(NP),Y(NP),SR(NP),NODE(N,NE),IENE(MAXEE,NE),NEE(NE),
         18                          1          RPNT(NPNT),XPNT(NPNT),YPNT(NPNT),IEPNT(NPNT),SRPNT(NPNT)
         19                     C
         20                           MTWRN = 0
         21                     C
         22                     C
         23                     C      DEDUCE SCALAR DISTRIBUTION ALONG A GIVEN LINE
         24                     C         ( 2-D GRAPHICS )
         25                     C
         26                     C
         27                     C     NOTE 1 ; NPNT MUST BE GREATER THAN 1.
         28                     C
         29                     C
         30                     C     ARGUMENT LISTINGS
         31                     C       (1) INPUT
         32                     C          XS          ; ONE       EDGE POINT OF THE INTERPOLATION LINE
         33                     C          YS          ; ONE       EDGE POINT OF THE INTERPOLATION LINE
         34                     C          XE          ; THE OTHER EDGE POINT OF THE INTERPOLATION LINE
         35                     C          YE          ; THE OTHER EDGE POINT OF THE INTERPOLATION LINE
         36                     C          NPNT        ; NUMBER OF THE POINTS WHERE INTERPOLATION WILL
         37                     C                       BE DONE, INCLUDING BOTH EDGE POINTS
         38                     C          X       (IP); X-COORDINATES        OF NODES
         39                     C          Y       (IP); Y-COORDINATES        OF NODES
         40                     C          SR      (IP); SCALAR FIELD DEFINED AT NODES
         41                     C          NODE  (I,IE); NODE TABLE
         42                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         43                     C          NP          ; NUMBER OF TOTAL NODES
         44                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         45                     C          IENE(IEE,IE); ADJACENT ELEMENT NUMBER TO ELEMENT IE
         46                     C          NEE     (IE); NUMBER OF ADJACENT ELEMENTS TO ELEMENT IE
         47                     C          MAXEE       ; THE FIRST DIMENSION OF ARRAY IENE
         48                     C          NMAX        ; MAXIMUM ITERATION NUMBER FOR SUBROUTINE INTERP
         49                     C          EPS         ; CONVERGENCE CRITERIA     FOR SUBROUTINE INTERP
         50                     C
         51                     C       (2) OUTPUT
         52                     C          RPNT  (IPNT); NORMALISED POSITIONS WHERE INTERPOLATION DONE
         53                     C          XPNT  (IPNT); X-DIR.     POSITIONS WHERE INTERPOLATION DONE
         54                     C          YPNT  (IPNT); Y-DIR.     POSITIONS WHERE INTERPOLATION DONE
         55                     C          IEPNT (IPNT); ELEMENT NO.'S        WHERE INTERPOLATION DONE
         56                     C          SRPNT (IPNT); INTERPOLATED SCALAR DISTRIBUTION
         57                     C
         58                     C      NOTE ; IF A POINT 'IPNT' IS NOT INCLUDED IN THE COMPUTATION
         59                     C            DOMAIN AT ALL, IEPNT(IPNT) WILL BE SET TO 0 AND
         60                     C            INTERPOLATION AT THE POINT WILL BE SKIPPED.
         61                     C
         62                     C
         63                     C      (1) CALCULATE THE COORDINATES WHERE INTERPOLATION WILL BE DONE
         64                     C
         65                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 517
                              <<<  [OPTIMIZATION]
                              <<<    FUSED(lines: 66,76)
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.80, ITR: 320, MVE: 4, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      YPNT, XPNT, RPNT, IEPNT
                              <<< Loop-information  End >>>
         66     1  pp   2v            DO 10 IPNT = 1 , NPNT
         67     1   p   2v                RPNT(IPNT) = FLOAT(IPNT-1)/FLOAT(NPNT-1)
         68     1   p   2v                XPNT(IPNT) = XS+RPNT(IPNT)*(XE-XS)
         69     1   p   2v                YPNT(IPNT) = YS+RPNT(IPNT)*(YE-YS)
         70     1   p   2v         10 CONTINUE
         71                     C
         72                     C
         73                     C      (2) FIND ELEMENT'S NO.'S WHERE THE ABOVE COORDINATES ARE INCLUDED
         74                     C
         75                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
         76     1                     DO 20 IPNT = 1 , NPNT
         77     1                         IEPNT(IPNT) = 0
         78     1                  20 CONTINUE
         79                     C
         80     1                     DO 50 IPNT = 1 , NPNT
         81     1                         XP = XPNT(IPNT)
         82     1                         YP = YPNT(IPNT)
         83     1                         IF(IPNT.EQ.1) GO TO 35
         84     2                         IF(IEPNT(IPNT-1).NE.0) THEN
         85     2               C
         86     2               C SEARCH THE CURRENT ELEMENT
         87     2               C
         88     2                             CALL INCLUD(IEPNT(IPNT-1),X,Y,NODE,NE,NP,N,XP,YP,IRN)
         89     3                             IF(IRN.EQ.1) THEN
         90     3                                 IEPNT(IPNT) = IEPNT(IPNT-1)
         91     3                                 GO TO 50
         92     3                             ENDIF
         93     2               C
         94     2               C SEARCH THE AMBIENT ELEMENTS AROUND THE CURRENT ELEMENT
         95     2               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 1  FILL 1
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
         96     3                             DO 30 IEE = 1 , NEE(IEPNT(IPNT-1))
         97     3                                 CALL INCLUD(IENE(IEE,IEPNT(IPNT-1)),X,Y,NODE,NE,NP,N,
         98     3                    *                        XP,YP,IRN)
         99     4                                 IF(IRN.EQ.1) THEN
        100     4                                     IEPNT(IPNT) = IENE(IEE,IEPNT(IPNT-1))
        101     4                                     GO TO 50
        102     4                                 ENDIF
        103     3                  30         CONTINUE
        104     2                         ENDIF
        105     1               C
        106     1                  35     CONTINUE
        107     1               C
        108     1               C SEARCH ALL THE ELEMENTS
        109     1               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 1
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        110     2                         DO 40 IE = 1 , NE
        111     2                             CALL INCLUD(IE,X,Y,NODE,NE,NP,N,XP,YP,IRN)
        112     3                             IF(IRN.EQ.1) THEN
        113     3                                 IEPNT(IPNT) = IE
        114     3                                 GO TO 50
        115     3                             ENDIF
        116     2                  40     CONTINUE
        117     1                  50 CONTINUE
        118                     C
        119                     C
        120                     C      (3) INTERPOLATE SCALAR VALUES AT THE ABOVE COORDINATES
        121                     C
        122                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      SRPNT
                              <<< Loop-information  End >>>
        123     1  pp   4v            DO 60 IPNT = 1 , NPNT
        124     1   p   4v                SRPNT(IPNT) = 0.E0
        125     1   p   4v         60 CONTINUE
        126                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      IEPNT
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 6
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        127     1   s   2s            DO 70 IPNT = 1 , NPNT
        128     2   s   2s                IF(IEPNT(IPNT).NE.0) THEN
        129     2   s   2s                CALL INTERP(SR,X,Y,NODE,NE,NP,N,
        130     2                    *                IEPNT(IPNT),XPNT(IPNT),YPNT(IPNT),
        131     2                    *                SRPNT(IPNT),GDUM,EDUM,NMAX,EPS,MTWRN,IWRN,IRN)
        132     2   s   2s                ENDIF
        133     1   s   2s         70 CONTINUE
        134                     C
        135                     C
        136                           RETURN
        137                           END

 Diagnostic messages: program name(LINER2)
   jwd8220o-i  "liner2.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8210o-i  "liner2.f", line 66: Loops fused at line 76.
   jwd5001p-i  "liner2.f", line 66: DO loop with DO variable 'IPNT' is parallelized.
   jwd6001s-i  "liner2.f", line 66: SIMD conversion is applied to DO loop with DO variable 'IPNT'.
   jwd8204o-i  "liner2.f", line 66: This loop is software pipelined.
   jwd8205o-i  "liner2.f", line 66: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 320.
   jwd8206o-i  "liner2.f", line 67: Division is changed to multiplication by reciprocal.
   jwd5122p-i  "liner2.f", line 80: DO loop is not parallelized: a procedure reference was found in the loop.
   jwd5131p-i  "liner2.f", line 96: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "liner2.f", line 96: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8664o-i  "liner2.f", line 96: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd5131p-i  "liner2.f", line 110: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "liner2.f", line 110: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8664o-i  "liner2.f", line 110: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd5001p-i  "liner2.f", line 123: DO loop with DO variable 'IPNT' is parallelized.
   jwd6001s-i  "liner2.f", line 123: SIMD conversion is applied to DO loop with DO variable 'IPNT'.
   jwd8663o-i  "liner2.f", line 123: This loop is not software pipelined because the software pipelining does not improve the performance.
   jwd8202o-i  "liner2.f", line 123: Loop unrolled 4 times.
   jwd6229s-i  "liner2.f", line 127: SIMD conversion is not applied to DO loop: there are IF statements in the loop.
   jwd8664o-i  "liner2.f", line 127: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd8202o-i  "liner2.f", line 127: Loop unrolled 2 times.
   jwd5208p-i  "liner2.f", line 128: DO loop is not parallelized: the assign-refer order of 'IEPNT' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd6208s-i  "liner2.f", line 128: SIMD conversion cannot be applied to DO loop: the assign-refer order of 'IEPNT' in a SIMD execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'EDUM' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'GDUM' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'SR' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'EPS' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'IWRN' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'NMAX' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'MTWRN' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'SRPNT' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'YPNT' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'XPNT' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'Y' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'X' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'N' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'NP' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'NODE' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'NE' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "liner2.f", line 129: DO loop is not parallelized: the assign-refer order of 'IRN' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5122p-i  "liner2.f", line 129: DO loop is not parallelized: a procedure reference was found in the loop.
   jwd6122s-i  "liner2.f", line 129: SIMD conversion cannot be applied to DO loop: a procedure reference was found in the loop.

 Procedure information
   Lines      : 137
   Statements : 49
   Stack(byte): 1376
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 137
   Total statements : 49
   Total stack(byte): 1376
   Total prefetch num: 0

