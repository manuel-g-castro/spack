
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:35 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : tauwal.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "TAUWAL"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    TAUWAL                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE TAUWAL(VKAP,B,U,V,W,NODE,NE,NP,N,LOCAL,DEVLP2,
         14                          *                  LPWALL,NPWALL,UWALL,VWALL,WWALL,
         15                          *                  LEWALL,NEWALL,YP,XNWALL,YNWALL,ZNWALL,
         16                          *                  VISCM,NITER,UTAU,TAUX,TAUY,TAUZ,
         17                          *                  REP,UPP,UPWL,VPWL,WPWL)
         18                           IMPLICIT REAL*4(A-H,O-Z)
         19                           DIMENSION U(NP),V(NP),W(NP),NODE(N,NE),LOCAL(4,6),LPWALL(NPWALL),
         20                          1          UWALL(NPWALL),VWALL(NPWALL),WWALL(NPWALL),
         21                          2          LEWALL(2,NEWALL),YP(NEWALL),
         22                          3          XNWALL(NEWALL),YNWALL(NEWALL),ZNWALL(NEWALL),
         23                          4          UTAU(NEWALL),TAUX(NEWALL),TAUY(NEWALL),TAUZ(NEWALL),
         24                          5          REP (NEWALL),UPP (NEWALL),UPWL(NP),VPWL(NP),WPWL(NP)
         25                     C
         26                           DIMENSION LOCALF(4,6)
         27                     C
         28                           PARAMETER ( MAXENT = 8 )
         29                           DIMENSION TABLE(2,MAXENT)
         30                           DATA TABLE / 3.0E+2, 12.43, 1.0E+3, 15.57,
         31                          &             3.0E+3, 18.16, 1.0E+4, 20.90,
         32                          &             3.0E+4, 23.39, 1.0E+5, 26.13,
         33                          &             3.0E+5, 28.64, 1.0E+6, 31.42 /
         34                     C
         35                           DATA EPS  / 1.E-20 /
         36                     C
         37                     C
         38                     C      CALCULATE WALL SHEAR STRESSES BASED ON THE SPALDING'S
         39                     C     GENERALIZED WALL LAW.
         40                     C         ( 3-D ; SINGLE PRECISION )
         41                     C
         42                     C
         43                     C     ARGUMENT LISTINGS
         44                     C       (1) INPUT
         45                     C          VKAP        ; VON-KARMAN CONSTANT
         46                     C          B           ; CONSTANT APPEARING IN THE UNIVERSAL FUNCTION
         47                     C          U       (IP); X-DIR. VELOCITY COMPONENT
         48                     C          V       (IP); Y-DIR. VELOCITY COMPONENT
         49                     C          W       (IP); Z-DIR. VELOCITY COMPONENT
         50                     C          NODE  (I,IE); NODE NO. TABLE BASED ON ELEMENT
         51                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         52                     C          NP          ; NUMBER OF TOTAL    NODES
         53                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         54                     C          LOCAL (I,IS); NODE NUMBER TABLE DEFINING ELEMENT SURFACES
         55                     C          DEVLP2      ; DEVELOPMENT FUNCTION FOR WALL VELOCITIES
         56                     C          LPWALL (IBP); WALL BOUNDARY NODES
         57                     C          NPWALL      ; NUMBER OF WALL BOUNDARY NODES
         58                     C          UWALL  (IBP); WALL BOUNDARY U-VELOCITIES
         59                     C          VWALL  (IBP); WALL BOUNDARY V-VELOCITIES
         60                     C          WWALL  (IBP); WALL BOUNDARY W-VELOCITIES
         61                     C          LEWALL(I,IBE); WALL BOUNDARY ELEMENT AND ITS SURFACE
         62                     C          NEWALL      ; NUMBER OF WALL BOUNDARY SURFACES
         63                     C          YP     (IBE); DISTANCE BETWEEN WALL AND ITS OPPOSITE SURFACE
         64                     C          XNWALL (IBE); X NORMAL OF WALL BOUNDARY SURFACE
         65                     C          YNWALL (IBE); Y NORMAL OF WALL BOUNDARY SURFACE
         66                     C          ZNWALL (IBE); Z NORMAL OF WALL BOUNDARY SURFACE
         67                     C          VISCM       ; MOLECULAR VISCOSITY
         68                     C          NITER       ; ITERATIONS MADE FOR NEWTON LAPSON METHOD
         69                     C
         70                     C       (2) OUTPUT
         71                     C          UTAU   (IBE); FRICTION VELOCITY             AT WALL SURFACES
         72                     C          TAUX   (IBE); X-DIR. SHEAR STRESS COMPONENT AT WALL SURFACES
         73                     C          TAUY   (IBE); Y-DIR. SHEAR STRESS COMPONENT AT WALL SURFACES
         74                     C          TAUZ   (IBE); Z-DIR. SHEAR STRESS COMPONENT AT WALL SURFACES
         75                     C
         76                     C       (4) WORK
         77                     C          REP    (IBE); STORE WALL SURFACE REYNOLDS NUMBER(UP*YP/VISCM)
         78                     C          UPP    (IBE); STORE WALL SURFACE WALL VELOCITY  (UP/UTAU)
         79                     C          UPWL    (IP); STORE WALL U-VELOCITY AT GLOBAL NODE
         80                     C          VPWL    (IP); STORE WALL V-VELOCITY AT GLOBAL NODE
         81                     C          WPWL    (IP); STORE WALL W-VELOCITY AT GLOBAL NODE
         82                     C
         83                     C
         84                     C  MAKE OPPOSITE SURFACE NODE TABLE
         85                     C
         86                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<< Loop-information  End >>>
         87     1   s    v            DO 20 IS = 1 , 6
         88     2   p    v                IF(MOD(IS,2).EQ.1) THEN
         89     2   p    v                    ISF = IS+1
         90     2   p    v                ELSE
         91     2   p    v                    ISF = IS-1
         92     2   p    v                ENDIF
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
         93     2   s   fv                DO 10 I = 1 , 4
         94     2   m   fv                    LOCALF(I,ISF) = LOCAL(I,IS)
         95     2   p   fv         10     CONTINUE
         96     1   p    v         20 CONTINUE
         97                     C
         98                     C
         99                     C  STORE WALL VELOCITIES TO GLOBAL NODE ARRAYS
        100                     C
        101                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 160, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      WWALL, VWALL, UWALL, LPWALL
                              <<< Loop-information  End >>>
        102     1   s   2v            DO 50 IPWALL = 1 , NPWALL
        103     1   p   2v                IP = LPWALL(IPWALL)
        104     1   m   2v                UPWL(IP) = DEVLP2*UWALL(IPWALL)
        105     1   m   2v                VPWL(IP) = DEVLP2*VWALL(IPWALL)
        106     1   m   2v                WPWL(IP) = DEVLP2*WWALL(IPWALL)
        107     1   p   2v         50 CONTINUE
        108                     C
        109                     C
        110                     C  CALCULATE VELOCITY COMPONENTS AT THE WALL OPPOSITE SURFACE ALIGNED
        111                     C TO THE WALL SURFACE
        112                     C
        113                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 55
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEWALL, XNWALL, ZNWALL, YNWALL, TAUZ
                              <<<      TAUY, YP, REP, UTAU, TAUX
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 1
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        114     1  pp    v            DO 100 IEWALL = 1 , NEWALL
        115     1   p    v                IE  = LEWALL(1,IEWALL)
        116     1   p    v                IS  = LEWALL(2,IEWALL)
        117     1               C
        118     1   p    v                IPW1 = NODE(LOCAL (1,IS),IE)
        119     1   p    v                IPW2 = NODE(LOCAL (2,IS),IE)
        120     1   p    v                IPW3 = NODE(LOCAL (3,IS),IE)
        121     1   p    v                IPW4 = NODE(LOCAL (4,IS),IE)
        122     1               C
        123     1   p    v                IPF1 = NODE(LOCALF(1,IS),IE)
        124     1   p    v                IPF2 = NODE(LOCALF(2,IS),IE)
        125     1   p    v                IPF3 = NODE(LOCALF(3,IS),IE)
        126     1   p    v                IPF4 = NODE(LOCALF(4,IS),IE)
        127     1               C
        128     1   p    v                UPW = 0.25E0*(UPWL(IPW1)+UPWL(IPW2)+UPWL(IPW3)+UPWL(IPW4))
        129     1   p    v                VPW = 0.25E0*(VPWL(IPW1)+VPWL(IPW2)+VPWL(IPW3)+VPWL(IPW4))
        130     1   p    v                WPW = 0.25E0*(WPWL(IPW1)+WPWL(IPW2)+WPWL(IPW3)+WPWL(IPW4))
        131     1               C
        132     1   p    v                UPF = 0.25E0*(U(IPF1)+U(IPF2)+U(IPF3)+U(IPF4))
        133     1   p    v                VPF = 0.25E0*(V(IPF1)+V(IPF2)+V(IPF3)+V(IPF4))
        134     1   p    v                WPF = 0.25E0*(W(IPF1)+W(IPF2)+W(IPF3)+W(IPF4))
        135     1               C
        136     1   p    v                UPR = UPF-UPW
        137     1   p    v                VPR = VPF-VPW
        138     1   p    v                WPR = WPF-WPW
        139     1               C
        140     1   p    v                COF = XNWALL(IEWALL)*UPR+YNWALL(IEWALL)*VPR+ZNWALL(IEWALL)*WPR
        141     1               C
        142     1   p    v                TAUX(IEWALL) = UPR-COF*XNWALL(IEWALL)
        143     1   p    v                TAUY(IEWALL) = VPR-COF*YNWALL(IEWALL)
        144     1   p    v                TAUZ(IEWALL) = WPR-COF*ZNWALL(IEWALL)
        145     1               C
        146     1   p    v                UTAU(IEWALL) = SQRT(TAUX(IEWALL)**2
        147     1                    &                       +TAUY(IEWALL)**2
        148     1                    &                       +TAUZ(IEWALL)**2)+EPS
        149     1               C
        150     1   p    v                REP (IEWALL) = UTAU(IEWALL)*YP(IEWALL)/VISCM
        151     1   p    v        100 CONTINUE
        152                     C
        153                     C
        154                     C  CALCULATE FRICTION VELOCITY BASED ON THE SPALDING'S GENERALIZED
        155                     C WALL LAW, USING THE NEWTON LAPSON METHOD. NOTE THAT THE GENERALIZED
        156                     C WALL LAW CAN BE SOLVED FOR UP/UTAU WITH A SINGLE PARAMETER REP.
        157                     C
        158                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UPP, REP
                              <<< Loop-information  End >>>
        159     1                     DO 310 ITER = 1 , NITER
        160     2                         IF(ITER.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 92
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      REP, UPP
                              <<< Loop-information  End >>>
        161     3  pp                         DO 220 IEWALL = 1 , NEWALL
        162     4   p                             IF(REP(IEWALL).LE.TABLE(1,1)) THEN
        163     4   p                                 UPP(IEWALL) = SQRT(REP(IEWALL))
        164     4   p                                 GO TO 220
        165     4   p                             ENDIF
        166     3               C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        167     4   p   f                         DO 210 IENT = 2 , MAXENT
        168     5   p   f                             IF(REP(IEWALL).LE.TABLE(1,IENT)) THEN
        169     5   p   f                                 UPP(IEWALL) = TABLE(2,IENT)
        170     5   p   f                                 GO TO 220
        171     5   p   f                             ENDIF
        172     4   p   f         210             CONTINUE
        173     3               C
        174     3   p                             UPP(IEWALL) = TABLE(2,MAXENT)
        175     3   p             220         CONTINUE
        176     2                         ELSE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 39
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.35, ITR: 160, MVE: 5, POL: L)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UPP, REP
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 0
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 55
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        177     3  pp    v                    DO 300 IEWALL = 1 , NEWALL
        178     3   p    v                        F  = UPP(IEWALL)-REP(IEWALL)/UPP(IEWALL)
        179     3                    &                +EXP(-VKAP*B)*(EXP(VKAP*UPP(IEWALL))-1.E0
        180     3                    &                              -VKAP*UPP(IEWALL)
        181     3                    &                              -0.5E0*(VKAP*UPP(IEWALL))**2
        182     3                    &                              -1.E0/6.E0*(VKAP*UPP(IEWALL))**3)
        183     3               C
        184     3   p    v                        DF = 1.E0+REP(IEWALL)/UPP(IEWALL)**2
        185     3                    &                +EXP(-VKAP*B)*(VKAP*EXP(VKAP*UPP(IEWALL))
        186     3                    &                              -VKAP-VKAP**2*UPP(IEWALL)
        187     3                    &                              -0.5E0*VKAP**3*UPP(IEWALL)**2)
        188     3               C
        189     3   p    v                        UPP(IEWALL) = UPP(IEWALL)-F/DF
        190     3   p    v        300         CONTINUE
        191     2                         ENDIF
        192     1                 310 CONTINUE
        193                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 291
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.61, ITR: 176, MVE: 6, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      UTAU, TAUZ, TAUY, TAUX, UPP
                              <<< Loop-information  End >>>
        194     1  pp    v            DO 400 IEWALL = 1 , NEWALL
        195     1   p    v                UP           =  UTAU(IEWALL)
        196     1   p    v                UTAU(IEWALL) =  UP/UPP(IEWALL)
        197     1   p    v                TAUX(IEWALL) = -UTAU(IEWALL)**2*TAUX(IEWALL)/UP
        198     1   p    v                TAUY(IEWALL) = -UTAU(IEWALL)**2*TAUY(IEWALL)/UP
        199     1   p    v                TAUZ(IEWALL) = -UTAU(IEWALL)**2*TAUZ(IEWALL)/UP
        200     1   p    v        400 CONTINUE
        201                     C
        202                     C
        203                           RETURN
        204                           END

 Diagnostic messages: program name(TAUWAL)
   jwd8220o-i  "tauwal.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd6001s-i  "tauwal.f", line 87: SIMD conversion is applied to DO loop with DO variable 'IS'.
   jwd8203o-i  "tauwal.f", line 93: Loop unrolled fully.
   jwd5209p-i  "tauwal.f", line 94: DO loop is not parallelized: the variable 'ISF' referenced in the subscript expression of array 'LOCALF' is assigned to in DO loop.
   jwd6001s-i  "tauwal.f", line 102: SIMD conversion is applied to DO loop with DO variable 'IPWALL'.
   jwd8204o-i  "tauwal.f", line 102: This loop is software pipelined.
   jwd8205o-i  "tauwal.f", line 102: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 160.
   jwd5209p-i  "tauwal.f", line 104: DO loop is not parallelized: the variable 'IP' referenced in the subscript expression of array 'UPWL' is assigned to in DO loop.
   jwd5209p-i  "tauwal.f", line 105: DO loop is not parallelized: the variable 'IP' referenced in the subscript expression of array 'VPWL' is assigned to in DO loop.
   jwd5209p-i  "tauwal.f", line 106: DO loop is not parallelized: the variable 'IP' referenced in the subscript expression of array 'WPWL' is assigned to in DO loop.
   jwd5001p-i  "tauwal.f", line 114: DO loop with DO variable 'IEWALL' is parallelized.
   jwd6001s-i  "tauwal.f", line 114: SIMD conversion is applied to DO loop with DO variable 'IEWALL'.
   jwd8666o-i  "tauwal.f", line 114: This loop cannot be software pipelined because of shortage of floating-point registers.
   jwd8209o-i  "tauwal.f", line 136: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 137: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 138: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 140: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 146: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 150: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "tauwal.f", line 150: Division is changed to multiplication by reciprocal.
   jwd5208p-i  "tauwal.f", line 159: DO loop is not parallelized: the assign-refer order of 'UPP' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5001p-i  "tauwal.f", line 161: DO loop with DO variable 'IEWALL' is parallelized.
   jwd8670o-i  "tauwal.f", line 161: This loop cannot be software pipelined because the loop contains a branch instruction.
   jwd5131p-i  "tauwal.f", line 167: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "tauwal.f", line 167: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8203o-i  "tauwal.f", line 167: Loop unrolled fully.
   jwd5001p-i  "tauwal.f", line 177: DO loop with DO variable 'IEWALL' is parallelized.
   jwd6001s-i  "tauwal.f", line 177: SIMD conversion is applied to DO loop with DO variable 'IEWALL'.
   jwd8204o-i  "tauwal.f", line 177: This loop is software pipelined.
   jwd8205o-i  "tauwal.f", line 177: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 160.
   jwd8209o-i  "tauwal.f", line 178: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 184: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "tauwal.f", line 189: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5001p-i  "tauwal.f", line 194: DO loop with DO variable 'IEWALL' is parallelized.
   jwd6001s-i  "tauwal.f", line 194: SIMD conversion is applied to DO loop with DO variable 'IEWALL'.
   jwd8204o-i  "tauwal.f", line 194: This loop is software pipelined.
   jwd8205o-i  "tauwal.f", line 194: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 176.
   jwd8209o-i  "tauwal.f", line 197: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "tauwal.f", line 197: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "tauwal.f", line 198: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "tauwal.f", line 198: Division is changed to multiplication by reciprocal.
   jwd8209o-i  "tauwal.f", line 199: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8206o-i  "tauwal.f", line 199: Division is changed to multiplication by reciprocal.

 Procedure information
   Lines      : 204
   Statements : 83
   Stack(byte): 2320
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 204
   Total statements : 83
   Total stack(byte): 2320
   Total prefetch num: 0

