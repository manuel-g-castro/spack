
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:18 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : pred2d.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "PRED2D"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    PRED2D                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE PRED2D(IWEI,IMASS,DT,VISC,U,V,P,AU,AV,SX,SY,
         14                          *                  SN,DNX,DNY,EX,EY,EXX,EYY,EXY,ACCELX,ACCELY,
         15                          *                  IENP,JENP,NEP,IPNP,NPP,
         16                          *                  MAXE,MAXP,MAXEP,MAXPP,NE,NP,N,
         17                          *                  AC,CM,LBU,LBV,NBU,NBV,
         18                          *                  LEN,SNIN,DNXIN,DNYIN,FLUXN,NEN,
         19                          *                  RX,RY,FX,FY,DF,S,IUT0,IERR)
         20                           IMPLICIT REAL*8(A-H,O-Z)
         21                           REAL*4   SN,DNX,DNY,EX,EY,EXX,EYY,EXY,AC,CM
         22                           DIMENSION VISC(NE),U(NP),V(NP),P(NE),AU(N,NE),AV(N,NE),
         23                          1          SX(NE),SY(NE),SN(N,NE),DNX(N,NE),DNY(N,NE),
         24                          2          EX (N,N,NE),EY (N,N,NE),
         25                          3          EXX(N,N,NE),EYY(N,N,NE),EXY(N,N,NE),
         26                          4          IENP(MAXEP,NP),JENP(MAXEP,NP),NEP(NP),
         27                          5          IPNP(MAXPP,NP),NPP(NP),
         28                          5          AC  (MAXPP,NP),CM(NP),LBU(NBU),LBV(NBV),
         29                          6          LEN  (NEN),SNIN(N,NEN),DNXIN(N,NEN),DNYIN(N,NEN),
         30                          7          FLUXN(NEN),RX(N,NE),RY(N,NE),FX(NP),FY(NP),DF(NP),S(NP)
         31                     C
         32                           CHARACTER*72 ERMSG
         33                          & /' FATAL ERROR REPORTED !! PRED2D TERMINATES ALL THE PROCESS '/
         34                     C
         35                           IDIM = 2
         36                     C
         37                     C
         38                     C      CALCULATE VELOCITY PREDICTOR
         39                     C         ( 2-D CALCULATION )
         40                     C
         41                     C
         42                     C     ARGUMENT LISTINGS
         43                     C       (1) INPUT
         44                     C          IWEI        ; SPECIFIES THE TYPE OF WEIGHTING FUNCTIONS
         45                     C                       FOR THE ADVECTION TERMS AS FOLLOWS
         46                     C                   1 --- GALERKIN             TYPE WEIGHTING FUNCTION
         47                     C                   2 --- STREAMLINE UPWINDING TYPE WEIGHTING FUNCTION
         48                     C          IMASS       ; SPECIFIES MASS MATRIX TREATMENT AS FOLLOWS
         49                     C                   1 --- LUMPED MASS REPRESENTATION
         50                     C                   2,3,- MULTI-PASS ALGORITHEM WILL BE TAKEN
         51                     C          DT          ; TIME INCTREMENT
         52                     C          VISC    (IE); ELEMENT VISCOSITY
         53                     C          P       (IE); ELEMENT PRESSURE
         54                     C          AU    (I,IE); ELEMENT VECTOR OF U(IP)
         55                     C          AV    (I,IE); ELEMENT VECTOR OF V(IP)
         56                     C          SX      (IE); STREAMLINE UPWINDING SHIFT VECTOR ( X-DIR. )
         57                     C          SY      (IE); STREAMLINE UPWINDING SHIFT VECTOR ( Y-DIR. )
         58                     C
         59                     C          SN    (I,IE); ELEMENT INTEGRATED VECTOR OF N
         60                     C          DNX   (I,IE); INTEGRATED ELEMENT VECTOR OF NX
         61                     C          DNY   (I,IE); INTEGRATED ELEMENT VECTOR OF NY
         62                     C          EX  (J,I,IE); INTEGRATED ELEMENT MATRIX OF N*NXT
         63                     C          EY  (J,I,IE); INTEGRATED ELEMENT MATRIX OF N*NYT
         64                     C          EXX (J,I,IE); INTEGRATED ELEMENT MATRIX OF NX*NXT
         65                     C          EYY (J,I,IE); INTEGRATED ELEMENT MATRIX OF NY*NYT
         66                     C          EXY (J,I,IE); INTEGRATED ELEMENT MATRIX OF NX*NYT
         67                     C
         68                     C          ACCELX      ; X-DIR. BODY FORCE ( UNIFORM )
         69                     C          ACCELY      ; Y-DIR. BODY FORCE ( UNIFORM )
         70                     C
         71                     C          IENP(IEP,IP); ADJACENT ELEMENT NUMBER TO NODE IP
         72                     C                      ( IF NEP(IP).LT.MAXEP , THEN IENP(NEP(IP)+1,IP),
         73                     C                       IENP(MAXEP,IP) MUST BE SET TO AN IMAGINARY
         74                     C                       ELEMENT NO. BETWEEN NE+1,MAXE.)
         75                     C          JENP(IEP,IP); LOCAL NODE NUMBER OF IP IN ELEMENT IENP(IEP,IP)
         76                     C          NEP     (IP); NUMBER OF ADJACENT ELEMENTS TO NODE IP
         77                     C          IPNP(IPP,IP); ADJACENT NODE    NUMBER TO NODE    IP
         78                     C                      ( IF NPP(IP).LT.MAXPP , THEN IPNP(NPP(IP)+1,IP),
         79                     C                       IPNP(MAXPP,IP) MUST BE SET TO AN IMAGINARY
         80                     C                       NODE    NO. BETWEEN NP+1,MAXP.)
         81                     C          NPP     (IP); NUMBER OF ADJACENT NODES    TO NODE    IP
         82                     C          MAXE        ; THE MAXIMUM NUMBER  OF ELEMETS
         83                     C          MAXP        ; THE MAXIMUM NUMBER  OF   NODES
         84                     C          MAXEP       ; THE FIRST DIMENSION OF ARRAY IENP,JENP
         85                     C          MAXPP       ; THE FIRST DIMENSION OF ARRAY IPNP
         86                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         87                     C          NP          ; NUMBER OF TOTAL    NODES
         88                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         89                     C
         90                     C          AC  (IPP,IP); CONDENSED MASS MATRIX
         91                     C          CM      (IP); LUMPED    MASS MATRIX
         92                     C          LBU     (IB); U-PRESCRIBED NODE SPECIFYING LIST VECTOR
         93                     C          LBV     (IB); V-PRESCRIBED NODE SPECIFYING LIST VECTOR
         94                     C          NBU         ; NUMBER OF U-PRESCRIBED NODES
         95                     C          NBV         ; NUMBER OF V-PRESCRIBED NODES
         96                     C
         97                     C          LEN     (IB); ELEMENT NUMBERS FACING ON OUTFLOW BOUNDARIES
         98                     C          SNIN  (I,IB); SHAPE FUNCTION AT MID POINT OF BOUNDARY SIDES
         99                     C          DNXIN (I,IB); X-DERIVATIVE   AT MID POINT OF BOUNDARY SIDES
        100                     C          DNYIN (I,IB); Y-DERIVATIVE   AT MID POINT OF BOUNDARY SIDES
        101                     C          FLUXN   (IB); HALF VOLUME FLOW LEAVING OUTFLOW BOUNDARY SIDES
        102                     C                       IN ONE TIME INTEGRATION
        103                     C          NEN         ; NUMBER OF SIDES FACING ON OUTFLOW BOUNDARIES
        104                     C
        105                     C          IUT0        ; DEVICE NO. TO REPORT ERROR OCCURENCE
        106                     C
        107                     C       (2) OUTPUT
        108                     C          IERR        ; RETURN CODE TO REPORT ERROR OCCURENCE
        109                     C                   0 --- NORMAL TERMINATION
        110                     C                   1 --- A FATAL ERROR HAS OCCURED
        111                     C
        112                     C       (3) INPUT-OUTPUT
        113                     C          U   (IP)   ; X-DIR. VELOCITY COMPONENT
        114                     C          V   (IP)   ; Y-DIR. VELOCITY COMPONENT
        115                     C
        116                     C       (4) WORK
        117                     C          RX  (I,IE) ; ELEMENT MOMENTUM RESIDUAL ( X-DIR. )
        118                     C          RY  (I,IE) ; ELEMENT MOMENTUM RESIDUAL ( Y-DIR. )
        119                     C          FX  (IP)   ; X-DIR. GLOBAL MOMENTUM RESIDUAL
        120                     C          FY  (IP)   ; Y-DIR. GLOBAL MOMENTUM RESIDUAL
        121                     C          DF  (IP)   ; WORKING  VECTOR OF MULTI-PASS ALGORITHM
        122                     C          S   (IP)   ; SOLUTION VECTOR OF MULTI-PASS ALGORITHM
        123                     C
        124                     C
        125                     C      ADVECTION TERM CALCULATION ( GALERKIN             TYPE )
        126                     C
        127     1                     IF(IWEI.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 0.93, ITR: 32, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RY, RX
                              <<< Loop-information  End >>>
        128     2   p    v            DO 110 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RX, RY
                              <<< Loop-information  End >>>
        129     3  pp                     DO 100 IE = 1 , NE
        130     3   p    v                   AX1 = EX(1,I,IE)
        131     3   p    v                   AX2 = EX(2,I,IE)
        132     3   p    v                   AX3 = EX(3,I,IE)
        133     3   p    v                   AX4 = EX(4,I,IE)
        134     3               C
        135     3   p    v                   AY1 = EY(1,I,IE)
        136     3   p    v                   AY2 = EY(2,I,IE)
        137     3   p    v                   AY3 = EY(3,I,IE)
        138     3   p    v                   AY4 = EY(4,I,IE)
        139     3               C
        140     3   p    v                   RX(I,IE) = -AX1*AU(1,IE)*AU(1,IE)-AY1*AV(1,IE)*AU(1,IE)
        141     3                    &                  -AX2*AU(2,IE)*AU(2,IE)-AY2*AV(2,IE)*AU(2,IE)
        142     3                    &                  -AX3*AU(3,IE)*AU(3,IE)-AY3*AV(3,IE)*AU(3,IE)
        143     3                    &                  -AX4*AU(4,IE)*AU(4,IE)-AY4*AV(4,IE)*AU(4,IE)
        144     3               C
        145     3   p    v                   RY(I,IE) = -AX1*AU(1,IE)*AV(1,IE)-AY1*AV(1,IE)*AV(1,IE)
        146     3                    &                  -AX2*AU(2,IE)*AV(2,IE)-AY2*AV(2,IE)*AV(2,IE)
        147     3                    &                  -AX3*AU(3,IE)*AV(3,IE)-AY3*AV(3,IE)*AV(3,IE)
        148     3                    &                  -AX4*AU(4,IE)*AV(4,IE)-AY4*AV(4,IE)*AV(4,IE)
        149     3   p             100     CONTINUE
        150     2   p             110 CONTINUE
        151     1                     ENDIF
        152                     C
        153                     C      ADVECTION TERM CALCULATION ( STREAMLINE UPWINDING TYPE )
        154                     C
        155     1                     IF(IWEI.EQ.2) THEN
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 2.00, ITR: 48, MVE: 2, POL: L)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      RX, EXY, RY
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 0
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 46
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        156     2   p    v            DO 210 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EXY, RX, RY
                              <<< Loop-information  End >>>
        157     3  pp                     DO 200 IE = 1 , NE
        158     3   p    v                   AX1 = EX(1,I,IE)+SX(IE)*EXX(1,I,IE)+SY(IE)*EXY(I,1,IE)
        159     3   p    v                   AX2 = EX(2,I,IE)+SX(IE)*EXX(2,I,IE)+SY(IE)*EXY(I,2,IE)
        160     3   p    v                   AX3 = EX(3,I,IE)+SX(IE)*EXX(3,I,IE)+SY(IE)*EXY(I,3,IE)
        161     3   p    v                   AX4 = EX(4,I,IE)+SX(IE)*EXX(4,I,IE)+SY(IE)*EXY(I,4,IE)
        162     3               C
        163     3   p    v                   AY1 = EY(1,I,IE)+SX(IE)*EXY(1,I,IE)+SY(IE)*EYY(1,I,IE)
        164     3   p    v                   AY2 = EY(2,I,IE)+SX(IE)*EXY(2,I,IE)+SY(IE)*EYY(2,I,IE)
        165     3   p    v                   AY3 = EY(3,I,IE)+SX(IE)*EXY(3,I,IE)+SY(IE)*EYY(3,I,IE)
        166     3   p    v                   AY4 = EY(4,I,IE)+SX(IE)*EXY(4,I,IE)+SY(IE)*EYY(4,I,IE)
        167     3               C
        168     3   p    v                   RX(I,IE) = -AX1*AU(1,IE)*AU(1,IE)-AY1*AV(1,IE)*AU(1,IE)
        169     3                    &                  -AX2*AU(2,IE)*AU(2,IE)-AY2*AV(2,IE)*AU(2,IE)
        170     3                    &                  -AX3*AU(3,IE)*AU(3,IE)-AY3*AV(3,IE)*AU(3,IE)
        171     3                    &                  -AX4*AU(4,IE)*AU(4,IE)-AY4*AV(4,IE)*AU(4,IE)
        172     3               C
        173     3   p    v                   RY(I,IE) = -AX1*AU(1,IE)*AV(1,IE)-AY1*AV(1,IE)*AV(1,IE)
        174     3                    &                  -AX2*AU(2,IE)*AV(2,IE)-AY2*AV(2,IE)*AV(2,IE)
        175     3                    &                  -AX3*AU(3,IE)*AV(3,IE)-AY3*AV(3,IE)*AV(3,IE)
        176     3                    &                  -AX4*AU(4,IE)*AV(4,IE)-AY4*AV(4,IE)*AV(4,IE)
        177     3   p             200     CONTINUE
        178     2   p             210 CONTINUE
        179     1                     ENDIF
        180                     C
        181                     C      STRESS TERM CALCULATION
        182                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 1.25, ITR: 24, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EXY, RY, RX
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 2
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        183     1   p    v            DO 310 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    FUSED(lines: 184,207)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      EXY, RY, RX
                              <<< Loop-information  End >>>
        184     2  pp                     DO 300 IE = 1 , NE
        185     2   p    v                    RX(I,IE) = RX(I,IE)
        186     2                    &             -VISC(IE)*(EXX(1,I,IE)*AU(1,IE)+EXX(1,I,IE)*AU(1,IE)
        187     2                    &                       +EXX(2,I,IE)*AU(2,IE)+EXX(2,I,IE)*AU(2,IE)
        188     2                    &                       +EXX(3,I,IE)*AU(3,IE)+EXX(3,I,IE)*AU(3,IE)
        189     2                    &                       +EXX(4,I,IE)*AU(4,IE)+EXX(4,I,IE)*AU(4,IE)
        190     2                    &                       +EYY(1,I,IE)*AU(1,IE)+EXY(I,1,IE)*AV(1,IE)
        191     2                    &                       +EYY(2,I,IE)*AU(2,IE)+EXY(I,2,IE)*AV(2,IE)
        192     2                    &                       +EYY(3,I,IE)*AU(3,IE)+EXY(I,3,IE)*AV(3,IE)
        193     2                    &                       +EYY(4,I,IE)*AU(4,IE)+EXY(I,4,IE)*AV(4,IE))
        194     2               C
        195     2   p    v                    RY(I,IE) = RY(I,IE)
        196     2                    &             -VISC(IE)*(EXX(1,I,IE)*AV(1,IE)+EXY(1,I,IE)*AU(1,IE)
        197     2                    &                       +EXX(2,I,IE)*AV(2,IE)+EXY(2,I,IE)*AU(2,IE)
        198     2                    &                       +EXX(3,I,IE)*AV(3,IE)+EXY(3,I,IE)*AU(3,IE)
        199     2                    &                       +EXX(4,I,IE)*AV(4,IE)+EXY(4,I,IE)*AU(4,IE)
        200     2                    &                       +EYY(1,I,IE)*AV(1,IE)+EYY(1,I,IE)*AV(1,IE)
        201     2                    &                       +EYY(2,I,IE)*AV(2,IE)+EYY(2,I,IE)*AV(2,IE)
        202     2                    &                       +EYY(3,I,IE)*AV(3,IE)+EYY(3,I,IE)*AV(3,IE)
        203     2                    &                       +EYY(4,I,IE)*AV(4,IE)+EYY(4,I,IE)*AV(4,IE))
        204     2   p             300     CONTINUE
        205     1   p             310 CONTINUE
        206                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
        207     1                     DO 400 IE = 1 , NE
        208     1   p                     RX(1,IE) = RX(1,IE)+P(IE)*DNX(1,IE)+ACCELX*SN(1,IE)
        209     1   p                     RX(2,IE) = RX(2,IE)+P(IE)*DNX(2,IE)+ACCELX*SN(2,IE)
        210     1   p                     RX(3,IE) = RX(3,IE)+P(IE)*DNX(3,IE)+ACCELX*SN(3,IE)
        211     1   p                     RX(4,IE) = RX(4,IE)+P(IE)*DNX(4,IE)+ACCELX*SN(4,IE)
        212     1               C
        213     1   p                     RY(1,IE) = RY(1,IE)+P(IE)*DNY(1,IE)+ACCELY*SN(1,IE)
        214     1   p                     RY(2,IE) = RY(2,IE)+P(IE)*DNY(2,IE)+ACCELY*SN(2,IE)
        215     1   p                     RY(3,IE) = RY(3,IE)+P(IE)*DNY(3,IE)+ACCELY*SN(3,IE)
        216     1   p                     RY(4,IE) = RY(4,IE)+P(IE)*DNY(4,IE)+ACCELY*SN(4,IE)
        217     1                 400 CONTINUE
        218                     C
        219                     C      UPWINDING ON OUTFLOW BOUNDARIES
        220                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 0.61, ITR: 3, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEN, FLUXN
                              <<< Loop-information  End >>>
        221     1   s    s            DO 500 IB = 1 , NEN
        222     1   p    v               IE = LEN(IB)
        223     1   p    v               UPX=DNXIN(1,IB)*AU(1,IE)*AU(1,IE)+DNYIN(1,IB)*AU(1,IE)*AV(1,IE)
        224     1                    &      +DNXIN(2,IB)*AU(2,IE)*AU(2,IE)+DNYIN(2,IB)*AU(2,IE)*AV(2,IE)
        225     1                    &      +DNXIN(3,IB)*AU(3,IE)*AU(3,IE)+DNYIN(3,IB)*AU(3,IE)*AV(3,IE)
        226     1                    &      +DNXIN(4,IB)*AU(4,IE)*AU(4,IE)+DNYIN(4,IB)*AU(4,IE)*AV(4,IE)
        227     1   m    m               RX(1,IE) = RX(1,IE)+FLUXN(IB)*UPX*SNIN(1,IB)
        228     1   m    m               RX(2,IE) = RX(2,IE)+FLUXN(IB)*UPX*SNIN(2,IB)
        229     1   m    m               RX(3,IE) = RX(3,IE)+FLUXN(IB)*UPX*SNIN(3,IB)
        230     1   m    m               RX(4,IE) = RX(4,IE)+FLUXN(IB)*UPX*SNIN(4,IB)
        231     1   p    v        500 CONTINUE
        232                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SOFTWARE PIPELINING(IPC: 0.61, ITR: 3, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LEN, FLUXN
                              <<< Loop-information  End >>>
        233     1   s    s            DO 600 IB = 1 , NEN
        234     1   p    v               IE = LEN(IB)
        235     1   p    v               UPY=DNXIN(1,IB)*AU(1,IE)*AV(1,IE)+DNYIN(1,IB)*AV(1,IE)*AV(1,IE)
        236     1                    &      +DNXIN(2,IB)*AU(2,IE)*AV(2,IE)+DNYIN(2,IB)*AV(2,IE)*AV(2,IE)
        237     1                    &      +DNXIN(3,IB)*AU(3,IE)*AV(3,IE)+DNYIN(3,IB)*AV(3,IE)*AV(3,IE)
        238     1                    &      +DNXIN(4,IB)*AU(4,IE)*AV(4,IE)+DNYIN(4,IB)*AV(4,IE)*AV(4,IE)
        239     1   m    m               RY(1,IE) = RY(1,IE)+FLUXN(IB)*UPY*SNIN(1,IB)
        240     1   m    m               RY(2,IE) = RY(2,IE)+FLUXN(IB)*UPY*SNIN(2,IB)
        241     1   m    m               RY(3,IE) = RY(3,IE)+FLUXN(IB)*UPY*SNIN(3,IB)
        242     1   m    m               RY(4,IE) = RY(4,IE)+FLUXN(IB)*UPY*SNIN(4,IB)
        243     1   p    v        600 CONTINUE
        244                     C
        245                     C      SUPERPOSITION
        246                     C
        247                           CALL SUPER2(IDIM,RX,IENP,JENP,NEP,MAXE,MAXEP,NE,NP,N,
        248                          *            FX,IUT0,IERR)
        249                           CALL SUPER2(IDIM,RY,IENP,JENP,NEP,MAXE,MAXEP,NE,NP,N,
        250                          *            FY,IUT0,IERR)
        251                     C
        252     1                     IF(IERR.EQ.1) THEN
        253     1                         WRITE(IUT0,6300) ERMSG
        254     1                         RETURN
        255     1                     ENDIF
        256                     C
        257                     C      SOLVE EQUATIONS
        258                     C
        259                           CALL SOLVEF(IDIM,IMASS,AC,CM,IPNP,NPP,MAXP,MAXPP,NP,
        260                          *            FX,LBU,NBU,S,DF,IUT0,IERR)
        261                     C
        262     1                     IF(IERR.EQ.1) THEN
        263     1                         WRITE(IUT0,6300) ERMSG
        264     1                         RETURN
        265     1                     ENDIF
        266                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 192, MVE: 7, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      S, U
                              <<< Loop-information  End >>>
        267     1  pp   2v            DO 700 IP = 1 , NP
        268     1   p   2v                U(IP) = U(IP)+DT*S(IP)
        269     1   p   2v        700 CONTINUE
        270                     C
        271                           CALL SOLVEF(IDIM,IMASS,AC,CM,IPNP,NPP,MAXP,MAXPP,NP,
        272                          *            FY,LBV,NBV,S,DF,IUT0,IERR)
        273                     C
        274     1                     IF(IERR.EQ.1) THEN
        275     1                         WRITE(IUT0,6300) ERMSG
        276     1                         RETURN
        277     1                     ENDIF
        278                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 8)
                              <<<    SOFTWARE PIPELINING(IPC: 3.00, ITR: 192, MVE: 7, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      S, V
                              <<< Loop-information  End >>>
        279     1  pp   2v            DO 800 IP = 1 , NP
        280     1   p   2v                V(IP) = V(IP)+DT*S(IP)
        281     1   p   2v        800 CONTINUE
        282                     C
        283                     C
        284                           RETURN
        285                      6300 FORMAT(A72)
        286                           END

 Diagnostic messages: program name(PRED2D)
   jwd8220o-i  "pred2d.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8211o-i  "pred2d.f", line 128: Loops interchanged at line 129.
   jwd6001s-i  "pred2d.f", line 128: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "pred2d.f", line 128: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 128: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 32.
   jwd8211o-i  "pred2d.f", line 129: Loops interchanged at line 128.
   jwd5001p-i  "pred2d.f", line 129: DO loop with DO variable 'IE' is parallelized.
   jwd8209o-i  "pred2d.f", line 140: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 145: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8211o-i  "pred2d.f", line 156: Loops interchanged at line 157.
   jwd6001s-i  "pred2d.f", line 156: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "pred2d.f", line 156: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 156: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 48.
   jwd8211o-i  "pred2d.f", line 157: Loops interchanged at line 156.
   jwd5001p-i  "pred2d.f", line 157: DO loop with DO variable 'IE' is parallelized.
   jwd8209o-i  "pred2d.f", line 168: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 173: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8211o-i  "pred2d.f", line 183: Loops interchanged at line 184.
   jwd6001s-i  "pred2d.f", line 183: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8204o-i  "pred2d.f", line 183: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 183: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 24.
   jwd8210o-i  "pred2d.f", line 184: Loops fused at line 207.
   jwd8211o-i  "pred2d.f", line 184: Loops interchanged at line 183.
   jwd5001p-i  "pred2d.f", line 184: DO loop with DO variable 'IE' is parallelized.
   jwd8209o-i  "pred2d.f", line 185: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 195: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 208: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 209: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 210: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 211: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 213: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 214: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 215: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 216: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6302s-i  "pred2d.f", line 221: SIMD conversion is not applied to DO loop: the performance of a partial SIMD execution may not be improved.
   jwd8204o-i  "pred2d.f", line 221: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 221: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 3.
   jwd8209o-i  "pred2d.f", line 223: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 227: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5209p-i  "pred2d.f", line 227: DO loop is not parallelized: the variable 'IE' referenced in the subscript expression of array 'RX' is assigned to in DO loop.
   jwd6209s-i  "pred2d.f", line 227: SIMD conversion cannot be applied to DO loop: the variable 'IE' referenced in the subscript expression of array 'RX' is assigned to in DO loop.
   jwd8209o-i  "pred2d.f", line 228: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 229: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 230: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd6302s-i  "pred2d.f", line 233: SIMD conversion is not applied to DO loop: the performance of a partial SIMD execution may not be improved.
   jwd8204o-i  "pred2d.f", line 233: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 233: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 3.
   jwd8209o-i  "pred2d.f", line 235: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 239: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5209p-i  "pred2d.f", line 239: DO loop is not parallelized: the variable 'IE' referenced in the subscript expression of array 'RY' is assigned to in DO loop.
   jwd6209s-i  "pred2d.f", line 239: SIMD conversion cannot be applied to DO loop: the variable 'IE' referenced in the subscript expression of array 'RY' is assigned to in DO loop.
   jwd8209o-i  "pred2d.f", line 240: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 241: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "pred2d.f", line 242: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5001p-i  "pred2d.f", line 267: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "pred2d.f", line 267: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "pred2d.f", line 267: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 267: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.
   jwd5001p-i  "pred2d.f", line 279: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "pred2d.f", line 279: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "pred2d.f", line 279: This loop is software pipelined.
   jwd8205o-i  "pred2d.f", line 279: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 192.

 Procedure information
   Lines      : 286
   Statements : 95
   Stack(byte): 3696
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 286
   Total statements : 95
   Total stack(byte): 3696
   Total prefetch num: 0

