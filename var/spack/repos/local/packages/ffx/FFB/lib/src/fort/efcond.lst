
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:53:51 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : efcond.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "EFCOND"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    EFCOND                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE EFCOND(JCON,EFD,MP,MDAT,NSET,ISET,ISR,IVR1,IVR2,
         14                          *                  SR,VR1,VR2,X,Y,NODE,NE,NP,N,XMIN,XMAX,YMIN,YMAX,
         15                          *                  LCOND,XX,YY)
         16                           IMPLICIT REAL*4(A-H,O-Z)
         17                           DIMENSION EFD(MP,MDAT,NSET),SR(NP),VR1(NP),VR2(NP),
         18                          1          X(NP),Y(NP),NODE(N,NE),LCOND(NP),XX(NP),YY(NP)
         19                     C
         20                     C
         21                     C      ALLOCATES FIELD DATA WITH OR WITHOUT FIELD CONDENSATION
         22                     C         ( 2-D GRAPHICS )
         23                     C
         24                     C
         25                     C     ARGUMENT LISTINGS
         26                     C       (1) INPUT(-OUTPUT FOR JCON=1)
         27                     C          JCON        ; CONDENSATION WILL BE DONE IF THIS IS SET 1
         28                     C          EFD(IP,I,J) ; FIELD DATA DEFINED IN THE GLOBAL REGION
         29                     C          MP          ; MAX. NO. OF NODES ALLOWED
         30                     C          MDAT        ; MAX. NO. OF DATA  ALLOWED
         31                     C           NOTES : MP AND MDAT ARE THE FIRST AND SECOND ELEMENT
         32                     C                  SIZE OF ARRAY EFCOND, RESPECTIVELY.
         33                     C          NSET        ; NUMBER OF TOTAL SETS
         34                     C          ISET        ; SPECIFIES SET NUMBER              TO ALLOCATE
         35                     C          ISR         ; SPECIFIES SCALAR                  TO ALLOCATE
         36                     C          IVR1        ; SPECIFIES FIRST  VECTOR COMPONENT TO ALLOCATE
         37                     C          IVR2        ; SPECIFIES SECOND VECTOR COMPONENT TO ALLOCATE
         38                     C           NOTES : IF ANY OF THESE FOUR IS SET ZERO, THE ALLOCATION
         39                     C                  WILL NOT BE DONE.
         40                     C          X      (IP) ; X-COOR. OF NODE (OF CONDENSED FIELD FOR JCON=1)
         41                     C          Y      (IP) ; Y-COOR. OF NODE (OF CONDENSED FIELD FOR JCON=1)
         42                     C          NODE (I,IE) ; NODE TABLE      (OF CONDENSED FIELD FOR JCON=1)
         43                     C          NE          ; NUMBER OF ELEM. (OF CONDENSED FIELD FOR JCON=1)
         44                     C          NP          ; NUMBER OF NODES (OF CONDENSED FIELD FOR JCON=1)
         45                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         46                     C          XMIN        ; MIN. X OF GRAPHIC RANGE SPECIFIED
         47                     C          XMAX        ; MAX. X OF GRAPHIC RANGE SPECIFIED
         48                     C          YMIN        ; MIN. Y OF GRAPHIC RANGE SPECIFIED
         49                     C          YMAX        ; MAX. Y OF GRAPHIC RANGE SPECIFIED
         50                     C
         51                     C       (2) OUTPUT
         52                     C          SR (IP)     ; ALLOCATED SCALAR
         53                     C          VR1(IP)     ; ALLOCATED FIRST  VECTOR COMPONENT
         54                     C          VR2(IP)     ; ALLOCATED SECOND VECTOR COMPONENT
         55                     C
         56                     C       (4) WORK
         57                     C          XX     (IP) ; ORIGINAL           X-DIR. COORDINATE OF NODE
         58                     C          YY     (IP) ; ORIGINAL           Y-DIR. COORDINATE OF NODE
         59                     C          LCOND  (IP) ; CORRESPONDING NODE NO. IN THE CONDENSED FIELD
         60                     C                      ( IF THERE IS NO CORRESPONDING NODE , THEN
         61                     C                       LCOND(IP) WILL BE SET TO ZERO.)
         62                     C
         63                     C
         64     1                     IF(JCON.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 800
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.12, ITR: 128, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      YY, XX, Y, X, LCOND
                              <<< Loop-information  End >>>
         65     2  pp   2v                DO 10 IP = 1 , NP
         66     2   p   2v                    LCOND(IP) = 0
         67     2   p   2v                    XX   (IP) = X(IP)
         68     2   p   2v                    YY   (IP) = Y(IP)
         69     2   p   2v         10     CONTINUE
         70     1               C
         71     1                         NENEW = 0
         72     1                         NPNEW = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    UNSWITCHING
                              <<< Loop-information  End >>>
         73     2                         DO 50 IE = 1 , NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
         74     3                             DO 20 I = 1 , N
         75     3                                 IP = NODE(I,IE)
         76     3                                 SIGX = (XX(IP)-XMIN)*(XX(IP)-XMAX)
         77     3                                 SIGY = (YY(IP)-YMIN)*(YY(IP)-YMAX)
         78     3                                 IF(SIGX.LE.0.0 .AND. SIGY.LE.0.0) GO TO 30
         79     3                  20         CONTINUE
         80     2                             GO TO 50
         81     2                  30         CONTINUE
         82     2                             NENEW = NENEW+1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
         83     3        s                    DO 40 I = 1 , N
         84     3        v                        IP = NODE(I,IE)
         85     4        m                        IF(LCOND(IP).EQ.0) THEN
         86     4        s                            NPNEW = NPNEW+1
         87     4        s                            LCOND(IP) = NPNEW
         88     4        s                            X  (NPNEW) = XX(IP)
         89     4        s                            Y  (NPNEW) = YY(IP)
         90     4        s                            IF(ISET*ISR  .NE.0) SR (NPNEW) = EFD(IP,ISR ,ISET)
         91     4        s                            IF(ISET*IVR1 .NE.0) VR1(NPNEW) = EFD(IP,IVR1,ISET)
         92     4        s                            IF(ISET*IVR2 .NE.0) VR2(NPNEW) = EFD(IP,IVR2,ISET)
         93     4        v                        ENDIF
         94     3        s                        NODE(I,NENEW) = LCOND(IP)
         95     3        v         40         CONTINUE
         96     2                  50     CONTINUE
         97     1                         NE = NENEW
         98     1                         NP = NPNEW
         99     1                     ELSE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.60, ITR: 96, MVE: 3, POL: S)
                              <<<    UNSWITCHING
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      VR2, EFD, VR1, SR
                              <<< Loop-information  End >>>
        100     2  pp    v                DO 60 IP = 1 , NP
        101     2   p    v                    IF(ISET*ISR  .NE.0) SR (IP) = EFD(IP,ISR ,ISET)
        102     2   p    v                    IF(ISET*IVR1 .NE.0) VR1(IP) = EFD(IP,IVR1,ISET)
        103     2   p    v                    IF(ISET*IVR2 .NE.0) VR2(IP) = EFD(IP,IVR2,ISET)
        104     2   p    v         60     CONTINUE
        105     1                     ENDIF
        106                     C
        107                     C
        108                           RETURN
        109                           END

 Diagnostic messages: program name(EFCOND)
   jwd8220o-i  "efcond.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd5001p-i  "efcond.f", line 65: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "efcond.f", line 65: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "efcond.f", line 65: This loop is software pipelined.
   jwd8205o-i  "efcond.f", line 65: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 128.
   jwd8321o-i  "efcond.f", line 73: Loop unswitched.
   jwd5202p-i  "efcond.f", line 73: DO loop is not parallelized: data dependency of variable 'NENEW' may cause different results from serial execution for loop.
   jwd5202p-i  "efcond.f", line 73: DO loop is not parallelized: data dependency of variable 'NPNEW' may cause different results from serial execution for loop.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'Y' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'X' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'VR2' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'VR1' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'SR' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'NODE' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5208p-i  "efcond.f", line 73: DO loop is not parallelized: the assign-refer order of 'LCOND' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd5133p-i  "efcond.f", line 73: DO loop is not parallelized: its structure is too complicated.
   jwd5131p-i  "efcond.f", line 74: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "efcond.f", line 74: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "efcond.f", line 74: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5228p-i  "efcond.f", line 83: DO loop is not parallelized: data dependency of variable may cause different results from serial execution for loop.
   jwd5208p-i  "efcond.f", line 83: DO loop is not parallelized: the assign-refer order of 'NPNEW' in a parallel execution may differ from the assign-refer order in the serial execution.
   jwd6229s-i  "efcond.f", line 83: SIMD conversion is not applied to DO loop: there are IF statements in the loop.
   jwd8670o-i  "efcond.f", line 83: This loop cannot be software pipelined because the loop contains a branch instruction.
   jwd6209s-i  "efcond.f", line 85: SIMD conversion cannot be applied to DO loop: the variable 'IP' referenced in the subscript expression of array 'LCOND' is assigned to in DO loop.
   jwd6228s-i  "efcond.f", line 86: SIMD conversion cannot be applied to DO loop: an assign-refer order of data in a SIMD execution may differ from the assign-refer order in the serial execution.
   jwd6202s-i  "efcond.f", line 86: SIMD conversion cannot be applied to DO loop: data dependency of variable 'NPNEW' may cause different results from serial execution for loop.
   jwd8209o-i  "efcond.f", line 92: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8321o-i  "efcond.f", line 100: Loop unswitched.
   jwd5001p-i  "efcond.f", line 100: DO loop with DO variable 'IP' is parallelized.
   jwd6001s-i  "efcond.f", line 100: SIMD conversion is applied to DO loop with DO variable 'IP'.
   jwd8204o-i  "efcond.f", line 100: This loop is software pipelined.
   jwd8205o-i  "efcond.f", line 100: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd8209o-i  "efcond.f", line 103: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 109
   Statements : 46
   Stack(byte): 2416
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 109
   Total statements : 46
   Total stack(byte): 2416
   Total prefetch num: 0

