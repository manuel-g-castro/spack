
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:53:58 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : field3.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "FIELD3"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    FIELD3                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE FIELD3(IMODE,U,V,W,DNXI,DNYI,DNZI,NODE,NE,NP,N,FE)
         14                           IMPLICIT REAL*4(A-H,O-Z)
         15                           DIMENSION U(NP),V(NP),W(NP),
         16                          1          DNXI(N,NE),DNYI(N,NE),DNZI(N,NE),NODE(N,NE),FE(NE)
         17                     C
         18                     C
         19                     C      CALCULATE VELOCITY FIELD CHARACTERISTICS
         20                     C         ( 3-D CALCULATION : SINGLE WORD VERSION )
         21                     C
         22                     C
         23                     C     ARGUMENT LISTINGS
         24                     C       (1) INPUT
         25                     C          IMODE       ; SPECIFIES THE TYPE OF FIELD DATA AS FOLLOWS
         26                     C                   1 --- ELEMENT DIVERGENT
         27                     C                   2 --- ELEMENT VORTICITY ( ROTATION ) ABOUT X-AXIS
         28                     C                   3 --- ELEMENT VORTICITY ( ROTATION ) ABOUT Y-AXIS
         29                     C                   4 --- ELEMENT VORTICITY ( ROTATION ) ABOUT Z-AXIS
         30                     C          U     (IP)  ; X-DIR. VELOCITY COMPONENT
         31                     C          V     (IP)  ; Y-DIR. VELOCITY COMPONENT
         32                     C          W     (IP)  ; Z-DIR. VELOCITY COMPONENT
         33                     C          DNXI(I,IE)  ; ELEMENT CENTER VALUE OF     NX
         34                     C          DNYI(I,IE)  ; ELEMENT CENTER VALUE OF     NY
         35                     C          DNZI(I,IE)  ; ELEMENT CENTER VALUE OF     NZ
         36                     C          NODE(I,IE)  ; NODE NO. TABLE BASED ON ELEMENT
         37                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         38                     C          NP          ; NUMBER OF TOTAL    NODES
         39                     C          N           ; NUMBER OF NODE ASSIGNED TO ONE ELEMENT
         40                     C
         41                     C      (2) OUTPUT
         42                     C          FE    (IE)  ; FIELD DATA
         43                     C
         44                     C
         45                     C
         46                     C      (1) CALCULATE DIVERGENT
         47                     C
         48     1                     IF(IMODE.EQ.1) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 65
                              <<<  [OPTIMIZATION]
                              <<<    FUSED(lines: 49,59,70)
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.60, ITR: 64, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE
                              <<< Loop-information  End >>>
         49     2  pp    v                DO 100 IE = 1 , NE
         50     2   p    v                    FE(IE) = DNXI(1,IE)*U(NODE(1,IE))
         51     2                    &                +DNXI(2,IE)*U(NODE(2,IE))
         52     2                    &                +DNXI(3,IE)*U(NODE(3,IE))
         53     2                    &                +DNXI(4,IE)*U(NODE(4,IE))
         54     2                    &                +DNXI(5,IE)*U(NODE(5,IE))
         55     2                    &                +DNXI(6,IE)*U(NODE(6,IE))
         56     2                    &                +DNXI(7,IE)*U(NODE(7,IE))
         57     2                    &                +DNXI(8,IE)*U(NODE(8,IE))
         58     2   p    v        100     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
         59     2                         DO 200 IE = 1 , NE
         60     2                             FE(IE) = FE(IE)
         61     2                    &                +DNYI(1,IE)*V(NODE(1,IE))
         62     2                    &                +DNYI(2,IE)*V(NODE(2,IE))
         63     2                    &                +DNYI(3,IE)*V(NODE(3,IE))
         64     2                    &                +DNYI(4,IE)*V(NODE(4,IE))
         65     2                    &                +DNYI(5,IE)*V(NODE(5,IE))
         66     2                    &                +DNYI(6,IE)*V(NODE(6,IE))
         67     2                    &                +DNYI(7,IE)*V(NODE(7,IE))
         68     2                    &                +DNYI(8,IE)*V(NODE(8,IE))
         69     2                 200     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FUSED
                              <<< Loop-information  End >>>
         70     2                         DO 300 IE = 1 , NE
         71     2                             FE(IE) = FE(IE)
         72     2                    &                +DNZI(1,IE)*W(NODE(1,IE))
         73     2                    &                +DNZI(2,IE)*W(NODE(2,IE))
         74     2                    &                +DNZI(3,IE)*W(NODE(3,IE))
         75     2                    &                +DNZI(4,IE)*W(NODE(4,IE))
         76     2                    &                +DNZI(5,IE)*W(NODE(5,IE))
         77     2                    &                +DNZI(6,IE)*W(NODE(6,IE))
         78     2                    &                +DNZI(7,IE)*W(NODE(7,IE))
         79     2                    &                +DNZI(8,IE)*W(NODE(8,IE))
         80     2                 300     CONTINUE
         81     1                     ENDIF
         82                     C
         83                     C      (2) CALCULATE ROTATION ABOUT X-AXIS
         84                     C
         85     1                     IF(IMODE.EQ.2) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 87
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.58, ITR: 64, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE
                              <<< Loop-information  End >>>
         86     2  pp    v                DO 400 IE = 1 , NE
         87     2   p    v                    FE(IE) = DNYI(1,IE)*W(NODE(1,IE))
         88     2                    &                +DNYI(2,IE)*W(NODE(2,IE))
         89     2                    &                +DNYI(3,IE)*W(NODE(3,IE))
         90     2                    &                +DNYI(4,IE)*W(NODE(4,IE))
         91     2                    &                +DNYI(5,IE)*W(NODE(5,IE))
         92     2                    &                +DNYI(6,IE)*W(NODE(6,IE))
         93     2                    &                +DNYI(7,IE)*W(NODE(7,IE))
         94     2                    &                +DNYI(8,IE)*W(NODE(8,IE))
         95     2                    &                -DNZI(1,IE)*V(NODE(1,IE))
         96     2                    &                -DNZI(2,IE)*V(NODE(2,IE))
         97     2                    &                -DNZI(3,IE)*V(NODE(3,IE))
         98     2                    &                -DNZI(4,IE)*V(NODE(4,IE))
         99     2                    &                -DNZI(5,IE)*V(NODE(5,IE))
        100     2                    &                -DNZI(6,IE)*V(NODE(6,IE))
        101     2                    &                -DNZI(7,IE)*V(NODE(7,IE))
        102     2                    &                -DNZI(8,IE)*V(NODE(8,IE))
        103     2   p    v        400     CONTINUE
        104     1                     ENDIF
        105                     C
        106                     C      (3) CALCULATE ROTATION ABOUT Y-AXIS
        107                     C
        108     1                     IF(IMODE.EQ.3) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 87
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.58, ITR: 64, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE
                              <<< Loop-information  End >>>
        109     2  pp    v                DO 500 IE = 1 , NE
        110     2   p    v                    FE(IE) = DNZI(1,IE)*U(NODE(1,IE))
        111     2                    &                +DNZI(2,IE)*U(NODE(2,IE))
        112     2                    &                +DNZI(3,IE)*U(NODE(3,IE))
        113     2                    &                +DNZI(4,IE)*U(NODE(4,IE))
        114     2                    &                +DNZI(5,IE)*U(NODE(5,IE))
        115     2                    &                +DNZI(6,IE)*U(NODE(6,IE))
        116     2                    &                +DNZI(7,IE)*U(NODE(7,IE))
        117     2                    &                +DNZI(8,IE)*U(NODE(8,IE))
        118     2                    &                -DNXI(1,IE)*W(NODE(1,IE))
        119     2                    &                -DNXI(2,IE)*W(NODE(2,IE))
        120     2                    &                -DNXI(3,IE)*W(NODE(3,IE))
        121     2                    &                -DNXI(4,IE)*W(NODE(4,IE))
        122     2                    &                -DNXI(5,IE)*W(NODE(5,IE))
        123     2                    &                -DNXI(6,IE)*W(NODE(6,IE))
        124     2                    &                -DNXI(7,IE)*W(NODE(7,IE))
        125     2                    &                -DNXI(8,IE)*W(NODE(8,IE))
        126     2   p    v        500     CONTINUE
        127     1                     ENDIF
        128                     C
        129                     C      (4) CALCULATE ROTATION ABOUT Z-AXIS
        130                     C
        131     1                     IF(IMODE.EQ.4) THEN
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 87
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.58, ITR: 64, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FE
                              <<< Loop-information  End >>>
        132     2  pp    v                DO 600 IE = 1 , NE
        133     2   p    v                    FE(IE) = DNXI(1,IE)*V(NODE(1,IE))
        134     2                    &                +DNXI(2,IE)*V(NODE(2,IE))
        135     2                    &                +DNXI(3,IE)*V(NODE(3,IE))
        136     2                    &                +DNXI(4,IE)*V(NODE(4,IE))
        137     2                    &                +DNXI(5,IE)*V(NODE(5,IE))
        138     2                    &                +DNXI(6,IE)*V(NODE(6,IE))
        139     2                    &                +DNXI(7,IE)*V(NODE(7,IE))
        140     2                    &                +DNXI(8,IE)*V(NODE(8,IE))
        141     2                    &                -DNYI(1,IE)*U(NODE(1,IE))
        142     2                    &                -DNYI(2,IE)*U(NODE(2,IE))
        143     2                    &                -DNYI(3,IE)*U(NODE(3,IE))
        144     2                    &                -DNYI(4,IE)*U(NODE(4,IE))
        145     2                    &                -DNYI(5,IE)*U(NODE(5,IE))
        146     2                    &                -DNYI(6,IE)*U(NODE(6,IE))
        147     2                    &                -DNYI(7,IE)*U(NODE(7,IE))
        148     2                    &                -DNYI(8,IE)*U(NODE(8,IE))
        149     2   p    v        600     CONTINUE
        150     1                     ENDIF
        151                     C
        152                     C
        153                           RETURN
        154                           END

 Diagnostic messages: program name(FIELD3)
   jwd8220o-i  "field3.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8210o-i  "field3.f", line 49: Loops fused at line 59.
   jwd8210o-i  "field3.f", line 49: Loops fused at line 70.
   jwd5001p-i  "field3.f", line 49: DO loop with DO variable 'IE' is parallelized.
   jwd6001s-i  "field3.f", line 49: SIMD conversion is applied to DO loop with DO variable 'IE'.
   jwd8204o-i  "field3.f", line 49: This loop is software pipelined.
   jwd8205o-i  "field3.f", line 49: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "field3.f", line 71: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5001p-i  "field3.f", line 86: DO loop with DO variable 'IE' is parallelized.
   jwd6001s-i  "field3.f", line 86: SIMD conversion is applied to DO loop with DO variable 'IE'.
   jwd8204o-i  "field3.f", line 86: This loop is software pipelined.
   jwd8205o-i  "field3.f", line 86: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "field3.f", line 87: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5001p-i  "field3.f", line 109: DO loop with DO variable 'IE' is parallelized.
   jwd6001s-i  "field3.f", line 109: SIMD conversion is applied to DO loop with DO variable 'IE'.
   jwd8204o-i  "field3.f", line 109: This loop is software pipelined.
   jwd8205o-i  "field3.f", line 109: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "field3.f", line 110: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5001p-i  "field3.f", line 132: DO loop with DO variable 'IE' is parallelized.
   jwd6001s-i  "field3.f", line 132: SIMD conversion is applied to DO loop with DO variable 'IE'.
   jwd8204o-i  "field3.f", line 132: This loop is software pipelined.
   jwd8205o-i  "field3.f", line 132: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8209o-i  "field3.f", line 133: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 154
   Statements : 31
   Stack(byte): 2000
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 154
   Total statements : 31
   Total stack(byte): 2000
   Total prefetch num: 0

