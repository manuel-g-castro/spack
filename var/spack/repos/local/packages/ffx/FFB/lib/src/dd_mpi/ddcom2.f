      SUBROUTINE DDCOM2(SEND,RECV)
      IMPLICIT REAL*4(A-H,O-Z)
C
      INCLUDE 'mpif.h'
C
#ifdef cputime
      INTEGER*4 NUMALL
      REAL*4 DTALLA,DTALLR
      COMMON /CPUALL/ NUMALL,DTALLA,DTALLR
      REAL*4 DTCPU,TBUF1,TBUF2
#endif
#ifdef USE_TIMER
      include 'timer.h'
#endif      
C
C
C      SUM UP A SINGLE SCALAR AMONG ALL THE PARTICIPATING TASKS FOR
C     DOMAIN-DECOMPOSITION PROGRAMMING MODEL
C
C                            ( MPI VERSION )
C
C
C NOTE 1; ALL 'MPI' ROUTINES RETURN AN ERROR CODE 'IERR' WHICH INDICATES
C       THE STATUS OF ITS EXECUTION. THIS SUBROUTINE IGNORES SUCH ERROR
C       CODE AND RETURNS THE SEQUENCE TO THE CALLING PROGRAM UNIT,
C       REGARDLESS OF THE VALUE OF THE 'MPI' RETURN CODE.
C
C NOTE 2; SOME COMPILERS, SUCH AS OFORT90 IN HI-UXMPP, SUPPORT AUTOMATIC
C       PRECISION EXPANSION, WHERE ALL THE CONSTANTS, VARIABLES AND
C       ARRAYS OF 4-BYTE PRECISION (REAL*4) ARE AUTOMATICALLY CONVERTED
C       TO THOSE OF 8-BYTE PRECISION (REAL*8) WITH UNFORMATTED I/O DATA 
C       BEING KEPT AS THEY ARE (IF SO SPECIFIED). WHEN USING SUCH 
C       FEATURES (FUNCTIONS) OF A COMPILER, SPECIAL CARE IS NEEDED
C       BECAUSE A COUPLE OF MPI SUBROUTINES CALLED IN THIS SUBPROGRAM
C       ACCEPT THE DATA TYPE (DATA PRECISION) AS THEIR INPUT AND
C       PERFORM THE OPERATIONS ACCORDING TO THIS INPUT VALUE. THIS
C       INTERFACE SUPPORTS THE AUTOMATIC PRECISION EXPANSION MENTIONED
C       ABOVE. IF YOU WISH TO USE SUCH FEATURE, ADD '-DPRECEXP' OPTION
C       WHEN INVOKING 'cpp' FOR PRI-PROCESSING THIS SOURCE PROGRAM FILE.
C
C
C     ARGUMENT LISTINGS
C       (1) INPUT
C REAL*4   SEND             ; SCALAR VARIABLE TO SUM UP
C
C       (2) OUTPUT
C REAL*4   RECV             ; SCALAR VARIABLE SUMMED UP AMONG ALL TASKS
C
C
#ifdef cputime
      NUMALL=NUMALL+1
      CALL CPU_TIME( TBUF1 )
#endif
      
#ifdef USE_BARRIER
#ifdef USE_TIMER
      tstart   = MPI_WTIME()
      nddcom2b = nddcom2b + 1
#endif
      CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
#ifdef USE_TIMER
      tend = MPI_WTIME()
      tddcom2b = tddcom2b + (tend - tstart)
#endif
#endif
      
#ifdef USE_TIMER
      tstart  = MPI_WTIME()
      nddcom2 = nddcom2 + 1
#endif      
#ifdef PRECEXP
      CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL8,MPI_SUM,
     &                   MPI_COMM_WORLD,IERR)
#else
      CALL MPI_ALLREDUCE(SEND,RECV,1,MPI_REAL ,MPI_SUM,
     &                   MPI_COMM_WORLD,IERR)
#endif
#ifdef USE_TIMER
      tend = MPI_WTIME()
      tddcom2  = tddcom2 + (tend - tstart)
#endif
      
#ifdef USE_BARRIER
#ifdef USE_TIMER      
      tstart   = MPI_WTIME()
      nddcom2a = nddcom2a + 1      
#endif
      CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)
#ifdef USE_TIMER
      tend = MPI_WTIME()
      tddcom2a = tddcom2a + (tend - tstart)
#endif
#endif
      
#ifdef cputime
      CALL CPU_TIME( TBUF2 )
      DTCPU=TBUF2-TBUF1
      DTALLA=DTALLA+DTCPU
      DTALLR=DTALLR+DTCPU*DTCPU
#endif
C
      RETURN
      END
