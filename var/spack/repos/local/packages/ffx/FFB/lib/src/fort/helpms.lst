
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:04 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : helpms.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "HELPMS"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    HELPMS                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE HELPMS(X,Y,NODE,NE,NP,N,LSIDE,NS,
         14                          *                  RNGX,RNGY,WINDX1,WINDX2,WINDY1,WINDY2,
         15                          *                  ICLMSH,ICLBLN,ICLMRK,ICLNUM,
         16                          *                  CSZMRK,CSZNUM,ICODE,DELT,IUT5,IUT6)
         17                           IMPLICIT REAL*4(A-H,O-Z)
         18                           DIMENSION X(NP),Y(NP),NODE(N,NE),LSIDE(2,NS)
         19                     C
         20                           INTEGER*4 KEEPAS
         21                           PARAMETER ( KEEPAS = 1 )
         22                     C
         23                           REAL*4 SBOUND(4)
         24                           DATA        SBOUND(1) / 0.2344 /
         25                           DATA        SBOUND(2) / 0.9922 /
         26                           DATA        SBOUND(3) / 0.23   /
         27                           DATA        SBOUND(4) / 1.0    /
         28                     C
         29                           REAL*4 GBOUND(4)
         30                     C
         31                           REAL*4 XPARY(5),YPARY(5)
         32                     C
         33                           CHARACTER*8 BUF
         34                     C
         35                     #ifdef VOS
         36                           INCLUDE (GN)
         37                     #else
         38                           INCLUDE 'gn.h'
         39                     #endif
         40                     C
         41                     C
         42                     C
         43                     C      DISPLAY NODE'S & ELEMENT'S  NO. ON T560/20 TERMINAL
         44                     C         ( 2-D GRAPHICS )
         45                     C
         46                     C
         47                     C     NOTE 1 ; CGDM GRAPHIC SYSTEM IS USED.
         48                     C     NOTE 2 ; GRAPHIC INITIALIZE AND CLOSING IS DONE IN THIS ROUTINE.
         49                     C     NOTE 3 ; SOFTWARE ZOOMING FUNCTION IS IMPLEMENTED.
         50                     C     NOTE 4 ; THIS SUBROUTINE IS AVAILABLE FOR ANY KIND OF ELEMENTS
         51                     C             ( INCLUDING A MIXTURE OF DIFFERENT KINDS OF ELEMENTS ).
         52                     C
         53                     C
         54                     C     ARGUMENT LISTINGS
         55                     C       (1) INPUT
         56                     C          X(IP)       ; X-COORDINATE OF NODES
         57                     C          Y(IP)       ; Y-COORDINATE OF NODES
         58                     C          NODE(I,IE)  ; NODE TABLE
         59                     C                       ( IF AN ELEMENT IE HAS LESS NODES THAN N,
         60                     C                        NODE(I+NNODE,IE),,NODE(N,IE) MUST HAVE BEEN
         61                     C                        SET TO ZERO, WHERE NNODE DENOTES THE NUMBER
         62                     C                        OF NODES WHICH THE ELEMENT HAS. )
         63                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         64                     C          NP          ; NUMBER OF TOTAL    NODES
         65                     C          N           ; ALIGNMENT  DIMENSION OF THE ARRAY NODE (I,IE)
         66                     C          LSIDE(I,IS) ; BOUNDARY SIDES
         67                     C          NS          ; NUMBER OF BOUNDARY SIDES
         68                     C
         69                     C          RNGX        ; X-DIR. GRAPHIC RANGE
         70                     C          RNGY        ; Y-DIR. GRAPHIC RANGE
         71                     C          WINDX1      ; GRAPHIC WINDOW ( X-COOR. AT LEFT  BOTTOM )
         72                     C          WINDX2      ; GRAPHIC WINDOW ( X-COOR. AT RIGHT UP     )
         73                     C          WINDY1      ; GRAPHIC WINDOW ( Y-COOR. AT LEFT  BOTTOM )
         74                     C          WINDY2      ; GRAPHIC WINDOW ( Y-COOR. AT RIGHT UP     )
         75                     C          ICLMSH      ; COLOR INDEX USED TO DRAW MESH
         76                     C          ICLBLN      ; COLOR INDEX USED TO DRAW BORDER LINE
         77                     C          ICLMRK      ; COLOR INDEX USED TO MARK BOUNDARY NODE
         78                     C          ICLNUM      ; COLOR INDEX USED TO WRITE NUMBER
         79                     C          CSZMRK      ; CHARACTER SIZE OF MARK
         80                     C          CSZNUM      ; CHARACTER SIZE OF NUMBER
         81                     C          ICODE       ; CHARACTER CODE OF MARK
         82                     C          DELT        ; DIFFERENTIAL DISTANCE
         83                     C          IUT5        ; DEVICE NUMBER FOR COMMUNICATION (INPUT)
         84                     C          IUT6        ; DEVICE NUMBER FOR COMMUNICATION (OUTPUT)
         85                     C
         86                     C       (2) OUTPUT
         87                     C          NONE
         88                     C
         89                     C
         90                           GBOUND(1) = WINDX1
         91                           GBOUND(2) = WINDX2
         92                           GBOUND(3) = WINDY1
         93                           GBOUND(4) = WINDY2
         94                     C
         95                     C      DISPLAY MODE SPECIFICATION
         96                     C
         97                     C
         98                           WRITE(IUT6,*) ' SPECIFY DISPLAY MODE ; IMODE'
         99                           WRITE(IUT6,*) '    0 - ONLY DRAW MESH SYSTEM'
        100                           WRITE(IUT6,*) '    1 - WRITE BOUNARY NODE  NO. WITH BORDER  LINE'
        101                           WRITE(IUT6,*) '    2 - WRITE BOUNARY NODE  NO. WITH ALL THE MESH'
        102                           WRITE(IUT6,*) '    3 - WRITE ALL THE NODE  NO. WITH ALL THE MESH'
        103                           WRITE(IUT6,*) '    4 - WRITE ALL THE ELEM. NO. WITH ALL THE MESH'
        104                           READ (IUT5,*) IMODE
        105                     C
        106                     C
        107                     C      CLIPPING RANGE SPECIFICATION
        108                     C
        109                     C
        110                           CALL FINDMM(X,NP,OXMIN,OXMAX)
        111                           CALL FINDMM(Y,NP,OYMIN,OYMAX)
        112                           XMIN = OXMIN
        113                           XMAX = OXMAX
        114                           YMIN = OYMIN
        115                           YMAX = OYMAX
        116                     C
        117                           WRITE(IUT6,*) ' ENTER ; 1 TO HAVE LOCAL ZOOMING'
        118                           READ (IUT5,*) JZOOM
        119                     C
        120     1                     IF(JZOOM.EQ.1) THEN
        121     1                     WRITE(IUT6,*) ' SPECIFY ZOOMING RANGE  ; XMIN, XMAX, YMIN, YMAX'
        122     1                     READ (IUT5,*)  XMIN , XMAX , YMIN , YMAX
        123     1                     ENDIF
        124                     C
        125                           SFC = AMIN1(RNGX/(XMAX-XMIN) , RNGY/(YMAX-YMIN))
        126                     C
        127                     C
        128                     C      TERMINAL INITIALIZATION
        129                     C
        130                     C
        131                           CALL GNINIT(GBOUND,SBOUND,KEEPAS)
        132                     C
        133                     C MARK
        134                           MKTYPE = ICODE
        135                     C
        136                           MKSIZE = CSZMRK
        137                     C LINE
        138                           LNTYPE = GLSOLD
        139                           LNWDTH = GLNORM
        140                     C TEXT
        141                           TXSIZE = CSZNUM
        142                     C
        143                     C
        144                     C      MESH DRAWING
        145                     C
        146                     C
        147     1                     IF(IMODE.EQ.0 .OR. IMODE.GE.2) THEN
        148     1                         CALL GNCSET(ICLMSH)
        149     2                         DO 500 IE = 1 , NE
        150     2                             NNODE = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        151     3  pp    v                    DO 100 I = 1 , N
        152     3   p                             IF(NODE(I,IE).NE.0) NNODE = NNODE+1
        153     3   p    v        100         CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
        154     3                             DO 200 I = 1 , NNODE
        155     3                                 IF(X(NODE(I,IE)).GE.XMIN .AND.
        156     3                    &               X(NODE(I,IE)).LE.XMAX .AND.
        157     3                    &               Y(NODE(I,IE)).GE.YMIN .AND.
        158     3                    &               Y(NODE(I,IE)).LE.YMAX ) GO TO 300
        159     3                 200         CONTINUE
        160     2                             GO TO 500
        161     2                 300         CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 552
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        162     3   s    v                    DO 400 I = 1 , NNODE
        163     3   p    v                        XPARY(I) = (X(NODE(I,IE))-XMIN)*SFC
        164     3   p    v                        YPARY(I) = (Y(NODE(I,IE))-YMIN)*SFC
        165     3   p    v        400         CONTINUE
        166     2                             XPARY(NNODE+1) = (X(NODE(1,IE))-XMIN)*SFC
        167     2                             YPARY(NNODE+1) = (Y(NODE(1,IE))-YMIN)*SFC
        168     2                             CALL GNLINE(XPARY,YPARY,NNODE+1)
        169     2                 500     CONTINUE
        170     1                     ENDIF
        171                     C
        172                     C
        173                     C      BORDER LINE DRAWING
        174                     C
        175                     C
        176     1                     IF(IMODE.GE.1) THEN
        177     1                     CALL GNCSET(ICLBLN)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSIDE
                              <<< Loop-information  End >>>
        178     2                     DO 800 IS = 1 , NS
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        179     3       f                 DO 600 I = 1 , 2
        180     3       f                     IF(X(LSIDE(I,IS)).GE.XMIN .AND.
        181     3                    &           X(LSIDE(I,IS)).LE.XMAX .AND.
        182     3                    &           Y(LSIDE(I,IS)).GE.YMIN .AND.
        183     3                    &           Y(LSIDE(I,IS)).LE.YMAX ) GO TO 700
        184     3       f         600     CONTINUE
        185     2                         GO TO 800
        186     2                 700     CONTINUE
        187     2                         XPARY(1) = (X(LSIDE(1,IS))-XMIN)*SFC
        188     2                         YPARY(1) = (Y(LSIDE(1,IS))-YMIN)*SFC
        189     2                         XPARY(2) = (X(LSIDE(2,IS))-XMIN)*SFC
        190     2                         YPARY(2) = (Y(LSIDE(2,IS))-YMIN)*SFC
        191     2                         CALL GNLINE(XPARY,YPARY,2)
        192     2                 800 CONTINUE
        193     1               C
        194     1               C
        195     1               C      BOUNDARY NODE MARKING
        196     1               C
        197     1               C
        198     1                     CALL GNCSET(ICLMRK)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSIDE
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 1
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        199     2                     DO 1100 IS = 1 , NS
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        200     3       f                 DO 900 I = 1 , 2
        201     3       f                     IF(X(LSIDE(I,IS)).GE.XMIN .AND.
        202     3                    &           X(LSIDE(I,IS)).LE.XMAX .AND.
        203     3                    &           Y(LSIDE(I,IS)).GE.YMIN .AND.
        204     3                    &           Y(LSIDE(I,IS)).LE.YMAX ) GO TO 1000
        205     3       f         900     CONTINUE
        206     2                         GO TO 1100
        207     2                1000     CONTINUE
        208     2                         XPARY(1) = (X(LSIDE(1,IS))-XMIN)*SFC
        209     2                         YPARY(1) = (Y(LSIDE(1,IS))-YMIN)*SFC
        210     2                         CALL GNMARK(XPARY,YPARY,1)
        211     2                         XPARY(1) = (X(LSIDE(2,IS))-XMIN)*SFC
        212     2                         YPARY(1) = (Y(LSIDE(2,IS))-YMIN)*SFC
        213     2                         CALL GNMARK(XPARY,YPARY,1)
        214     2                1100 CONTINUE
        215     1                     ENDIF
        216                     C
        217                     C
        218                     C      BOUNDARY NODE NO. WRITING
        219                     C
        220                     C
        221     1                     IF(IMODE.EQ.1 .OR. IMODE.EQ.2) THEN
        222     1                         CALL GNCSET(ICLNUM)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSIDE
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 5
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        223     2                         DO 1400 IS = 1 , NS
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    FULL UNROLLING
                              <<< Loop-information  End >>>
        224     3       f                     DO 1200 I = 1 , 2
        225     3       f                         IF(X(LSIDE(I,IS)).GE.XMIN .AND.
        226     3                    &               X(LSIDE(I,IS)).LE.XMAX .AND.
        227     3                    &               Y(LSIDE(I,IS)).GE.YMIN .AND.
        228     3                    &               Y(LSIDE(I,IS)).LE.YMAX ) GO TO 1300
        229     3       f        1200         CONTINUE
        230     2                             GO TO 1400
        231     2                1300         CONTINUE
        232     2                             XP = (X(LSIDE(1,IS))-XMIN)*SFC+DELT
        233     2                             YP = (Y(LSIDE(1,IS))-YMIN)*SFC+DELT
        234     2                             WRITE(BUF,'(I8)') LSIDE(1,IS)
        235     2                             CALL GNTEXT(XP,YP,BUF,8)
        236     2                             XP = (X(LSIDE(2,IS))-XMIN)*SFC+DELT
        237     2                             YP = (Y(LSIDE(2,IS))-YMIN)*SFC+DELT
        238     2                             WRITE(BUF,'(I8)') LSIDE(2,IS)
        239     2                1400     CONTINUE
        240     1                     ENDIF
        241                     C
        242                     C
        243                     C      ALL NODE NO. WRITING
        244                     C
        245                     C
        246     1                     IF(IMODE.EQ.3) THEN
        247     1                         CALL GNCSET(ICLNUM)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      X
                              <<<    SPILLS :
                              <<<      GENERAL   : SPILL 0  FILL 2
                              <<<      SIMD&FP   : SPILL 0  FILL 0
                              <<<      SCALABLE  : SPILL 0  FILL 0
                              <<<      PREDICATE : SPILL 0  FILL 0
                              <<< Loop-information  End >>>
        248     2                         DO 1500 IP = 1 , NP
        249     2                             IF(X(IP).LT.XMIN .OR.
        250     2                    &           X(IP).GT.XMAX .OR.
        251     2                    &           Y(IP).LT.YMIN .OR.
        252     2                    &           Y(IP).GT.YMAX ) GO TO 1500
        253     2                             XP = (X(IP)-XMIN)*SFC+DELT
        254     2                             YP = (Y(IP)-YMIN)*SFC+DELT
        255     2                             WRITE(BUF,'(I8)') IP
        256     2                             CALL GNTEXT(XP,YP,BUF,8)
        257     2                1500     CONTINUE
        258     1                     ENDIF
        259                     C
        260                     C
        261                     C      ALL ELEMENT NO. WRITING
        262                     C
        263                     C
        264     1                     IF(IMODE.EQ.4) THEN
        265     1                         CALL GNCSET(ICLNUM)
        266     2                         DO 2000 IE = 1 , NE
        267     2                             NNODE = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        268     3  pp    v                    DO 1600 I = 1 , N
        269     3   p                             IF(NODE(I,IE).NE.0) NNODE = NNODE+1
        270     3   p    v       1600         CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
        271     3                             DO 1700 I = 1 , NNODE
        272     3                                 IF(X(NODE(I,IE)).GE.XMIN .AND.
        273     3                    &               X(NODE(I,IE)).LE.XMAX .AND.
        274     3                    &               Y(NODE(I,IE)).GE.YMIN .AND.
        275     3                    &               Y(NODE(I,IE)).LE.YMAX ) GO TO 1800
        276     3                1700         CONTINUE
        277     2                             GO TO 2000
        278     2                1800         CONTINUE
        279     2                             XG = 0.0
        280     2                             YG = 0.0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 762
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        281     3  pp    v                    DO 1900 I = 1 , NNODE
        282     3   p    v                        XG = XG+X(NODE(I,IE))/NNODE
        283     3   p    v                        YG = YG+Y(NODE(I,IE))/NNODE
        284     3   p    v       1900         CONTINUE
        285     2                             XP = (XG-XMIN)*SFC-DELT
        286     2                             YP = (YG-YMIN)*SFC-DELT
        287     2                             WRITE(BUF,'(I8)') IE
        288     2                             CALL GNTEXT(XP,YP,BUF,8)
        289     2                2000     CONTINUE
        290     1                     ENDIF
        291                     C
        292                     C
        293                     C      TERMINAL CLOSURE
        294                     C
        295                     C
        296                           CALL GNENDG
        297                     C
        298                     C
        299                           RETURN
        300                           END

 Diagnostic messages: program name(HELPMS)
   jwd8220o-i  "helpms.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd5122p-i  "helpms.f", line 149: DO loop is not parallelized: a procedure reference was found in the loop.
   jwd5133p-i  "helpms.f", line 149: DO loop is not parallelized: its structure is too complicated.
   jwd5004p-i  "helpms.f", line 151: DO loop with DO variable 'I' is parallelized. The DO loop contains the reduction operation.
   jwd6004s-i  "helpms.f", line 151: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd5131p-i  "helpms.f", line 154: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "helpms.f", line 154: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "helpms.f", line 154: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5143p-i  "helpms.f", line 162: DO loop is not parallelized: the value of its iteration count is insufficient to make parallelization worthwhile.
   jwd8325o-i  "helpms.f", line 162: Assume that the maximum number of iterations for this loop is 5 from the array declaration.
   jwd6001s-i  "helpms.f", line 162: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd5122p-i  "helpms.f", line 178: DO loop is not parallelized: a procedure reference was found in the loop.
   jwd5133p-i  "helpms.f", line 178: DO loop is not parallelized: its structure is too complicated.
   jwd8664o-i  "helpms.f", line 178: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd5131p-i  "helpms.f", line 179: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "helpms.f", line 179: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8203o-i  "helpms.f", line 179: Loop unrolled fully.
   jwd5122p-i  "helpms.f", line 199: DO loop is not parallelized: a procedure reference was found in the loop.
   jwd5133p-i  "helpms.f", line 199: DO loop is not parallelized: its structure is too complicated.
   jwd8664o-i  "helpms.f", line 199: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd5131p-i  "helpms.f", line 200: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "helpms.f", line 200: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8203o-i  "helpms.f", line 200: Loop unrolled fully.
   jwd5121p-i  "helpms.f", line 223: DO loop is not parallelized: an input/output statement was found in the loop.
   jwd5133p-i  "helpms.f", line 223: DO loop is not parallelized: its structure is too complicated.
   jwd8664o-i  "helpms.f", line 223: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd5131p-i  "helpms.f", line 224: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "helpms.f", line 224: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8203o-i  "helpms.f", line 224: Loop unrolled fully.
   jwd5123p-i  "helpms.f", line 248: DO loop is not parallelized: a character or structure type data was found in the loop.
   jwd6165s-i  "helpms.f", line 248: SIMD conversion cannot be applied to DO loop: one or more data with character type or derived type were found in the DO loop.
   jwd8664o-i  "helpms.f", line 248: This loop cannot be software pipelined because the loop contains an instruction, such as function call, which is not supported by software pipelining.
   jwd5121p-i  "helpms.f", line 266: DO loop is not parallelized: an input/output statement was found in the loop.
   jwd5133p-i  "helpms.f", line 266: DO loop is not parallelized: its structure is too complicated.
   jwd5004p-i  "helpms.f", line 268: DO loop with DO variable 'I' is parallelized. The DO loop contains the reduction operation.
   jwd6004s-i  "helpms.f", line 268: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd5131p-i  "helpms.f", line 271: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "helpms.f", line 271: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "helpms.f", line 271: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5004p-i  "helpms.f", line 281: DO loop with DO variable 'I' is parallelized. The DO loop contains the reduction operation.
   jwd6004s-i  "helpms.f", line 281: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd8206o-i  "helpms.f", line 282: Division is changed to multiplication by reciprocal.
   jwd8206o-i  "helpms.f", line 283: Division is changed to multiplication by reciprocal.

 Procedure information
   Lines      : 488
   Statements : 217
   Stack(byte): 56688
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 488
   Total statements : 217
   Total stack(byte): 56688
   Total prefetch num: 0

