CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     SET UP NEIGHBORING DOMAIN LISTS OF FACE DATA FOR DOMAIN-DECOMPOSITION
C     PROGRAMMING MODEL
C 
C     WRITTEN BY H.YOSHIMURA 2013.03.06
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE DDFAC0(IPART,NFACE,LFACE,MDOM,MBFDOM,
     *                  NDOM,LDOM,NBFDOM,IFSLF,IFSND,IUT0,IERR)
C
      IMPLICIT NONE
C
C     [INPUT]
      INTEGER*4 IPART,NFACE,LFACE(5,NFACE),MDOM,MBFDOM
C
C     [IN-OUTPUT]
      INTEGER*4 NDOM,LDOM(MDOM),NBFDOM(MDOM)
      INTEGER*4 IFSLF(MBFDOM,MDOM),IFSND(MBFDOM,MDOM),IUT0,IERR
C
C     [LOCAL]
      INTEGER*4 IDOM,IFACE,IFNEW,ICHK
C
      CHARACTER*60 ERMSGB
     & / ' ## SUBROUTINE DDFAC0: FATAL     ERROR OCCURRENCE; RETURNED' /
      CHARACTER*60 EREXP1
     & / ' DIMENSION SIZE OF PASSED LIST ARRAYS IS NOT SUFFICIENT    ' /
C
      IERR = 0
C
C
C
C SET INITIAL VALUES
C
C
C
      NDOM = 0
      DO 1000 IDOM = 1 , MDOM
          NBFDOM(IDOM) = 0
 1000 CONTINUE
C
C
C
C SET NEIGHBORING DOMAIN LISTS FOR FACE
C
C
C
      DO 2000 IFACE = 1 , NFACE
          IF (LFACE(5,IFACE).EQ.0) GOTO 2000
C
          IFNEW = LFACE(5,IFACE)
          DO 2100 ICHK = 1 , NDOM
              IF(LDOM(ICHK).EQ.IFNEW) THEN
                  IDOM = ICHK
                  GO TO 2200
              ENDIF
 2100     CONTINUE
          NDOM = NDOM+1
          IDOM = NDOM
C
          IF(NDOM.GT.MDOM) THEN
              WRITE(IUT0,*) ERMSGB
              WRITE(IUT0,*) EREXP1
              IERR = 1
              RETURN
          ENDIF
C
          LDOM(NDOM) = IFNEW
C
 2200     CONTINUE
          NBFDOM(IDOM) = NBFDOM(IDOM)+1
C
          IF(NBFDOM(IDOM).GT.MBFDOM) THEN
              WRITE(IUT0,*) ERMSGB
              WRITE(IUT0,*) EREXP1
              IERR = 1
              RETURN
          ENDIF
C
          IFSLF(NBFDOM(IDOM),IDOM) =  IFACE
          IFSND(NBFDOM(IDOM),IDOM) = -LFACE(2,IFACE)
 2000 CONTINUE
C
      RETURN
      END
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     COMMUNICATE FACE DATA (MPI VERSION)
C
C     WRITTEN BY H.YOSHIMURA 2013.03.06
C 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE DDFAC1(IDIM,MBFDOM,NDOM,LDOM,NBFDOM,IFSLF,IFSND,NFACE,
     *                  FX,FY,FZ,BUFSND,BUFRCV,MAXBUF,IUT0,IERR)
C
      IMPLICIT NONE
C
C     [INPUT]
      INTEGER*4 IDIM
      INTEGER*4 MBFDOM,NDOM,LDOM(NDOM),NBFDOM(NDOM),
     *          IFSLF(MBFDOM,NDOM),IFSND(MBFDOM,NDOM)
      INTEGER*4 NFACE
C
C     [IN-OUTPUT]
      INTEGER*4 IUT0,IERR
      REAL*4    FX(NFACE),FY(NFACE),FZ(NFACE)
C
C     [WORK]
      INTEGER*4 MAXBUF
      REAL*4    BUFSND(MAXBUF),BUFRCV(MAXBUF)
C
C     [LOCAL]
      INTEGER*4 NSTART,NSTART2,NSKIP,MSGTYP,MSGLEN
      INTEGER*4 IFACE,IFACES,IBF,ITMP,IDOM,IRECV,ISEND,ISTART
C
      INCLUDE 'mpif.h'
C
      INTEGER*4 MAXDOM
      PARAMETER ( MAXDOM = 10000 )
      INTEGER*4 MSGIDS(MAXDOM),MSGSTS(MPI_STATUS_SIZE,MAXDOM)
C
      CHARACTER*60 ERMSGB
     & / ' ## SUBROUTINE DDFAC1: FATAL     ERROR OCCURRENCE; RETURNED' /
      CHARACTER*60 EREXP1
     & / ' DIMENSION SIZE OF INTERNAL      ARRAYS IS NOT SUFFICIENT  ' /
      CHARACTER*60 EREXP2
     & / ' DIMENSION SIZE OF PASSED BUFFER ARRAYS IS NOT SUFFICIENT  ' /
      CHARACTER*60 EREXP3
     & / ' RECEIVED NODE NUMBER IS OUT OF THE GLOBAL NODE NUMBER     ' /
C
      IERR = 0
C
      IF(IDIM.EQ.0) THEN
          NSKIP=1
      ELSE IF(IDIM.EQ.1) THEN
          NSKIP=1
      ELSE IF(IDIM.EQ.2) THEN 
          NSKIP=2
      ELSE IF(IDIM.EQ.3) THEN 
          NSKIP=3
      ELSE
          WRITE(IUT0,*) EREXP1
          IERR = 1
          RETURN
      ENDIF
C
C
C
C CHECK THE INTERNAL ARRAY SIZE
C
C
C
      IF(2*NDOM.GT.MAXDOM) THEN
          WRITE(IUT0,*) ERMSGB
          WRITE(IUT0,*) EREXP1
          IERR = 1
          RETURN
      ENDIF
C
C
C
C POST ALL THE EXPECTED RECEIVES
C
C
C
      NSTART = 1
      DO 1000 IDOM = 1 , NDOM
          MSGTYP = 1
          IRECV  = LDOM(IDOM)-1
          MSGLEN = NSKIP*NBFDOM(IDOM)
C
          IF(NSTART+MSGLEN-1.GT.MAXBUF) THEN
              WRITE(IUT0,*) ERMSGB
              WRITE(IUT0,*) EREXP2
              IERR = 1
              RETURN
          ENDIF
C
#ifdef PRECEXP
          CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL8,IRECV,MSGTYP,
     &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
#else
          CALL MPI_IRECV(BUFRCV(NSTART),MSGLEN,MPI_REAL ,IRECV,MSGTYP,
     &                   MPI_COMM_WORLD,MSGIDS(IDOM),IERR)
#endif
C
          NSTART = NSTART+MSGLEN
 1000 CONTINUE
C
C
C
C SET UP THE SEND BUFFER
C
C
C
      DO 2000 IDOM = 1 , NDOM
         NSTART  = 0
         DO 2100 ITMP = 2 , IDOM
            NSTART = NSTART + NBFDOM(ITMP-1)*NSKIP
 2100    CONTINUE
C
         IF(IDIM.EQ.0) THEN
!ocl norecurrence(BUFSND)
            DO 2200 IBF=1,NBFDOM(IDOM)
               NSTART2 = NSTART + NSKIP * (IBF-1)
               IFACES  = IFSND(IBF,IDOM)
               BUFSND(NSTART2+1) = IFACES
 2200       CONTINUE
         ELSE IF(IDIM.EQ.1) THEN
!ocl norecurrence(BUFSND)
            DO 2300 IBF=1,NBFDOM(IDOM)
               NSTART2 = NSTART + NSKIP * (IBF-1)
               IFACE   = IFSLF(IBF,IDOM)
               BUFSND(NSTART2+1) = FX(IFACE)
 2300       CONTINUE
         ELSE IF(IDIM.EQ.2) THEN
!ocl norecurrence(BUFSND)
            DO 2400 IBF=1,NBFDOM(IDOM)
               NSTART2 = NSTART + NSKIP * (IBF-1)
               IFACE   = IFSLF(IBF,IDOM)
               BUFSND(NSTART2+1) = FX(IFACE)
               BUFSND(NSTART2+2) = FY(IFACE)
 2400       CONTINUE
         ELSE IF(IDIM.EQ.3) THEN
!ocl norecurrence(BUFSND)
            DO 2500 IBF=1,NBFDOM(IDOM)
               NSTART2 = NSTART + NSKIP * (IBF-1)
               IFACE   = IFSLF(IBF,IDOM)
               BUFSND(NSTART2+1) = FX(IFACE)
               BUFSND(NSTART2+2) = FY(IFACE)
               BUFSND(NSTART2+3) = FZ(IFACE)
 2500       CONTINUE
         ENDIF
 2000 CONTINUE    
C
C
C
C SEND THE RESIDUALS
C
C
C
      NSTART = 1
      DO 2600 IDOM = 1 , NDOM
          MSGTYP = 1
          ISEND  = LDOM(IDOM)-1
          MSGLEN = NSKIP*NBFDOM(IDOM)

#ifdef PRECEXP
          CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL8,ISEND,MSGTYP,
     &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
#else
          CALL MPI_ISEND(BUFSND(NSTART),MSGLEN,MPI_REAL ,ISEND,MSGTYP,
     &                   MPI_COMM_WORLD,MSGIDS(NDOM+IDOM),IERR)
#endif
C
          NSTART = NSTART+MSGLEN 
 2600 CONTINUE
C
C
C
C WAIT FOR THE COMPLETION OF ALL THE REQUESTED COMMUNICATIONS
C
C
C
      CALL MPI_WAITALL(2*NDOM,MSGIDS,MSGSTS,IERR)
C 
C 
C IMPORTANT NOTES!
C        AFTER A NON-BLOCKING SEND/RECEIVE ROUTINE, SUCH AS 'MPI_ISEND'
C    OR 'MPI_IRECV', IS CALLED, THE COMMUNICATION REQUEST CREATED BY
C    THESE ROUTINES MUST BE FREED EITHER BY EXPLICITLY OR IMPLICITLY.
C   'MPI_REQUEST_FREE' FREES SUCH REQUEST EXPLICITLY, WHILE A ROUTINE
C    WHICH IDENTIFIES COMPLETION OF THE REQUEST, SUCH AS 'MPI_WAIT',
C    'MPI_WAITANY', OR 'MPI_WAITALL' IMPLICITLY FREES THE REQUEST.
C        THIS INTERFACE PROGRAM USES 'MPI_WAITALL' ROUTINES TO FREE SUCH
C    REQUESTS. PAY PARTICULAR ATTENTION IF YOU WISH TO, INSTEAD, USE
C   'MPI_REQUEST_FREE', BECAUSE 'MPI_REQUEST_FREE' FREES THE REQUESTS
C    REGARDLESS OF THE STATE OF THE PREVIOUSLY CALLED COMMUNICATION
C    ROUTINES, THUS SOMETIMES FREES REQUESTS WHICH HAVE NOT BEEN
C    COMPLETED.
C
C
C SUPERIMPOSE THE RECEIVED RESIDUALS
C
C
      NSTART = 0
      DO 3000 IDOM = 1 , NDOM
         IF(IDIM .EQ. 0) THEN
            DO 3100 IBF = 1, NBFDOM(IDOM)
               NSTART2 = NSTART + NSKIP * (IBF-1)
               IFSND(IBF,IDOM)=BUFRCV(NSTART2+1)+0.1
 3100       CONTINUE
            NSTART = NSTART + NSKIP * NBFDOM(IDOM)
         ELSE IF(IDIM .EQ. 1) THEN
!ocl norecurrence(FX)
            DO 3200 IBF = 1, NBFDOM(IDOM)
               IFACE = IFSND(IBF,IDOM)
               IF(IFACE.LT.1 .OR. IFACE.GT.NFACE) IERR=1
               NSTART2   = NSTART + NSKIP * (IBF-1)
               FX(IFACE) = BUFRCV(NSTART2+1)
 3200       CONTINUE
            NSTART = NSTART + NSKIP * NBFDOM(IDOM)
         ELSE IF(IDIM .EQ. 2) THEN
!ocl norecurrence(FX,FY)
            DO 3300 IBF = 1, NBFDOM(IDOM)
               IFACE = IFSND(IBF,IDOM)
               IF(IFACE.LT.1 .OR. IFACE.GT.NFACE) IERR=1
               NSTART2 = NSTART + NSKIP * (IBF-1)
               FX(IFACE) = BUFRCV(NSTART2+1)
               FY(IFACE) = BUFRCV(NSTART2+2)
 3300       CONTINUE
            NSTART = NSTART + NSKIP * NBFDOM(IDOM)
         ELSE IF(IDIM .EQ. 3) THEN
!ocl norecurrence(FX,FY,FZ)
            DO 3400 IBF = 1, NBFDOM(IDOM)
               IFACE = IFSND(IBF,IDOM)
               IF(IFACE.LT.1 .OR. IFACE.GT.NFACE) IERR=1
               NSTART2 = NSTART + NSKIP * (IBF-1)
               FX(IFACE) = BUFRCV(NSTART2+1)
               FY(IFACE) = BUFRCV(NSTART2+2)
               FZ(IFACE) = BUFRCV(NSTART2+3)
 3400       CONTINUE
            NSTART = NSTART + NSKIP * NBFDOM(IDOM)
         ENDIF
 3000 CONTINUE
C    
      IF(IERR .EQ. 1) THEN
        WRITE(IUT0,*) ERMSGB
        WRITE(IUT0,*) EREXP3
        RETURN
      ENDIF
C
      RETURN
      END
