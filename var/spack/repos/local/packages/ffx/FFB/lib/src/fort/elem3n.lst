
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:53:56 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : elem3n.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "ELEM3N"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    ELEM3N                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE ELEM3N(X,Y,Z,NODE,NES,NE,NP,N,GI,EI,TI,ELM)
         14                           IMPLICIT REAL*4(A-H,O-Z)
         15                           DIMENSION X(NP),Y(NP),Z(NP),NODE(N,NE),
         16                          1          GI(N),EI(N),TI(N),ELM(24,NE)
         17                     C
         18                     C
         19                     C      CALCULATE ELEMENT POSITION AND SHAPE DEPENDENT CONSTANTS
         20                     C     NEEDED FOR FIND3N
         21                     C         ( 3-D CALCULATION )
         22                     C
         23                     C
         24                     C     ARGUMENT LISTINGS
         25                     C       (1) INPUT
         26                     C          X     (IP)  ; X-DIR. COORDINATE         OF NODE
         27                     C          Y     (IP)  ; Y-DIR. COORDINATE         OF NODE
         28                     C          Z     (IP)  ; Z-DIR. COORDINATE         OF NODE
         29                     C          NODE(I,IE)  ; NODE TABLE
         30                     C          NES         ; FIRST ELEMENT NUMBER
         31                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         32                     C          NP          ; NUMBER OF TOTAL     NODES
         33                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         34                     C          GI  (I)     ; GZAI  COORDINATES OF ELEMENTWISE NODE I
         35                     C          EI  (I)     ; EATA  COORDINATES OF ELEMENTWISE NODE I
         36                     C          TI  (I)     ; THETA COORDINATES OF ELEMENTWISE NODE I
         37                     C
         38                     C       (2) OUTPUT
         39                     C          ELM( 1,IE)  ; 0.125*SUM OF X(NODE(I,IE))
         40                     C          ELM( 2,IE)  ; 0.125*SUM OF Y(NODE(I,IE))
         41                     C          ELM( 3,IE)  ; 0.125*SUM OF Z(NODE(I,IE))
         42                     C
         43                     C          ELM( 4,IE)  ; 0.125*SUM OF X(NODE(I,IE))*GI(I)
         44                     C          ELM( 5,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*GI(I)
         45                     C          ELM( 6,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*GI(I)
         46                     C          ELM( 7,IE)  ; 0.125*SUM OF X(NODE(I,IE))*EI(I)
         47                     C          ELM( 8,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*EI(I)
         48                     C          ELM( 9,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*EI(I)
         49                     C          ELM(10,IE)  ; 0.125*SUM OF X(NODE(I,IE))*TI(I)
         50                     C          ELM(11,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*TI(I)
         51                     C          ELM(12,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*TI(I)
         52                     C
         53                     C          ELM(13,IE)  ; 0.125*SUM OF X(NODE(I,IE))*GI(I)*EI(I)
         54                     C          ELM(14,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*GI(I)*EI(I)
         55                     C          ELM(15,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*GI(I)*EI(I)
         56                     C          ELM(16,IE)  ; 0.125*SUM OF X(NODE(I,IE))*EI(I)*TI(I)
         57                     C          ELM(17,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*EI(I)*TI(I)
         58                     C          ELM(18,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*EI(I)*TI(I)
         59                     C          ELM(19,IE)  ; 0.125*SUM OF X(NODE(I,IE))*TI(I)*GI(I)
         60                     C          ELM(20,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*TI(I)*GI(I)
         61                     C          ELM(21,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*TI(I)*GI(I)
         62                     C
         63                     C          ELM(22,IE)  ; 0.125*SUM OF X(NODE(I,IE))*GI(I)*EI(I)*TI(I)
         64                     C          ELM(23,IE)  ; 0.125*SUM OF Y(NODE(I,IE))*GI(I)*EI(I)*TI(I)
         65                     C          ELM(24,IE)  ; 0.125*SUM OF Z(NODE(I,IE))*GI(I)*EI(I)*TI(I)
         66                     C
         67                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
         68     1   p    v            DO 110 K = 1 , 24
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    FUSED(lines: 69,75)
                              <<< Loop-information  End >>>
         69     2  pp                     DO 100 IE = NES , NE
         70     2   p    v                    ELM(K,IE) = 0.E0
         71     2   p             100     CONTINUE
         72     1   p    v        110 CONTINUE
         73                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
         74     1   p   8v            DO 210 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED
                              <<<    FUSED
                              <<< Loop-information  End >>>
         75     2       8                 DO 200 IE = NES , NE
         76     2   p   8v                    ELM( 1,IE) = ELM( 1,IE)+X(NODE(I,IE))
         77     2   p   8v                    ELM( 2,IE) = ELM( 2,IE)+Y(NODE(I,IE))
         78     2   p   8v                    ELM( 3,IE) = ELM( 3,IE)+Z(NODE(I,IE))
         79     2   p   8         200     CONTINUE
         80     1   p   8v        210 CONTINUE
         81                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 2.33, ITR: 96, MVE: 3, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE, TI, EI, GI
                              <<< Loop-information  End >>>
         82     1   p    v            DO 310 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE, TI, EI, GI
                              <<< Loop-information  End >>>
         83     2  pp                     DO 300 IE = NES , NE
         84     2   p    v                    ELM( 4,IE) = ELM( 4,IE)+X(NODE(I,IE))*GI(I)
         85     2   p    v                    ELM( 5,IE) = ELM( 5,IE)+Y(NODE(I,IE))*GI(I)
         86     2   p    v                    ELM( 6,IE) = ELM( 6,IE)+Z(NODE(I,IE))*GI(I)
         87     2   p    v                    ELM( 7,IE) = ELM( 7,IE)+X(NODE(I,IE))*EI(I)
         88     2   p    v                    ELM( 8,IE) = ELM( 8,IE)+Y(NODE(I,IE))*EI(I)
         89     2   p    v                    ELM( 9,IE) = ELM( 9,IE)+Z(NODE(I,IE))*EI(I)
         90     2   p    v                    ELM(10,IE) = ELM(10,IE)+X(NODE(I,IE))*TI(I)
         91     2   p    v                    ELM(11,IE) = ELM(11,IE)+Y(NODE(I,IE))*TI(I)
         92     2   p    v                    ELM(12,IE) = ELM(12,IE)+Z(NODE(I,IE))*TI(I)
         93     2   p             300     CONTINUE
         94     1   p             310 CONTINUE
         95                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 1.84, ITR: 64, MVE: 2, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      GI, NODE, EI, TI
                              <<< Loop-information  End >>>
         96     1   p    v            DO 410 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE, EI, TI, GI
                              <<< Loop-information  End >>>
         97     2  pp                     DO 400 IE = NES , NE
         98     2   p    v                    ELM(13,IE) = ELM(13,IE)+X(NODE(I,IE))*GI(I)*EI(I)
         99     2   p    v                    ELM(14,IE) = ELM(14,IE)+Y(NODE(I,IE))*GI(I)*EI(I)
        100     2   p    v                    ELM(15,IE) = ELM(15,IE)+Z(NODE(I,IE))*GI(I)*EI(I)
        101     2   p    v                    ELM(16,IE) = ELM(16,IE)+X(NODE(I,IE))*EI(I)*TI(I)
        102     2   p    v                    ELM(17,IE) = ELM(17,IE)+Y(NODE(I,IE))*EI(I)*TI(I)
        103     2   p    v                    ELM(18,IE) = ELM(18,IE)+Z(NODE(I,IE))*EI(I)*TI(I)
        104     2   p    v                    ELM(19,IE) = ELM(19,IE)+X(NODE(I,IE))*TI(I)*GI(I)
        105     2   p    v                    ELM(20,IE) = ELM(20,IE)+Y(NODE(I,IE))*TI(I)*GI(I)
        106     2   p    v                    ELM(21,IE) = ELM(21,IE)+Z(NODE(I,IE))*TI(I)*GI(I)
        107     2   p             400     CONTINUE
        108     1   p             410 CONTINUE
        109                     C
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE, GI, EI, TI
                              <<< Loop-information  End >>>
        110     1   p   4v            DO 510 I = 1 , N
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 1)
                              <<<    FUSED(lines: 111,119)
                              <<< Loop-information  End >>>
        111     2  pp   4                 DO 500 IE = NES , NE
        112     2   p   4v                    ELM(22,IE) = ELM(22,IE)+X(NODE(I,IE))*GI(I)*EI(I)*TI(I)
        113     2   p   4v                    ELM(23,IE) = ELM(23,IE)+Y(NODE(I,IE))*GI(I)*EI(I)*TI(I)
        114     2   p   4v                    ELM(24,IE) = ELM(24,IE)+Z(NODE(I,IE))*GI(I)*EI(I)*TI(I)
        115     2   p   4         500     CONTINUE
        116     1   p             510 CONTINUE
        117                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1231
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        118     1   p    v            DO 610 K = 1 , 24
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED
                              <<<    FUSED
                              <<< Loop-information  End >>>
        119     2                         DO 600 IE = NES , NE
        120     2   p    v                    ELM(K,IE) = 0.125E0*ELM(K,IE)
        121     2   p             600     CONTINUE
        122     1   p    v        610 CONTINUE
        123                     C
        124                     C
        125                           RETURN
        126                           END

 Diagnostic messages: program name(ELEM3N)
   jwd8220o-i  "elem3n.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8211o-i  "elem3n.f", line 68: Loops interchanged at line 69.
   jwd6001s-i  "elem3n.f", line 68: SIMD conversion is applied to DO loop with DO variable 'K'.
   jwd8210o-i  "elem3n.f", line 69: Loops fused at line 75.
   jwd8211o-i  "elem3n.f", line 69: Loops interchanged at line 68.
   jwd8211o-i  "elem3n.f", line 69: Loops interchanged at line 74.
   jwd5001p-i  "elem3n.f", line 69: DO loop with DO variable 'IE' is parallelized.
   jwd6004s-i  "elem3n.f", line 74: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd8666o-i  "elem3n.f", line 74: This loop cannot be software pipelined because of shortage of floating-point registers.
   jwd8202o-i  "elem3n.f", line 74: Loop unrolled 8 times.
   jwd8208o-i  "elem3n.f", line 77: Method of calculating sum or product is changed.
   jwd8208o-i  "elem3n.f", line 78: Method of calculating sum or product is changed.
   jwd8211o-i  "elem3n.f", line 82: Loops interchanged at line 83.
   jwd6004s-i  "elem3n.f", line 82: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd8204o-i  "elem3n.f", line 82: This loop is software pipelined.
   jwd8205o-i  "elem3n.f", line 82: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd8211o-i  "elem3n.f", line 83: Loops interchanged at line 82.
   jwd5001p-i  "elem3n.f", line 83: DO loop with DO variable 'IE' is parallelized.
   jwd8211o-i  "elem3n.f", line 96: Loops interchanged at line 97.
   jwd6004s-i  "elem3n.f", line 96: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd8204o-i  "elem3n.f", line 96: This loop is software pipelined.
   jwd8205o-i  "elem3n.f", line 96: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 64.
   jwd8211o-i  "elem3n.f", line 97: Loops interchanged at line 96.
   jwd5001p-i  "elem3n.f", line 97: DO loop with DO variable 'IE' is parallelized.
   jwd8209o-i  "elem3n.f", line 98: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 99: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 100: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 101: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 102: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 103: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 104: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 105: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 106: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8211o-i  "elem3n.f", line 110: Loops interchanged at line 111.
   jwd6004s-i  "elem3n.f", line 110: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd8666o-i  "elem3n.f", line 110: This loop cannot be software pipelined because of shortage of floating-point registers.
   jwd8202o-i  "elem3n.f", line 110: Loop unrolled 4 times.
   jwd8210o-i  "elem3n.f", line 111: Loops fused at line 119.
   jwd8211o-i  "elem3n.f", line 111: Loops interchanged at line 110.
   jwd8211o-i  "elem3n.f", line 111: Loops interchanged at line 118.
   jwd5001p-i  "elem3n.f", line 111: DO loop with DO variable 'IE' is parallelized.
   jwd8209o-i  "elem3n.f", line 112: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8209o-i  "elem3n.f", line 113: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "elem3n.f", line 113: Method of calculating sum or product is changed.
   jwd8209o-i  "elem3n.f", line 114: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8208o-i  "elem3n.f", line 114: Method of calculating sum or product is changed.
   jwd6001s-i  "elem3n.f", line 118: SIMD conversion is applied to DO loop with DO variable 'K'.

 Procedure information
   Lines      : 126
   Statements : 55
   Stack(byte): 1264
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 126
   Total statements : 55
   Total stack(byte): 1264
   Total prefetch num: 0

