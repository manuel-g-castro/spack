
 Fujitsu Fortran Version 4.7.0  Tue Dec 21 10:39:27 2021

 Compilation information
   Current directory : /vol0005/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/dd_mpi
   Source file       : ddmid0.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0005/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -Nlst=t -Cpp -Cfpp -c -I/opt/FJSVxtclanga/.common/MELI026/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI026/lib64 -Knointentopt
   Cpp options          : -I/vol0005/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -I/opt/FJSVxtclanga/.common/MELI026/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI026/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=7 -D__FRT_patchlevel__=0 -D__FRT_version__="4.7.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Knoarray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nlibomp -Nline -Nlst -Nlst=p -Nlst=t
                          -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "DDMID0"
  (line-no.)(nest)(optimize)
          1                           SUBROUTINE DDMID0(LPMID1,LPMID2,LPMID3,NPMID,MPT,MDOM,IUT0,
          2                          *                  NGAT,LGAT,NPTGAT,IPMID,IPGAT,
          3                          *                  NSCT,LSCT,NPTSCT,IEMID,IPSCT,IERR)
          4                           IMPLICIT NONE
          5                           INTEGER*4 NPMID,MPT,MDOM,NGAT,NSCT,IUT0,IERR
          6                           INTEGER*4 LPMID1(NPMID),LPMID2(NPMID),LPMID3(NPMID),
          7                          *          LGAT(MDOM),NPTGAT(MDOM),IPMID(MPT,MDOM),IPGAT(MPT,MDOM),
          8                          *          LSCT(MDOM),NPTSCT(MDOM),IEMID(MPT,MDOM),IPSCT(MPT,MDOM)
          9                     C
         10                           INTEGER*4 IDOM,NDUM,IBP,IFNEW,ICHK
         11                     C
         12                           CHARACTER*60 ERMSGB
         13                          & / ' ## SUBROUTINE DDMID0: FATAL     ERROR OCCURRENCE; RETURNED' /
         14                           CHARACTER*60 EREXP1
         15                          & / ' DIMENSION SIZE OF PASSED LIST ARRAYS IS NOT SUFFICIENT    ' /
         16                     C
         17                     C
         18                     C      SET UP MID NODE SUB-DOMAIN LISTS FOR DOMAIN-DECOMPOSITION
         19                     C     PROGRAMMING MODEL
         20                     C
         21                     C     WRITTEN BY Y.YAMADE 2010.12.29
         22                     C
         23                     C
         24                     C     ARGUMENT LISTINGS
         25                     C       (1) INPUT
         26                     C INT *4   LPMID1  (IB); MID INODES
         27                     C INT *4   LPMID2  (IB); PARANTS ELEMENT2 OF MID NODES
         28                     C INT *4   LPMID3  (IB); DOMAIN NUMBER TO SEND/RECEIVE
         29                     C          0 --- THE DOMAIN HAS BOTH OF MID NODE AND ITS PARANT ELEMENT
         30                     C (POS. INT.)--- THE DOMAIN HAS ONLY PARANT ELEMENT
         31                     C (NEG. INT.)--- THE DOMAIN HAS ONLY MID NODE
         32                     C          NPMID       ; NUMBER OF MID NODES
         33                     C INT *4   MPT         ; THE DIMENSION SIZE OF THE FIRST ELEMENTS OF THE
         34                     C                        PASSED ARRAYS 'IPSET', 'IPGAT', 'IEMID', AND 'IPSCT'
         35                     C                        (I.E. THE MAXIMUM NUMBER OF THE MID NODES FOR A
         36                     C                         SINGLE SUB-DOMAIN)
         37                     C INT *4   MDOM        ; MAX. NUMBER OF THE OVERSET SUB-DOMAINS
         38                     C INT *4   IUT0        ; FILE NUMBER TO WRITE ERROR MESSAGE
         39                     C
         40                     C       (2) OUTPUT
         41                     C INT *4   NGAT             ; NUMBER OF DOMAINS FOR GATHERING
         42                     C INT *4   LGAT      (IDOM) ; DOMAIN NUMBER     FOR GATHERING
         43                     C INT *4   NPTGAT    (IDOM) ; NUMBER OF GATHERED VALUES FOR THE DOMAIN 'LGAT'
         44                     C INT *4   IPMID (IPT,IDOM) ; MIN NODE NUMBER IN THE DOMAIN
         45                     C                             WHICH WILL RECEIVE GATHERED VALUES
         46                     C INT *4   IPGAT (IPT,IDOM) ; INDICATES POSITION OF GATHERED DATA
         47                     C                             IN THE PASSING MID NODE ARRAYS
         48                     C
         49                     C INT *4   NSCT             ; NUMBER OF DOMAINS FOR SCATTERING
         50                     C INT *4   LSCT      (IDOM) ; DOMAIN NUMBER     FOR SCATTERING
         51                     C INT *4   NPTSCT    (IDOM) ; NUMBER OF VALUES TO BE SCATTERED
         52                     C                             FOR THE DOMAIN 'LGAT'
         53                     C INT *4   IEMID (IPT,IDOM) ; PARANT ELEMENT NUMBER IN THE DOMAIN
         54                     C                             WHICH WILL RECEIVE VALUES AND SCATTER IT
         55                     C INT *4   IPSCT (IPT,IDOM) ; INDICATES POSITION OF DATA TO BE SENT AND
         56                     C                             SCATTERED IN THE PASSING MID NODE ARRAYS
         57                     C
         58                     C INT *4   IERR             ; RETURN CODE WHOSE VALUE WILL BE EITHER
         59                     C                   0 --- INDICATING SUCCESSFUL TERMINATION
         60                     C                OR 1 --- INDICATING OCCURRENCE OF SOME ERROR CONDITIONS
         61                     C
         62                     C
         63                           IERR = 0
         64                     C
         65                     C
         66                     C
         67                     C SET INITIAL VALUES
         68                     C
         69                     C
         70                     C
         71                           NGAT = 0
         72                           NSCT = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1455
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NPTSCT, NPTGAT
                              <<< Loop-information  End >>>
         73     1  pp   2v            DO 1000 IDOM = 1 , MDOM
         74     1   p   2v                NPTGAT(IDOM) = 0
         75     1   p   2v                NPTSCT(IDOM) = 0
         76     1   p   2v       1000 CONTINUE
         77                     C
         78                     C
         79                     C
         80                     C SET DOMAIN LISTS FOR GATHERING
         81                     C
         82                     C
         83                     C
         84                           NDUM = 0
         85     1                     DO 2000 IBP = 1 , NPMID
         86     1                         IF(LPMID3(IBP).LE.0) GO TO 2000
         87     1               C
         88     1                         NDUM = NDUM+1
         89     1               C
         90     1                         IFNEW = LPMID3(IBP)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LGAT
                              <<< Loop-information  End >>>
         91     2                         DO 2100 ICHK = 1 , NGAT
         92     3                             IF(LGAT(ICHK).EQ.IFNEW) THEN
         93     3                                 IDOM = ICHK
         94     3                                 GO TO 2200
         95     3                             ENDIF
         96     2                2100     CONTINUE
         97     1                         NGAT = NGAT+1
         98     1                         IDOM = NGAT
         99     1               C
        100     2                         IF(NGAT.GT.MDOM) THEN
        101     2                             WRITE(IUT0,*) ERMSGB
        102     2                             WRITE(IUT0,*) EREXP1
        103     2                             IERR = 1
        104     2                             RETURN
        105     2                         ENDIF
        106     1               C
        107     1                         LGAT(NGAT) = IFNEW
        108     1               C
        109     1                2200     CONTINUE
        110     1                         NPTGAT(IDOM) = NPTGAT(IDOM)+1
        111     1               C
        112     2                         IF(NPTGAT(IDOM).GT.MPT) THEN
        113     2                             WRITE(IUT0,*) ERMSGB
        114     2                             WRITE(IUT0,*) EREXP1
        115     2                             IERR = 1
        116     2                             RETURN
        117     2                         ENDIF
        118     1               C
        119     1                         IPMID(NPTGAT(IDOM),IDOM) = LPMID1(IBP)
        120     1                         IPGAT(NPTGAT(IDOM),IDOM) = NDUM
        121     1                2000 CONTINUE
        122                     C
        123                     C
        124                     C
        125                     C SET DOMAIN LISTS FOR SCATTERING
        126                     C
        127                     C
        128                     C
        129                           NDUM = 0
        130     1                     DO 3000 IBP = 1 , NPMID
        131     1                         IF(LPMID3(IBP).GE.0) GO TO 3000
        132     1               C
        133     1                         NDUM = NDUM+1
        134     1               C
        135     1                         IFNEW = -LPMID3(IBP)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSCT
                              <<< Loop-information  End >>>
        136     2                         DO 3100 ICHK = 1 , NSCT
        137     3                             IF(LSCT(ICHK).EQ.IFNEW) THEN
        138     3                                 IDOM = ICHK
        139     3                                 GO TO 3200
        140     3                             ENDIF
        141     2                3100     CONTINUE
        142     1                         NSCT = NSCT+1
        143     1                         IDOM = NSCT
        144     1               C
        145     2                         IF(NSCT.GT.MDOM) THEN
        146     2                             WRITE(IUT0,*) ERMSGB
        147     2                             WRITE(IUT0,*) EREXP1
        148     2                             IERR = 1
        149     2                             RETURN
        150     2                         ENDIF
        151     1               C
        152     1                         LSCT(NSCT) = IFNEW
        153     1               C
        154     1                3200     CONTINUE
        155     1                         NPTSCT(IDOM) = NPTSCT(IDOM)+1
        156     1               C
        157     2                         IF(NPTSCT(IDOM).GT.MPT) THEN
        158     2                             WRITE(IUT0,*) ERMSGB
        159     2                             WRITE(IUT0,*) EREXP1
        160     2                             IERR = 1
        161     2                             RETURN
        162     2                         ENDIF
        163     1               C
        164     1                         IEMID(NPTSCT(IDOM),IDOM) = LPMID2(IBP)
        165     1                         IPSCT(NPTSCT(IDOM),IDOM) = NDUM
        166     1                3000 CONTINUE
        167                     C
        168                           RETURN
        169                           END
        170                     C

 Diagnostic messages: program name(DDMID0)
   jwd5001p-i  "ddmid0.f", line 73: DO loop with DO variable 'IDOM' is parallelized.
   jwd6001s-i  "ddmid0.f", line 73: SIMD conversion is applied to DO loop with DO variable 'IDOM'.
   jwd8663o-i  "ddmid0.f", line 73: This loop is not software pipelined because the software pipelining does not improve the performance.
   jwd8202o-i  "ddmid0.f", line 73: Loop unrolled 2 times.
   jwd5131p-i  "ddmid0.f", line 85: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5131p-i  "ddmid0.f", line 91: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "ddmid0.f", line 91: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "ddmid0.f", line 91: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5131p-i  "ddmid0.f", line 130: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5131p-i  "ddmid0.f", line 136: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "ddmid0.f", line 136: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "ddmid0.f", line 136: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.

 Procedure information
   Lines      : 170
   Statements : 78
   Stack(byte): 1568
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 170
   Total statements : 78
   Total stack(byte): 1568
   Total prefetch num: 0

