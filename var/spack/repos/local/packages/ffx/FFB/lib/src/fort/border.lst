
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:53:45 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : border.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "BORDER"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    BORDER                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE BORDER(IMODE,NODE,NE,N,MS,MB,
         14                          *                  LSIDE,NS,LBOUN,NB,IUT0,IERR)
         15                           DIMENSION NODE(N,NE),LSIDE(2,MS),LBOUN(MB)
         16                     C
         17                           CHARACTER*60 ERMSG
         18                           CHARACTER*60 EREXP1
         19                           CHARACTER*60 EREXP2
         20                           DATA ERMSG
         21                          & /' *** SUBROUTINE BORDER REPORTS A FATAL ERROR OCCURENCE ***' /
         22                           DATA EREXP1
         23                          & /' NUMBER OF BOUNDARY SIDES HAS EXCEEDED THE LIMIT' /
         24                           DATA EREXP2
         25                          & /' NUMBER OF BOUNDARY NODES HAS EXCEEDED THE LIMIT' /
         26                     C
         27                     C
         28                     C      FIND BOUNDARY SIDES AND BOUNDARY NODES
         29                     C         ( 2-D CALCULATION & GRAPHICS )
         30                     C
         31                     C
         32                     C     NOTE 1 ; THIS SUBROUTINE IS AVAILABLE FOR ANY KIND OF ELEMENTS
         33                     C             ( INCLUDING A MIXTURE OF DIFFERENT KINDS OF ELEMENTS ).
         34                     C
         35                     C
         36                     C     ARGUMENT LISTINGS
         37                     C       (1) INPUT
         38                     C          IMODE       ; SPECIFY THE FUNCTION MODE AS FOLLOWS
         39                     C                   1 --- FIND BOUNDARY SIDES
         40                     C                   2 --- FIND BOUNDARY SIDES AND BOUNDARY NODES
         41                     C          NODE(I,IE)  ; NODE TABLE
         42                     C                       ( IF AN ELEMENT IE HAS LESS NODES THAN N,
         43                     C                        NODE(I+NNODE,IE),,NODE(N,IE) MUST HAVE BEEN
         44                     C                        SET TO ZERO, WHERE NNODE DENOTES THE NUMBER
         45                     C                        OF NODES WHICH THE ELEMENT HAS. )
         46                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         47                     C          N           ; ALIGNMENT  DIMENSION OF THE ARRAY NODE (I,IE)
         48                     C          MS          ; THE SECOND DIMENSION OF THE ARRAY LSIDE(I,IS)
         49                     C          MB          ; THE        DIMENSION OF THE ARRAY LBOUN  (IB)
         50                     C          IUT0       ; DEVICE NUMBER TO REPORT ERROR OCCURENCE
         51                     C
         52                     C       (2) OUTPUT
         53                     C          LSIDE(I,IS) ; BOUNDARY SIDES FOUND
         54                     C              ( LSIDE(1,IS),LSIDE(2,IS) CONSTITUTES ONE BOUNDARY SIDE )
         55                     C          NS          ; NUMBER OF BOUNDARY SIDES FOUND
         56                     C          LBOUN(IB)   ; BOUNDARY NODES FOUND
         57                     C          NB          ; NUMBER OF BOUNDARY NODES FOUND
         58                     C          IERR        ; RETURN CODE TO REPORT ERROR OCCURENCE
         59                     C                   0 --- NORMAL TERMINATION
         60                     C                   1 --- A FATAL ERROR HAS OCCURED
         61                     C
         62                           IERR = 0
         63                     C
         64                     C      (1) FIND BOUNDARY SIDES
         65                     C
         66                           NS = 0
         67                     C
         68     1                     DO 600 IE = 1 , NE
         69     1                         NNODE = 0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1067
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
         70     2  pp    v                DO 100 I = 1 , N
         71     2   p                         IF(NODE(I,IE).NE.0) NNODE = NNODE+1
         72     2   p    v        100     CONTINUE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSIDE
                              <<< Loop-information  End >>>
         73     2                         DO 500 I = 1 , NNODE
         74     2                             IP1 = NODE(I,IE)
         75     2                             IP2 = NODE(MOD(I,NNODE)+1,IE)
         76     2                             IEXIST = 0
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSIDE
                              <<< Loop-information  End >>>
         77     3                             DO 200 IS = 1 , NS
         78     4                                 IF(LSIDE(1,IS).EQ.IP1 .AND. LSIDE(2,IS).EQ.IP2   .OR.
         79     4                    &               LSIDE(1,IS).EQ.IP2 .AND. LSIDE(2,IS).EQ.IP1) THEN
         80     4                                    IEXIST = IS
         81     4                                    GO TO 300
         82     4                                 ENDIF
         83     3                 200         CONTINUE
         84     2                 300         CONTINUE
         85     3                             IF(IEXIST.EQ.0) THEN
         86     3                                 NS = NS + 1
         87     4                                 IF(NS.GT.MS) THEN
         88     4                                     WRITE(IUT0,*) ERMSG
         89     4                                     WRITE(IUT0,*) EREXP1
         90     4                                     IERR = 1
         91     4                                     RETURN
         92     4                                 ENDIF
         93     3                                 LSIDE(1,NS) = IP1
         94     3                                 LSIDE(2,NS) = IP2
         95     3                             ELSE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 942
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 0.26, ITR: 96, MVE: 2, POL: L)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LSIDE
                              <<< Loop-information  End >>>
         96     4  pp   2v                        DO 400 IS = IEXIST+1, NS
         97     4   p   2v                            LSIDE(1,IS-1) = LSIDE(1,IS)
         98     4   p   2v                            LSIDE(2,IS-1) = LSIDE(2,IS)
         99     4   p   2v        400             CONTINUE
        100     3                                 NS = NS-1
        101     3                             ENDIF
        102     2                 500     CONTINUE
        103     1                 600 CONTINUE
        104                     C
        105                     C      (2) FIND BOUNDARY NODES USING LSIDE(I,IS)
        106                     C
        107     1                     IF(IMODE.EQ.2) THEN
        108     1                     NB = 0
        109     2                     DO 1200 IS = 1 , NS
        110     3                         DO 1100 I = 1 , 2
        111     3                             IP = LSIDE(I,IS)
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LBOUN
                              <<< Loop-information  End >>>
        112     4                             DO 1000 IB = 1 , NB
        113     4                                 IF(LBOUN(IB).EQ.IP) GO TO 1100
        114     4                1000         CONTINUE
        115     3                             NB = NB + 1
        116     4                             IF(NB.GT.MB) THEN
        117     4                                 WRITE(IUT0,*) ERMSG
        118     4                                 WRITE(IUT0,*) EREXP2
        119     4                                 IERR = 1
        120     4                                 RETURN
        121     4                             ENDIF
        122     3                             LBOUN(NB) = IP
        123     3                1100     CONTINUE
        124     2                1200 CONTINUE
        125     1                     ENDIF
        126                     C
        127                     C
        128                           RETURN
        129                           END

 Diagnostic messages: program name(BORDER)
   jwd5131p-i  "border.f", line 68: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5004p-i  "border.f", line 70: DO loop with DO variable 'I' is parallelized. The DO loop contains the reduction operation.
   jwd6004s-i  "border.f", line 70: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd5131p-i  "border.f", line 73: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5131p-i  "border.f", line 77: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "border.f", line 77: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "border.f", line 77: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5001p-i  "border.f", line 96: DO loop with DO variable 'IS' is parallelized.
   jwd6001s-i  "border.f", line 96: SIMD conversion is applied to DO loop with DO variable 'IS'.
   jwd8204o-i  "border.f", line 96: This loop is software pipelined.
   jwd8205o-i  "border.f", line 96: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 96.
   jwd5131p-i  "border.f", line 109: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5131p-i  "border.f", line 110: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5131p-i  "border.f", line 112: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "border.f", line 112: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "border.f", line 112: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.

 Procedure information
   Lines      : 129
   Statements : 66
   Stack(byte): 14880
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 129
   Total statements : 66
   Total stack(byte): 14880
   Total prefetch num: 0

