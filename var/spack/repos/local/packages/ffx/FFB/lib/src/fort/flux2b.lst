
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:02 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : flux2b.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "FLUX2B"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    FLUX2B                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE FLUX2B(IMODE,X,Y,V1,V2,NODE,NE,NP,N,LINE,NLINE,D,FLUX,
         14                          *                  FLUXWK,IUT0,IERR)
         15                           IMPLICIT REAL*4(A-H,O-Z)
         16                           CHARACTER*60 ERMSG
         17                           CHARACTER*60 EREXP
         18                           DIMENSION X(NP),Y(NP),V1(NP),V2(NP),NODE(N,NE),LINE(NLINE),
         19                          1          FLUX(NLINE),FLUXWK(NLINE)
         20                     C
         21                           DIMENSION XE(4),YE(4),SE(4),DNX(4),DNY(4),G(4),E(4)
         22                           DATA      G /  0.E0 ,  1.E0 ,  0.E0 , -1.E0 /
         23                           DATA      E / -1.E0 ,  0.E0 ,  1.E0 ,  0.E0 /
         24                           DATA ERMSG
         25                          & /' *** SUBROUTINE FLUX2B REPORTS A FATAL ERROR OCCURENCE ***'/
         26                           DATA EREXP
         27                          & /' SPECIFIED LINE SEGMENT IS NOT A BORDERLINE SEGMENT.      '/
         28                     C
         29                     C
         30                     C      CALCULATE DIFFUSION FLUX ALONG A BORDERLINE SEGMENT IN 2D FIELD
         31                     C         ( 2-D GRAPHICS )
         32                     C
         33                     C
         34                     C     NOTES ; FOR A VECTOR FLUX, FLUX2B WILL CALCULATE FLUX OF THE
         35                     C            COMPONENT OF THE GIVEN VECTOR WHICH IS ALIGNED TO THE
         36                     C            LINE SEGMENT VECTOR. THE DIRECTION OF THE LINE SEGMENT
         37                     C            WILL BE DETERMINED SUCH THAT A VECTOR OBTAINED BY ROTATING
         38                     C            THE LINE SEGMENT VECTOR BY POSITIVE 90 DEGREES BE AN INWARD
         39                     C            NORMAL VECTOR AT THE LOCATION.
         40                     C
         41                     C     NOTES ; FLUX IS DEFINED POSITIVE IF IT IS OUTWARD VECTOR ( .IE.
         42                     C            DIRECTED TO OUTSIDE THE COMPUTATIONAL DOMAIN )
         43                     C
         44                     C     NOTES : ALL PAIRS OF LINE(ILINE),LINE(ILINE+1) (ILINE=1-
         45                     C            NLINE-1 MUST BE A SUBSET OF BORDERLINES. IF THIS IS
         46                     C            NOT THE CASE, FLUX2B WILL TERMINATE THE EXECUTION
         47                     C            AND RETURN THE SEQUENCE AFTER REPORTING AN ERROR
         48                     C            MESSAGE TO THE FILE NUMBER SPECIFIED BY IUT0.
         49                     C
         50                     C     ARGUMENT LISTINGS
         51                     C       (1) INPUT
         52                     C          IMODE       ; SPECIFIES TYPE OF FLUX TO BE CALCULATED
         53                     C                   1 --- FLUX OF A SCALAR QUANTITY
         54                     C                   2 --- FLUX OF A VECTOR QUANTITY
         55                     C          X(IP)       ; X-COORDINATES OF NODES
         56                     C          Y(IP)       ; Y-COORDINATES OF NODES
         57                     C          V1(IP)      ; 1ST COMPONENT OF VECTOR/SCALAR
         58                     C          V2(IP)      ; 2ND COMPONENT OF VECTOR
         59                     C          NODE(I,NE)  ; NODE TABLE BASED ON ELEMENT
         60                     C          NE          ; NUMBER OF TOTAL ELEMENTS
         61                     C          NP          ; NUMBER OF TOTAL NODES
         62                     C          N           ; NUMBER OF NODES ASSIGNED TO ONE ELEMENT
         63                     C          LINE(ILINE) ; NODE NUMBERS WHICH CONSTITUES LINE SEGMENTS
         64                     C          NLINE       ; NUMBER OF NODES TO CONSTRUCT LINE SEGMENTS
         65                     C          D           ; DIFFUSION COEFFICIENT
         66                     C          IUT0        ; DEVICE NUMBER TO REPORT ERROR OCCURENCE
         67                     C
         68                     C       (2) OUTPUT
         69                     C          FLUX(ILINE) ; FLUX AT NODES
         70                     C          IERR        ; RETURN CODE TO REPORT ERROR OCCURENCE
         71                     C                   0 --- NORMAL TERMINATION
         72                     C                   1 --- A FATAL ERROR HAS OCCURED
         73                     C
         74                     C       (4) WORK
         75                     C          FLUXWK(ILINE); FLUX AT CENTER OF ELEMENT'S SIDE
         76                     C
         77                     C
         78                           IERR = 0
         79                     C
         80     1                     DO 100 ILINE = 1 , NLINE-1
         81     1                         IP1 = LINE(ILINE)
         82     1                         IP2 = LINE(ILINE+1)
         83     1                         NFACE = 0
         84     2                         DO 20 IEF = 1 , NE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      NODE
                              <<< Loop-information  End >>>
         85     3                             DO 10 I = 1 , N
         86     4                                 IF(NODE(I         ,IEF).EQ.IP1 .AND.
         87     4                    &               NODE(MOD(I,N)+1,IEF).EQ.IP2
         88     4                    &               .OR.
         89     4                    &               NODE(I         ,IEF).EQ.IP2 .AND.
         90     4                    &               NODE(MOD(I,N)+1,IEF).EQ.IP1) THEN
         91     4                                     NFACE = NFACE+1
         92     4                                     IE = IEF
         93     4                                     IS = I
         94     4                                     GO TO 20
         95     4                                 ENDIF
         96     3                  10         CONTINUE
         97     2                  20     CONTINUE
         98     2                         IF(NFACE.NE.1) THEN
         99     2                             WRITE(IUT0,*) ERMSG
        100     2                             WRITE(IUT0,*) EREXP
        101     2                             IERR = 1
        102     2                             RETURN
        103     2                         ENDIF
        104     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 640
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        105     2   s    v                DO 30 I = 1 , N
        106     2   p    v                     XE(I) = X(NODE(I,IE))
        107     2   p    v                     YE(I) = Y(NODE(I,IE))
        108     2   p    v         30     CONTINUE
        109     1                         CALL DERIVL(G(IS),E(IS),XE,YE,N,DNX,DNY)
        110     1               C
        111     1                         ISP = IS+1
        112     1                         IF(ISP.EQ.5) ISP = 1
        113     1                         ISM = IS-1
        114     1                         IF(ISM.EQ.0) ISM = 4
        115     1                         XS = XE(ISP)-XE(IS)
        116     1                         YS = YE(ISP)-YE(IS)
        117     1                         XC = XE(ISM)-XE(IS)
        118     1                         YC = YE(ISM)-YE(IS)
        119     1                         AS = SQRT(XS*XS+YS*YS)
        120     1                         DIRECT = 1.E0
        121     1                         IF(-YS*XC+XS*YC.LT.0.E0) DIRECT = -DIRECT
        122     1                         XS = DIRECT*XS/AS
        123     1                         YS = DIRECT*YS/AS
        124     1               C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 640
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    UNSWITCHING
                              <<< Loop-information  End >>>
        125     2   s    v                DO 40 I = 1 , N
        126     3   p    v                    IF(IMODE.EQ.1) THEN
        127     3                                 SE(I) = V1(NODE(I,IE))
        128     3   p    v                    ELSE
        129     3   p    v                        SE(I) = XS*V1(NODE(I,IE))+YS*V2(NODE(I,IE))
        130     3   p    v                    ENDIF
        131     2   p    v         40     CONTINUE
        132     1                         FLUXWK(ILINE) = 0.E0
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 616
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<< Loop-information  End >>>
        133     2  pp    v                DO 50 I = 1 , N
        134     2   p    v                    FLUXWK(ILINE) = FLUXWK(ILINE)
        135     2                    &                       +D*SE(I)*(-YS*DNX(I)+XS*DNY(I))
        136     2   p    v         50     CONTINUE
        137     1                 100 CONTINUE
        138                     C
        139                           FLUX(1)     = 1.5*FLUXWK(1)      -0.5*FLUXWK(2)
        140                           FLUX(NLINE) = 1.5*FLUXWK(NLINE-1)-0.5*FLUXWK(NLINE-2)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 1000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    SOFTWARE PIPELINING(IPC: 3.75, ITR: 320, MVE: 3, POL: S)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      FLUXWK, FLUX
                              <<< Loop-information  End >>>
        141     1  pp   2v            DO 200 ILINE = 2 , NLINE-1
        142     1   p   2v                    FLUX(ILINE) = 0.5*(FLUXWK(ILINE-1)+FLUXWK(ILINE))
        143     1   p   2v        200 CONTINUE
        144                     C
        145                     C
        146                           RETURN
        147                           END

 Diagnostic messages: program name(FLUX2B)
   jwd8220o-i  "flux2b.f", line 13: Optimizations is performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd5131p-i  "flux2b.f", line 80: DO loop is not parallelized: multiple exits were found in the loop.
   jwd5202p-i  "flux2b.f", line 84: DO loop is not parallelized: data dependency of variable 'NFACE' may cause different results from serial execution for loop.
   jwd5202p-i  "flux2b.f", line 84: DO loop is not parallelized: data dependency of variable 'IS' may cause different results from serial execution for loop.
   jwd5202p-i  "flux2b.f", line 84: DO loop is not parallelized: data dependency of variable 'IE' may cause different results from serial execution for loop.
   jwd5131p-i  "flux2b.f", line 85: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "flux2b.f", line 85: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "flux2b.f", line 85: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.
   jwd5143p-i  "flux2b.f", line 105: DO loop is not parallelized: the value of its iteration count is insufficient to make parallelization worthwhile.
   jwd8325o-i  "flux2b.f", line 105: Assume that the maximum number of iterations for this loop is 4 from the array declaration.
   jwd6001s-i  "flux2b.f", line 105: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd8209o-i  "flux2b.f", line 121: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd8321o-i  "flux2b.f", line 125: Loop unswitched.
   jwd5143p-i  "flux2b.f", line 125: DO loop is not parallelized: the value of its iteration count is insufficient to make parallelization worthwhile.
   jwd8325o-i  "flux2b.f", line 125: Assume that the maximum number of iterations for this loop is 4 from the array declaration.
   jwd6001s-i  "flux2b.f", line 125: SIMD conversion is applied to DO loop with DO variable 'I'.
   jwd5004p-i  "flux2b.f", line 133: DO loop with DO variable 'I' is parallelized. The DO loop contains the reduction operation.
   jwd8325o-i  "flux2b.f", line 133: Assume that the maximum number of iterations for this loop is 4 from the array declaration.
   jwd6004s-i  "flux2b.f", line 133: SIMD conversion is applied to DO loop with DO variable 'I'. The DO loop contains a reduction operation.
   jwd8209o-i  "flux2b.f", line 134: Evaluation order of polynomial expression is changed according to commutative law of addition and multiplication.
   jwd5001p-i  "flux2b.f", line 141: DO loop with DO variable 'ILINE' is parallelized.
   jwd6001s-i  "flux2b.f", line 141: SIMD conversion is applied to DO loop with DO variable 'ILINE'.
   jwd8204o-i  "flux2b.f", line 141: This loop is software pipelined.
   jwd8205o-i  "flux2b.f", line 141: The software-pipelined loop is chosen at run time when the iteration count is greater than or equal to 320.

 Procedure information
   Lines      : 147
   Statements : 68
   Stack(byte): 14832
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 147
   Total statements : 68
   Total stack(byte): 14832
   Total prefetch num: 0

