
 Fujitsu Fortran Version 4.5.0  Thu May  6 16:54:22 2021

 Compilation information
   Current directory : /vol0004/hp120295/u00324/FFBs/FFB.63.02.02/lib/src/fort
   Source file       : random.f

 Option information
   Command line options : -Kident_mpi -f2004 -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Kvisimpact,ocl,optmsg=2,openmp -Dcputime -DUSE_TIMER -DUSE_BARRIER -Nlst=t -Cpp -Nfjomplib -c -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Knointentopt
   Cpp options          : -I/vol0004/hp120295/u00324/FFB/include -I/include/mpi/fujitsu/ -Dcputime -DUSE_TIMER -DUSE_BARRIER -I/opt/FJSVxtclanga/.common/MELI024/include/mpi/fujitsu -I/opt/FJSVxtclanga/.common/MELI024/lib64 -Dunix -Dlinux -D__FUJITSU -D__FRT_major__=4 -D__FRT_minor__=5 -D__FRT_patchlevel__=0 -D__FRT_version__="4.5.0" -D__aarch64__ -D__unix -D_OPENMP=201511 -D__frt_version=800 -D__ARM_ARCH=8 -D__ARM_FEATURE_SVE -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -otmp
   Effective options    : -fi -g0 -AE -Fixed -O3 -X08
                          -x0 -xaccept=nomodule_allocatable
                          -KA64FX -KARMV8_3_A -KSVE -Kalign_commons
                          -Kalign_loops -Karray_declaration_opt
                          -Kassume=noshortloop -Kassume=nomemory_bandwidth
                          -Kassume=notime_saving_compilation -Kauto
                          -Kautoobjstack -Knocalleralloc -Kcmodel=small
                          -Keval -Keval_noconcurrent -Knoextract_stride_store
                          -Knofenv_access -Kfp_contract -Kfp_relaxed
                          -Kfsimple -Kfz -Khpctag -Kilfunc=procedure
                          -Knointentopt -Klargepage -Kloop_blocking
                          -Kloop_fission -Kloop_nofission_stripmining
                          -Kloop_fission_threshold=50 -Kloop_fusion
                          -Kloop_interchange -Kloop_part_parallel
                          -Kloop_part_simd -Kloop_perfect_nest
                          -Kloop_noversioning -Knolto -Kmfunc=1 -Kocl
                          -Komitfp -Knooptlib_string -Koptmsg=2
                          -Knopc_relative_literal_loads -Kplt -Knopreex
                          -Kprefetch_noconditional -Kprefetch_noindirect
                          -Kprefetch_sequential=auto -Kprefetch_nostride
                          -Kprefetch_cache_level=all -Kprefetch_noinfer
                          -Kprefetch_strong -Kprefetch_strong_L2 -Knopreload
                          -Ksch_post_ra -Ksch_pre_ra -Ksibling_calls
                          -Ksimd=auto -Ksimd_packed_promotion
                          -Ksimd_reduction_product -Ksimd_reg_size=512
                          -Ksimd_nouncounted_loop
                          -Ksimd_use_multiple_structures -Knostriping
                          -Knosubscript_opt -Kswp -Kswp_freg_rate=100
                          -Kswp_ireg_rate=100 -Kswp_preg_rate=100
                          -Kswp_policy=auto -Ktemparraystack -Kunroll
                          -Knounroll_and_jam -Knozfill
                          -Kopenmp -Kopenmp_noassume_norecurrence
                          -Kopenmp_nocollapse_except_innermost
                          -Kopenmp_noordered_reduction -Knoopenmp_simd
                          -Kthreadsafe -Kparallel -Kparallel_nofp_precision
                          -Knoarray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nalloc_assign
                          -Ncancel_overtime_compilation -Nnocheck_global
                          -Nnocoarray -Nnocompdisp -Nnocopyarg -Nnocoverage
                          -Nfjprof -Nfreealloc -Nf90move -Nnohook_func
                          -Nnohook_time -Nfjomplib -Nline -Nlst -Nlst=p
                          -Nlst=t -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nnoreordered_variable_stack -Nrt_notune -Nnosave
                          -Nsetvalue=noheap -Nsetvalue=nostack
                          -Nsetvalue=noscalar -Nsetvalue=noarray
                          -Nsetvalue=nostruct -Nuse_rodata

 External subroutine subprogram "RANDOM"
  (line-no.)(nest)(optimize)
          1                     C======================================================================C
          2                     C                                                                      C
          3                     C SOFTWARE NAME : FRONTFLOW_BLUE.1.0                                   C
          4                     C                                                                      C
          5                     C  SUB ROUTINE    RANDOM                                               C
          6                     C                                                                      C
          7                     C                                       WRITTEN BY C.KATO              C
          8                     C                                                                      C
          9                     C                                                                      C
         10                     C Contact address: The University of Tokyo, FSIS project               C
         11                     C                                                                      C
         12                     C======================================================================C
         13                           SUBROUTINE RANDOM(INIT,NRAN,LRAN,NWALK1,NWALK2)
         14                           IMPLICIT REAL*4(A-H,O-Z)
         15                           DIMENSION LRAN(NRAN)
         16                     C
         17                           REAL*4 RAN(1)
         18                     C
         19                     C
         20                     C      GENERATE A SET OF UNIQUE RANDOM INTEGER NUMBERS
         21                     C
         22                     C
         23                     C     ARGUMENT LISTINGS
         24                     C       (1) INPUT
         25                     C          NRAN        ; NUMBER OF RANDOM INTEGERS TO BE GENERATED
         26                     C
         27                     C       (2) OUTPUT
         28                     C          LRAN (IRAN) ; RANDOM INTEGER NUMBERS GENERATED
         29                     C          NWALK1      ; NUMBER OF TIMES  WALKED AROUND
         30                     C          NWALK2      ; AVERAGE DISTANCE WALKED AROUND
         31                     
         32                     C       (3) INPUT-OUTPUT
         33                     C          INIT        ; INITIAL AND FINAL RANDOM NUMBER
         34                     C
         35                     C
         36                           NWALK1 = 0
         37                           NWALK2 = 0
         38                     C
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2000
                              <<<  [OPTIMIZATION]
                              <<<    SIMD(VL: 16)
                              <<<    PREFETCH(HARD) Expected by compiler :
                              <<<      LRAN
                              <<< Loop-information  End >>>
         39     1  pp   4v            DO 100 IRAN = 1 , NRAN
         40     1   p   4v                LRAN(IRAN) = 0
         41     1   p   4v        100 CONTINUE
         42                     C
         43     1                     DO 130 IRAN = 1 , NRAN
         44     1               #ifdef VOS
         45     1                         CALL HSRU1M(1,INIT,RAN,IERRDM)
         46     1               #else
         47     1                         CALL LSGU1M(1,INIT,RAN,IERRDM)
         48     1               #endif
         49     1                         N = RAN(1)*NRAN+1
         50     1                         IF(N.GT.NRAN) N = NRAN
         51     1               C
         52     2                         IF(LRAN(N).EQ.0) THEN
         53     2                             LRAN(N) = IRAN
         54     2                         ELSE
         55     3                             DO 110 IWALK = 1 , NRAN-1
         56     3                                 NUP = N+IWALK
         57     4                                 IF(NUP.LE.NRAN) THEN
         58     5                                     IF(LRAN(NUP).EQ.0) THEN
         59     5                                         LRAN(NUP) = IRAN
         60     5                                         NWALK1 = NWALK1+1
         61     5                                         NWALK2 = NWALK2+IWALK
         62     5                                         GO TO 120
         63     5                                     ENDIF
         64     4                                 ENDIF
         65     3               C
         66     3                                 NDOWN = N-IWALK
         67     4                                 IF(NDOWN.GE.1) THEN
         68     5                                     IF(LRAN(NDOWN).EQ.0) THEN
         69     5                                         LRAN(NDOWN) = IRAN
         70     5                                         NWALK1 = NWALK1+1
         71     5                                         NWALK2 = NWALK2+IWALK
         72     5                                         GO TO 120
         73     5                                     ENDIF
         74     4                                 ENDIF
         75     3                 110         CONTINUE
         76     2               C
         77     2                 120         CONTINUE
         78     2                         ENDIF
         79     1                 130 CONTINUE
         80                     C
         81                           IF(NWALK1.GE.1) NWALK2 = NWALK2/NWALK1
         82                     C
         83                     C
         84                           RETURN
         85                           END

 Diagnostic messages: program name(RANDOM)
   jwd5001p-i  "random.f", line 39: DO loop with DO variable 'IRAN' is parallelized.
   jwd6001s-i  "random.f", line 39: SIMD conversion is applied to DO loop with DO variable 'IRAN'.
   jwd8663o-i  "random.f", line 39: This loop is not software pipelined because the software pipelining does not improve the performance.
   jwd8202o-i  "random.f", line 39: Loop unrolled 4 times.
   jwd5122p-i  "random.f", line 43: DO loop is not parallelized: a procedure reference was found in the loop.
   jwd5131p-i  "random.f", line 55: DO loop is not parallelized: multiple exits were found in the loop.
   jwd6131s-i  "random.f", line 55: SIMD conversion cannot be applied to DO loop: multiple exits are found in the loop.
   jwd8671o-i  "random.f", line 55: This loop cannot be software pipelined because the shape of the loop is not covered by software pipelining.

 Procedure information
   Lines      : 85
   Statements : 42
   Stack(byte): 752
   Prefetch num: 0

 Total information
   Procedures       : 1
   Total lines      : 85
   Total statements : 42
   Total stack(byte): 752
   Total prefetch num: 0

