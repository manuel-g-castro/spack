From e872875bc41269f2ba717fc1105a42b38637261b Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sat, 30 May 2020 12:12:52 +0900
Subject: [PATCH 10/32] gmx nonbonded-benchmark -time

works on aarch64 and recent intel processors

(cherry picked from commit 215a098059e74be02a94b413200130f89a97805e)
---
 src/gromacs/nbnxm/benchmark/bench_setup.cpp | 56 +++++++++++++++++++++++------
 src/gromacs/nbnxm/benchmark/bench_setup.h   |  2 ++
 src/gromacs/timing/cyclecounter.h           | 48 +++++++++++++++++++++++++
 src/programs/mdrun/nonbonded_bench.cpp      |  2 ++
 4 files changed, 98 insertions(+), 10 deletions(-)

diff --git a/src/gromacs/nbnxm/benchmark/bench_setup.cpp b/src/gromacs/nbnxm/benchmark/bench_setup.cpp
index ecfe6af..bb613c4 100644
--- a/src/gromacs/nbnxm/benchmark/bench_setup.cpp
+++ b/src/gromacs/nbnxm/benchmark/bench_setup.cpp
@@ -99,6 +99,14 @@ static gmx::compat::optional<std::string> checkKernelSetup(const KernelBenchOpti
         return "the requested SIMD kernel was not set up at configuration time";
     }
 
+    if (options.time)
+    {
+        if (0 == gmx_cycles_freq())
+        {
+            return " the -time option is unsupported on this system";
+        }
+    }
+
     return {};
 }
 
@@ -328,18 +336,38 @@ static void setupAndRunInstance(const gmx::BenchmarkSystem& system,
     cycles = gmx_cycles_read() - cycles;
     if (!doWarmup)
     {
-        const double dCycles = static_cast<double>(cycles);
-        if (options.cyclesPerPair)
+        if (options.time)
         {
-            fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", cycles * 1e-6,
-                    dCycles / options.numIterations * 1e-6, dCycles / (options.numIterations * numPairs),
-                    dCycles / (options.numIterations * numUsefulPairs));
+            const double uSec = static_cast<double>(cycles) / static_cast<double>(gmx_cycles_freq()) * 1.e6;
+            if (options.cyclesPerPair)
+            {
+                fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", uSec, uSec / options.numIterations,
+                        uSec / (options.numIterations * numPairs),
+                        uSec / (options.numIterations * numUsefulPairs));
+            }
+            else
+            {
+                fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", uSec, uSec / options.numIterations,
+                        options.numIterations * numPairs / uSec,
+                        options.numIterations * numUsefulPairs / uSec);
+            }
         }
         else
         {
-            fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", dCycles * 1e-6,
-                    dCycles / options.numIterations * 1e-6, options.numIterations * numPairs / dCycles,
-                    options.numIterations * numUsefulPairs / dCycles);
+            const double dCycles = static_cast<double>(cycles);
+            if (options.cyclesPerPair)
+            {
+                fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", cycles * 1e-6,
+                        dCycles / options.numIterations * 1e-6,
+                        dCycles / (options.numIterations * numPairs),
+                        dCycles / (options.numIterations * numUsefulPairs));
+            }
+            else
+            {
+                fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", dCycles * 1e-6,
+                        dCycles / options.numIterations * 1e-6, options.numIterations * numPairs / dCycles,
+                        options.numIterations * numUsefulPairs / dCycles);
+            }
         }
     }
 }
@@ -419,8 +447,16 @@ void bench(const int sizeFactor, const KernelBenchOptions& options)
         setupAndRunInstance(system, optionsList[0], true);
     }
 
-    fprintf(stdout, "Coulomb LJ   comb. SIMD    Mcycles  Mcycles/it.   %s\n",
-            options.cyclesPerPair ? "cycles/pair" : "pairs/cycle");
+    if (options.time)
+    {
+        fprintf(stdout, "Coulomb LJ   comb. SIMD    usec     usec/it.      %s\n",
+                options.cyclesPerPair ? "usec/pair" : "pairs/usec");
+    }
+    else
+    {
+        fprintf(stdout, "Coulomb LJ   comb. SIMD    Mcycles  Mcycles/it.   %s\n",
+                options.cyclesPerPair ? "cycles/pair" : "pairs/cycle");
+    }
     fprintf(stdout, "                                                total    useful\n");
 
     for (const auto& optionsInstance : optionsList)
diff --git a/src/gromacs/nbnxm/benchmark/bench_setup.h b/src/gromacs/nbnxm/benchmark/bench_setup.h
index 2e33352..e51200d 100644
--- a/src/gromacs/nbnxm/benchmark/bench_setup.h
+++ b/src/gromacs/nbnxm/benchmark/bench_setup.h
@@ -113,6 +113,8 @@ struct KernelBenchOptions
     int numWarmupIterations = 0;
     //! Print cycles/pair instead of pairs/cycle
     bool cyclesPerPair = false;
+    //! Report in micro seconds instead of cycles
+    bool time = false;
 };
 
 /*! \brief
diff --git a/src/gromacs/timing/cyclecounter.h b/src/gromacs/timing/cyclecounter.h
index 7be5937..339e0fb 100644
--- a/src/gromacs/timing/cyclecounter.h
+++ b/src/gromacs/timing/cyclecounter.h
@@ -194,6 +194,45 @@ static __inline__ gmx_cycles_t gmx_cycles_read()
     const gmx_cycles_t c_high = high;
     return c_low | c_high << 32;
 }
+
+static __inline__ gmx_cycles_t gmx_cycles_freq()
+{
+#    ifdef __x86_64__
+    long      tmp;
+    int       cpuid1, cpuid2;
+    const int l0  = 0x0;
+    const int l16 = 0x16;
+
+    /* cpuid clobbers ebx but it must be restored for -fPIC so save
+     * then restore ebx */
+    __asm__ volatile(
+            "xchg %%rbx, %2\n"
+            "cpuid\n"
+            "xchg %%rbx, %2\n"
+            : "=a"(cpuid1), "=d"(cpuid2), "=r"(tmp)
+            : "a"(l0)
+            : "ecx", "ebx");
+    if (cpuid1 >= 0x16)
+    {
+        __asm__ volatile(
+                "xchg %%rbx, %2\n"
+                "cpuid\n"
+                "xchg %%rbx, %2\n"
+                : "=a"(cpuid1), "=d"(cpuid2), "=r"(tmp)
+                : "a"(l16)
+                : "ecx", "ebx");
+        return (gmx_cycles_t)cpuid1 * (gmx_cycles_t)1000000;
+    }
+    else
+    {
+        return 0;
+    }
+}
+#    else
+    return 0;
+}
+#    endif
+
 #elif ((defined __aarch64__) \
        && (defined(__GNUC__) || defined(__INTEL_COMPILER) || defined(__PATHSCALE__) || defined(__PGIC__)))
 static __inline__ gmx_cycles_t gmx_cycles_read(void)
@@ -204,6 +243,15 @@ static __inline__ gmx_cycles_t gmx_cycles_read(void)
 
     return cycle;
 }
+
+static __inline__ gmx_cycles_t gmx_cycles_freq()
+{
+    /* 64-bit ARM cycle counters with GCC inline assembly */
+    gmx_cycles_t cycle;
+    __asm__ __volatile__("mrs %0, cntfrq_el0" : "=r"(cycle));
+
+    return cycle;
+}
 #elif defined(__ARM_ARCH_7A__) && defined(__GNUC__)
 static __inline__ gmx_cycles_t gmx_cycles_read(void)
 {
diff --git a/src/programs/mdrun/nonbonded_bench.cpp b/src/programs/mdrun/nonbonded_bench.cpp
index 3f4308c..65e158a 100644
--- a/src/programs/mdrun/nonbonded_bench.cpp
+++ b/src/programs/mdrun/nonbonded_bench.cpp
@@ -202,6 +202,8 @@ void NonbondedBenchmark::initOptions(IOptionsContainer* options, ICommandLineOpt
     options->addOption(BooleanOption("cycles")
                                .store(&benchmarkOptions_.cyclesPerPair)
                                .description("Report cycles/pair instead of pairs/cycle"));
+    options->addOption(
+            BooleanOption("time").store(&benchmarkOptions_.time).description("Report micro-seconds instead of cycles"));
 }
 
 void NonbondedBenchmark::optionsFinished()
-- 
1.8.3.1

From 4c228a1b293fe6a9ab2ac3fafe1facec135ce347 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Wed, 3 Jun 2020 15:51:41 +0900
Subject: [PATCH 11/32] nonbonded-benchmark -csv

(cherry picked from commit f9b5d24a411f717b22dfe9c699121dbb078d5453)
---
 src/gromacs/nbnxm/benchmark/bench_setup.cpp | 47 +++++++++++++++++++++++++++++
 src/gromacs/nbnxm/benchmark/bench_setup.h   |  2 ++
 src/programs/mdrun/nonbonded_bench.cpp      |  2 ++
 3 files changed, 51 insertions(+)

diff --git a/src/gromacs/nbnxm/benchmark/bench_setup.cpp b/src/gromacs/nbnxm/benchmark/bench_setup.cpp
index bb613c4..ae3e98b 100644
--- a/src/gromacs/nbnxm/benchmark/bench_setup.cpp
+++ b/src/gromacs/nbnxm/benchmark/bench_setup.cpp
@@ -76,6 +76,8 @@
 namespace Nbnxm
 {
 
+static FILE* csv = nullptr;
+
 /*! \brief Checks the kernel setup
  *
  * Returns an error string when the kernel is not available.
@@ -314,6 +316,37 @@ static void setupAndRunInstance(const gmx::BenchmarkSystem& system,
                 options.coulombType == BenchMarkCoulomb::Pme ? "Ewald" : "RF",
                 options.useHalfLJOptimization ? "half" : "all",
                 combruleNames[options.ljCombinationRule].c_str(), kernelNames[options.nbnxmSimd].c_str());
+        if (options.csv)
+        {
+            if (nullptr == csv)
+            {
+                csv = fopen("bench.csv", "w+");
+                fprintf(csv,
+                        "\"width\",\"atoms\",\"cut-off radius\",\"threads\",\"iter\",\"compute "
+                        "energy\",\"Ewald excl. "
+                        "corr.\",\"Coulomb\",\"LJ\",\"comb\",\"SIMD\",\"usec\",\"usec/it\",\"total "
+                        "pairs/usec\",\"useful pairs/usec\"\n");
+            }
+            fprintf(csv,
+                    "\"%d\",\"%zu\",\"%g\",\"%d\",\"%d\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%"
+                    "s\",",
+#ifdef GMX_SIMD
+                    (options.nbnxmSimd != BenchMarkKernels::SimdNo) ? GMX_SIMD_REAL_WIDTH : 0,
+#else
+                    0,
+#endif
+                    system.coordinates.size(), options.pairlistCutoff, options.numThreads,
+                    options.numIterations, options.computeVirialAndEnergy ? "yes" : "no",
+                    (options.coulombType != BenchMarkCoulomb::ReactionField)
+                            ? ((options.nbnxmSimd == BenchMarkKernels::SimdNo || options.useTabulatedEwaldCorr)
+                                       ? "table"
+                                       : "analytical")
+                            : "",
+                    options.coulombType == BenchMarkCoulomb::Pme ? "Ewald" : "RF",
+                    options.useHalfLJOptimization ? "half" : "all",
+                    combruleNames[options.ljCombinationRule].c_str(),
+                    kernelNames[options.nbnxmSimd].c_str());
+        }
     }
 
     // Run pre-iteration to avoid cache misses
@@ -344,12 +377,24 @@ static void setupAndRunInstance(const gmx::BenchmarkSystem& system,
                 fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", uSec, uSec / options.numIterations,
                         uSec / (options.numIterations * numPairs),
                         uSec / (options.numIterations * numUsefulPairs));
+                if (options.csv)
+                {
+                    fprintf(csv, "\"%.3f\",\"%.4f\",\"%.4f\",\"%.4f\"\n", uSec,
+                            uSec / options.numIterations, uSec / (options.numIterations * numPairs),
+                            uSec / (options.numIterations * numUsefulPairs));
+                }
             }
             else
             {
                 fprintf(stdout, "%10.3f %10.4f %8.4f %8.4f\n", uSec, uSec / options.numIterations,
                         options.numIterations * numPairs / uSec,
                         options.numIterations * numUsefulPairs / uSec);
+                if (options.csv)
+                {
+                    fprintf(csv, "\"%.3f\",\"%.4f\",\"%.4f\",\"%.4f\"\n", uSec,
+                            uSec / options.numIterations, options.numIterations * numPairs / uSec,
+                            options.numIterations * numUsefulPairs / uSec);
+                }
             }
         }
         else
@@ -463,6 +508,8 @@ void bench(const int sizeFactor, const KernelBenchOptions& options)
     {
         setupAndRunInstance(system, optionsInstance, false);
     }
+    if (nullptr != csv)
+        fclose(csv);
 }
 
 } // namespace Nbnxm
diff --git a/src/gromacs/nbnxm/benchmark/bench_setup.h b/src/gromacs/nbnxm/benchmark/bench_setup.h
index e51200d..5128c2f 100644
--- a/src/gromacs/nbnxm/benchmark/bench_setup.h
+++ b/src/gromacs/nbnxm/benchmark/bench_setup.h
@@ -115,6 +115,8 @@ struct KernelBenchOptions
     bool cyclesPerPair = false;
     //! Report in micro seconds instead of cycles
     bool time = false;
+    //! Also report results in bench.csv
+    bool csv = false;
 };
 
 /*! \brief
diff --git a/src/programs/mdrun/nonbonded_bench.cpp b/src/programs/mdrun/nonbonded_bench.cpp
index 65e158a..6705c67 100644
--- a/src/programs/mdrun/nonbonded_bench.cpp
+++ b/src/programs/mdrun/nonbonded_bench.cpp
@@ -204,6 +204,8 @@ void NonbondedBenchmark::initOptions(IOptionsContainer* options, ICommandLineOpt
                                .description("Report cycles/pair instead of pairs/cycle"));
     options->addOption(
             BooleanOption("time").store(&benchmarkOptions_.time).description("Report micro-seconds instead of cycles"));
+    options->addOption(
+            BooleanOption("csv").store(&benchmarkOptions_.csv).description("Also output results in csv format in bench.csv"));
 }
 
 void NonbondedBenchmark::optionsFinished()
-- 
1.8.3.1

From 25e8a261223d1233efb9f14e1d3c643e1b88ae56 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Wed, 11 Mar 2020 10:05:19 +0900
Subject: [PATCH 12/32] grompp: fix the -ref <file> option

Mark <file> optional (e.g. ffALLOW_MISSING).

A typical usage is
gmx grompp -ref rotref[.trr]
in which grompp will use rotref.0.trr, rotref.1.trr and so on,
but not rotref.trr. The easiest fix is hence to mark the file as optional.

Change-Id: Ide2947f57580b680d4f5f04ada22fd67d5fb0f93
(cherry picked from commit f7d8558332b66eefbed6c418a37abca0a039b5f4)
---
 src/gromacs/gmxpreprocess/grompp.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/gromacs/gmxpreprocess/grompp.cpp b/src/gromacs/gmxpreprocess/grompp.cpp
index 0e68f1b..0c0bfb4 100644
--- a/src/gromacs/gmxpreprocess/grompp.cpp
+++ b/src/gromacs/gmxpreprocess/grompp.cpp
@@ -1753,7 +1753,7 @@ int gmx_grompp(int argc, char* argv[])
                        { efEDR, "-e", nullptr, ffOPTRD },
                        /* This group is needed by the VMD viewer as the start configuration for IMD sessions: */
                        { efGRO, "-imd", "imdgroup", ffOPTWR },
-                       { efTRN, "-ref", "rotref", ffOPTRW } };
+                       { efTRN, "-ref", "rotref", ffOPTRW | ffALLOW_MISSING } };
 #define NFILE asize(fnm)
 
     /* Command line options */
-- 
1.8.3.1

From 322df20654f834bbe973f8303f1f4e22f1a9f28c Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Mon, 1 Jun 2020 16:55:06 +0900
Subject: [PATCH 13/32] nonbonded-benchmark: run combrule=none when the -all
 option is used

Closes gromacs/gromacs#3543

(cherry picked from commit bf7d9ffb23372fca5be48e95cccd8752d7034060)
---
 src/gromacs/nbnxm/benchmark/bench_setup.cpp | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/src/gromacs/nbnxm/benchmark/bench_setup.cpp b/src/gromacs/nbnxm/benchmark/bench_setup.cpp
index ae3e98b..e2a52f6 100644
--- a/src/gromacs/nbnxm/benchmark/bench_setup.cpp
+++ b/src/gromacs/nbnxm/benchmark/bench_setup.cpp
@@ -450,10 +450,6 @@ void bench(const int sizeFactor, const KernelBenchOptions& options)
                 gmx::EnumerationWrapper<BenchMarkCombRule> combRuleIter;
                 for (auto combRule : combRuleIter)
                 {
-                    if (combRule == BenchMarkCombRule::RuleNone)
-                    {
-                        continue;
-                    }
                     opt.ljCombinationRule = combRule;
 
                     expandSimdOptionAndPushBack(opt, &optionsList);
-- 
1.8.3.1

From 0df4a98e089c68da05c929cd516599360b8cc70b Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Tue, 3 Mar 2020 16:35:18 +0900
Subject: [PATCH 14/32] nbnxm: skip useless invsqrt() when possible

Generally speaking, 1/sqrt(rsq) and 1/(rsq) are both needed,
so first rinv = invsqrt(rsq) is computed, and then
rinvsq = rinv * rinv is computed.

However, in some cases, rinv is not needed at all, so save
an expensinve root square and directly compute
rinvsq = inv(rsq).

Change-Id: Ifca47334dd675f2e0fae5daa2380dee3eae59ace

cherry-picked from https://gerrit.gromacs.org/c/gromacs/+/16157

(cherry picked from commit 7146b0b5a22511ae2106e18222e2697d03693e55)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 26 +++++++++++++--
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 39 +++++++++++++++++-----
 2 files changed, 54 insertions(+), 11 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index f109430..132d390 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -61,6 +61,12 @@
 #if defined CHECK_EXCLS && (defined CALC_COULOMB || defined LJ_EWALD_GEOM)
 #    define EXCL_FORCES
 #endif
+#if defined CALC_COULOMB || defined CALC_COUL_TAB || defined LJ_FORCE_SWITCH || defined LJ_POT_SWITCH \
+        || defined LJ_COULOMB_LB || defined HALF_LJ || defined EXCL_FORCES || defined LJ_COMB_LB
+#    define SKIP_INVSQRT 0
+#else
+#    define SKIP_INVSQRT 1
+#endif
 
 {
     int cj, aj, ajx, ajy, ajz;
@@ -81,8 +87,11 @@
     SimdReal dx_S2, dy_S2, dz_S2;
     SimdReal tx_S0, ty_S0, tz_S0;
     SimdReal tx_S2, ty_S2, tz_S2;
-    SimdReal rsq_S0, rinv_S0, rinvsq_S0;
-    SimdReal rsq_S2, rinv_S2, rinvsq_S2;
+    SimdReal rsq_S0, rinvsq_S0;
+    SimdReal rsq_S2, rinvsq_S2;
+#if !SKIP_INVSQRT
+    SimdReal rinv_S0, rinv_S2;
+#endif
     /* wco: within cut-off, mask of all 1's or 0's */
     SimdBool wco_S0;
     SimdBool wco_S2;
@@ -300,8 +309,13 @@
     rsq_S2 = max(rsq_S2, minRsq_S);
 
     /* Calculate 1/r */
+#if SKIP_INVSQRT
+    rinvsq_S0 = inv(rsq_S0);
+    rinvsq_S2 = inv(rsq_S2);
+#else
     rinv_S0 = invsqrt(rsq_S0);
     rinv_S2 = invsqrt(rsq_S2);
+#endif
 
 #ifdef CALC_COULOMB
     /* Load parameters for j atom */
@@ -347,12 +361,17 @@
 
 #endif /* CALC_LJ */
 
+#if SKIP_INVSQRT
+    rinvsq_S0 = selectByMask(rinvsq_S0, wco_S0);
+    rinvsq_S2 = selectByMask(rinvsq_S2, wco_S2);
+#else
     /* Set rinv to zero for r beyond the cut-off */
     rinv_S0 = selectByMask(rinv_S0, wco_S0);
     rinv_S2 = selectByMask(rinv_S2, wco_S2);
 
     rinvsq_S0 = rinv_S0 * rinv_S0;
     rinvsq_S2 = rinv_S2 * rinv_S2;
+#endif
 
 #ifdef CALC_COULOMB
     /* Note that here we calculate force*r, not the usual force/r.
@@ -864,7 +883,7 @@
     fscal_S0 = rinvsq_S0 * frLJ_S0;
 #    endif
 #else
-    fscal_S0 = rinvsq_S0 * frcoul_S0;
+    fscal_S0  = rinvsq_S0 * frcoul_S0;
 #endif /* CALC_LJ */
 #if defined CALC_LJ && !defined HALF_LJ
 #    ifdef CALC_COULOMB
@@ -906,3 +925,4 @@
 #undef wco_vdw_S2
 
 #undef EXCL_FORCES
+#undef SKIP_INVSQRT
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index 8294692..9883d4c 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -54,6 +54,13 @@
 #    if defined CHECK_EXCLS && (defined CALC_COULOMB || defined LJ_EWALD_GEOM)
 #        define EXCL_FORCES
 #    endif
+#    if defined CALC_COULOMB || defined CALC_COUL_TAB || defined LJ_FORCE_SWITCH \
+            || defined LJ_POT_SWITCH || defined LJ_COULOMB_LB || defined HALF_LJ \
+            || defined EXCL_FORCES || defined LJ_COMB_LB || GMX_DOUBLE
+#        define SKIP_INVSQRT 0
+#    else
+#        define SKIP_INVSQRT 1
+#    endif
 
 {
     int cj, ajx, ajy, ajz;
@@ -81,10 +88,13 @@
     SimdReal tx_S1, ty_S1, tz_S1;
     SimdReal tx_S2, ty_S2, tz_S2;
     SimdReal tx_S3, ty_S3, tz_S3;
-    SimdReal rsq_S0, rinv_S0, rinvsq_S0;
-    SimdReal rsq_S1, rinv_S1, rinvsq_S1;
-    SimdReal rsq_S2, rinv_S2, rinvsq_S2;
-    SimdReal rsq_S3, rinv_S3, rinvsq_S3;
+    SimdReal rsq_S0, rinvsq_S0;
+    SimdReal rsq_S1, rinvsq_S1;
+    SimdReal rsq_S2, rinvsq_S2;
+    SimdReal rsq_S3, rinvsq_S3;
+#    if !SKIP_INVSQRT
+    SimdReal rinv_S0, rinv_S1, rinv_S2, rinv_S3;
+#    endif
 
     /* wco: within cut-off, mask of all 1's or 0's */
     SimdBool wco_S0;
@@ -262,7 +272,7 @@
 #    if UNROLLJ == STRIDE
     ajx = aj * DIM;
 #    else
-    ajx = (cj >> 1) * DIM * STRIDE + (cj & 1) * UNROLLJ;
+    ajx     = (cj >> 1) * DIM * STRIDE + (cj & 1) * UNROLLJ;
 #    endif
     ajy = ajx + STRIDE;
     ajz = ajy + STRIDE;
@@ -384,7 +394,12 @@
     rsq_S3 = max(rsq_S3, minRsq_S);
 
     /* Calculate 1/r */
-#    if !GMX_DOUBLE
+#    if SKIP_INVSQRT
+    rinvsq_S0 = inv(rsq_S0);
+    rinvsq_S1 = inv(rsq_S1);
+    rinvsq_S2 = inv(rsq_S2);
+    rinvsq_S3 = inv(rsq_S3);
+#    elif !GMX_DOUBLE
     rinv_S0 = invsqrt(rsq_S0);
     rinv_S1 = invsqrt(rsq_S1);
     rinv_S2 = invsqrt(rsq_S2);
@@ -450,6 +465,12 @@
 
 #    endif /* CALC_LJ */
 
+#    if SKIP_INVSQRT
+    rinvsq_S0 = selectByMask(rinvsq_S0, wco_S0);
+    rinvsq_S1 = selectByMask(rinvsq_S1, wco_S1);
+    rinvsq_S2 = selectByMask(rinvsq_S2, wco_S2);
+    rinvsq_S3 = selectByMask(rinvsq_S3, wco_S3);
+#    else
     /* Set rinv to zero for r beyond the cut-off */
     rinv_S0 = selectByMask(rinv_S0, wco_S0);
     rinv_S1 = selectByMask(rinv_S1, wco_S1);
@@ -460,6 +481,7 @@
     rinvsq_S1 = rinv_S1 * rinv_S1;
     rinvsq_S2 = rinv_S2 * rinv_S2;
     rinvsq_S3 = rinv_S3 * rinv_S3;
+#    endif
 
 #    ifdef CALC_COULOMB
     /* Note that here we calculate force*r, not the usual force/r.
@@ -1147,8 +1169,8 @@
     fscal_S1 = rinvsq_S1 * frLJ_S1;
 #        endif
 #    else
-    fscal_S0 = rinvsq_S0 * frcoul_S0;
-    fscal_S1 = rinvsq_S1 * frcoul_S1;
+    fscal_S0  = rinvsq_S0 * frcoul_S0;
+    fscal_S1  = rinvsq_S1 * frcoul_S1;
 #    endif /* CALC_LJ */
 #    if defined CALC_LJ && !defined HALF_LJ
 #        ifdef CALC_COULOMB
@@ -1209,5 +1231,6 @@
 #    undef wco_vdw_S3
 
 #    undef EXCL_FORCES
+#    undef SKIP_INVSQRT
 
 #endif // !DOXYGEN
-- 
1.8.3.1

From 1fd92ce43c6115cddfa9103455be3cbb9ef8b075 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Tue, 13 Aug 2019 16:55:15 +0900
Subject: [PATCH 15/32] nbnxm: use more masked operations in SIMD kernels

 - replace "... + selectByMask(...)" with maskAdd(...)
 - replace "... * selectByMask(...)" with maskzMul(...)

Change-Id: I7f436b60d57787d8da6be33e88873484669df1a2

cherry-picked from https://gerrit.gromacs.org/c/gromacs/+/16197

(cherry picked from commit 1e0703041e1b5f81fc9b699b210b5488f110f1ac)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 12 +++++------
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 24 +++++++++++-----------
 2 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 132d390..62d82dd 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -405,8 +405,8 @@
     /* We need to mask (or limit) rsq for the cut-off,
      * as large distances can cause an overflow in gmx_pmecorrF/V.
      */
-    brsq_S0   = beta2_S * selectByMask(rsq_S0, wco_S0);
-    brsq_S2   = beta2_S * selectByMask(rsq_S2, wco_S2);
+    brsq_S0   = maskzMul(beta2_S, rsq_S0, wco_S0);
+    brsq_S2   = maskzMul(beta2_S, rsq_S2, wco_S2);
     ewcorr_S0 = beta_S * pmeForceCorrection(brsq_S0);
     ewcorr_S2 = beta_S * pmeForceCorrection(brsq_S2);
     frcoul_S0 = qq_S0 * fma(ewcorr_S0, brsq_S0, rinv_ex_S0);
@@ -479,8 +479,8 @@
 #        ifndef NO_SHIFT_EWALD
     /* Add Ewald potential shift to vc_sub for convenience */
 #            ifdef CHECK_EXCLS
-    vc_sub_S0 = vc_sub_S0 + selectByMask(sh_ewald_S, interact_S0);
-    vc_sub_S2 = vc_sub_S2 + selectByMask(sh_ewald_S, interact_S2);
+    vc_sub_S0 = maskAdd(vc_sub_S0, sh_ewald_S, interact_S0);
+    vc_sub_S2 = maskAdd(vc_sub_S2, sh_ewald_S, interact_S2);
 #            else
     vc_sub_S0 = vc_sub_S0 + sh_ewald_S;
     vc_sub_S2 = vc_sub_S2 + sh_ewald_S;
@@ -753,9 +753,9 @@
 #        endif
 
         /* Mask for the cut-off to avoid overflow of cr2^2 */
-        cr2_S0 = lje_c2_S * selectByMask(rsq_S0, wco_vdw_S0);
+        cr2_S0 = maskzMul(lje_c2_S, rsq_S0, wco_vdw_S0);
 #        ifndef HALF_LJ
-        cr2_S2 = lje_c2_S * selectByMask(rsq_S2, wco_vdw_S2);
+        cr2_S2 = maskzMul(lje_c2_S, rsq_S2, wco_vdw_S2);
 #        endif
         // Unsafe version of our exp() should be fine, since these arguments should never
         // be smaller than -127 for any reasonable choice of cutoff or ewald coefficients.
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index 9883d4c..3d47091 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -523,10 +523,10 @@
     /* We need to mask (or limit) rsq for the cut-off,
      * as large distances can cause an overflow in gmx_pmecorrF/V.
      */
-    brsq_S0   = beta2_S * selectByMask(rsq_S0, wco_S0);
-    brsq_S1   = beta2_S * selectByMask(rsq_S1, wco_S1);
-    brsq_S2   = beta2_S * selectByMask(rsq_S2, wco_S2);
-    brsq_S3   = beta2_S * selectByMask(rsq_S3, wco_S3);
+    brsq_S0   = maskzMul(beta2_S, rsq_S0, wco_S0);
+    brsq_S1   = maskzMul(beta2_S, rsq_S1, wco_S1);
+    brsq_S2   = maskzMul(beta2_S, rsq_S2, wco_S2);
+    brsq_S3   = maskzMul(beta2_S, rsq_S3, wco_S3);
     ewcorr_S0 = beta_S * pmeForceCorrection(brsq_S0);
     ewcorr_S1 = beta_S * pmeForceCorrection(brsq_S1);
     ewcorr_S2 = beta_S * pmeForceCorrection(brsq_S2);
@@ -635,10 +635,10 @@
 #            ifndef NO_SHIFT_EWALD
     /* Add Ewald potential shift to vc_sub for convenience */
 #                ifdef CHECK_EXCLS
-    vc_sub_S0 = vc_sub_S0 + selectByMask(sh_ewald_S, interact_S0);
-    vc_sub_S1 = vc_sub_S1 + selectByMask(sh_ewald_S, interact_S1);
-    vc_sub_S2 = vc_sub_S2 + selectByMask(sh_ewald_S, interact_S2);
-    vc_sub_S3 = vc_sub_S3 + selectByMask(sh_ewald_S, interact_S3);
+    vc_sub_S0 = maskAdd(vc_sub_S0, sh_ewald_S, interact_S0);
+    vc_sub_S1 = maskAdd(vc_sub_S1, sh_ewald_S, interact_S1);
+    vc_sub_S2 = maskAdd(vc_sub_S2, sh_ewald_S, interact_S2);
+    vc_sub_S3 = maskAdd(vc_sub_S3, sh_ewald_S, interact_S3);
 #                else
     vc_sub_S0 = vc_sub_S0 + sh_ewald_S;
     vc_sub_S1 = vc_sub_S1 + sh_ewald_S;
@@ -1007,11 +1007,11 @@
 #            endif
 
         /* Mask for the cut-off to avoid overflow of cr2^2 */
-        cr2_S0 = lje_c2_S * selectByMask(rsq_S0, wco_vdw_S0);
-        cr2_S1 = lje_c2_S * selectByMask(rsq_S1, wco_vdw_S1);
+        cr2_S0 = maskzMul(lje_c2_S, rsq_S0, wco_vdw_S0);
+        cr2_S1 = maskzMul(lje_c2_S, rsq_S1, wco_vdw_S1);
 #            ifndef HALF_LJ
-        cr2_S2 = lje_c2_S * selectByMask(rsq_S2, wco_vdw_S2);
-        cr2_S3 = lje_c2_S * selectByMask(rsq_S3, wco_vdw_S3);
+        cr2_S2 = maskzMul(lje_c2_S, rsq_S2, wco_vdw_S2);
+        cr2_S3 = maskzMul(lje_c2_S, rsq_S3, wco_vdw_S3);
 #            endif
         // Unsafe version of our exp() should be fine, since these arguments should never
         // be smaller than -127 for any reasonable choice of cutoff or ewald coefficients.
-- 
1.8.3.1

From 71713ef02bc487e0b8a213cc48780d58c928df15 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 3 May 2020 18:22:58 +0900
Subject: [PATCH 16/32] nbnxm: optimize rinvsix_S? computations

Use masked operations instead of yet an other selectByMask()

(cherry picked from commit b382039d51ab0338f9a10730bee643b8dae27ff7)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 20 +++++++-----
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 38 +++++++++++++---------
 2 files changed, 34 insertions(+), 24 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 62d82dd..4aa5391 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -448,8 +448,8 @@
 #            else
     gatherLoadUBySimdIntTranspose<1>(tab_coul_F, ti_S0, &ctab0_S0, &ctab1_S0);
     gatherLoadUBySimdIntTranspose<1>(tab_coul_F, ti_S2, &ctab0_S2, &ctab1_S2);
-    ctab1_S0  = ctab1_S0 - ctab0_S0;
-    ctab1_S2  = ctab1_S2 - ctab0_S2;
+    ctab1_S0   = ctab1_S0 - ctab0_S0;
+    ctab1_S2   = ctab1_S2 - ctab0_S2;
 #            endif
 #        else
 #            ifdef TAB_FDV0
@@ -482,8 +482,8 @@
     vc_sub_S0 = maskAdd(vc_sub_S0, sh_ewald_S, interact_S0);
     vc_sub_S2 = maskAdd(vc_sub_S2, sh_ewald_S, interact_S2);
 #            else
-    vc_sub_S0 = vc_sub_S0 + sh_ewald_S;
-    vc_sub_S2 = vc_sub_S2 + sh_ewald_S;
+    vc_sub_S0  = vc_sub_S0 + sh_ewald_S;
+    vc_sub_S2  = vc_sub_S2 + sh_ewald_S;
 #            endif
 #        endif
 
@@ -515,14 +515,18 @@
 #    endif
 
 #    ifndef LJ_COMB_LB
-    rinvsix_S0 = rinvsq_S0 * rinvsq_S0 * rinvsq_S0;
+    rinvsix_S0 = rinvsq_S0 * rinvsq_S0;
 #        ifdef EXCL_FORCES
-    rinvsix_S0 = selectByMask(rinvsix_S0, interact_S0);
+    rinvsix_S0 = maskzMul(rinvsix_S0, rinvsq_S0, interact_S0);
+#        else
+    rinvsix_S0 = rinvsix_S0 * rinvsq_S0;
 #        endif
 #        ifndef HALF_LJ
-    rinvsix_S2 = rinvsq_S2 * rinvsq_S2 * rinvsq_S2;
+    rinvsix_S2 = rinvsq_S2 * rinvsq_S2;
 #            ifdef EXCL_FORCES
-    rinvsix_S2 = selectByMask(rinvsix_S2, interact_S2);
+    rinvsix_S2 = maskzMul(rinvsix_S2, rinvsq_S2, interact_S2);
+#            else
+    rinvsix_S2 = rinvsix_S2 * rinvsq_S2;
 #            endif
 #        endif
 
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index 3d47091..4f75a31 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -588,10 +588,10 @@
     gatherLoadUBySimdIntTranspose<1>(tab_coul_F, ti_S1, &ctab0_S1, &ctab1_S1);
     gatherLoadUBySimdIntTranspose<1>(tab_coul_F, ti_S2, &ctab0_S2, &ctab1_S2);
     gatherLoadUBySimdIntTranspose<1>(tab_coul_F, ti_S3, &ctab0_S3, &ctab1_S3);
-    ctab1_S0  = ctab1_S0 - ctab0_S0;
-    ctab1_S1  = ctab1_S1 - ctab0_S1;
-    ctab1_S2  = ctab1_S2 - ctab0_S2;
-    ctab1_S3  = ctab1_S3 - ctab0_S3;
+    ctab1_S0   = ctab1_S0 - ctab0_S0;
+    ctab1_S1   = ctab1_S1 - ctab0_S1;
+    ctab1_S2   = ctab1_S2 - ctab0_S2;
+    ctab1_S3   = ctab1_S3 - ctab0_S3;
 #                endif
 #            else
 #                ifdef TAB_FDV0
@@ -640,10 +640,10 @@
     vc_sub_S2 = maskAdd(vc_sub_S2, sh_ewald_S, interact_S2);
     vc_sub_S3 = maskAdd(vc_sub_S3, sh_ewald_S, interact_S3);
 #                else
-    vc_sub_S0 = vc_sub_S0 + sh_ewald_S;
-    vc_sub_S1 = vc_sub_S1 + sh_ewald_S;
-    vc_sub_S2 = vc_sub_S2 + sh_ewald_S;
-    vc_sub_S3 = vc_sub_S3 + sh_ewald_S;
+    vc_sub_S0  = vc_sub_S0 + sh_ewald_S;
+    vc_sub_S1  = vc_sub_S1 + sh_ewald_S;
+    vc_sub_S2  = vc_sub_S2 + sh_ewald_S;
+    vc_sub_S3  = vc_sub_S3 + sh_ewald_S;
 #                endif
 #            endif
 
@@ -683,18 +683,24 @@
 #        endif
 
 #        ifndef LJ_COMB_LB
-    rinvsix_S0 = rinvsq_S0 * rinvsq_S0 * rinvsq_S0;
-    rinvsix_S1 = rinvsq_S1 * rinvsq_S1 * rinvsq_S1;
+    rinvsix_S0 = rinvsq_S0 * rinvsq_S0;
+    rinvsix_S1 = rinvsq_S1 * rinvsq_S1;
 #            ifdef EXCL_FORCES
-    rinvsix_S0 = selectByMask(rinvsix_S0, interact_S0);
-    rinvsix_S1 = selectByMask(rinvsix_S1, interact_S1);
+    rinvsix_S0 = maskzMul(rinvsix_S0, rinvsq_S0, interact_S0);
+    rinvsix_S1 = maskzMul(rinvsix_S1, rinvsq_S1, interact_S1);
+#            else
+    rinvsix_S0 = rinvsix_S0 * rinvsq_S0;
+    rinvsix_S1 = rinvsix_S1 * rinvsq_S1;
 #            endif
 #            ifndef HALF_LJ
-    rinvsix_S2 = rinvsq_S2 * rinvsq_S2 * rinvsq_S2;
-    rinvsix_S3 = rinvsq_S3 * rinvsq_S3 * rinvsq_S3;
+    rinvsix_S2 = rinvsq_S2 * rinvsq_S2;
+    rinvsix_S3 = rinvsq_S3 * rinvsq_S3;
 #                ifdef EXCL_FORCES
-    rinvsix_S2 = selectByMask(rinvsix_S2, interact_S2);
-    rinvsix_S3 = selectByMask(rinvsix_S3, interact_S3);
+    rinvsix_S2 = maskzMul(rinvsix_S2, rinvsq_S2, interact_S2);
+    rinvsix_S3 = maskzMul(rinvsix_S3, rinvsq_S3, interact_S3);
+#                else
+    rinvsix_S2 = rinvsix_S2 * rinvsq_S2;
+    rinvsix_S3 = rinvsix_S3 * rinvsq_S3;
 #                endif
 #            endif
 
-- 
1.8.3.1

From 98392c66d3aafcd5418d57a0b093fe711d390533 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 3 May 2020 20:28:46 +0900
Subject: [PATCH 17/32] nbnxm: optimize sir6_S? computations

by using more masked operations instead of distinct selectByMask()

(cherry picked from commit f0917c16f2b80dbd81f58f309865e7e058049ca8)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 26 ++++++++------
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 40 +++++++++++++---------
 2 files changed, 40 insertions(+), 26 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 4aa5391..053e8b4 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -581,20 +581,26 @@
 #        ifndef HALF_LJ
     sir2_S2 = sir_S2 * sir_S2;
 #        endif
-    sir6_S0 = sir2_S0 * sir2_S0 * sir2_S0;
+#        ifdef VDW_CUTOFF_CHECK
+    sir6_S0 = maskzMul(sir2_S0, sir2_S0, wco_vdw_S0);
+#        else
+    sir6_S0    = sir2_S0 * sir2_S0;
+#        endif
 #        ifdef EXCL_FORCES
-    sir6_S0 = selectByMask(sir6_S0, interact_S0);
+    sir6_S0 = maskzMul(sir6_S0, sir2_S0, interact_S0);
+#        else
+    sir6_S0    = sir6_S0 * sir2_S0;
 #        endif
 #        ifndef HALF_LJ
-    sir6_S2 = sir2_S2 * sir2_S2 * sir2_S2;
-#            ifdef EXCL_FORCES
-    sir6_S2 = selectByMask(sir6_S2, interact_S2);
+#            ifdef VDW_CUTOFF_CHECK
+    sir6_S2 = maskzMul(sir2_S2, sir2_S2, wco_vdw_S2);
+#            else
+    sir6_S2    = sir2_S2 * sir2_S2;
 #            endif
-#        endif
-#        ifdef VDW_CUTOFF_CHECK
-    sir6_S0 = selectByMask(sir6_S0, wco_vdw_S0);
-#            ifndef HALF_LJ
-    sir6_S2 = selectByMask(sir6_S2, wco_vdw_S2);
+#            ifdef EXCL_FORCES
+    sir6_S2 = maskzMul(sir6_S2, sir2_S2, interact_S2);
+#            else
+    sir6_S2    = sir6_S2 * sir2_S2;
 #            endif
 #        endif
     FrLJ6_S0 = eps_S0 * sir6_S0;
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index 4f75a31..3af2888 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -776,26 +776,34 @@
     sir2_S2 = sir_S2 * sir_S2;
     sir2_S3 = sir_S3 * sir_S3;
 #            endif
-    sir6_S0 = sir2_S0 * sir2_S0 * sir2_S0;
-    sir6_S1 = sir2_S1 * sir2_S1 * sir2_S1;
+#            ifdef VDW_CUTOFF_CHECK
+    sir6_S0 = maskzMul(sir2_S0, sir2_S0, wco_vdw_S0);
+    sir6_S1 = maskzMul(sir2_S1, sir2_S1, wco_vdw_S1);
+#            else
+    sir6_S0    = sir2_S0 * sir2_S0;
+    sir6_S1    = sir2_S1 * sir2_S1;
+#            endif
 #            ifdef EXCL_FORCES
-    sir6_S0 = selectByMask(sir6_S0, interact_S0);
-    sir6_S1 = selectByMask(sir6_S1, interact_S1);
+    sir6_S0 = maskzMul(sir6_S0, sir2_S0, interact_S0);
+    sir6_S1 = maskzMul(sir6_S1, sir2_S1, interact_S1);
+#            else
+    sir6_S0    = sir6_S0 * sir2_S0;
+    sir6_S1    = sir6_S1 * sir2_S1;
 #            endif
 #            ifndef HALF_LJ
-    sir6_S2 = sir2_S2 * sir2_S2 * sir2_S2;
-    sir6_S3 = sir2_S3 * sir2_S3 * sir2_S3;
-#                ifdef EXCL_FORCES
-    sir6_S2 = selectByMask(sir6_S2, interact_S2);
-    sir6_S3 = selectByMask(sir6_S3, interact_S3);
+#                ifdef VDW_CUTOFF_CHECK
+    sir6_S2 = maskzMul(sir2_S2, sir2_S2, wco_vdw_S2);
+    sir6_S3 = maskzMul(sir2_S3, sir2_S3, wco_vdw_S3);
+#                else
+    sir6_S2    = sir2_S2 * sir2_S2;
+    sir6_S3    = sir2_S3 * sir2_S3;
 #                endif
-#            endif
-#            ifdef VDW_CUTOFF_CHECK
-    sir6_S0 = selectByMask(sir6_S0, wco_vdw_S0);
-    sir6_S1 = selectByMask(sir6_S1, wco_vdw_S1);
-#                ifndef HALF_LJ
-    sir6_S2 = selectByMask(sir6_S2, wco_vdw_S2);
-    sir6_S3 = selectByMask(sir6_S3, wco_vdw_S3);
+#                ifdef EXCL_FORCES
+    sir6_S2 = maskzMul(sir6_S2, sir2_S2, interact_S2);
+    sir6_S3 = maskzMul(sir6_S3, sir2_S3, interact_S3);
+#                else
+    sir6_S2    = sir6_S2 * sir2_S2;
+    sir6_S3    = sir6_S3 * sir2_S3;
 #                endif
 #            endif
     FrLJ6_S0 = eps_S0 * sir6_S0;
-- 
1.8.3.1

From a01927cf48acb7e72be71a1d95c59edf62982aff Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Mon, 12 Aug 2019 15:56:35 +0900
Subject: [PATCH 18/32] nbnxm: optimize Vc[0] computations

by using the reduce() subroutine when applicable

(cherry picked from commit 619152a3583916533b5b86cbc8442b8d7fa37d0d)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h | 29 +++++++++------
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_outer.h  | 41 ++++++++++++----------
 2 files changed, 41 insertions(+), 29 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
index e17c121..2805c85 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
@@ -440,20 +440,27 @@
                     Vc_sub_self = 0.5 * ic->ewaldcoeff_q * M_2_SQRTPI;
 #    endif
 
-                    for (ia = 0; ia < UNROLLI; ia++)
-                    {
-                        real qi;
-
-                        qi = q[sci + ia];
-#    ifdef ENERGY_GROUPS
-                        vctp[ia][((egps_i >> (ia * egps_ishift)) & egps_imask) * egps_jstride]
+#    if !defined ENERGY_GROUPS \
+            && ((GMX_SIMD_REAL_WIDTH == UNROLLI) || (GMX_SIMD4_HAVE_REAL && GMX_SIMD4_WIDTH == UNROLLI))
+#        if GMX_SIMD_REAL_WIDTH == UNROLLI
+                SimdReal v = load<SimdReal>(q + sci);
+#        else
+                Simd4Real v = load<Simd4Real>(q + sci);
+#        endif
+                Vc[0] -= facel * reduce(v * v) * Vc_sub_self;
 #    else
+                for (int ia = 0; ia < UNROLLI; ia++)
+                {
+                    real qi = q[sci + ia];
+#        ifdef ENERGY_GROUPS
+                    vctp[ia][((egps_i >> (ia * egps_ishift)) & egps_imask) * egps_jstride]
+#        else
                     Vc[0]
-#    endif
-                                -= facel * qi * qi * Vc_sub_self;
-                    }
+#        endif
+                            -= facel * qi * qi * Vc_sub_self;
                 }
-
+#    endif
+            }
 #    ifdef LJ_EWALD_GEOM
                 {
                     int ia;
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_outer.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_outer.h
index 03f2d54..466476a 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_outer.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_outer.h
@@ -464,30 +464,35 @@
                         Vc_sub_self = 0.5 * ic->ewaldcoeff_q * M_2_SQRTPI;
 #    endif
 
-                        for (ia = 0; ia < UNROLLI; ia++)
-                        {
-                            real qi;
-
-                            qi = q[sci + ia];
-#    ifdef ENERGY_GROUPS
-                            vctp[ia][((egps_i >> (ia * egps_ishift)) & egps_imask) * egps_jstride]
+#    if !defined ENERGY_GROUPS \
+            && ((GMX_SIMD_REAL_WIDTH == UNROLLI) || (GMX_SIMD4_HAVE_REAL && GMX_SIMD4_WIDTH == UNROLLI))
+#        if GMX_SIMD_REAL_WIDTH == UNROLLI
+                SimdReal v = load<SimdReal>(q + sci);
+#        else
+                Simd4Real v = load<Simd4Real>(q + sci);
+#        endif
+                Vc[0] -= facel * reduce(v * v) * Vc_sub_self;
 #    else
+                for (int ia = 0; ia < UNROLLI; ia++)
+                {
+                    real qi = q[sci + ia];
+#        ifdef ENERGY_GROUPS
+                    vctp[ia][((egps_i >> (ia * egps_ishift)) & egps_imask) * egps_jstride]
+#        else
                     Vc[0]
+#        endif
+                            -= facel * qi * qi * Vc_sub_self;
+                }
 #    endif
-                                    -= facel * qi * qi * Vc_sub_self;
-                        }
-                    }
+            }
 
 #    ifdef LJ_EWALD_GEOM
-                    {
-                        int ia;
-
-                        for (ia = 0; ia < UNROLLI; ia++)
-                        {
-                            real c6_i;
+            {
+                for (int ia = 0; ia < UNROLLI; ia++)
+                {
+                    real c6_i;
 
-                            c6_i = nbatParams.nbfp[nbatParams.type[sci + ia] * (nbatParams.numTypes + 1) * 2]
-                                   / 6;
+                    c6_i = nbatParams.nbfp[nbatParams.type[sci + ia] * (nbatParams.numTypes + 1) * 2] / 6;
 #        ifdef ENERGY_GROUPS
                             vvdwtp[ia][((egps_i >> (ia * egps_ishift)) & egps_imask) * egps_jstride]
 #        else
-- 
1.8.3.1

From e346787de38d5c9cda77f3e2187604121cbde046 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Thu, 30 Apr 2020 16:27:26 +0900
Subject: [PATCH 19/32] nbnxm: use masked multiplication to compute vcoul_S*

instead of a multiplication followed by a selectByMask()

(cherry picked from commit 6641bd497ba3001a5b615ac0536d46c79ae43cd7)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 16 +++++--------
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 26 +++++++++-------------
 2 files changed, 16 insertions(+), 26 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 053e8b4..4768c4a 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -396,8 +396,9 @@
     frcoul_S2 = qq_S2 * fma(rsq_S2, mrc_3_S, rinv_ex_S2);
 
 #        ifdef CALC_ENERGIES
-    vcoul_S0 = qq_S0 * (rinv_ex_S0 + fma(rsq_S0, hrc_3_S, moh_rc_S));
-    vcoul_S2 = qq_S2 * (rinv_ex_S2 + fma(rsq_S2, hrc_3_S, moh_rc_S));
+    /* and (merge) mask energy for cut-off and diagonal */
+    vcoul_S0 = maskzMul(qq_S0, rinv_ex_S0 + fma(rsq_S0, hrc_3_S, moh_rc_S), wco_S0);
+    vcoul_S2 = maskzMul(qq_S2, rinv_ex_S2 + fma(rsq_S2, hrc_3_S, moh_rc_S), wco_S2);
 #        endif
 #    endif
 
@@ -487,17 +488,12 @@
 #            endif
 #        endif
 
-    vcoul_S0 = qq_S0 * (rinv_ex_S0 - vc_sub_S0);
-    vcoul_S2 = qq_S2 * (rinv_ex_S2 - vc_sub_S2);
+    /* and (merge) mask energy for cut-off and diagonal */
+    vcoul_S0 = maskzMul(qq_S0, rinv_ex_S0 - vc_sub_S0, wco_S0);
+    vcoul_S2 = maskzMul(qq_S2, rinv_ex_S2 - vc_sub_S2, wco_S2);
 
 #    endif
 
-#    ifdef CALC_ENERGIES
-    /* Mask energy for cut-off and diagonal */
-    vcoul_S0 = selectByMask(vcoul_S0, wco_S0);
-    vcoul_S2 = selectByMask(vcoul_S2, wco_S2);
-#    endif
-
 #endif /* CALC_COULOMB */
 
 #ifdef CALC_LJ
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index 3af2888..ee11f3d 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -512,10 +512,11 @@
     frcoul_S3 = qq_S3 * fma(rsq_S3, mrc_3_S, rinv_ex_S3);
 
 #            ifdef CALC_ENERGIES
-    vcoul_S0 = qq_S0 * (rinv_ex_S0 + fma(rsq_S0, hrc_3_S, moh_rc_S));
-    vcoul_S1 = qq_S1 * (rinv_ex_S1 + fma(rsq_S1, hrc_3_S, moh_rc_S));
-    vcoul_S2 = qq_S2 * (rinv_ex_S2 + fma(rsq_S2, hrc_3_S, moh_rc_S));
-    vcoul_S3 = qq_S3 * (rinv_ex_S3 + fma(rsq_S3, hrc_3_S, moh_rc_S));
+    /* and (merge) mask energy for cut-off and diagonal */
+    vcoul_S0 = maskzMul(qq_S0, rinv_ex_S0 + fma(rsq_S0, hrc_3_S, moh_rc_S), wco_S0);
+    vcoul_S1 = maskzMul(qq_S1, rinv_ex_S1 + fma(rsq_S1, hrc_3_S, moh_rc_S), wco_S1);
+    vcoul_S2 = maskzMul(qq_S2, rinv_ex_S2 + fma(rsq_S2, hrc_3_S, moh_rc_S), wco_S2);
+    vcoul_S3 = maskzMul(qq_S3, rinv_ex_S3 + fma(rsq_S3, hrc_3_S, moh_rc_S), wco_S3);
 #            endif
 #        endif
 
@@ -647,21 +648,14 @@
 #                endif
 #            endif
 
-    vcoul_S0 = qq_S0 * (rinv_ex_S0 - vc_sub_S0);
-    vcoul_S1 = qq_S1 * (rinv_ex_S1 - vc_sub_S1);
-    vcoul_S2 = qq_S2 * (rinv_ex_S2 - vc_sub_S2);
-    vcoul_S3 = qq_S3 * (rinv_ex_S3 - vc_sub_S3);
+    /* and (merge) mask energy for cut-off and diagonal */
+    vcoul_S0 = maskzMul(qq_S0, rinv_ex_S0 - vc_sub_S0, wco_S0);
+    vcoul_S1 = maskzMul(qq_S1, rinv_ex_S1 - vc_sub_S1, wco_S1);
+    vcoul_S2 = maskzMul(qq_S2, rinv_ex_S2 - vc_sub_S2, wco_S2);
+    vcoul_S3 = maskzMul(qq_S3, rinv_ex_S3 - vc_sub_S3, wco_S3);
 
 #        endif
 
-#        ifdef CALC_ENERGIES
-    /* Mask energy for cut-off and diagonal */
-    vcoul_S0 = selectByMask(vcoul_S0, wco_S0);
-    vcoul_S1 = selectByMask(vcoul_S1, wco_S1);
-    vcoul_S2 = selectByMask(vcoul_S2, wco_S2);
-    vcoul_S3 = selectByMask(vcoul_S3, wco_S3);
-#        endif
-
 #    endif /* CALC_COULOMB */
 
 #    ifdef CALC_LJ
-- 
1.8.3.1

From 07b6949e738c89492b2de4288bba3c31bbb1220f Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Tue, 30 Jun 2020 16:00:24 +0900
Subject: [PATCH 20/32] simd: add invMask(x, m) subroutine

(cherry picked from commit b093bd7ea99c13d563c12ece06a2648101005a39)
---
 src/gromacs/simd/simd_math.h | 94 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 94 insertions(+)

diff --git a/src/gromacs/simd/simd_math.h b/src/gromacs/simd/simd_math.h
index 09ea375..f0b3cb6 100644
--- a/src/gromacs/simd/simd_math.h
+++ b/src/gromacs/simd/simd_math.h
@@ -226,6 +226,51 @@ static inline SimdFloat gmx_simdcall inv(SimdFloat x)
     return lu;
 }
 
+/*! \brief Perform one masked Newton-Raphson iteration to improve 1/x for SIMD float.
+ *
+ * This is a low-level routine that should only be used by SIMD math routine
+ * that evaluates the reciprocal.
+ *
+ *  \param lu Approximation of 1/x, typically obtained from lookup.
+ *  \param x  The reference (starting) value x for which we want 1/x.
+ *  \param m  mask
+ *  \return   An improved approximation with roughly twice as many bits of accuracy.
+ */
+static inline SimdFloat gmx_simdcall rcpIterMask(SimdFloat lu, SimdFloat x, SimdFBool m)
+{
+    return maskzMul(lu, fnma(lu, x, SimdFloat(2.0F)), m);
+}
+
+/*! \brief Calculate masked 1/x for SIMD float.
+ *
+ *  \param x Argument with magnitude larger than GMX_FLOAT_MIN and smaller than
+ *           GMX_FLOAT_MAX, i.e. within the range of single precision.
+ *           For the single precision implementation this is obviously always
+ *           true for positive values, but for double precision it adds an
+ *           extra restriction since the first lookup step might have to be
+ *           performed in single precision on some architectures. Note that the
+ *           responsibility for checking falls on you - this routine does not
+ *           check arguments.
+ *  \param m mask
+ *
+ *  \return 1/x when mask is true, 0 otherwise. Result is undefined if your argument was invalid.
+ */
+static inline SimdFloat gmx_simdcall invMask(SimdFloat x, SimdFBool m)
+{
+    SimdFloat lu = rcp(x);
+#        if (GMX_SIMD_RCP_BITS * 4 < GMX_SIMD_ACCURACY_BITS_SINGLE)
+    lu = rcpIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RCP_BITS * 2 < GMX_SIMD_ACCURACY_BITS_SINGLE)
+    lu = rcpIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RCP_BITS < GMX_SIMD_ACCURACY_BITS_SINGLE)
+    lu = rcpIterMask(lu, x, m);
+#        else
+    lu = selectByMask(lu, m);
+#        endif
+    return lu;
+}
 /*! \brief Division for SIMD floats
  *
  * \param nom    Nominator
@@ -1901,6 +1946,55 @@ static inline SimdDouble gmx_simdcall inv(SimdDouble x)
     return lu;
 }
 
+/*! \brief Perform one masked Newton-Raphson iteration to improve 1/x for SIMD double.
+ *
+ * This is a low-level routine that should only be used by SIMD math routine
+ * that evaluates the reciprocal.
+ *
+ *  \param lu Approximation of 1/x, typically obtained from lookup.
+ *  \param x  The reference (starting) value x for which we want 1/x.
+ *  \param m  mask
+ *  \return   An improved approximation with roughly twice as many bits of accuracy.
+ */
+static inline SimdDouble gmx_simdcall rcpIterMask(SimdDouble lu, SimdDouble x, SimdDBool m)
+{
+    return maskzMul(lu, fnma(lu, x, SimdDouble(2.0)), m);
+}
+
+/*! \brief Calculate masked 1/x for SIMD double.
+ *
+ *  \param x Argument with magnitude larger than GMX_FLOAT_MIN and smaller than
+ *           GMX_FLOAT_MAX, i.e. within the range of single precision.
+ *           For the single precision implementation this is obviously always
+ *           true for positive values, but for double precision it adds an
+ *           extra restriction since the first lookup step might have to be
+ *           performed in single precision on some architectures. Note that the
+ *           responsibility for checking falls on you - this routine does not
+ *           check arguments.
+ *  \param m mask
+ *
+ *  \return 1/x when mask is true, 0 otherwise. Result is undefined if your argument was invalid.
+ */
+static inline SimdDouble gmx_simdcall invMask(SimdDouble x, SimdDBool m)
+{
+    SimdDouble lu = rcp(x);
+#        if (GMX_SIMD_RCP_BITS * 8 < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rcpIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RCP_BITS * 4 < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rcpIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RCP_BITS * 2 < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rcpIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RCP_BITS < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rcpIterMask(lu, x, m);
+#        else
+    lu    = selectByMask(lu, m);
+#        endif
+    return lu;
+}
+
 /*! \brief Division for SIMD doubles
  *
  * \param nom    Nominator
-- 
1.8.3.1

From 96c00aa47e09541ca46c04f8aa637bb72d67c450 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Thu, 30 Apr 2020 18:51:12 +0900
Subject: [PATCH 21/32] nbnxm: use masked operation to compute rinvsq_S?

Use invMask() to merge one inv() latter followed by selectByMask()

(cherry picked from commit 9dc42f7cd94d3a4f1fb9f41769b663d1380306a8)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 15 +++++------
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 29 +++++++++-------------
 2 files changed, 18 insertions(+), 26 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 4768c4a..dc46d3a 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -310,11 +310,11 @@
 
     /* Calculate 1/r */
 #if SKIP_INVSQRT
-    rinvsq_S0 = inv(rsq_S0);
-    rinvsq_S2 = inv(rsq_S2);
+    rinvsq_S0 = invMask(rsq_S0, wco_S0);
+    rinvsq_S2 = invMask(rsq_S2, wco_S2);
 #else
-    rinv_S0 = invsqrt(rsq_S0);
-    rinv_S2 = invsqrt(rsq_S2);
+    rinv_S0  = invsqrt(rsq_S0);
+    rinv_S2  = invsqrt(rsq_S2);
 #endif
 
 #ifdef CALC_COULOMB
@@ -361,10 +361,7 @@
 
 #endif /* CALC_LJ */
 
-#if SKIP_INVSQRT
-    rinvsq_S0 = selectByMask(rinvsq_S0, wco_S0);
-    rinvsq_S2 = selectByMask(rinvsq_S2, wco_S2);
-#else
+#if !SKIP_INVSQRT
     /* Set rinv to zero for r beyond the cut-off */
     rinv_S0 = selectByMask(rinv_S0, wco_S0);
     rinv_S2 = selectByMask(rinv_S2, wco_S2);
@@ -889,7 +886,7 @@
     fscal_S0 = rinvsq_S0 * frLJ_S0;
 #    endif
 #else
-    fscal_S0  = rinvsq_S0 * frcoul_S0;
+    fscal_S0 = rinvsq_S0 * frcoul_S0;
 #endif /* CALC_LJ */
 #if defined CALC_LJ && !defined HALF_LJ
 #    ifdef CALC_COULOMB
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index ee11f3d..ab5ff40 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -272,7 +272,7 @@
 #    if UNROLLJ == STRIDE
     ajx = aj * DIM;
 #    else
-    ajx     = (cj >> 1) * DIM * STRIDE + (cj & 1) * UNROLLJ;
+    ajx      = (cj >> 1) * DIM * STRIDE + (cj & 1) * UNROLLJ;
 #    endif
     ajy = ajx + STRIDE;
     ajz = ajy + STRIDE;
@@ -395,15 +395,15 @@
 
     /* Calculate 1/r */
 #    if SKIP_INVSQRT
-    rinvsq_S0 = inv(rsq_S0);
-    rinvsq_S1 = inv(rsq_S1);
-    rinvsq_S2 = inv(rsq_S2);
-    rinvsq_S3 = inv(rsq_S3);
+    rinvsq_S0 = invMask(rsq_S0, wco_S0);
+    rinvsq_S1 = invMask(rsq_S1, wco_S1);
+    rinvsq_S2 = invMask(rsq_S2, wco_S2);
+    rinvsq_S3 = invMask(rsq_S3, wco_S3);
 #    elif !GMX_DOUBLE
-    rinv_S0 = invsqrt(rsq_S0);
-    rinv_S1 = invsqrt(rsq_S1);
-    rinv_S2 = invsqrt(rsq_S2);
-    rinv_S3 = invsqrt(rsq_S3);
+    rinv_S0  = invsqrt(rsq_S0);
+    rinv_S1  = invsqrt(rsq_S1);
+    rinv_S2  = invsqrt(rsq_S2);
+    rinv_S3  = invsqrt(rsq_S3);
 #    else
     invsqrtPair(rsq_S0, rsq_S1, &rinv_S0, &rinv_S1);
     invsqrtPair(rsq_S2, rsq_S3, &rinv_S2, &rinv_S3);
@@ -465,12 +465,7 @@
 
 #    endif /* CALC_LJ */
 
-#    if SKIP_INVSQRT
-    rinvsq_S0 = selectByMask(rinvsq_S0, wco_S0);
-    rinvsq_S1 = selectByMask(rinvsq_S1, wco_S1);
-    rinvsq_S2 = selectByMask(rinvsq_S2, wco_S2);
-    rinvsq_S3 = selectByMask(rinvsq_S3, wco_S3);
-#    else
+#    if !SKIP_INVSQRT
     /* Set rinv to zero for r beyond the cut-off */
     rinv_S0 = selectByMask(rinv_S0, wco_S0);
     rinv_S1 = selectByMask(rinv_S1, wco_S1);
@@ -1177,8 +1172,8 @@
     fscal_S1 = rinvsq_S1 * frLJ_S1;
 #        endif
 #    else
-    fscal_S0  = rinvsq_S0 * frcoul_S0;
-    fscal_S1  = rinvsq_S1 * frcoul_S1;
+    fscal_S0 = rinvsq_S0 * frcoul_S0;
+    fscal_S1 = rinvsq_S1 * frcoul_S1;
 #    endif /* CALC_LJ */
 #    if defined CALC_LJ && !defined HALF_LJ
 #        ifdef CALC_COULOMB
-- 
1.8.3.1

From 60d03e4bb5c52cd96fb749cac8b9ca956f38cf25 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Tue, 30 Jun 2020 15:51:19 +0900
Subject: [PATCH 22/32] simd: add invsqrtMask(x, m) subroutine

(cherry picked from commit 5f9b4dc99c908ca2210e920a23f2fc84b12e65cb)
---
 src/gromacs/simd/simd_math.h | 101 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 101 insertions(+)

diff --git a/src/gromacs/simd/simd_math.h b/src/gromacs/simd/simd_math.h
index f0b3cb6..e22ea6b 100644
--- a/src/gromacs/simd/simd_math.h
+++ b/src/gromacs/simd/simd_math.h
@@ -157,6 +157,55 @@ static inline SimdFloat gmx_simdcall invsqrt(SimdFloat x)
     return lu;
 }
 
+/*! \brief Perform one masked Newton-Raphson iteration to improve 1/sqrt(x) for SIMD float.
+ *
+ * This is a low-level routine that should only be used by SIMD math routine
+ * that evaluates the inverse square root.
+ *
+ *  \param lu Approximation of 1/sqrt(x), typically obtained from lookup.
+ *  \param x  The reference (starting) value x for which we want 1/sqrt(x).
+ *  \param m Mask
+ *  \return   An improved approximation with roughly twice as many bits of accuracy.
+ */
+static inline SimdFloat gmx_simdcall rsqrtIterMask(SimdFloat lu, SimdFloat x, SimdFBool m)
+{
+    SimdFloat tmp1 = x * lu;
+    SimdFloat tmp2 = SimdFloat(-0.5f) * lu;
+    tmp1           = fma(tmp1, lu, SimdFloat(-3.0f));
+    return maskzMul(tmp1, tmp2, m);
+}
+
+/*! \brief Calculate masked 1/sqrt(x) for SIMD float.
+ *
+ *  \param x Argument that must be larger than GMX_FLOAT_MIN and smaller than
+ *           GMX_FLOAT_MAX, i.e. within the range of single precision.
+ *           For the single precision implementation this is obviously always
+ *           true for positive values, but for double precision it adds an
+ *           extra restriction since the first lookup step might have to be
+ *           performed in single precision on some architectures. Note that the
+ *           responsibility for checking falls on you - this routine does not
+ *           check arguments.
+ *  \param m mask
+ *
+ *  \return 1/sqrt(x). Result is undefined if your argument was invalid.
+ */
+static inline SimdFloat gmx_simdcall invsqrtMask(SimdFloat x, SimdFBool m)
+{
+    SimdFloat lu = rsqrt(x);
+#        if (GMX_SIMD_RSQRT_BITS * 4 < GMX_SIMD_ACCURACY_BITS_SINGLE)
+    lu = rsqrtIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RSQRT_BITS * 2 < GMX_SIMD_ACCURACY_BITS_SINGLE)
+    lu = rsqrtIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RSQRT_BITS < GMX_SIMD_ACCURACY_BITS_SINGLE)
+    lu = rsqrtIterMask(lu, x, m);
+#        else
+    lu = selectByMask(lu, m);
+#        endif
+    return lu;
+}
+
 /*! \brief Calculate 1/sqrt(x) for two SIMD floats.
  *
  * \param x0  First set of arguments, x0 must be in single range (see below).
@@ -1845,6 +1894,58 @@ static inline SimdDouble gmx_simdcall invsqrt(SimdDouble x)
     return lu;
 }
 
+/*! \brief Perform one masked Newton-Raphson iteration to improve 1/sqrt(x) for SIMD double.
+ *
+ * This is a low-level routine that should only be used by SIMD math routine
+ * that evaluates the inverse square root.
+ *
+ *  \param lu Approximation of 1/sqrt(x), typically obtained from lookup.
+ *  \param x  The reference (starting) value x for which we want 1/sqrt(x).
+ *  \param m  mask
+ *  \return   An improved approximation with roughly twice as many bits of accuracy.
+ */
+static inline SimdDouble gmx_simdcall rsqrtIterMask(SimdDouble lu, SimdDouble x, SimdDBool m)
+{
+    SimdDouble tmp1 = x * lu;
+    SimdDouble tmp2 = SimdDouble(-0.5) * lu;
+    tmp1            = fma(tmp1, lu, SimdDouble(-3.0));
+    return maskzMul(tmp1, tmp2, m);
+}
+
+/*! \brief Calculate masked 1/sqrt(x) for SIMD double.
+ *
+ *  \param x Argument that must be larger than GMX_FLOAT_MIN and smaller than
+ *           GMX_FLOAT_MAX, i.e. within the range of single precision.
+ *           For the single precision implementation this is obviously always
+ *           true for positive values, but for double precision it adds an
+ *           extra restriction since the first lookup step might have to be
+ *           performed in single precision on some architectures. Note that the
+ *           responsibility for checking falls on you - this routine does not
+ *           check arguments.
+ *  \param m mask
+ *
+ *  \return 1/sqrt(x). Result is undefined if your argument was invalid.
+ */
+static inline SimdDouble gmx_simdcall invsqrtMask(SimdDouble x, SimdDBool m)
+{
+    SimdDouble lu = rsqrt(x);
+#        if (GMX_SIMD_RSQRT_BITS * 8 < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rsqrtIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RSQRT_BITS * 4 < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rsqrtIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RSQRT_BITS * 2 < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rsqrtIter(lu, x);
+#        endif
+#        if (GMX_SIMD_RSQRT_BITS < GMX_SIMD_ACCURACY_BITS_DOUBLE)
+    lu = rsqrtIterMask(lu, x, m);
+#        else
+    lu    = selectByMask(lu, m);
+#        endif
+    return lu;
+}
+
 /*! \brief Calculate 1/sqrt(x) for two SIMD doubles.
  *
  * \param x0  First set of arguments, x0 must be in single range (see below).
-- 
1.8.3.1

From 6120876457a56a768477aa2071c92b7e286ab13d Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sat, 2 May 2020 22:01:09 +0900
Subject: [PATCH 23/32] nbnxm: use masked operation to compute rinv_S?

Use invsqrtMask() to merge one invsqrt() latter followed by selectByMask()

(cherry picked from commit 2827abcced315203db3f345898e0a00092ee27fb)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h |  9 +++------
 src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h  | 23 +++++++++++-----------
 2 files changed, 15 insertions(+), 17 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index dc46d3a..1b0e5fa 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -313,8 +313,9 @@
     rinvsq_S0 = invMask(rsq_S0, wco_S0);
     rinvsq_S2 = invMask(rsq_S2, wco_S2);
 #else
-    rinv_S0  = invsqrt(rsq_S0);
-    rinv_S2  = invsqrt(rsq_S2);
+    /* and set rinv to zero for r beyond the cut-off */
+    rinv_S0  = invsqrtMask(rsq_S0, wco_S0);
+    rinv_S2  = invsqrtMask(rsq_S2, wco_S2);
 #endif
 
 #ifdef CALC_COULOMB
@@ -362,10 +363,6 @@
 #endif /* CALC_LJ */
 
 #if !SKIP_INVSQRT
-    /* Set rinv to zero for r beyond the cut-off */
-    rinv_S0 = selectByMask(rinv_S0, wco_S0);
-    rinv_S2 = selectByMask(rinv_S2, wco_S2);
-
     rinvsq_S0 = rinv_S0 * rinv_S0;
     rinvsq_S2 = rinv_S2 * rinv_S2;
 #endif
diff --git a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
index ab5ff40..54a40a1 100644
--- a/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_4xm/kernel_inner.h
@@ -272,7 +272,7 @@
 #    if UNROLLJ == STRIDE
     ajx = aj * DIM;
 #    else
-    ajx      = (cj >> 1) * DIM * STRIDE + (cj & 1) * UNROLLJ;
+    ajx = (cj >> 1) * DIM * STRIDE + (cj & 1) * UNROLLJ;
 #    endif
     ajy = ajx + STRIDE;
     ajz = ajy + STRIDE;
@@ -400,13 +400,20 @@
     rinvsq_S2 = invMask(rsq_S2, wco_S2);
     rinvsq_S3 = invMask(rsq_S3, wco_S3);
 #    elif !GMX_DOUBLE
-    rinv_S0  = invsqrt(rsq_S0);
-    rinv_S1  = invsqrt(rsq_S1);
-    rinv_S2  = invsqrt(rsq_S2);
-    rinv_S3  = invsqrt(rsq_S3);
+    /* and set rinv to zero for r beyond the cut-off */
+    rinv_S0  = invsqrtMask(rsq_S0, wco_S0);
+    rinv_S1  = invsqrtMask(rsq_S1, wco_S1);
+    rinv_S2  = invsqrtMask(rsq_S2, wco_S2);
+    rinv_S3  = invsqrtMask(rsq_S3, wco_S3);
 #    else
     invsqrtPair(rsq_S0, rsq_S1, &rinv_S0, &rinv_S1);
     invsqrtPair(rsq_S2, rsq_S3, &rinv_S2, &rinv_S3);
+    /* Set rinv to zero for r beyond the cut-off */
+    rinv_S0 = selectByMask(rinv_S0, wco_S0);
+    rinv_S1 = selectByMask(rinv_S1, wco_S1);
+    rinv_S2 = selectByMask(rinv_S2, wco_S2);
+    rinv_S3 = selectByMask(rinv_S3, wco_S3);
+
 #    endif
 
 #    ifdef CALC_COULOMB
@@ -466,12 +473,6 @@
 #    endif /* CALC_LJ */
 
 #    if !SKIP_INVSQRT
-    /* Set rinv to zero for r beyond the cut-off */
-    rinv_S0 = selectByMask(rinv_S0, wco_S0);
-    rinv_S1 = selectByMask(rinv_S1, wco_S1);
-    rinv_S2 = selectByMask(rinv_S2, wco_S2);
-    rinv_S3 = selectByMask(rinv_S3, wco_S3);
-
     rinvsq_S0 = rinv_S0 * rinv_S0;
     rinvsq_S1 = rinv_S1 * rinv_S1;
     rinvsq_S2 = rinv_S2 * rinv_S2;
-- 
1.8.3.1

From 64e945f60e17e4c3d98948c8660b368cf294a89e Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 3 May 2020 16:02:48 +0900
Subject: [PATCH 24/32] simd: add the loadDuplicate2Hsimd() subroutine

This new subroutine replaces two loadDuplicateHsimd().
Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit 2ca8a9ee06e89497dc9f1db904c80ff533e97ee1)
---
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h    |  2 ++
 .../impl_arm_neon_asimd_definitions.h                 |  2 ++
 .../simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h      |  2 ++
 .../simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h      |  4 +++-
 .../simd/impl_reference/impl_reference_definitions.h  | 12 ++++++++++++
 .../impl_x86_avx2_128/impl_x86_avx2_128_definitions.h |  4 +++-
 .../impl_x86_avx2_256/impl_x86_avx2_256_definitions.h |  2 ++
 .../impl_x86_avx_128_fma_definitions.h                |  4 +++-
 .../impl_x86_avx_256/impl_x86_avx_256_definitions.h   |  2 ++
 .../impl_x86_avx_512/impl_x86_avx_512_definitions.h   |  2 ++
 .../impl_x86_avx_512_knl_definitions.h                |  2 ++
 .../simd/impl_x86_mic/impl_x86_mic_definitions.h      |  2 ++
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h    |  4 +++-
 .../impl_x86_sse4_1/impl_x86_sse4_1_definitions.h     |  4 +++-
 src/gromacs/simd/simd.h                               | 19 +++++++++++++++++++
 15 files changed, 62 insertions(+), 5 deletions(-)

diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index a4c613c..58d42b8 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -71,7 +71,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index d7c2651..a44e9c1 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -72,7 +72,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index 74f82d2..ff356ef 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -84,7 +84,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 0
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index dcc89ae..ab8aad9 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -86,8 +86,10 @@
 #define GMX_SIMD_HAVE_NATIVE_EXP_DOUBLE 0
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 // GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE is conditionally defined further down
-#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0  // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index dc8869f..70cebda 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -208,9 +208,21 @@ namespace gmx
 //! \brief 1 if float half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 
+/*! \brief 1 if implementation provides single loadDuplicate2Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
+/*! \brief 1 if implementation provides double loadDuplicate2Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index 68f57bc..5deb8c5 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -70,8 +70,10 @@
 #define GMX_SIMD_HAVE_NATIVE_EXP_DOUBLE 0
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
-#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0  // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index 0d4bfcb..53ad014 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -71,7 +71,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 5a849f7..253881d 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -71,8 +71,10 @@
 
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
-#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0  // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index 4745d7d..eca61b7 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -71,7 +71,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index a7db311..df3c739 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -86,7 +86,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index ebc5a1a..f108a1b 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -75,7 +75,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index f0cf975..cc2ec21 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -70,7 +70,9 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 53c9315..25aba34 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -70,8 +70,10 @@
 #define GMX_SIMD_HAVE_NATIVE_EXP_DOUBLE 0
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
-#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0  // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index ca8a4c8..7b81c54 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -70,8 +70,10 @@
 #define GMX_SIMD_HAVE_NATIVE_EXP_DOUBLE 0
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_FLOAT 1
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
-#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0  // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index 22d2c13..b361470 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -186,6 +186,8 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_REAL \
         GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_REAL \
+        GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -258,6 +260,14 @@ struct SimdDInt32Tag
  */
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT
 
+/*! \brief 1 if a native loadDuplicate2Hsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_REAL \
+        GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -769,6 +779,15 @@ static inline Simd4NDouble gmx_simdcall load4DuplicateN(const double* f)
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 0
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_REAL
+template<int stride>
+static inline void gmx_simdcall loadDuplicate2Hsimd(const real* m, SimdReal* r0, SimdReal* r1)
+{
+    *r0 = loadDuplicateHsimd(m);
+    *r1 = loadDuplicateHsimd(m + stride);
+}
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From 897c75179b4e3951f79d9fdd30b2b1d6d4f1726c Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 3 May 2020 16:09:07 +0900
Subject: [PATCH 25/32] simd: add the loadDuplicate3Hsimd() subroutine

This new subroutine replaces three loadDuplicateHsimd().
Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit 2cfca0eb088c7bf9205dcf4e78811dd47c9c8718)
---
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h   |  2 ++
 .../impl_arm_neon_asimd_definitions.h                |  2 ++
 .../simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h     |  2 ++
 .../simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h     |  2 ++
 .../simd/impl_reference/impl_reference_definitions.h | 12 ++++++++++++
 .../impl_x86_avx2_128_definitions.h                  |  2 ++
 .../impl_x86_avx2_256_definitions.h                  |  2 ++
 .../impl_x86_avx_128_fma_definitions.h               |  2 ++
 .../impl_x86_avx_256/impl_x86_avx_256_definitions.h  |  2 ++
 .../impl_x86_avx_512/impl_x86_avx_512_definitions.h  |  2 ++
 .../impl_x86_avx_512_knl_definitions.h               |  2 ++
 .../simd/impl_x86_mic/impl_x86_mic_definitions.h     |  2 ++
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h   |  2 ++
 .../impl_x86_sse4_1/impl_x86_sse4_1_definitions.h    |  2 ++
 src/gromacs/simd/simd.h                              | 20 ++++++++++++++++++++
 15 files changed, 58 insertions(+)

diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index 58d42b8..30f580a 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -72,8 +72,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index a44e9c1..bb93684 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -73,8 +73,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index ff356ef..88b3f50 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -85,8 +85,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index ab8aad9..3ce9262 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -88,8 +88,10 @@
 // GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE is conditionally defined further down
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index 70cebda..8f2f597 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -214,6 +214,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 
+/*! \brief 1 if implementation provides single loadDuplicate3Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
@@ -223,6 +229,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 
+/*! \brief 1 if implementation provides double loadDuplicate3Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index 5deb8c5..af74b39 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -72,8 +72,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index 53ad014..ad8011d 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -72,8 +72,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 253881d..13167ac 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -73,8 +73,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index eca61b7..ff0830e 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -72,8 +72,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index df3c739..41f9030 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -87,8 +87,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index f108a1b..267fce3 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -76,8 +76,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index cc2ec21..662edf0 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -71,8 +71,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 25aba34..8fc21b9 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -72,8 +72,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index 7b81c54..c30f0eb 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -72,8 +72,10 @@
 #define GMX_SIMD_HAVE_GATHER_LOADU_BYSIMDINT_TRANSPOSE_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index b361470..47cfb86 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -188,6 +188,8 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_REAL \
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_REAL \
+        GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -268,6 +270,14 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_REAL \
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT
 
+/*! \brief 1 if a native loadDuplicate3Hsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_REAL \
+        GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -788,6 +798,16 @@ static inline void gmx_simdcall loadDuplicate2Hsimd(const real* m, SimdReal* r0,
 }
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_REAL
+template<int stride>
+static inline void gmx_simdcall loadDuplicate3Hsimd(const real* m, SimdReal* r0, SimdReal* r1, SimdReal* r2)
+{
+    *r0 = loadDuplicateHsimd(m);
+    *r1 = loadDuplicateHsimd(m + stride);
+    *r2 = loadDuplicateHsimd(m + 2 * stride);
+}
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From 38d802d7d577104f59510838c5189f17e447f323 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 3 May 2020 15:09:59 +0900
Subject: [PATCH 26/32] simd: add the decr3Hsimd() subroutine

This new subroutine replaces three decrHsimd().
Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit d0d9e1f2e9bb2eeac5b837c335d39b50372d0f10)
---
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h     |  2 ++
 .../impl_arm_neon_asimd_definitions.h                  |  2 ++
 .../simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h       |  2 ++
 .../simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h       |  2 ++
 .../simd/impl_reference/impl_reference_definitions.h   | 12 ++++++++++++
 .../impl_x86_avx2_128/impl_x86_avx2_128_definitions.h  |  2 ++
 .../impl_x86_avx2_256/impl_x86_avx2_256_definitions.h  |  2 ++
 .../impl_x86_avx_128_fma_definitions.h                 |  2 ++
 .../impl_x86_avx_256/impl_x86_avx_256_definitions.h    |  2 ++
 .../impl_x86_avx_512/impl_x86_avx_512_definitions.h    |  2 ++
 .../impl_x86_avx_512_knl_definitions.h                 |  2 ++
 .../simd/impl_x86_mic/impl_x86_mic_definitions.h       |  2 ++
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h     |  2 ++
 .../simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h |  2 ++
 src/gromacs/simd/simd.h                                | 18 ++++++++++++++++++
 15 files changed, 56 insertions(+)

diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index 30f580a..0649aed 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -73,9 +73,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index bb93684..33958ea 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -74,9 +74,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index 88b3f50..b3f50a1 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -86,9 +86,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index 3ce9262..a5f40ff 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -89,9 +89,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index 8f2f597..e8ffa8e 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -220,6 +220,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 
+/*! \brief 1 if implementation provides single decr3Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
@@ -235,6 +241,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 
+/*! \brief 1 if implementation provides double decr3Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index af74b39..a66d8e5 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -73,9 +73,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index ad8011d..a94f070 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -73,9 +73,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 13167ac..4ce9b5b 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -74,9 +74,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index ff0830e..91a1327 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -73,9 +73,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index 41f9030..d659746 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -88,9 +88,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index 267fce3..d80bb2a 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -77,9 +77,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index 662edf0..2f91da5 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -72,9 +72,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 8fc21b9..4cf3366 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -73,9 +73,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index c30f0eb..f17c5d8 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -73,9 +73,11 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_FLOAT 0 // No need for half-simd, width is 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index 47cfb86..3bd9066 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -190,6 +190,7 @@ struct SimdDInt32Tag
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_REAL \
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -278,6 +279,13 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_REAL \
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT
 
+/*! \brief 1 if a native decr3Hsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -808,6 +816,16 @@ static inline void gmx_simdcall loadDuplicate3Hsimd(const real* m, SimdReal* r0,
 }
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL
+template<int stride>
+static inline void gmx_simdcall decr3Hsimd(real* m, SimdReal r0, SimdReal r1, SimdReal r2)
+{
+    decrHsimd(m, r0);
+    decrHsimd(m + stride, r1);
+    decrHsimd(m + 2 * stride, r2);
+}
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From 81277d8f8f727f7628f248e958585db061479fde Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 3 May 2020 15:10:50 +0900
Subject: [PATCH 27/32] nbnxm: use the new loadDuplicate3Hsimd() and
 decr3Hsimd() subroutines

(cherry picked from commit a41844b7750d1917674521dbc64c59c492eeab6f)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h | 19 +++++--------------
 1 file changed, 5 insertions(+), 14 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 1b0e5fa..941a438 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -69,7 +69,7 @@
 #endif
 
 {
-    int cj, aj, ajx, ajy, ajz;
+    int cj, aj;
 
 #ifdef ENERGY_GROUPS
     /* Energy group indices for two atoms packed into one int */
@@ -222,9 +222,6 @@
 #if defined CALC_LJ && (defined LJ_COMB_GEOM || defined LJ_COMB_LB || defined LJ_EWALD_GEOM)
     aj2 = aj * 2;
 #endif
-    ajx = aj * DIM;
-    ajy = ajx + STRIDE;
-    ajz = ajy + STRIDE;
 
 #ifdef CHECK_EXCLS
     gmx_load_simd_2xnn_interactions(static_cast<int>(l_cj[cjind].excl), filter_S0, filter_S2,
@@ -232,9 +229,7 @@
 #endif /* CHECK_EXCLS */
 
     /* load j atom coordinates */
-    jx_S = loadDuplicateHsimd(x + ajx);
-    jy_S = loadDuplicateHsimd(x + ajy);
-    jz_S = loadDuplicateHsimd(x + ajz);
+    loadDuplicate3Hsimd<STRIDE>(x + aj * DIM, &jx_S, &jy_S, &jz_S);
 
     /* Calculate distance */
     dx_S0 = ix_S0 - jx_S;
@@ -336,8 +331,7 @@
 #    endif /* not defined any LJ rule */
 
 #    ifdef LJ_COMB_GEOM
-    c6s_j_S        = loadDuplicateHsimd(ljc + aj2);
-    c12s_j_S       = loadDuplicateHsimd(ljc + aj2 + STRIDE);
+    loadDuplicate2Hsimd<STRIDE>(ljc + aj2, &c6s_j_S, &c12s_j_S);
     SimdReal c6_S0 = c6s_S0 * c6s_j_S;
 #        ifndef HALF_LJ
     SimdReal c6_S2 = c6s_S2 * c6s_j_S;
@@ -349,8 +343,7 @@
 #    endif /* LJ_COMB_GEOM */
 
 #    ifdef LJ_COMB_LB
-    hsig_j_S = loadDuplicateHsimd(ljc + aj2);
-    seps_j_S = loadDuplicateHsimd(ljc + aj2 + STRIDE);
+    loadDuplicate2Hsimd<STRIDE>(ljc + aj2, &hsig_j_S, &seps_j_S);
 
     sig_S0 = hsig_i_S0 + hsig_j_S;
     eps_S0 = seps_i_S0 * seps_j_S;
@@ -913,9 +906,7 @@
     fiz_S2 = fiz_S2 + tz_S2;
 
     /* Decrement j atom force */
-    decrHsimd(f + ajx, tx_S0 + tx_S2);
-    decrHsimd(f + ajy, ty_S0 + ty_S2);
-    decrHsimd(f + ajz, tz_S0 + tz_S2);
+    decr3Hsimd<STRIDE>(f + aj * DIM, tx_S0 + tx_S2, ty_S0 + ty_S2, tz_S0 + tz_S2);
 }
 
 #undef rinv_ex_S0
-- 
1.8.3.1

From 4ed8f16336a268e7d8a3ecc1bb040805a17297e1 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 10 May 2020 22:15:15 +0900
Subject: [PATCH 28/32] simd: add the loadU12DualHsimd() subroutine

This new subroutine replaces two loadU1DualHsimd().
Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit 4a461a0496aa7884a40b02128b3e594073e2b87d)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h | 58 ++++++++++------------
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h |  2 +
 .../impl_arm_neon_asimd_definitions.h              |  2 +
 .../simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h   |  2 +
 .../simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h   |  2 +
 .../impl_reference/impl_reference_definitions.h    | 12 +++++
 .../impl_x86_avx2_128_definitions.h                |  2 +
 .../impl_x86_avx2_256_definitions.h                |  2 +
 .../impl_x86_avx_128_fma_definitions.h             |  2 +
 .../impl_x86_avx_256_definitions.h                 |  2 +
 .../impl_x86_avx_512_definitions.h                 |  2 +
 .../impl_x86_avx_512_knl_definitions.h             |  2 +
 .../simd/impl_x86_mic/impl_x86_mic_definitions.h   |  2 +
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h |  2 +
 .../impl_x86_sse4_1/impl_x86_sse4_1_definitions.h  |  2 +
 src/gromacs/simd/simd.h                            | 16 ++++++
 16 files changed, 80 insertions(+), 32 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
index 2805c85..d18907c 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
@@ -486,18 +486,15 @@
         /* Load i atom data */
         int sciy = scix + STRIDE;
         int sciz = sciy + STRIDE;
-        ix_S0    = loadU1DualHsimd(x + scix);
-        ix_S2    = loadU1DualHsimd(x + scix + 2);
-        iy_S0    = loadU1DualHsimd(x + sciy);
-        iy_S2    = loadU1DualHsimd(x + sciy + 2);
-        iz_S0    = loadU1DualHsimd(x + sciz);
-        iz_S2    = loadU1DualHsimd(x + sciz + 2);
-        ix_S0    = ix_S0 + shX_S;
-        ix_S2    = ix_S2 + shX_S;
-        iy_S0    = iy_S0 + shY_S;
-        iy_S2    = iy_S2 + shY_S;
-        iz_S0    = iz_S0 + shZ_S;
-        iz_S2    = iz_S2 + shZ_S;
+        loadU12DualHsimd(x + scix, &ix_S0, &ix_S2);
+        loadU12DualHsimd(x + sciy, &iy_S0, &iy_S2);
+        loadU12DualHsimd(x + sciz, &iz_S0, &iz_S2);
+        ix_S0 = ix_S0 + shX_S;
+        ix_S2 = ix_S2 + shX_S;
+        iy_S0 = iy_S0 + shY_S;
+        iy_S2 = iy_S2 + shY_S;
+        iz_S0 = iz_S0 + shZ_S;
+        iz_S2 = iz_S2 + shZ_S;
 
         if (do_coul)
         {
@@ -505,34 +502,29 @@
 
             facel_S = SimdReal(facel);
 
-            iq_S0 = loadU1DualHsimd(q + sci);
-            iq_S2 = loadU1DualHsimd(q + sci + 2);
+            loadU12DualHsimd(q + sci, &iq_S0, &iq_S2);
             iq_S0 = facel_S * iq_S0;
             iq_S2 = facel_S * iq_S2;
         }
 
 #ifdef LJ_COMB_LB
-        hsig_i_S0 = loadU1DualHsimd(ljc + sci2);
-        hsig_i_S2 = loadU1DualHsimd(ljc + sci2 + 2);
-        seps_i_S0 = loadU1DualHsimd(ljc + sci2 + STRIDE);
-        seps_i_S2 = loadU1DualHsimd(ljc + sci2 + STRIDE + 2);
-#else
-#    ifdef LJ_COMB_GEOM
+        loadU12DualHsimd(ljc + sci2, &hsig_i_S0, &hsig_i_S2);
+        loadU12DualHsimd(ljc + sci2 + STRIDE, &seps_i_S0, &seps_i_S2);
+#elif defined  LJ_COMB_GEOM
         SimdReal c6s_S0, c12s_S0;
         SimdReal c6s_S2, c12s_S2;
 
-        c6s_S0 = loadU1DualHsimd(ljc + sci2);
-
-        if (!half_LJ)
+        if (half_LJ)
         {
-            c6s_S2 = loadU1DualHsimd(ljc + sci2 + 2);
+            c6s_S0  = loadU1DualHsimd(ljc + sci2);
+            c12s_S0 = loadU1DualHsimd(ljc + sci2 + STRIDE);
         }
-        c12s_S0 = loadU1DualHsimd(ljc + sci2 + STRIDE);
-        if (!half_LJ)
+        else
         {
-            c12s_S2 = loadU1DualHsimd(ljc + sci2 + STRIDE + 2);
+            loadU12DualHsimd(ljc + sci2, &c6s_S0, &c6s_S2);
+            loadU12DualHsimd(ljc + sci2 + STRIDE, &c12s_S0, &c12s_S2);
         }
-#    elif !defined LJ_COMB_LB && !defined FIX_LJ_C
+#elif !defined LJ_COMB_LB && !defined FIX_LJ_C
         const int   numTypes = nbatParams.numTypes;
         const real* nbfp0    = nbfp_ptr + type[sci] * numTypes * c_simdBestPairAlignment;
         const real* nbfp1    = nbfp_ptr + type[sci + 1] * numTypes * c_simdBestPairAlignment;
@@ -542,15 +534,17 @@
             nbfp2 = nbfp_ptr + type[sci + 2] * numTypes * c_simdBestPairAlignment;
             nbfp3 = nbfp_ptr + type[sci + 3] * numTypes * c_simdBestPairAlignment;
         }
-#    endif
 #endif
 #ifdef LJ_EWALD_GEOM
         /* We need the geometrically combined C6 for the PME grid correction */
         SimdReal c6s_S0, c6s_S2;
-        c6s_S0 = loadU1DualHsimd(ljc + sci2);
-        if (!half_LJ)
+        if (half_LJ)
+        {
+            c6s_S0 = loadU1DualHsimd(ljc + sci2);
+        }
+        else
         {
-            c6s_S2 = loadU1DualHsimd(ljc + sci2 + 2);
+            loadU12DualHsimd(ljc + sci2, &c6s_S0, &c6s_S2);
         }
 #endif
 
diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index 0649aed..b36998c 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -74,10 +74,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index 33958ea..f66b170 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -75,10 +75,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index b3f50a1..0f32d9b 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -87,10 +87,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index a5f40ff..5db7f13 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -90,10 +90,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index e8ffa8e..b556c67 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -226,6 +226,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 
+/*! \brief 1 if implementation provides single loadU12DualHsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
@@ -247,6 +253,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 
+/*! \brief 1 if implementation provides double loadU12DualHsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index a66d8e5..b7fb482 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -74,10 +74,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index a94f070..d58bdda 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -74,10 +74,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 4ce9b5b..799f7f4 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -75,10 +75,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index 91a1327..a90b586 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -74,10 +74,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index d659746..d1f9a66 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -89,10 +89,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index d80bb2a..7deda27 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -78,10 +78,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index 2f91da5..533163e 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -73,10 +73,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 4cf3366..6a5a972 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -74,10 +74,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index f17c5d8..94f811a 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -74,10 +74,12 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index 3bd9066..4a3250f 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -191,6 +191,7 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_REAL \
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -286,6 +287,13 @@ struct SimdDInt32Tag
  */
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT
 
+/*! \brief 1 if a native loadU12DualHsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -826,6 +834,14 @@ static inline void gmx_simdcall decr3Hsimd(real* m, SimdReal r0, SimdReal r1, Si
 }
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL
+static inline void gmx_simdcall loadU12DualHsimd(const real* m, SimdReal* v0, SimdReal* v1)
+{
+    *v0 = loadU1DualHsimd(m);
+    *v1 = loadU1DualHsimd(m + 2);
+}
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From 79b5e6390094385f5e1ba5a098228dccfcf37f83 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 10 May 2020 22:25:26 +0900
Subject: [PATCH 29/32] simd: add the loadU14DualHsimd() subroutine

This new subroutine replaces two loadU12DualHsimd().
Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit 2adcd0f70523bbafa95dc33fbff884c01c49b523)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h     |  3 +--
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h     |  2 ++
 .../impl_arm_neon_asimd_definitions.h                  |  2 ++
 .../simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h       |  2 ++
 .../simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h       |  2 ++
 .../simd/impl_reference/impl_reference_definitions.h   | 12 ++++++++++++
 .../impl_x86_avx2_128/impl_x86_avx2_128_definitions.h  |  2 ++
 .../impl_x86_avx2_256/impl_x86_avx2_256_definitions.h  |  2 ++
 .../impl_x86_avx_128_fma_definitions.h                 |  2 ++
 .../impl_x86_avx_256/impl_x86_avx_256_definitions.h    |  2 ++
 .../impl_x86_avx_512/impl_x86_avx_512_definitions.h    |  2 ++
 .../impl_x86_avx_512_knl_definitions.h                 |  2 ++
 .../simd/impl_x86_mic/impl_x86_mic_definitions.h       |  2 ++
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h     |  2 ++
 .../simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h |  2 ++
 src/gromacs/simd/simd.h                                | 18 ++++++++++++++++++
 16 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
index d18907c..bfddd3f 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
@@ -486,8 +486,7 @@
         /* Load i atom data */
         int sciy = scix + STRIDE;
         int sciz = sciy + STRIDE;
-        loadU12DualHsimd(x + scix, &ix_S0, &ix_S2);
-        loadU12DualHsimd(x + sciy, &iy_S0, &iy_S2);
+        loadU14DualHsimd<STRIDE>(x + scix, &ix_S0, &ix_S2, &iy_S0, &iy_S2);
         loadU12DualHsimd(x + sciz, &iz_S0, &iz_S2);
         ix_S0 = ix_S0 + shX_S;
         ix_S2 = ix_S2 + shX_S;
diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index b36998c..80d916d 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -75,11 +75,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index f66b170..1986190 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -76,11 +76,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index 0f32d9b..1ce32ab 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -88,11 +88,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index 5db7f13..02b6eea 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -91,11 +91,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index b556c67..768e6e8 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -232,6 +232,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 
+/*! \brief 1 if implementation provides single loadU14DualHsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
@@ -259,6 +265,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 
+/*! \brief 1 if implementation provides double loadU14DualHsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index b7fb482..5aa918c 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -75,11 +75,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index d58bdda..f484b1d 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -75,11 +75,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 799f7f4..2bdb786 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -76,11 +76,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index a90b586..8dc5f63 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -75,11 +75,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index d1f9a66..ad5c352 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -90,11 +90,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index 7deda27..bbdb5a8 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -79,11 +79,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index 533163e..7871496 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -74,11 +74,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 6a5a972..477d2e7 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -75,11 +75,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index 94f811a..08f4470 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -75,11 +75,13 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index 4a3250f..7ffb73a 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -192,6 +192,7 @@ struct SimdDInt32Tag
         GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -294,6 +295,13 @@ struct SimdDInt32Tag
  */
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT
 
+/*! \brief 1 if a native loadU14DualHsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -842,6 +850,16 @@ static inline void gmx_simdcall loadU12DualHsimd(const real* m, SimdReal* v0, Si
 }
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_REAL
+template<int stride>
+static inline void gmx_simdcall
+                   loadU14DualHsimd(const real* m, SimdReal* v0, SimdReal* v1, SimdReal* v2, SimdReal* v3)
+{
+    loadU12DualHsimd(m, v0, v1);
+    loadU12DualHsimd(m + stride, v2, v3);
+}
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From 2205360a31ea4da85d501f80f9ecd44b375b3311 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Sun, 10 May 2020 22:31:44 +0900
Subject: [PATCH 30/32] simd: add the reduceIncr4Hsimd() subroutine

This new subroutine is basically reduceIncr4ReturnSumHsimd()
in which the result is ignored.
Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE  macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit 5d19e1e0a95b555778805c32da18a497a1dd172d)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h        |  6 +++++-
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h        |  2 ++
 .../impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h |  2 ++
 src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h  |  2 ++
 src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h  |  2 ++
 .../simd/impl_reference/impl_reference_definitions.h      | 12 ++++++++++++
 .../impl_x86_avx2_128/impl_x86_avx2_128_definitions.h     |  2 ++
 .../impl_x86_avx2_256/impl_x86_avx2_256_definitions.h     |  2 ++
 .../impl_x86_avx_128_fma_definitions.h                    |  2 ++
 .../simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h  |  2 ++
 .../simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h  |  2 ++
 .../impl_x86_avx_512_knl_definitions.h                    |  2 ++
 src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h  |  2 ++
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h        |  2 ++
 .../simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h    |  2 ++
 src/gromacs/simd/simd.h                                   | 15 +++++++++++++++
 16 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
index bfddd3f..5632b16 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
@@ -620,14 +620,18 @@
         ninner += cjind1 - cjind0;
 
         /* Add accumulated i-forces to the force array */
+#ifdef CALC_SHIFTFORCES
         real fShiftX = reduceIncr4ReturnSumHsimd(f + scix, fix_S0, fix_S2);
         real fShiftY = reduceIncr4ReturnSumHsimd(f + sciy, fiy_S0, fiy_S2);
         real fShiftZ = reduceIncr4ReturnSumHsimd(f + sciz, fiz_S0, fiz_S2);
 
-#ifdef CALC_SHIFTFORCES
         fshift[ish3 + 0] += fShiftX;
         fshift[ish3 + 1] += fShiftY;
         fshift[ish3 + 2] += fShiftZ;
+#else
+        reduceIncr4Hsimd(f + scix, fix_S0, fix_S2);
+        reduceIncr4Hsimd(f + sciy, fiy_S0, fiy_S2);
+        reduceIncr4Hsimd(f + sciz, fiz_S0, fiz_S2);
 #endif
 
 #ifdef CALC_ENERGIES
diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index 80d916d..9d406c9 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -76,12 +76,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index 1986190..5d237d7 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -77,12 +77,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index 1ce32ab..3ff34d3 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -89,12 +89,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index 02b6eea..ee62897 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -92,12 +92,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index 768e6e8..7d9f5ad 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -238,6 +238,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 
+/*! \brief 1 if implementation provides single reduceIncr4DualHsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
@@ -271,6 +277,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 
+/*! \brief 1 if implementation provides double reduceIncr4Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index 5aa918c..73c2fec 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -75,6 +75,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
@@ -82,6 +83,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index f484b1d..e3835ae 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -76,12 +76,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 2bdb786..072c0d0 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -77,12 +77,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index 8dc5f63..ab2b7c7 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -76,12 +76,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index ad5c352..710bc13 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -91,12 +91,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index bbdb5a8..9131cb9 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -80,12 +80,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index 7871496..c2ecd12 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -75,12 +75,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 477d2e7..4618f27 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -76,12 +76,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index 08f4470..27a8584 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -76,12 +76,14 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index 7ffb73a..157de54 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -193,6 +193,7 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_REAL GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_REAL GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -302,6 +303,13 @@ struct SimdDInt32Tag
  */
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT
 
+/*! \brief 1 if a native reduceIncr4Hsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_REAL GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -860,6 +868,13 @@ static inline void gmx_simdcall
 }
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_REAL
+static inline void gmx_simdcall reduceIncr4Hsimd(real* m, SimdReal v0, SimdReal v1)
+{
+    (void)reduceIncr4ReturnSumHsimd(m, v0, v1);
+}
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From e7a1f02cc20e5873d9c2f7416020688e9300d682 Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Tue, 30 Jun 2020 09:55:53 +0900
Subject: [PATCH 31/32] simd: add the gatherLoadTranspose2Hsimd() subroutine

This new subroutine is basically two gatherLoadTransposeHsimd() invokation
with the same offset argument.

Use a default straightforward implementation unless
the GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT and/or
GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE  macros are set.
In that case, the architecture specific implementation is used.

(cherry picked from commit 1d522318fd7951efe669d5de31a1178c13af9710)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h |  6 +++--
 .../simd/impl_arm_neon/impl_arm_neon_definitions.h |  2 ++
 .../impl_arm_neon_asimd_definitions.h              |  2 ++
 .../simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h   |  2 ++
 .../simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h   |  2 ++
 .../impl_reference/impl_reference_definitions.h    | 12 +++++++++
 .../impl_x86_avx2_128_definitions.h                |  2 ++
 .../impl_x86_avx2_256_definitions.h                |  2 ++
 .../impl_x86_avx_128_fma_definitions.h             |  2 ++
 .../impl_x86_avx_256_definitions.h                 |  2 ++
 .../impl_x86_avx_512_definitions.h                 |  2 ++
 .../impl_x86_avx_512_knl_definitions.h             |  2 ++
 .../simd/impl_x86_mic/impl_x86_mic_definitions.h   |  2 ++
 .../simd/impl_x86_sse2/impl_x86_sse2_definitions.h |  2 ++
 .../impl_x86_sse4_1/impl_x86_sse4_1_definitions.h  |  2 ++
 src/gromacs/simd/simd.h                            | 29 ++++++++++++++++++++++
 16 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
index 941a438..f0f69fa 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_inner.h
@@ -323,10 +323,12 @@
 #ifdef CALC_LJ
 #    if !defined LJ_COMB_GEOM && !defined LJ_COMB_LB && !defined FIX_LJ_C
     SimdReal                                                     c6_S0, c12_S0;
+#        ifdef HALF_LJ
     gatherLoadTransposeHsimd<c_simdBestPairAlignment>(nbfp0, nbfp1, type + aj, &c6_S0, &c12_S0);
-#        ifndef HALF_LJ
+#        else
     SimdReal c6_S2, c12_S2;
-    gatherLoadTransposeHsimd<c_simdBestPairAlignment>(nbfp2, nbfp3, type + aj, &c6_S2, &c12_S2);
+    gatherLoadTranspose2Hsimd<c_simdBestPairAlignment>(nbfp0, nbfp1, nbfp2, nbfp3, type + aj,
+                                                       &c6_S0, &c12_S0, &c6_S2, &c12_S2);
 #        endif
 #    endif /* not defined any LJ rule */
 
diff --git a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
index 9d406c9..30c1aa7 100644
--- a/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon/impl_arm_neon_definitions.h
@@ -77,6 +77,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -84,6 +85,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
index 5d237d7..1b34e93 100644
--- a/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
+++ b/src/gromacs/simd/impl_arm_neon_asimd/impl_arm_neon_asimd_definitions.h
@@ -78,6 +78,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -85,6 +86,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
index 3ff34d3..15d5195 100644
--- a/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vmx/impl_ibm_vmx_definitions.h
@@ -90,6 +90,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -97,6 +98,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
index ee62897..d109599 100644
--- a/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
+++ b/src/gromacs/simd/impl_ibm_vsx/impl_ibm_vsx_definitions.h
@@ -93,6 +93,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -100,6 +101,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
 #define GMX_SIMD4_HAVE_FLOAT_GLOBAL 1
diff --git a/src/gromacs/simd/impl_reference/impl_reference_definitions.h b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
index 7d9f5ad..b4cc86e 100644
--- a/src/gromacs/simd/impl_reference/impl_reference_definitions.h
+++ b/src/gromacs/simd/impl_reference/impl_reference_definitions.h
@@ -244,6 +244,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
 
+/*! \brief 1 if implementation provides single gatherLoadTranspose2Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
+
 //! \brief 1 if double half-register load/store/reduce utils present, otherwise 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 
@@ -283,6 +289,12 @@ namespace gmx
  */
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
 
+/*! \brief 1 if implementation provides double gatherLoadTranspose2Hsimd()
+ *
+ *  Only used in simd.h to selectively override the generic implementation.
+ */
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
+
 #ifdef GMX_SIMD_REF_FLOAT_WIDTH
 #    define GMX_SIMD_FLOAT_WIDTH GMX_SIMD_REF_FLOAT_WIDTH
 #else
diff --git a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
index 73c2fec..b0b78d7 100644
--- a/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_128/impl_x86_avx2_128_definitions.h
@@ -76,6 +76,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DECR3_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
@@ -84,6 +85,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
index e3835ae..a882703 100644
--- a/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx2_256/impl_x86_avx2_256_definitions.h
@@ -77,6 +77,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -84,6 +85,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
index 072c0d0..5dd68cf 100644
--- a/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_128_fma/impl_x86_avx_128_fma_definitions.h
@@ -78,6 +78,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -85,6 +86,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
index ab2b7c7..f013af6 100644
--- a/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_256/impl_x86_avx_256_definitions.h
@@ -77,6 +77,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // Not needed for width 4
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -84,6 +85,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 
 #define GMX_SIMD4_HAVE_FLOAT 1
diff --git a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
index 710bc13..90db7ff 100644
--- a/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512/impl_x86_avx_512_definitions.h
@@ -92,6 +92,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -99,6 +100,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
index 9131cb9..5a260da 100644
--- a/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
+++ b/src/gromacs/simd/impl_x86_avx_512_knl/impl_x86_avx_512_knl_definitions.h
@@ -81,6 +81,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -88,6 +89,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_FLOAT 1
 #define GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE 1
 
diff --git a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
index c2ecd12..3733a3b 100644
--- a/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
+++ b/src/gromacs/simd/impl_x86_mic/impl_x86_mic_definitions.h
@@ -76,6 +76,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 1
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -83,6 +84,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
index 4618f27..c26e765 100644
--- a/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse2/impl_x86_sse2_definitions.h
@@ -77,6 +77,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -84,6 +85,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
index 27a8584..794e4a9 100644
--- a/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
+++ b/src/gromacs/simd/impl_x86_sse4_1/impl_x86_sse4_1_definitions.h
@@ -77,6 +77,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_DOUBLE 0 // No need for half-simd, width is 2
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE2_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADDUPLICATE3_DOUBLE 0
@@ -84,6 +85,7 @@
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE 0
 #define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE 0
+#define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE 0
 
 #define GMX_SIMD4_HAVE_FLOAT 1
 #define GMX_SIMD4_HAVE_FLOAT_ARRAY 1
diff --git a/src/gromacs/simd/simd.h b/src/gromacs/simd/simd.h
index 157de54..7a39c0b 100644
--- a/src/gromacs/simd/simd.h
+++ b/src/gromacs/simd/simd.h
@@ -194,6 +194,9 @@ struct SimdDInt32Tag
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU12DUAL_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_REAL GMX_SIMD_HAVE_HSIMD_UTIL_LOADU14DUAL_DOUBLE
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_REAL GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_DOUBLE
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_REAL \
+        GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE
+
 #    define GMX_SIMD4_HAVE_REAL GMX_SIMD4_HAVE_DOUBLE
 #    define GMX_SIMD4_HAVE_REAL_ARRAY GMX_SIMD4_HAVE_DOUBLE_ARRAY
 #    define GMX_SIMD4_HAVE_REAL_GLOBAL GMX_SIMD4_HAVE_DOUBLE_GLOBAL
@@ -310,6 +313,14 @@ struct SimdDInt32Tag
  */
 #    define GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_REAL GMX_SIMD_HAVE_HSIMD_UTIL_REDUCEINCR4_FLOAT
 
+/*! \brief 1 if a native gatherLoadTranspose2Hsimd() implementation is available, otherwise 0
+ *
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_DOUBLE if GMX_DOUBLE is 1, otherwise
+ *  \ref GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT.
+ */
+#    define GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_REAL \
+        GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_FLOAT
+
 /*! \brief 1 if Simd4Real is available, otherwise 0.
  *
  *  \ref GMX_SIMD4_HAVE_DOUBLE if GMX_DOUBLE is 1, otherwise \ref GMX_SIMD4_HAVE_FLOAT.
@@ -875,6 +886,24 @@ static inline void gmx_simdcall reduceIncr4Hsimd(real* m, SimdReal v0, SimdReal
 }
 #endif
 
+#if GMX_SIMD_HAVE_HSIMD_UTIL_REAL && !GMX_SIMD_HAVE_HSIMD_UTIL_GATHER_LOAD_TRANSPOSE2_REAL
+template<int align>
+static inline void gatherLoadTranspose2Hsimd(const real*        base0,
+                                             const real*        base1,
+                                             const real*        base2,
+                                             const real*        base3,
+                                             const std::int32_t offsets[],
+                                             SimdReal*          v0,
+                                             SimdReal*          v1,
+                                             SimdReal*          v2,
+                                             SimdReal*          v3)
+{
+    gatherLoadTransposeHsimd<align>(base0, base1, offsets, v0, v1);
+    gatherLoadTransposeHsimd<align>(base2, base3, offsets, v2, v3);
+}
+
+#endif
+
 #if GMX_DOUBLE
 #    define GMX_SIMD_HAVE_4NSIMD_UTIL_REAL GMX_SIMD_HAVE_4NSIMD_UTIL_DOUBLE
 #else
-- 
1.8.3.1

From 4b730e7252b022775d2441a8551eb5899b7d6e7a Mon Sep 17 00:00:00 2001
From: Gilles Gouaillardet <gilles@rist.or.jp>
Date: Mon, 11 May 2020 10:13:26 +0900
Subject: [PATCH 32/32] real vs SimdReal

(cherry picked from commit 6f1aa7ba3bd7477c843e14c19ce0fde0136c9ef9)
---
 src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
index 5632b16..45ec3ab 100644
--- a/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
+++ b/src/gromacs/nbnxm/kernels_simd_2xmm/kernel_outer.h
@@ -90,15 +90,15 @@
     SimdReal iq_S2 = setZero();
 
 #ifdef CALC_COUL_RF
-    SimdReal mrc_3_S;
+    real mrc_3_S;
 #    ifdef CALC_ENERGIES
-    SimdReal hrc_3_S, moh_rc_S;
+    real hrc_3_S, moh_rc_S;
 #    endif
 #endif
 
 #ifdef CALC_COUL_TAB
     /* Coulomb table variables */
-    SimdReal    invtsp_S;
+    real        invtsp_S;
     const real* tab_coul_F;
 #    if defined CALC_ENERGIES && !defined TAB_FDV0
     const real*                           tab_coul_V;
@@ -110,7 +110,7 @@
 #endif
 
 #ifdef CALC_COUL_EWALD
-    SimdReal beta2_S, beta_S;
+    real beta2_S, beta_S;
 #endif
 
 #if defined CALC_ENERGIES && (defined CALC_COUL_EWALD || defined CALC_COUL_TAB)
@@ -218,16 +218,16 @@
 
 #ifdef CALC_COUL_RF
     /* Reaction-field constants */
-    mrc_3_S = SimdReal(-2 * ic->k_rf);
+    mrc_3_S = -2 * ic->k_rf;
 #    ifdef CALC_ENERGIES
-    hrc_3_S  = SimdReal(ic->k_rf);
-    moh_rc_S = SimdReal(-ic->c_rf);
+    hrc_3_S  = ic->k_rf;
+    moh_rc_S = -ic->c_rf;
 #    endif
 #endif
 
 #ifdef CALC_COUL_TAB
 
-    invtsp_S = SimdReal(ic->coulombEwaldTables->scale);
+    invtsp_S = ic->coulombEwaldTables->scale;
 #    ifdef CALC_ENERGIES
     mhalfsp_S = SimdReal(-0.5_real / ic->coulombEwaldTables->scale);
 #    endif
@@ -243,8 +243,8 @@
 #endif /* CALC_COUL_TAB */
 
 #ifdef CALC_COUL_EWALD
-    beta2_S = SimdReal(ic->ewaldcoeff_q * ic->ewaldcoeff_q);
-    beta_S  = SimdReal(ic->ewaldcoeff_q);
+    beta2_S = ic->ewaldcoeff_q * ic->ewaldcoeff_q;
+    beta_S  = ic->ewaldcoeff_q;
 #endif
 
 #if (defined CALC_COUL_TAB || defined CALC_COUL_EWALD) && defined CALC_ENERGIES
-- 
1.8.3.1

