diff --git a/Makefile.am b/Makefile.am
index eaf131c..4ccd51a 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -94,6 +94,11 @@ NEON_LIBS = dft/simd/neon/libdft_neon_codelets.la	\
 rdft/simd/neon/librdft_neon_codelets.la
 endif
 
+if HAVE_ARMSVE
+ARMSVE_LIBS = dft/simd/armsve/libdft_armsve_codelets.la	\
+rdft/simd/armsve/librdft_armsve_codelets.la
+endif
+
 if HAVE_GENERIC_SIMD128
 GENERIC_SIMD128_LIBS = dft/simd/generic-simd128/libdft_generic_simd128_codelets.la \
 rdft/simd/generic-simd128/librdft_generic_simd128_codelets.la
@@ -126,7 +131,7 @@ libfftw3@PREC_SUFFIX@_la_LIBADD =			\
 	api/libapi.la					\
         $(SIMD_LIBS) $(SSE2_LIBS) $(AVX_LIBS) $(AVX_128_FMA_LIBS) \
         $(AVX2_LIBS) $(ALTIVEC_LIBS) \
-        $(VSX_LIBS) $(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) \
+        $(VSX_LIBS) $(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) $(ARMSVE_LIBS) \
         $(GENERIC_SIMD128_LIBS) $(GENERIC_SIMD256_LIBS) \
 	$(COMBINED_THREADLIBS)
 
diff --git a/Makefile.in b/Makefile.in
index b4e7b2c..236cd3c 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -151,7 +151,7 @@ libfftw3@PREC_SUFFIX@_la_DEPENDENCIES = kernel/libkernel.la \
 	rdft/scalar/r2r/librdft_scalar_r2r.la reodft/libreodft.la \
 	api/libapi.la $(SIMD_LIBS) $(SSE2_LIBS) $(AVX_LIBS) \
 	$(AVX_128_FMA_LIBS) $(AVX2_LIBS) $(ALTIVEC_LIBS) $(VSX_LIBS) \
-	$(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) \
+	$(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) $(ARMSVE_LIBS) \
 	$(GENERIC_SIMD128_LIBS) $(GENERIC_SIMD256_LIBS) \
 	$(COMBINED_THREADLIBS)
 am_libfftw3@PREC_SUFFIX@_la_OBJECTS =
@@ -295,6 +295,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
@@ -508,6 +509,9 @@ SIMD_LIBS = simd-support/libsimd_support.la
 @HAVE_NEON_TRUE@NEON_LIBS = dft/simd/neon/libdft_neon_codelets.la	\
 @HAVE_NEON_TRUE@rdft/simd/neon/librdft_neon_codelets.la
 
+@HAVE_ARMSVE_TRUE@ARMSVE_LIBS = dft/simd/armsve/libdft_armsve_codelets.la	\
+@HAVE_ARMSVE_TRUE@rdft/simd/armsve/librdft_armsve_codelets.la
+
 @HAVE_GENERIC_SIMD128_TRUE@GENERIC_SIMD128_LIBS = dft/simd/generic-simd128/libdft_generic_simd128_codelets.la \
 @HAVE_GENERIC_SIMD128_TRUE@rdft/simd/generic-simd128/librdft_generic_simd128_codelets.la
 
@@ -530,7 +534,7 @@ libfftw3@PREC_SUFFIX@_la_LIBADD = \
 	api/libapi.la					\
         $(SIMD_LIBS) $(SSE2_LIBS) $(AVX_LIBS) $(AVX_128_FMA_LIBS) \
         $(AVX2_LIBS) $(ALTIVEC_LIBS) \
-        $(VSX_LIBS) $(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) \
+        $(VSX_LIBS) $(NEON_LIBS) $(KCVI_LIBS) $(AVX512_LIBS) $(ARMSVE_LIBS) \
         $(GENERIC_SIMD128_LIBS) $(GENERIC_SIMD256_LIBS) \
 	$(COMBINED_THREADLIBS)
 
diff --git a/api/Makefile.in b/api/Makefile.in
index bf01c48..0d1d741 100644
--- a/api/Makefile.in
+++ b/api/Makefile.in
@@ -237,6 +237,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/api/version.c b/api/version.c
index 4f14de1..2eaacfc 100644
--- a/api/version.c
+++ b/api/version.c
@@ -77,6 +77,10 @@ const char X(version)[] = PACKAGE "-" PACKAGE_VERSION
    "-neon"
 #endif
 
+#if HAVE_ARMSVE
+   "-armsve"
+#endif
+
 #if defined(HAVE_GENERIC_SIMD128)
    "-generic_simd128"
 #endif
diff --git a/config.h.in b/config.h.in
index 01ea4ca..f1fc585 100644
--- a/config.h.in
+++ b/config.h.in
@@ -224,6 +224,9 @@
 /* Define to enable ARM NEON optimizations. */
 #undef HAVE_NEON
 
+/* Define to enable ARM SVE optimizations. */
+#undef HAVE_ARMSVE
+
 /* Define if OpenMP is enabled */
 #undef HAVE_OPENMP
 
diff --git a/configure b/configure
index 034c598..5df4b6a 100755
--- a/configure
+++ b/configure
@@ -661,6 +661,7 @@ ALLOCA
 C_FFTW_R2R_KIND
 STACK_ALIGN_CFLAGS
 NEON_CFLAGS
+ARMSVE_CFLAGS
 VSX_CFLAGS
 ALTIVEC_CFLAGS
 KCVI_CFLAGS
@@ -668,6 +669,7 @@ AVX512_CFLAGS
 AVX2_CFLAGS
 AVX_CFLAGS
 SSE2_CFLAGS
+ARMSVE_CFLAGS
 MPI_FALSE
 MPI_TRUE
 C_MPI_FINT
@@ -723,6 +725,8 @@ HAVE_GENERIC_SIMD128_FALSE
 HAVE_GENERIC_SIMD128_TRUE
 HAVE_NEON_FALSE
 HAVE_NEON_TRUE
+HAVE_ARMSVE_FALSE
+HAVE_ARMSVE_TRUE
 HAVE_VSX_FALSE
 HAVE_VSX_TRUE
 HAVE_ALTIVEC_FALSE
@@ -852,6 +856,7 @@ enable_kcvi
 enable_altivec
 enable_vsx
 enable_neon
+enable_armsve
 enable_armv8_pmccntr_el0
 enable_armv8_cntvct_el0
 enable_armv7a_cntvct
@@ -1549,6 +1554,7 @@ Optional Features:
   --enable-altivec        enable Altivec optimizations
   --enable-vsx            enable IBM VSX optimizations
   --enable-neon           enable ARM NEON optimizations
+  --enable-armsve         enable ARM SVE optimizations
   --enable-armv8-pmccntr-el0
                           enable the cycle counter on ARMv8 via the
                           PMCCNTR_EL0 register (see README-perfcounters for
@@ -3954,6 +3960,36 @@ else
 fi
 
 
+# Check whether --enable-armsve was given.
+if test "${enable_armsve+set}" = set; then :
+  enableval=$enable_armsve; have_armsve=$enableval
+else
+  have_armsve=no
+fi
+
+if test "$have_armsve" = "yes"; then
+
+$as_echo "#define HAVE_ARMSVE 1" >>confdefs.h
+
+        case "${host_cpu}" in
+                aarch64)
+                ;;
+                *)
+		if test "$PRECISION" != "d" -a "$PRECISION" != "s" ; then
+			as_fn_error $? "ARMSVE requires single or double precision" "$LINENO" 5
+		fi
+                ;;
+        esac
+fi
+ if test "$have_armsve" = "yes"; then
+  HAVE_ARMSVE_TRUE=
+  HAVE_ARMSVE_FALSE='#'
+else
+  HAVE_ARMSVE_TRUE='#'
+  HAVE_ARMSVE_FALSE=
+fi
+
+
 # Check whether --enable-armv8-pmccntr-el0 was given.
 if test "${enable_armv8_pmccntr_el0+set}" = set; then :
   enableval=$enable_armv8_pmccntr_el0; have_armv8pmccntrel0=$enableval
@@ -22046,7 +22082,7 @@ cat >>confdefs.h <<_ACEOF
 _ACEOF
 
 
-ac_config_files="$ac_config_files Makefile support/Makefile genfft/Makefile kernel/Makefile simd-support/Makefile dft/Makefile dft/scalar/Makefile dft/scalar/codelets/Makefile dft/simd/Makefile dft/simd/common/Makefile dft/simd/sse2/Makefile dft/simd/avx/Makefile dft/simd/avx-128-fma/Makefile dft/simd/avx2/Makefile dft/simd/avx2-128/Makefile dft/simd/avx512/Makefile dft/simd/kcvi/Makefile dft/simd/altivec/Makefile dft/simd/vsx/Makefile dft/simd/neon/Makefile dft/simd/generic-simd128/Makefile dft/simd/generic-simd256/Makefile rdft/Makefile rdft/scalar/Makefile rdft/scalar/r2cf/Makefile rdft/scalar/r2cb/Makefile rdft/scalar/r2r/Makefile rdft/simd/Makefile rdft/simd/common/Makefile rdft/simd/sse2/Makefile rdft/simd/avx/Makefile rdft/simd/avx-128-fma/Makefile rdft/simd/avx2/Makefile rdft/simd/avx2-128/Makefile rdft/simd/avx512/Makefile rdft/simd/kcvi/Makefile rdft/simd/altivec/Makefile rdft/simd/vsx/Makefile rdft/simd/neon/Makefile rdft/simd/generic-simd128/Makefile rdft/simd/generic-simd256/Makefile reodft/Makefile threads/Makefile api/Makefile mpi/Makefile libbench2/Makefile tests/Makefile doc/Makefile doc/FAQ/Makefile tools/Makefile tools/fftw_wisdom.1 tools/fftw-wisdom-to-conf m4/Makefile fftw.pc"
+ac_config_files="$ac_config_files Makefile support/Makefile genfft/Makefile kernel/Makefile simd-support/Makefile dft/Makefile dft/scalar/Makefile dft/scalar/codelets/Makefile dft/simd/Makefile dft/simd/common/Makefile dft/simd/sse2/Makefile dft/simd/avx/Makefile dft/simd/avx-128-fma/Makefile dft/simd/avx2/Makefile dft/simd/avx2-128/Makefile dft/simd/avx512/Makefile dft/simd/kcvi/Makefile dft/simd/altivec/Makefile dft/simd/vsx/Makefile dft/simd/neon/Makefile dft/simd/armsve/Makefile dft/simd/generic-simd128/Makefile dft/simd/generic-simd256/Makefile rdft/Makefile rdft/scalar/Makefile rdft/scalar/r2cf/Makefile rdft/scalar/r2cb/Makefile rdft/scalar/r2r/Makefile rdft/simd/Makefile rdft/simd/common/Makefile rdft/simd/sse2/Makefile rdft/simd/avx/Makefile rdft/simd/avx-128-fma/Makefile rdft/simd/avx2/Makefile rdft/simd/avx2-128/Makefile rdft/simd/avx512/Makefile rdft/simd/kcvi/Makefile rdft/simd/altivec/Makefile rdft/simd/vsx/Makefile rdft/simd/neon/Makefile rdft/simd/armsve/Makefile rdft/simd/generic-simd128/Makefile rdft/simd/generic-simd256/Makefile reodft/Makefile threads/Makefile api/Makefile mpi/Makefile libbench2/Makefile tests/Makefile doc/Makefile doc/FAQ/Makefile tools/Makefile tools/fftw_wisdom.1 tools/fftw-wisdom-to-conf m4/Makefile fftw.pc"
 
 
 cat >confcache <<\_ACEOF
@@ -22229,6 +22265,10 @@ if test -z "${HAVE_NEON_TRUE}" && test -z "${HAVE_NEON_FALSE}"; then
   as_fn_error $? "conditional \"HAVE_NEON\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
+if test -z "${HAVE_ARMSVE_TRUE}" && test -z "${HAVE_ARMSVE_FALSE}"; then
+  as_fn_error $? "conditional \"HAVE_ARMSVE\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
 if test -z "${HAVE_GENERIC_SIMD128_TRUE}" && test -z "${HAVE_GENERIC_SIMD128_FALSE}"; then
   as_fn_error $? "conditional \"HAVE_GENERIC_SIMD128\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
@@ -23239,6 +23279,7 @@ do
     "dft/simd/altivec/Makefile") CONFIG_FILES="$CONFIG_FILES dft/simd/altivec/Makefile" ;;
     "dft/simd/vsx/Makefile") CONFIG_FILES="$CONFIG_FILES dft/simd/vsx/Makefile" ;;
     "dft/simd/neon/Makefile") CONFIG_FILES="$CONFIG_FILES dft/simd/neon/Makefile" ;;
+    "dft/simd/armsve/Makefile") CONFIG_FILES="$CONFIG_FILES dft/simd/armsve/Makefile" ;;
     "dft/simd/generic-simd128/Makefile") CONFIG_FILES="$CONFIG_FILES dft/simd/generic-simd128/Makefile" ;;
     "dft/simd/generic-simd256/Makefile") CONFIG_FILES="$CONFIG_FILES dft/simd/generic-simd256/Makefile" ;;
     "rdft/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/Makefile" ;;
@@ -23258,6 +23299,7 @@ do
     "rdft/simd/altivec/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/simd/altivec/Makefile" ;;
     "rdft/simd/vsx/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/simd/vsx/Makefile" ;;
     "rdft/simd/neon/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/simd/neon/Makefile" ;;
+    "rdft/simd/armsve/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/simd/armsve/Makefile" ;;
     "rdft/simd/generic-simd128/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/simd/generic-simd128/Makefile" ;;
     "rdft/simd/generic-simd256/Makefile") CONFIG_FILES="$CONFIG_FILES rdft/simd/generic-simd256/Makefile" ;;
     "reodft/Makefile") CONFIG_FILES="$CONFIG_FILES reodft/Makefile" ;;
diff --git a/configure.ac b/configure.ac
index 2a2e8c7..346272f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -201,6 +201,21 @@ if test "$have_neon" = "yes"; then
 fi
 AM_CONDITIONAL(HAVE_NEON, test "$have_neon" = "yes")
 
+AC_ARG_ENABLE(armsve, [AC_HELP_STRING([--enable-armsve],[enable ARM SVE optimizations])], have_armsve=$enableval, have_armsve=no)
+if test "$have_armsve" = "yes"; then
+	AC_DEFINE(HAVE_ARMSVE,1,[Define to enable ARM SVE optimizations.])
+        case "${host_cpu}" in
+                aarch64)
+                ;;
+                *)
+		if test "$PRECISION" != "d" -a "$PRECISION" != "s"; then
+			AC_MSG_ERROR([ARMSVE requires single or double precision])
+		fi
+                ;;
+        esac
+fi
+AM_CONDITIONAL(HAVE_ARMSVE, test "$have_armsve" = "yes")
+
 AC_ARG_ENABLE(armv8-pmccntr-el0, [AC_HELP_STRING([--enable-armv8-pmccntr-el0],[enable the cycle counter on ARMv8 via the PMCCNTR_EL0 register (see README-perfcounters for details and mandatory instructions)])], have_armv8pmccntrel0=$enableval)
 if test "$have_armv8pmccntrel0"x = "yes"x; then
 	AC_DEFINE(HAVE_ARMV8_PMCCNTR_EL0,1,[Define if you have enabled the PMCCNTR_EL0 cycle counter on ARMv8])
@@ -476,6 +491,7 @@ AC_SUBST(KCVI_CFLAGS)
 AC_SUBST(ALTIVEC_CFLAGS)
 AC_SUBST(VSX_CFLAGS)
 AC_SUBST(NEON_CFLAGS)
+AC_SUBST(ARMSVE_CFLAGS)
 
 dnl add stack alignment CFLAGS if so requested
 if test "$with_incoming_stack_boundary"x != "no"x; then
@@ -771,6 +787,7 @@ AC_CONFIG_FILES([
    dft/simd/altivec/Makefile
    dft/simd/vsx/Makefile
    dft/simd/neon/Makefile
+   dft/simd/armsve/Makefile
    dft/simd/generic-simd128/Makefile
    dft/simd/generic-simd256/Makefile
 
@@ -791,6 +808,7 @@ AC_CONFIG_FILES([
    rdft/simd/altivec/Makefile
    rdft/simd/vsx/Makefile
    rdft/simd/neon/Makefile
+   rdft/simd/armsve/Makefile
    rdft/simd/generic-simd128/Makefile
    rdft/simd/generic-simd256/Makefile
 
diff --git a/dft/Makefile.in b/dft/Makefile.in
index 4d17de9..f64a0b8 100644
--- a/dft/Makefile.in
+++ b/dft/Makefile.in
@@ -231,6 +231,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/codelet-dft.h b/dft/codelet-dft.h
index b78e135..d267c55 100644
--- a/dft/codelet-dft.h
+++ b/dft/codelet-dft.h
@@ -106,6 +106,7 @@ extern const solvtab X(solvtab_dft_kcvi);
 extern const solvtab X(solvtab_dft_altivec);
 extern const solvtab X(solvtab_dft_vsx);
 extern const solvtab X(solvtab_dft_neon);
+extern const solvtab X(solvtab_dft_armsve);
 extern const solvtab X(solvtab_dft_generic_simd128);
 extern const solvtab X(solvtab_dft_generic_simd256);
 
diff --git a/dft/conf.c b/dft/conf.c
index d0951de..bc4e13d 100644
--- a/dft/conf.c
+++ b/dft/conf.c
@@ -79,6 +79,10 @@ void X(dft_conf_standard)(planner *p)
      if (X(have_simd_neon)())
 	  X(solvtab_exec)(X(solvtab_dft_neon), p);
 #endif
+#if HAVE_ARMSVE
+     if (X(have_simd_armsve)())
+	  X(solvtab_exec)(X(solvtab_dft_armsve), p);
+#endif
 #if HAVE_GENERIC_SIMD128
      X(solvtab_exec)(X(solvtab_dft_generic_simd128), p);
 #endif
diff --git a/dft/scalar/Makefile.in b/dft/scalar/Makefile.in
index a77a255..2c0e32d 100644
--- a/dft/scalar/Makefile.in
+++ b/dft/scalar/Makefile.in
@@ -226,6 +226,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/scalar/codelets/Makefile.in b/dft/scalar/codelets/Makefile.in
index a6074f3..61c5d93 100644
--- a/dft/scalar/codelets/Makefile.in
+++ b/dft/scalar/codelets/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/Makefile.am b/dft/simd/Makefile.am
index 315d744..0e2fe37 100644
--- a/dft/simd/Makefile.am
+++ b/dft/simd/Makefile.am
@@ -1,4 +1,4 @@
 AM_CPPFLAGS = -I $(top_srcdir)
-SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon generic-simd128 generic-simd256
+SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon armsve generic-simd128 generic-simd256
 EXTRA_DIST = n1b.h n1f.h n2b.h n2f.h n2s.h q1b.h q1f.h t1b.h t1bu.h	\
 t1f.h t1fu.h t2b.h t2f.h t3b.h t3f.h ts.h codlist.mk simd.mk
diff --git a/dft/simd/Makefile.in b/dft/simd/Makefile.in
index a90dc33..8066b21 100644
--- a/dft/simd/Makefile.in
+++ b/dft/simd/Makefile.in
@@ -195,6 +195,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
@@ -342,7 +343,7 @@ top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 AM_CPPFLAGS = -I $(top_srcdir)
-SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon generic-simd128 generic-simd256
+SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon armsve generic-simd128 generic-simd256
 EXTRA_DIST = n1b.h n1f.h n2b.h n2f.h n2s.h q1b.h q1f.h t1b.h t1bu.h	\
 t1f.h t1fu.h t2b.h t2f.h t3b.h t3f.h ts.h codlist.mk simd.mk
 
diff --git a/dft/simd/altivec/Makefile.in b/dft/simd/altivec/Makefile.in
index 38f03b2..5fcd8e7 100644
--- a/dft/simd/altivec/Makefile.in
+++ b/dft/simd/altivec/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/armsve/Makefile.am b/dft/simd/armsve/Makefile.am
new file mode 100644
index 0000000..906dc4b
--- /dev/null
+++ b/dft/simd/armsve/Makefile.am
@@ -0,0 +1,13 @@
+AM_CFLAGS = $(ARMSVE_CFLAGS)
+SIMD_HEADER=simd-support/simd-armsve.h
+
+include $(top_srcdir)/dft/simd/codlist.mk
+include $(top_srcdir)/dft/simd/simd.mk
+
+if HAVE_ARMSVE
+
+BUILT_SOURCES = $(EXTRA_DIST)
+noinst_LTLIBRARIES = libdft_armsve_codelets.la
+libdft_armsve_codelets_la_SOURCES = $(BUILT_SOURCES)
+
+endif
diff --git a/dft/simd/armsve/Makefile.in b/dft/simd/armsve/Makefile.in
new file mode 100644
index 0000000..b5c84d9
--- /dev/null
+++ b/dft/simd/armsve/Makefile.in
@@ -0,0 +1,986 @@
+# Makefile.in generated by automake 1.15 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+# This file contains a standard list of DFT SIMD codelets.  It is
+# included by common/Makefile to generate the C files with the actual
+# codelets in them.  It is included by {sse,sse2,...}/Makefile to
+# generate and compile stub files that include common/*.c
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+VPATH = @srcdir@
+am__is_gnu_make = { \
+  if test -z '$(MAKELEVEL)'; then \
+    false; \
+  elif test -n '$(MAKE_HOST)'; then \
+    true; \
+  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
+    true; \
+  else \
+    false; \
+  fi; \
+}
+am__make_running_with_option = \
+  case $${target_option-} in \
+      ?) ;; \
+      *) echo "am__make_running_with_option: internal error: invalid" \
+              "target option '$${target_option-}' specified" >&2; \
+         exit 1;; \
+  esac; \
+  has_opt=no; \
+  sane_makeflags=$$MAKEFLAGS; \
+  if $(am__is_gnu_make); then \
+    sane_makeflags=$$MFLAGS; \
+  else \
+    case $$MAKEFLAGS in \
+      *\\[\ \	]*) \
+        bs=\\; \
+        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
+          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
+    esac; \
+  fi; \
+  skip_next=no; \
+  strip_trailopt () \
+  { \
+    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
+  }; \
+  for flg in $$sane_makeflags; do \
+    test $$skip_next = yes && { skip_next=no; continue; }; \
+    case $$flg in \
+      *=*|--*) continue;; \
+        -*I) strip_trailopt 'I'; skip_next=yes;; \
+      -*I?*) strip_trailopt 'I';; \
+        -*O) strip_trailopt 'O'; skip_next=yes;; \
+      -*O?*) strip_trailopt 'O';; \
+        -*l) strip_trailopt 'l'; skip_next=yes;; \
+      -*l?*) strip_trailopt 'l';; \
+      -[dEDm]) skip_next=yes;; \
+      -[JT]) skip_next=yes;; \
+    esac; \
+    case $$flg in \
+      *$$target_option*) has_opt=yes; break;; \
+    esac; \
+  done; \
+  test $$has_opt = yes
+am__make_dryrun = (target_option=n; $(am__make_running_with_option))
+am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+subdir = dft/simd/armsve
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acx_mpi.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_cc_maxopt.m4 \
+	$(top_srcdir)/m4/ax_check_compiler_flags.m4 \
+	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
+	$(top_srcdir)/m4/ax_gcc_aligns_stack.m4 \
+	$(top_srcdir)/m4/ax_gcc_version.m4 \
+	$(top_srcdir)/m4/ax_openmp.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+LTLIBRARIES = $(noinst_LTLIBRARIES)
+libdft_armsve_codelets_la_LIBADD =
+am__libdft_armsve_codelets_la_SOURCES_DIST = n1fv_2.c n1fv_3.c n1fv_4.c \
+	n1fv_5.c n1fv_6.c n1fv_7.c n1fv_8.c n1fv_9.c n1fv_10.c \
+	n1fv_11.c n1fv_12.c n1fv_13.c n1fv_14.c n1fv_15.c n1fv_16.c \
+	n1fv_32.c n1fv_64.c n1fv_128.c n1fv_20.c n1fv_25.c n1bv_2.c \
+	n1bv_3.c n1bv_4.c n1bv_5.c n1bv_6.c n1bv_7.c n1bv_8.c n1bv_9.c \
+	n1bv_10.c n1bv_11.c n1bv_12.c n1bv_13.c n1bv_14.c n1bv_15.c \
+	n1bv_16.c n1bv_32.c n1bv_64.c n1bv_128.c n1bv_20.c n1bv_25.c \
+	n2fv_2.c n2fv_4.c n2fv_6.c n2fv_8.c n2fv_10.c n2fv_12.c \
+	n2fv_14.c n2fv_16.c n2fv_32.c n2fv_64.c n2fv_20.c n2bv_2.c \
+	n2bv_4.c n2bv_6.c n2bv_8.c n2bv_10.c n2bv_12.c n2bv_14.c \
+	n2bv_16.c n2bv_32.c n2bv_64.c n2bv_20.c n2sv_4.c n2sv_8.c \
+	n2sv_16.c n2sv_32.c n2sv_64.c t1fuv_2.c t1fuv_3.c t1fuv_4.c \
+	t1fuv_5.c t1fuv_6.c t1fuv_7.c t1fuv_8.c t1fuv_9.c t1fuv_10.c \
+	t1fv_2.c t1fv_3.c t1fv_4.c t1fv_5.c t1fv_6.c t1fv_7.c t1fv_8.c \
+	t1fv_9.c t1fv_10.c t1fv_12.c t1fv_15.c t1fv_16.c t1fv_32.c \
+	t1fv_64.c t1fv_20.c t1fv_25.c t2fv_2.c t2fv_4.c t2fv_8.c \
+	t2fv_16.c t2fv_32.c t2fv_64.c t2fv_5.c t2fv_10.c t2fv_20.c \
+	t2fv_25.c t3fv_4.c t3fv_8.c t3fv_16.c t3fv_32.c t3fv_5.c \
+	t3fv_10.c t3fv_20.c t3fv_25.c t1buv_2.c t1buv_3.c t1buv_4.c \
+	t1buv_5.c t1buv_6.c t1buv_7.c t1buv_8.c t1buv_9.c t1buv_10.c \
+	t1bv_2.c t1bv_3.c t1bv_4.c t1bv_5.c t1bv_6.c t1bv_7.c t1bv_8.c \
+	t1bv_9.c t1bv_10.c t1bv_12.c t1bv_15.c t1bv_16.c t1bv_32.c \
+	t1bv_64.c t1bv_20.c t1bv_25.c t2bv_2.c t2bv_4.c t2bv_8.c \
+	t2bv_16.c t2bv_32.c t2bv_64.c t2bv_5.c t2bv_10.c t2bv_20.c \
+	t2bv_25.c t3bv_4.c t3bv_8.c t3bv_16.c t3bv_32.c t3bv_5.c \
+	t3bv_10.c t3bv_20.c t3bv_25.c t1sv_2.c t1sv_4.c t1sv_8.c \
+	t1sv_16.c t1sv_32.c t2sv_4.c t2sv_8.c t2sv_16.c t2sv_32.c \
+	q1fv_2.c q1fv_4.c q1fv_5.c q1fv_8.c q1bv_2.c q1bv_4.c q1bv_5.c \
+	q1bv_8.c genus.c codlist.c
+am__objects_1 = n1fv_2.lo n1fv_3.lo n1fv_4.lo n1fv_5.lo n1fv_6.lo \
+	n1fv_7.lo n1fv_8.lo n1fv_9.lo n1fv_10.lo n1fv_11.lo n1fv_12.lo \
+	n1fv_13.lo n1fv_14.lo n1fv_15.lo n1fv_16.lo n1fv_32.lo \
+	n1fv_64.lo n1fv_128.lo n1fv_20.lo n1fv_25.lo
+am__objects_2 = n1bv_2.lo n1bv_3.lo n1bv_4.lo n1bv_5.lo n1bv_6.lo \
+	n1bv_7.lo n1bv_8.lo n1bv_9.lo n1bv_10.lo n1bv_11.lo n1bv_12.lo \
+	n1bv_13.lo n1bv_14.lo n1bv_15.lo n1bv_16.lo n1bv_32.lo \
+	n1bv_64.lo n1bv_128.lo n1bv_20.lo n1bv_25.lo
+am__objects_3 = n2fv_2.lo n2fv_4.lo n2fv_6.lo n2fv_8.lo n2fv_10.lo \
+	n2fv_12.lo n2fv_14.lo n2fv_16.lo n2fv_32.lo n2fv_64.lo \
+	n2fv_20.lo
+am__objects_4 = n2bv_2.lo n2bv_4.lo n2bv_6.lo n2bv_8.lo n2bv_10.lo \
+	n2bv_12.lo n2bv_14.lo n2bv_16.lo n2bv_32.lo n2bv_64.lo \
+	n2bv_20.lo
+am__objects_5 = n2sv_4.lo n2sv_8.lo n2sv_16.lo n2sv_32.lo n2sv_64.lo
+am__objects_6 = t1fuv_2.lo t1fuv_3.lo t1fuv_4.lo t1fuv_5.lo t1fuv_6.lo \
+	t1fuv_7.lo t1fuv_8.lo t1fuv_9.lo t1fuv_10.lo
+am__objects_7 = t1fv_2.lo t1fv_3.lo t1fv_4.lo t1fv_5.lo t1fv_6.lo \
+	t1fv_7.lo t1fv_8.lo t1fv_9.lo t1fv_10.lo t1fv_12.lo t1fv_15.lo \
+	t1fv_16.lo t1fv_32.lo t1fv_64.lo t1fv_20.lo t1fv_25.lo
+am__objects_8 = t2fv_2.lo t2fv_4.lo t2fv_8.lo t2fv_16.lo t2fv_32.lo \
+	t2fv_64.lo t2fv_5.lo t2fv_10.lo t2fv_20.lo t2fv_25.lo
+am__objects_9 = t3fv_4.lo t3fv_8.lo t3fv_16.lo t3fv_32.lo t3fv_5.lo \
+	t3fv_10.lo t3fv_20.lo t3fv_25.lo
+am__objects_10 = t1buv_2.lo t1buv_3.lo t1buv_4.lo t1buv_5.lo \
+	t1buv_6.lo t1buv_7.lo t1buv_8.lo t1buv_9.lo t1buv_10.lo
+am__objects_11 = t1bv_2.lo t1bv_3.lo t1bv_4.lo t1bv_5.lo t1bv_6.lo \
+	t1bv_7.lo t1bv_8.lo t1bv_9.lo t1bv_10.lo t1bv_12.lo t1bv_15.lo \
+	t1bv_16.lo t1bv_32.lo t1bv_64.lo t1bv_20.lo t1bv_25.lo
+am__objects_12 = t2bv_2.lo t2bv_4.lo t2bv_8.lo t2bv_16.lo t2bv_32.lo \
+	t2bv_64.lo t2bv_5.lo t2bv_10.lo t2bv_20.lo t2bv_25.lo
+am__objects_13 = t3bv_4.lo t3bv_8.lo t3bv_16.lo t3bv_32.lo t3bv_5.lo \
+	t3bv_10.lo t3bv_20.lo t3bv_25.lo
+am__objects_14 = t1sv_2.lo t1sv_4.lo t1sv_8.lo t1sv_16.lo t1sv_32.lo
+am__objects_15 = t2sv_4.lo t2sv_8.lo t2sv_16.lo t2sv_32.lo
+am__objects_16 = q1fv_2.lo q1fv_4.lo q1fv_5.lo q1fv_8.lo
+am__objects_17 = q1bv_2.lo q1bv_4.lo q1bv_5.lo q1bv_8.lo
+am__objects_18 = $(am__objects_1) $(am__objects_2) $(am__objects_3) \
+	$(am__objects_4) $(am__objects_5) $(am__objects_6) \
+	$(am__objects_7) $(am__objects_8) $(am__objects_9) \
+	$(am__objects_10) $(am__objects_11) $(am__objects_12) \
+	$(am__objects_13) $(am__objects_14) $(am__objects_15) \
+	$(am__objects_16) $(am__objects_17)
+am__objects_19 = $(am__objects_18) genus.lo codlist.lo
+@HAVE_ARMSVE_TRUE@am__objects_20 = $(am__objects_19)
+@HAVE_ARMSVE_TRUE@am_libdft_armsve_codelets_la_OBJECTS =  \
+@HAVE_ARMSVE_TRUE@	$(am__objects_20)
+libdft_armsve_codelets_la_OBJECTS =  \
+	$(am_libdft_armsve_codelets_la_OBJECTS)
+AM_V_lt = $(am__v_lt_@AM_V@)
+am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
+am__v_lt_0 = --silent
+am__v_lt_1 = 
+@HAVE_ARMSVE_TRUE@am_libdft_armsve_codelets_la_rpath =
+AM_V_P = $(am__v_P_@AM_V@)
+am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
+am__v_P_0 = false
+am__v_P_1 = :
+AM_V_GEN = $(am__v_GEN_@AM_V@)
+am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
+am__v_GEN_0 = @echo "  GEN     " $@;
+am__v_GEN_1 = 
+AM_V_at = $(am__v_at_@AM_V@)
+am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
+am__v_at_0 = @
+am__v_at_1 = 
+DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
+depcomp = $(SHELL) $(top_srcdir)/depcomp
+am__depfiles_maybe = depfiles
+am__mv = mv -f
+COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
+	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
+LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
+	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
+	$(AM_CFLAGS) $(CFLAGS)
+AM_V_CC = $(am__v_CC_@AM_V@)
+am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
+am__v_CC_0 = @echo "  CC      " $@;
+am__v_CC_1 = 
+CCLD = $(CC)
+LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
+	$(AM_LDFLAGS) $(LDFLAGS) -o $@
+AM_V_CCLD = $(am__v_CCLD_@AM_V@)
+am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
+am__v_CCLD_0 = @echo "  CCLD    " $@;
+am__v_CCLD_1 = 
+SOURCES = $(libdft_armsve_codelets_la_SOURCES)
+DIST_SOURCES = $(am__libdft_armsve_codelets_la_SOURCES_DIST)
+am__can_run_installinfo = \
+  case $$AM_UPDATE_INFO_DIR in \
+    n|no|NO) false;; \
+    *) (install-info --version) >/dev/null 2>&1;; \
+  esac
+am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
+# Read a list of newline-separated strings from the standard input,
+# and print each of them once, without duplicates.  Input order is
+# *not* preserved.
+am__uniquify_input = $(AWK) '\
+  BEGIN { nonempty = 0; } \
+  { items[$$0] = 1; nonempty = 1; } \
+  END { if (nonempty) { for (i in items) print i; }; } \
+'
+# Make sure the list of sources is unique.  This is necessary because,
+# e.g., the same source file might be shared among _SOURCES variables
+# for different programs/libraries.
+am__define_uniq_tagged_files = \
+  list='$(am__tagged_files)'; \
+  unique=`for i in $$list; do \
+    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+  done | $(am__uniquify_input)`
+ETAGS = etags
+CTAGS = ctags
+am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
+	$(top_srcdir)/dft/simd/codlist.mk \
+	$(top_srcdir)/dft/simd/simd.mk
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+ALLOCA = @ALLOCA@
+ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
+AMTAR = @AMTAR@
+AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
+AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
+AS = @AS@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AVX2_CFLAGS = @AVX2_CFLAGS@
+AVX512_CFLAGS = @AVX512_CFLAGS@
+AVX_128_FMA_CFLAGS = @AVX_128_FMA_CFLAGS@
+AVX_CFLAGS = @AVX_CFLAGS@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CHECK_PL_OPTS = @CHECK_PL_OPTS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CYGPATH_W = @CYGPATH_W@
+C_FFTW_R2R_KIND = @C_FFTW_R2R_KIND@
+C_MPI_FINT = @C_MPI_FINT@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DLLTOOL = @DLLTOOL@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+F77 = @F77@
+FFLAGS = @FFLAGS@
+FGREP = @FGREP@
+FLIBS = @FLIBS@
+GREP = @GREP@
+INDENT = @INDENT@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+KCVI_CFLAGS = @KCVI_CFLAGS@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBQUADMATH = @LIBQUADMATH@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LTLIBOBJS = @LTLIBOBJS@
+LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
+MAINT = @MAINT@
+MAKEINFO = @MAKEINFO@
+MANIFEST_TOOL = @MANIFEST_TOOL@
+MKDIR_P = @MKDIR_P@
+MPICC = @MPICC@
+MPILIBS = @MPILIBS@
+MPIRUN = @MPIRUN@
+NEON_CFLAGS = @NEON_CFLAGS@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OCAMLBUILD = @OCAMLBUILD@
+OPENMP_CFLAGS = @OPENMP_CFLAGS@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+POW_LIB = @POW_LIB@
+PRECISION = @PRECISION@
+PREC_SUFFIX = @PREC_SUFFIX@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHARED_VERSION_INFO = @SHARED_VERSION_INFO@
+SHELL = @SHELL@
+SSE2_CFLAGS = @SSE2_CFLAGS@
+STACK_ALIGN_CFLAGS = @STACK_ALIGN_CFLAGS@
+STRIP = @STRIP@
+THREADLIBS = @THREADLIBS@
+VERSION = @VERSION@
+VSX_CFLAGS = @VSX_CFLAGS@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_AR = @ac_ct_AR@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+ac_ct_F77 = @ac_ct_F77@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+runstatedir = @runstatedir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AM_CFLAGS = $(ARMSVE_CFLAGS)
+SIMD_HEADER = simd-support/simd-armsve.h
+
+###########################################################################
+# n1fv_<n> is a hard-coded FFTW_FORWARD FFT of size <n>, using SIMD
+N1F = n1fv_2.c n1fv_3.c n1fv_4.c n1fv_5.c n1fv_6.c n1fv_7.c n1fv_8.c	\
+n1fv_9.c n1fv_10.c n1fv_11.c n1fv_12.c n1fv_13.c n1fv_14.c n1fv_15.c	\
+n1fv_16.c n1fv_32.c n1fv_64.c n1fv_128.c n1fv_20.c n1fv_25.c
+
+
+# as above, with restricted input vector stride
+N2F = n2fv_2.c n2fv_4.c n2fv_6.c n2fv_8.c n2fv_10.c n2fv_12.c	\
+n2fv_14.c n2fv_16.c n2fv_32.c n2fv_64.c n2fv_20.c
+
+
+# as above, but FFTW_BACKWARD
+N1B = n1bv_2.c n1bv_3.c n1bv_4.c n1bv_5.c n1bv_6.c n1bv_7.c n1bv_8.c	\
+n1bv_9.c n1bv_10.c n1bv_11.c n1bv_12.c n1bv_13.c n1bv_14.c n1bv_15.c	\
+n1bv_16.c n1bv_32.c n1bv_64.c n1bv_128.c n1bv_20.c n1bv_25.c
+
+N2B = n2bv_2.c n2bv_4.c n2bv_6.c n2bv_8.c n2bv_10.c n2bv_12.c	\
+n2bv_14.c n2bv_16.c n2bv_32.c n2bv_64.c n2bv_20.c
+
+
+# split-complex codelets 
+N2S = n2sv_4.c n2sv_8.c n2sv_16.c n2sv_32.c n2sv_64.c
+
+###########################################################################
+# t1fv_<r> is a "twiddle" FFT of size <r>, implementing a radix-r DIT step
+# for an FFTW_FORWARD transform, using SIMD
+T1F = t1fv_2.c t1fv_3.c t1fv_4.c t1fv_5.c t1fv_6.c t1fv_7.c t1fv_8.c	\
+t1fv_9.c t1fv_10.c t1fv_12.c t1fv_15.c t1fv_16.c t1fv_32.c t1fv_64.c	\
+t1fv_20.c t1fv_25.c
+
+
+# same as t1fv_*, but with different twiddle storage scheme
+T2F = t2fv_2.c t2fv_4.c t2fv_8.c t2fv_16.c t2fv_32.c t2fv_64.c	\
+t2fv_5.c t2fv_10.c t2fv_20.c t2fv_25.c
+
+T3F = t3fv_4.c t3fv_8.c t3fv_16.c t3fv_32.c t3fv_5.c t3fv_10.c	\
+t3fv_20.c t3fv_25.c
+
+T1FU = t1fuv_2.c t1fuv_3.c t1fuv_4.c t1fuv_5.c t1fuv_6.c t1fuv_7.c	\
+t1fuv_8.c t1fuv_9.c t1fuv_10.c
+
+
+# as above, but FFTW_BACKWARD
+T1B = t1bv_2.c t1bv_3.c t1bv_4.c t1bv_5.c t1bv_6.c t1bv_7.c t1bv_8.c	\
+t1bv_9.c t1bv_10.c t1bv_12.c t1bv_15.c t1bv_16.c t1bv_32.c t1bv_64.c	\
+t1bv_20.c t1bv_25.c
+
+
+# same as t1bv_*, but with different twiddle storage scheme
+T2B = t2bv_2.c t2bv_4.c t2bv_8.c t2bv_16.c t2bv_32.c t2bv_64.c	\
+t2bv_5.c t2bv_10.c t2bv_20.c t2bv_25.c
+
+T3B = t3bv_4.c t3bv_8.c t3bv_16.c t3bv_32.c t3bv_5.c t3bv_10.c	\
+t3bv_20.c t3bv_25.c
+
+T1BU = t1buv_2.c t1buv_3.c t1buv_4.c t1buv_5.c t1buv_6.c t1buv_7.c	\
+t1buv_8.c t1buv_9.c t1buv_10.c
+
+
+# split-complex codelets
+T1S = t1sv_2.c t1sv_4.c t1sv_8.c t1sv_16.c t1sv_32.c
+T2S = t2sv_4.c t2sv_8.c t2sv_16.c t2sv_32.c
+
+###########################################################################
+# q1fv_<r> is <r> twiddle FFTW_FORWARD FFTs of size <r> (DIF step),
+# where the output is transposed, using SIMD.  This is used for
+# in-place transposes in sizes that are divisible by <r>^2.  These
+# codelets have size ~ <r>^2, so you should probably not use <r>
+# bigger than 8 or so.
+Q1F = q1fv_2.c q1fv_4.c q1fv_5.c q1fv_8.c
+
+# as above, but FFTW_BACKWARD
+Q1B = q1bv_2.c q1bv_4.c q1bv_5.c q1bv_8.c
+
+###########################################################################
+SIMD_CODELETS = $(N1F) $(N1B) $(N2F) $(N2B) $(N2S) $(T1FU) $(T1F)	\
+$(T2F) $(T3F) $(T1BU) $(T1B) $(T2B) $(T3B) $(T1S) $(T2S) $(Q1F) $(Q1B)
+
+AM_CPPFLAGS = -I $(top_srcdir)
+EXTRA_DIST = $(SIMD_CODELETS) genus.c codlist.c
+@HAVE_ARMSVE_TRUE@BUILT_SOURCES = $(EXTRA_DIST)
+@HAVE_ARMSVE_TRUE@noinst_LTLIBRARIES = libdft_armsve_codelets.la
+@HAVE_ARMSVE_TRUE@libdft_armsve_codelets_la_SOURCES = $(BUILT_SOURCES)
+all: $(BUILT_SOURCES)
+	$(MAKE) $(AM_MAKEFLAGS) all-am
+
+.SUFFIXES:
+.SUFFIXES: .c .lo .o .obj
+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/dft/simd/codlist.mk $(top_srcdir)/dft/simd/simd.mk $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu dft/simd/armsve/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --gnu dft/simd/armsve/Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+$(top_srcdir)/dft/simd/codlist.mk $(top_srcdir)/dft/simd/simd.mk $(am__empty):
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+
+clean-noinstLTLIBRARIES:
+	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
+	@list='$(noinst_LTLIBRARIES)'; \
+	locs=`for p in $$list; do echo $$p; done | \
+	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
+	      sort -u`; \
+	test -z "$$locs" || { \
+	  echo rm -f $${locs}; \
+	  rm -f $${locs}; \
+	}
+
+libdft_armsve_codelets.la: $(libdft_armsve_codelets_la_OBJECTS) $(libdft_armsve_codelets_la_DEPENDENCIES) $(EXTRA_libdft_armsve_codelets_la_DEPENDENCIES) 
+	$(AM_V_CCLD)$(LINK) $(am_libdft_armsve_codelets_la_rpath) $(libdft_armsve_codelets_la_OBJECTS) $(libdft_armsve_codelets_la_LIBADD) $(LIBS)
+
+mostlyclean-compile:
+	-rm -f *.$(OBJEXT)
+
+distclean-compile:
+	-rm -f *.tab.c
+
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/codlist.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/genus.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_11.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_128.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_13.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_14.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_15.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_7.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1bv_9.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_11.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_128.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_13.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_14.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_15.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_7.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n1fv_9.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_14.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2bv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_14.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2fv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2sv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2sv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2sv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2sv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/n2sv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1bv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1bv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1bv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1bv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1fv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1fv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1fv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/q1fv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_7.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1buv_9.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_15.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_7.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1bv_9.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_7.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fuv_9.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_15.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_7.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1fv_9.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1sv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1sv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1sv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1sv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t1sv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2bv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2fv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2sv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2sv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2sv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t2sv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3bv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_25.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/t3fv_8.Plo@am__quote@
+
+.c.o:
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<
+
+.c.obj:
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
+
+.c.lo:
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+
+ID: $(am__tagged_files)
+	$(am__define_uniq_tagged_files); mkid -fID $$unique
+tags: tags-am
+TAGS: tags
+
+tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
+	set x; \
+	here=`pwd`; \
+	$(am__define_uniq_tagged_files); \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: ctags-am
+
+CTAGS: ctags
+ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
+	$(am__define_uniq_tagged_files); \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+cscopelist: cscopelist-am
+
+cscopelist-am: $(am__tagged_files)
+	list='$(am__tagged_files)'; \
+	case "$(srcdir)" in \
+	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
+	  *) sdir=$(subdir)/$(srcdir) ;; \
+	esac; \
+	for i in $$list; do \
+	  if test -f "$$i"; then \
+	    echo "$(subdir)/$$i"; \
+	  else \
+	    echo "$$sdir/$$i"; \
+	  fi; \
+	done >> $(top_builddir)/cscope.files
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: $(BUILT_SOURCES)
+	$(MAKE) $(AM_MAKEFLAGS) check-am
+all-am: Makefile $(LTLIBRARIES)
+installdirs:
+install: $(BUILT_SOURCES)
+	$(MAKE) $(AM_MAKEFLAGS) install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	if test -z '$(STRIP)'; then \
+	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	      install; \
+	else \
+	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
+	fi
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
+clean: clean-am
+
+clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
+	mostlyclean-am
+
+distclean: distclean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+distclean-am: clean-am distclean-compile distclean-generic \
+	distclean-tags
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am:
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am:
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am:
+
+.MAKE: all check install install-am install-strip
+
+.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
+	clean-libtool clean-noinstLTLIBRARIES cscopelist-am ctags \
+	ctags-am distclean distclean-compile distclean-generic \
+	distclean-libtool distclean-tags distdir dvi dvi-am html \
+	html-am info info-am install install-am install-data \
+	install-data-am install-dvi install-dvi-am install-exec \
+	install-exec-am install-html install-html-am install-info \
+	install-info-am install-man install-pdf install-pdf-am \
+	install-ps install-ps-am install-strip installcheck \
+	installcheck-am installdirs maintainer-clean \
+	maintainer-clean-generic mostlyclean mostlyclean-compile \
+	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
+	tags tags-am uninstall uninstall-am
+
+.PRECIOUS: Makefile
+
+
+@MAINTAINER_MODE_TRUE@$(EXTRA_DIST): Makefile
+@MAINTAINER_MODE_TRUE@	(							\
+@MAINTAINER_MODE_TRUE@	echo "/* Generated automatically.  DO NOT EDIT! */";	\
+@MAINTAINER_MODE_TRUE@	echo "#define SIMD_HEADER \"$(SIMD_HEADER)\"";		\
+@MAINTAINER_MODE_TRUE@	echo "#include \"../common/"$*".c\"";			\
+@MAINTAINER_MODE_TRUE@	) >$@
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/dft/simd/armsve/codlist.c b/dft/simd/armsve/codlist.c
new file mode 100644
index 0000000..e9619b7
--- /dev/null
+++ b/dft/simd/armsve/codlist.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/codlist.c"
diff --git a/dft/simd/armsve/genus.c b/dft/simd/armsve/genus.c
new file mode 100644
index 0000000..c966f81
--- /dev/null
+++ b/dft/simd/armsve/genus.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/genus.c"
diff --git a/dft/simd/armsve/n1bv_10.c b/dft/simd/armsve/n1bv_10.c
new file mode 100644
index 0000000..ea7444c
--- /dev/null
+++ b/dft/simd/armsve/n1bv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_10.c"
diff --git a/dft/simd/armsve/n1bv_11.c b/dft/simd/armsve/n1bv_11.c
new file mode 100644
index 0000000..02b7e0c
--- /dev/null
+++ b/dft/simd/armsve/n1bv_11.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_11.c"
diff --git a/dft/simd/armsve/n1bv_12.c b/dft/simd/armsve/n1bv_12.c
new file mode 100644
index 0000000..0236a17
--- /dev/null
+++ b/dft/simd/armsve/n1bv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_12.c"
diff --git a/dft/simd/armsve/n1bv_128.c b/dft/simd/armsve/n1bv_128.c
new file mode 100644
index 0000000..e54abe7
--- /dev/null
+++ b/dft/simd/armsve/n1bv_128.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_128.c"
diff --git a/dft/simd/armsve/n1bv_13.c b/dft/simd/armsve/n1bv_13.c
new file mode 100644
index 0000000..26c10fc
--- /dev/null
+++ b/dft/simd/armsve/n1bv_13.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_13.c"
diff --git a/dft/simd/armsve/n1bv_14.c b/dft/simd/armsve/n1bv_14.c
new file mode 100644
index 0000000..c412c82
--- /dev/null
+++ b/dft/simd/armsve/n1bv_14.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_14.c"
diff --git a/dft/simd/armsve/n1bv_15.c b/dft/simd/armsve/n1bv_15.c
new file mode 100644
index 0000000..849188b
--- /dev/null
+++ b/dft/simd/armsve/n1bv_15.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_15.c"
diff --git a/dft/simd/armsve/n1bv_16.c b/dft/simd/armsve/n1bv_16.c
new file mode 100644
index 0000000..2bd13c1
--- /dev/null
+++ b/dft/simd/armsve/n1bv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_16.c"
diff --git a/dft/simd/armsve/n1bv_2.c b/dft/simd/armsve/n1bv_2.c
new file mode 100644
index 0000000..1f25f97
--- /dev/null
+++ b/dft/simd/armsve/n1bv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_2.c"
diff --git a/dft/simd/armsve/n1bv_20.c b/dft/simd/armsve/n1bv_20.c
new file mode 100644
index 0000000..fc083d5
--- /dev/null
+++ b/dft/simd/armsve/n1bv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_20.c"
diff --git a/dft/simd/armsve/n1bv_25.c b/dft/simd/armsve/n1bv_25.c
new file mode 100644
index 0000000..c4ed2a5
--- /dev/null
+++ b/dft/simd/armsve/n1bv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_25.c"
diff --git a/dft/simd/armsve/n1bv_3.c b/dft/simd/armsve/n1bv_3.c
new file mode 100644
index 0000000..aec2bf0
--- /dev/null
+++ b/dft/simd/armsve/n1bv_3.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_3.c"
diff --git a/dft/simd/armsve/n1bv_32.c b/dft/simd/armsve/n1bv_32.c
new file mode 100644
index 0000000..70978e4
--- /dev/null
+++ b/dft/simd/armsve/n1bv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_32.c"
diff --git a/dft/simd/armsve/n1bv_4.c b/dft/simd/armsve/n1bv_4.c
new file mode 100644
index 0000000..c5b83e9
--- /dev/null
+++ b/dft/simd/armsve/n1bv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_4.c"
diff --git a/dft/simd/armsve/n1bv_5.c b/dft/simd/armsve/n1bv_5.c
new file mode 100644
index 0000000..1feed2e
--- /dev/null
+++ b/dft/simd/armsve/n1bv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_5.c"
diff --git a/dft/simd/armsve/n1bv_6.c b/dft/simd/armsve/n1bv_6.c
new file mode 100644
index 0000000..cabb741
--- /dev/null
+++ b/dft/simd/armsve/n1bv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_6.c"
diff --git a/dft/simd/armsve/n1bv_64.c b/dft/simd/armsve/n1bv_64.c
new file mode 100644
index 0000000..21d2805
--- /dev/null
+++ b/dft/simd/armsve/n1bv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_64.c"
diff --git a/dft/simd/armsve/n1bv_7.c b/dft/simd/armsve/n1bv_7.c
new file mode 100644
index 0000000..e7c0f93
--- /dev/null
+++ b/dft/simd/armsve/n1bv_7.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_7.c"
diff --git a/dft/simd/armsve/n1bv_8.c b/dft/simd/armsve/n1bv_8.c
new file mode 100644
index 0000000..de19b91
--- /dev/null
+++ b/dft/simd/armsve/n1bv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_8.c"
diff --git a/dft/simd/armsve/n1bv_9.c b/dft/simd/armsve/n1bv_9.c
new file mode 100644
index 0000000..03ec615
--- /dev/null
+++ b/dft/simd/armsve/n1bv_9.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1bv_9.c"
diff --git a/dft/simd/armsve/n1fv_10.c b/dft/simd/armsve/n1fv_10.c
new file mode 100644
index 0000000..53ef63b
--- /dev/null
+++ b/dft/simd/armsve/n1fv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_10.c"
diff --git a/dft/simd/armsve/n1fv_11.c b/dft/simd/armsve/n1fv_11.c
new file mode 100644
index 0000000..ac016e1
--- /dev/null
+++ b/dft/simd/armsve/n1fv_11.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_11.c"
diff --git a/dft/simd/armsve/n1fv_12.c b/dft/simd/armsve/n1fv_12.c
new file mode 100644
index 0000000..c8a53d9
--- /dev/null
+++ b/dft/simd/armsve/n1fv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_12.c"
diff --git a/dft/simd/armsve/n1fv_128.c b/dft/simd/armsve/n1fv_128.c
new file mode 100644
index 0000000..151eedc
--- /dev/null
+++ b/dft/simd/armsve/n1fv_128.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_128.c"
diff --git a/dft/simd/armsve/n1fv_13.c b/dft/simd/armsve/n1fv_13.c
new file mode 100644
index 0000000..0c1997a
--- /dev/null
+++ b/dft/simd/armsve/n1fv_13.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_13.c"
diff --git a/dft/simd/armsve/n1fv_14.c b/dft/simd/armsve/n1fv_14.c
new file mode 100644
index 0000000..163acf5
--- /dev/null
+++ b/dft/simd/armsve/n1fv_14.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_14.c"
diff --git a/dft/simd/armsve/n1fv_15.c b/dft/simd/armsve/n1fv_15.c
new file mode 100644
index 0000000..c50bb17
--- /dev/null
+++ b/dft/simd/armsve/n1fv_15.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_15.c"
diff --git a/dft/simd/armsve/n1fv_16.c b/dft/simd/armsve/n1fv_16.c
new file mode 100644
index 0000000..087795e
--- /dev/null
+++ b/dft/simd/armsve/n1fv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_16.c"
diff --git a/dft/simd/armsve/n1fv_2.c b/dft/simd/armsve/n1fv_2.c
new file mode 100644
index 0000000..cb8fdcc
--- /dev/null
+++ b/dft/simd/armsve/n1fv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_2.c"
diff --git a/dft/simd/armsve/n1fv_20.c b/dft/simd/armsve/n1fv_20.c
new file mode 100644
index 0000000..779170d
--- /dev/null
+++ b/dft/simd/armsve/n1fv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_20.c"
diff --git a/dft/simd/armsve/n1fv_25.c b/dft/simd/armsve/n1fv_25.c
new file mode 100644
index 0000000..4b8c865
--- /dev/null
+++ b/dft/simd/armsve/n1fv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_25.c"
diff --git a/dft/simd/armsve/n1fv_3.c b/dft/simd/armsve/n1fv_3.c
new file mode 100644
index 0000000..a7c86b1
--- /dev/null
+++ b/dft/simd/armsve/n1fv_3.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_3.c"
diff --git a/dft/simd/armsve/n1fv_32.c b/dft/simd/armsve/n1fv_32.c
new file mode 100644
index 0000000..5db77ce
--- /dev/null
+++ b/dft/simd/armsve/n1fv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_32.c"
diff --git a/dft/simd/armsve/n1fv_4.c b/dft/simd/armsve/n1fv_4.c
new file mode 100644
index 0000000..f1ca2b4
--- /dev/null
+++ b/dft/simd/armsve/n1fv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_4.c"
diff --git a/dft/simd/armsve/n1fv_5.c b/dft/simd/armsve/n1fv_5.c
new file mode 100644
index 0000000..a7c3fa7
--- /dev/null
+++ b/dft/simd/armsve/n1fv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_5.c"
diff --git a/dft/simd/armsve/n1fv_6.c b/dft/simd/armsve/n1fv_6.c
new file mode 100644
index 0000000..a244491
--- /dev/null
+++ b/dft/simd/armsve/n1fv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_6.c"
diff --git a/dft/simd/armsve/n1fv_64.c b/dft/simd/armsve/n1fv_64.c
new file mode 100644
index 0000000..8b2f1ae
--- /dev/null
+++ b/dft/simd/armsve/n1fv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_64.c"
diff --git a/dft/simd/armsve/n1fv_7.c b/dft/simd/armsve/n1fv_7.c
new file mode 100644
index 0000000..9d4a424
--- /dev/null
+++ b/dft/simd/armsve/n1fv_7.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_7.c"
diff --git a/dft/simd/armsve/n1fv_8.c b/dft/simd/armsve/n1fv_8.c
new file mode 100644
index 0000000..7687dfe
--- /dev/null
+++ b/dft/simd/armsve/n1fv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_8.c"
diff --git a/dft/simd/armsve/n1fv_9.c b/dft/simd/armsve/n1fv_9.c
new file mode 100644
index 0000000..c81ea5e
--- /dev/null
+++ b/dft/simd/armsve/n1fv_9.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n1fv_9.c"
diff --git a/dft/simd/armsve/n2bv_10.c b/dft/simd/armsve/n2bv_10.c
new file mode 100644
index 0000000..3e01c53
--- /dev/null
+++ b/dft/simd/armsve/n2bv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_10.c"
diff --git a/dft/simd/armsve/n2bv_12.c b/dft/simd/armsve/n2bv_12.c
new file mode 100644
index 0000000..3749217
--- /dev/null
+++ b/dft/simd/armsve/n2bv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_12.c"
diff --git a/dft/simd/armsve/n2bv_14.c b/dft/simd/armsve/n2bv_14.c
new file mode 100644
index 0000000..544cb5c
--- /dev/null
+++ b/dft/simd/armsve/n2bv_14.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_14.c"
diff --git a/dft/simd/armsve/n2bv_16.c b/dft/simd/armsve/n2bv_16.c
new file mode 100644
index 0000000..9b13d26
--- /dev/null
+++ b/dft/simd/armsve/n2bv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_16.c"
diff --git a/dft/simd/armsve/n2bv_2.c b/dft/simd/armsve/n2bv_2.c
new file mode 100644
index 0000000..b97c13e
--- /dev/null
+++ b/dft/simd/armsve/n2bv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_2.c"
diff --git a/dft/simd/armsve/n2bv_20.c b/dft/simd/armsve/n2bv_20.c
new file mode 100644
index 0000000..e84ba70
--- /dev/null
+++ b/dft/simd/armsve/n2bv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_20.c"
diff --git a/dft/simd/armsve/n2bv_32.c b/dft/simd/armsve/n2bv_32.c
new file mode 100644
index 0000000..d862e7a
--- /dev/null
+++ b/dft/simd/armsve/n2bv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_32.c"
diff --git a/dft/simd/armsve/n2bv_4.c b/dft/simd/armsve/n2bv_4.c
new file mode 100644
index 0000000..6df7a7c
--- /dev/null
+++ b/dft/simd/armsve/n2bv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_4.c"
diff --git a/dft/simd/armsve/n2bv_6.c b/dft/simd/armsve/n2bv_6.c
new file mode 100644
index 0000000..d210ee5
--- /dev/null
+++ b/dft/simd/armsve/n2bv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_6.c"
diff --git a/dft/simd/armsve/n2bv_64.c b/dft/simd/armsve/n2bv_64.c
new file mode 100644
index 0000000..9379a71
--- /dev/null
+++ b/dft/simd/armsve/n2bv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_64.c"
diff --git a/dft/simd/armsve/n2bv_8.c b/dft/simd/armsve/n2bv_8.c
new file mode 100644
index 0000000..e6bef3d
--- /dev/null
+++ b/dft/simd/armsve/n2bv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2bv_8.c"
diff --git a/dft/simd/armsve/n2fv_10.c b/dft/simd/armsve/n2fv_10.c
new file mode 100644
index 0000000..f832225
--- /dev/null
+++ b/dft/simd/armsve/n2fv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_10.c"
diff --git a/dft/simd/armsve/n2fv_12.c b/dft/simd/armsve/n2fv_12.c
new file mode 100644
index 0000000..903e217
--- /dev/null
+++ b/dft/simd/armsve/n2fv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_12.c"
diff --git a/dft/simd/armsve/n2fv_14.c b/dft/simd/armsve/n2fv_14.c
new file mode 100644
index 0000000..29ada84
--- /dev/null
+++ b/dft/simd/armsve/n2fv_14.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_14.c"
diff --git a/dft/simd/armsve/n2fv_16.c b/dft/simd/armsve/n2fv_16.c
new file mode 100644
index 0000000..f8cfcac
--- /dev/null
+++ b/dft/simd/armsve/n2fv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_16.c"
diff --git a/dft/simd/armsve/n2fv_2.c b/dft/simd/armsve/n2fv_2.c
new file mode 100644
index 0000000..c9721fc
--- /dev/null
+++ b/dft/simd/armsve/n2fv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_2.c"
diff --git a/dft/simd/armsve/n2fv_20.c b/dft/simd/armsve/n2fv_20.c
new file mode 100644
index 0000000..c63f755
--- /dev/null
+++ b/dft/simd/armsve/n2fv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_20.c"
diff --git a/dft/simd/armsve/n2fv_32.c b/dft/simd/armsve/n2fv_32.c
new file mode 100644
index 0000000..2c99bc3
--- /dev/null
+++ b/dft/simd/armsve/n2fv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_32.c"
diff --git a/dft/simd/armsve/n2fv_4.c b/dft/simd/armsve/n2fv_4.c
new file mode 100644
index 0000000..2b408a8
--- /dev/null
+++ b/dft/simd/armsve/n2fv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_4.c"
diff --git a/dft/simd/armsve/n2fv_6.c b/dft/simd/armsve/n2fv_6.c
new file mode 100644
index 0000000..4d924e5
--- /dev/null
+++ b/dft/simd/armsve/n2fv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_6.c"
diff --git a/dft/simd/armsve/n2fv_64.c b/dft/simd/armsve/n2fv_64.c
new file mode 100644
index 0000000..f07e517
--- /dev/null
+++ b/dft/simd/armsve/n2fv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_64.c"
diff --git a/dft/simd/armsve/n2fv_8.c b/dft/simd/armsve/n2fv_8.c
new file mode 100644
index 0000000..d89c087
--- /dev/null
+++ b/dft/simd/armsve/n2fv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2fv_8.c"
diff --git a/dft/simd/armsve/n2sv_16.c b/dft/simd/armsve/n2sv_16.c
new file mode 100644
index 0000000..fb2ff23
--- /dev/null
+++ b/dft/simd/armsve/n2sv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2sv_16.c"
diff --git a/dft/simd/armsve/n2sv_32.c b/dft/simd/armsve/n2sv_32.c
new file mode 100644
index 0000000..1dd6ab4
--- /dev/null
+++ b/dft/simd/armsve/n2sv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2sv_32.c"
diff --git a/dft/simd/armsve/n2sv_4.c b/dft/simd/armsve/n2sv_4.c
new file mode 100644
index 0000000..62c4cce
--- /dev/null
+++ b/dft/simd/armsve/n2sv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2sv_4.c"
diff --git a/dft/simd/armsve/n2sv_64.c b/dft/simd/armsve/n2sv_64.c
new file mode 100644
index 0000000..f250c2a
--- /dev/null
+++ b/dft/simd/armsve/n2sv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2sv_64.c"
diff --git a/dft/simd/armsve/n2sv_8.c b/dft/simd/armsve/n2sv_8.c
new file mode 100644
index 0000000..d55b4c6
--- /dev/null
+++ b/dft/simd/armsve/n2sv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/n2sv_8.c"
diff --git a/dft/simd/armsve/q1bv_2.c b/dft/simd/armsve/q1bv_2.c
new file mode 100644
index 0000000..d03c13c
--- /dev/null
+++ b/dft/simd/armsve/q1bv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1bv_2.c"
diff --git a/dft/simd/armsve/q1bv_4.c b/dft/simd/armsve/q1bv_4.c
new file mode 100644
index 0000000..8b6cf06
--- /dev/null
+++ b/dft/simd/armsve/q1bv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1bv_4.c"
diff --git a/dft/simd/armsve/q1bv_5.c b/dft/simd/armsve/q1bv_5.c
new file mode 100644
index 0000000..d47e4cd
--- /dev/null
+++ b/dft/simd/armsve/q1bv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1bv_5.c"
diff --git a/dft/simd/armsve/q1bv_8.c b/dft/simd/armsve/q1bv_8.c
new file mode 100644
index 0000000..df9a71b
--- /dev/null
+++ b/dft/simd/armsve/q1bv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1bv_8.c"
diff --git a/dft/simd/armsve/q1fv_2.c b/dft/simd/armsve/q1fv_2.c
new file mode 100644
index 0000000..7570134
--- /dev/null
+++ b/dft/simd/armsve/q1fv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1fv_2.c"
diff --git a/dft/simd/armsve/q1fv_4.c b/dft/simd/armsve/q1fv_4.c
new file mode 100644
index 0000000..4c64cd3
--- /dev/null
+++ b/dft/simd/armsve/q1fv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1fv_4.c"
diff --git a/dft/simd/armsve/q1fv_5.c b/dft/simd/armsve/q1fv_5.c
new file mode 100644
index 0000000..7e738d1
--- /dev/null
+++ b/dft/simd/armsve/q1fv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1fv_5.c"
diff --git a/dft/simd/armsve/q1fv_8.c b/dft/simd/armsve/q1fv_8.c
new file mode 100644
index 0000000..7d01b6f
--- /dev/null
+++ b/dft/simd/armsve/q1fv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/q1fv_8.c"
diff --git a/dft/simd/armsve/t1buv_10.c b/dft/simd/armsve/t1buv_10.c
new file mode 100644
index 0000000..c68f25f
--- /dev/null
+++ b/dft/simd/armsve/t1buv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_10.c"
diff --git a/dft/simd/armsve/t1buv_2.c b/dft/simd/armsve/t1buv_2.c
new file mode 100644
index 0000000..ad932eb
--- /dev/null
+++ b/dft/simd/armsve/t1buv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_2.c"
diff --git a/dft/simd/armsve/t1buv_3.c b/dft/simd/armsve/t1buv_3.c
new file mode 100644
index 0000000..541b4c4
--- /dev/null
+++ b/dft/simd/armsve/t1buv_3.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_3.c"
diff --git a/dft/simd/armsve/t1buv_4.c b/dft/simd/armsve/t1buv_4.c
new file mode 100644
index 0000000..12b91f3
--- /dev/null
+++ b/dft/simd/armsve/t1buv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_4.c"
diff --git a/dft/simd/armsve/t1buv_5.c b/dft/simd/armsve/t1buv_5.c
new file mode 100644
index 0000000..d03e57a
--- /dev/null
+++ b/dft/simd/armsve/t1buv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_5.c"
diff --git a/dft/simd/armsve/t1buv_6.c b/dft/simd/armsve/t1buv_6.c
new file mode 100644
index 0000000..d5d9e97
--- /dev/null
+++ b/dft/simd/armsve/t1buv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_6.c"
diff --git a/dft/simd/armsve/t1buv_7.c b/dft/simd/armsve/t1buv_7.c
new file mode 100644
index 0000000..e80852b
--- /dev/null
+++ b/dft/simd/armsve/t1buv_7.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_7.c"
diff --git a/dft/simd/armsve/t1buv_8.c b/dft/simd/armsve/t1buv_8.c
new file mode 100644
index 0000000..467891e
--- /dev/null
+++ b/dft/simd/armsve/t1buv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_8.c"
diff --git a/dft/simd/armsve/t1buv_9.c b/dft/simd/armsve/t1buv_9.c
new file mode 100644
index 0000000..d79d1db
--- /dev/null
+++ b/dft/simd/armsve/t1buv_9.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1buv_9.c"
diff --git a/dft/simd/armsve/t1bv_10.c b/dft/simd/armsve/t1bv_10.c
new file mode 100644
index 0000000..da426f6
--- /dev/null
+++ b/dft/simd/armsve/t1bv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_10.c"
diff --git a/dft/simd/armsve/t1bv_12.c b/dft/simd/armsve/t1bv_12.c
new file mode 100644
index 0000000..5b4befd
--- /dev/null
+++ b/dft/simd/armsve/t1bv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_12.c"
diff --git a/dft/simd/armsve/t1bv_15.c b/dft/simd/armsve/t1bv_15.c
new file mode 100644
index 0000000..d316d7a
--- /dev/null
+++ b/dft/simd/armsve/t1bv_15.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_15.c"
diff --git a/dft/simd/armsve/t1bv_16.c b/dft/simd/armsve/t1bv_16.c
new file mode 100644
index 0000000..3e14fd0
--- /dev/null
+++ b/dft/simd/armsve/t1bv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_16.c"
diff --git a/dft/simd/armsve/t1bv_2.c b/dft/simd/armsve/t1bv_2.c
new file mode 100644
index 0000000..7318873
--- /dev/null
+++ b/dft/simd/armsve/t1bv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_2.c"
diff --git a/dft/simd/armsve/t1bv_20.c b/dft/simd/armsve/t1bv_20.c
new file mode 100644
index 0000000..47a240a
--- /dev/null
+++ b/dft/simd/armsve/t1bv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_20.c"
diff --git a/dft/simd/armsve/t1bv_25.c b/dft/simd/armsve/t1bv_25.c
new file mode 100644
index 0000000..307543f
--- /dev/null
+++ b/dft/simd/armsve/t1bv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_25.c"
diff --git a/dft/simd/armsve/t1bv_3.c b/dft/simd/armsve/t1bv_3.c
new file mode 100644
index 0000000..dd28d97
--- /dev/null
+++ b/dft/simd/armsve/t1bv_3.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_3.c"
diff --git a/dft/simd/armsve/t1bv_32.c b/dft/simd/armsve/t1bv_32.c
new file mode 100644
index 0000000..deaf709
--- /dev/null
+++ b/dft/simd/armsve/t1bv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_32.c"
diff --git a/dft/simd/armsve/t1bv_4.c b/dft/simd/armsve/t1bv_4.c
new file mode 100644
index 0000000..2021b3d
--- /dev/null
+++ b/dft/simd/armsve/t1bv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_4.c"
diff --git a/dft/simd/armsve/t1bv_5.c b/dft/simd/armsve/t1bv_5.c
new file mode 100644
index 0000000..2c135f1
--- /dev/null
+++ b/dft/simd/armsve/t1bv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_5.c"
diff --git a/dft/simd/armsve/t1bv_6.c b/dft/simd/armsve/t1bv_6.c
new file mode 100644
index 0000000..3f837e9
--- /dev/null
+++ b/dft/simd/armsve/t1bv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_6.c"
diff --git a/dft/simd/armsve/t1bv_64.c b/dft/simd/armsve/t1bv_64.c
new file mode 100644
index 0000000..cb9d1b5
--- /dev/null
+++ b/dft/simd/armsve/t1bv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_64.c"
diff --git a/dft/simd/armsve/t1bv_7.c b/dft/simd/armsve/t1bv_7.c
new file mode 100644
index 0000000..7e8958e
--- /dev/null
+++ b/dft/simd/armsve/t1bv_7.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_7.c"
diff --git a/dft/simd/armsve/t1bv_8.c b/dft/simd/armsve/t1bv_8.c
new file mode 100644
index 0000000..75f6392
--- /dev/null
+++ b/dft/simd/armsve/t1bv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_8.c"
diff --git a/dft/simd/armsve/t1bv_9.c b/dft/simd/armsve/t1bv_9.c
new file mode 100644
index 0000000..54b757b
--- /dev/null
+++ b/dft/simd/armsve/t1bv_9.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1bv_9.c"
diff --git a/dft/simd/armsve/t1fuv_10.c b/dft/simd/armsve/t1fuv_10.c
new file mode 100644
index 0000000..08bec08
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_10.c"
diff --git a/dft/simd/armsve/t1fuv_2.c b/dft/simd/armsve/t1fuv_2.c
new file mode 100644
index 0000000..15c58df
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_2.c"
diff --git a/dft/simd/armsve/t1fuv_3.c b/dft/simd/armsve/t1fuv_3.c
new file mode 100644
index 0000000..ae10c31
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_3.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_3.c"
diff --git a/dft/simd/armsve/t1fuv_4.c b/dft/simd/armsve/t1fuv_4.c
new file mode 100644
index 0000000..605322f
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_4.c"
diff --git a/dft/simd/armsve/t1fuv_5.c b/dft/simd/armsve/t1fuv_5.c
new file mode 100644
index 0000000..29f1f0c
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_5.c"
diff --git a/dft/simd/armsve/t1fuv_6.c b/dft/simd/armsve/t1fuv_6.c
new file mode 100644
index 0000000..b8aaee9
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_6.c"
diff --git a/dft/simd/armsve/t1fuv_7.c b/dft/simd/armsve/t1fuv_7.c
new file mode 100644
index 0000000..8b3f718
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_7.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_7.c"
diff --git a/dft/simd/armsve/t1fuv_8.c b/dft/simd/armsve/t1fuv_8.c
new file mode 100644
index 0000000..f27d383
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_8.c"
diff --git a/dft/simd/armsve/t1fuv_9.c b/dft/simd/armsve/t1fuv_9.c
new file mode 100644
index 0000000..acb0642
--- /dev/null
+++ b/dft/simd/armsve/t1fuv_9.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fuv_9.c"
diff --git a/dft/simd/armsve/t1fv_10.c b/dft/simd/armsve/t1fv_10.c
new file mode 100644
index 0000000..8526862
--- /dev/null
+++ b/dft/simd/armsve/t1fv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_10.c"
diff --git a/dft/simd/armsve/t1fv_12.c b/dft/simd/armsve/t1fv_12.c
new file mode 100644
index 0000000..0df6726
--- /dev/null
+++ b/dft/simd/armsve/t1fv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_12.c"
diff --git a/dft/simd/armsve/t1fv_15.c b/dft/simd/armsve/t1fv_15.c
new file mode 100644
index 0000000..267428c
--- /dev/null
+++ b/dft/simd/armsve/t1fv_15.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_15.c"
diff --git a/dft/simd/armsve/t1fv_16.c b/dft/simd/armsve/t1fv_16.c
new file mode 100644
index 0000000..53e668e
--- /dev/null
+++ b/dft/simd/armsve/t1fv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_16.c"
diff --git a/dft/simd/armsve/t1fv_2.c b/dft/simd/armsve/t1fv_2.c
new file mode 100644
index 0000000..3a717db
--- /dev/null
+++ b/dft/simd/armsve/t1fv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_2.c"
diff --git a/dft/simd/armsve/t1fv_20.c b/dft/simd/armsve/t1fv_20.c
new file mode 100644
index 0000000..f16eb66
--- /dev/null
+++ b/dft/simd/armsve/t1fv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_20.c"
diff --git a/dft/simd/armsve/t1fv_25.c b/dft/simd/armsve/t1fv_25.c
new file mode 100644
index 0000000..423ba72
--- /dev/null
+++ b/dft/simd/armsve/t1fv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_25.c"
diff --git a/dft/simd/armsve/t1fv_3.c b/dft/simd/armsve/t1fv_3.c
new file mode 100644
index 0000000..3503eb1
--- /dev/null
+++ b/dft/simd/armsve/t1fv_3.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_3.c"
diff --git a/dft/simd/armsve/t1fv_32.c b/dft/simd/armsve/t1fv_32.c
new file mode 100644
index 0000000..08a6db6
--- /dev/null
+++ b/dft/simd/armsve/t1fv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_32.c"
diff --git a/dft/simd/armsve/t1fv_4.c b/dft/simd/armsve/t1fv_4.c
new file mode 100644
index 0000000..59b6451
--- /dev/null
+++ b/dft/simd/armsve/t1fv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_4.c"
diff --git a/dft/simd/armsve/t1fv_5.c b/dft/simd/armsve/t1fv_5.c
new file mode 100644
index 0000000..0996f41
--- /dev/null
+++ b/dft/simd/armsve/t1fv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_5.c"
diff --git a/dft/simd/armsve/t1fv_6.c b/dft/simd/armsve/t1fv_6.c
new file mode 100644
index 0000000..4a75344
--- /dev/null
+++ b/dft/simd/armsve/t1fv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_6.c"
diff --git a/dft/simd/armsve/t1fv_64.c b/dft/simd/armsve/t1fv_64.c
new file mode 100644
index 0000000..a5c963c
--- /dev/null
+++ b/dft/simd/armsve/t1fv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_64.c"
diff --git a/dft/simd/armsve/t1fv_7.c b/dft/simd/armsve/t1fv_7.c
new file mode 100644
index 0000000..58214ee
--- /dev/null
+++ b/dft/simd/armsve/t1fv_7.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_7.c"
diff --git a/dft/simd/armsve/t1fv_8.c b/dft/simd/armsve/t1fv_8.c
new file mode 100644
index 0000000..f8ca2b7
--- /dev/null
+++ b/dft/simd/armsve/t1fv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_8.c"
diff --git a/dft/simd/armsve/t1fv_9.c b/dft/simd/armsve/t1fv_9.c
new file mode 100644
index 0000000..0d5b395
--- /dev/null
+++ b/dft/simd/armsve/t1fv_9.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1fv_9.c"
diff --git a/dft/simd/armsve/t1sv_16.c b/dft/simd/armsve/t1sv_16.c
new file mode 100644
index 0000000..0336de7
--- /dev/null
+++ b/dft/simd/armsve/t1sv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1sv_16.c"
diff --git a/dft/simd/armsve/t1sv_2.c b/dft/simd/armsve/t1sv_2.c
new file mode 100644
index 0000000..93ae18e
--- /dev/null
+++ b/dft/simd/armsve/t1sv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1sv_2.c"
diff --git a/dft/simd/armsve/t1sv_32.c b/dft/simd/armsve/t1sv_32.c
new file mode 100644
index 0000000..1f22164
--- /dev/null
+++ b/dft/simd/armsve/t1sv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1sv_32.c"
diff --git a/dft/simd/armsve/t1sv_4.c b/dft/simd/armsve/t1sv_4.c
new file mode 100644
index 0000000..46b0ba3
--- /dev/null
+++ b/dft/simd/armsve/t1sv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1sv_4.c"
diff --git a/dft/simd/armsve/t1sv_8.c b/dft/simd/armsve/t1sv_8.c
new file mode 100644
index 0000000..f4fda13
--- /dev/null
+++ b/dft/simd/armsve/t1sv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t1sv_8.c"
diff --git a/dft/simd/armsve/t2bv_10.c b/dft/simd/armsve/t2bv_10.c
new file mode 100644
index 0000000..8d0011b
--- /dev/null
+++ b/dft/simd/armsve/t2bv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_10.c"
diff --git a/dft/simd/armsve/t2bv_16.c b/dft/simd/armsve/t2bv_16.c
new file mode 100644
index 0000000..0101b4c
--- /dev/null
+++ b/dft/simd/armsve/t2bv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_16.c"
diff --git a/dft/simd/armsve/t2bv_2.c b/dft/simd/armsve/t2bv_2.c
new file mode 100644
index 0000000..82e3243
--- /dev/null
+++ b/dft/simd/armsve/t2bv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_2.c"
diff --git a/dft/simd/armsve/t2bv_20.c b/dft/simd/armsve/t2bv_20.c
new file mode 100644
index 0000000..405c745
--- /dev/null
+++ b/dft/simd/armsve/t2bv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_20.c"
diff --git a/dft/simd/armsve/t2bv_25.c b/dft/simd/armsve/t2bv_25.c
new file mode 100644
index 0000000..a908693
--- /dev/null
+++ b/dft/simd/armsve/t2bv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_25.c"
diff --git a/dft/simd/armsve/t2bv_32.c b/dft/simd/armsve/t2bv_32.c
new file mode 100644
index 0000000..ad1925a
--- /dev/null
+++ b/dft/simd/armsve/t2bv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_32.c"
diff --git a/dft/simd/armsve/t2bv_4.c b/dft/simd/armsve/t2bv_4.c
new file mode 100644
index 0000000..77a675c
--- /dev/null
+++ b/dft/simd/armsve/t2bv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_4.c"
diff --git a/dft/simd/armsve/t2bv_5.c b/dft/simd/armsve/t2bv_5.c
new file mode 100644
index 0000000..6ee4d5b
--- /dev/null
+++ b/dft/simd/armsve/t2bv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_5.c"
diff --git a/dft/simd/armsve/t2bv_64.c b/dft/simd/armsve/t2bv_64.c
new file mode 100644
index 0000000..5df3d19
--- /dev/null
+++ b/dft/simd/armsve/t2bv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_64.c"
diff --git a/dft/simd/armsve/t2bv_8.c b/dft/simd/armsve/t2bv_8.c
new file mode 100644
index 0000000..ddd065d
--- /dev/null
+++ b/dft/simd/armsve/t2bv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2bv_8.c"
diff --git a/dft/simd/armsve/t2fv_10.c b/dft/simd/armsve/t2fv_10.c
new file mode 100644
index 0000000..3c9cc42
--- /dev/null
+++ b/dft/simd/armsve/t2fv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_10.c"
diff --git a/dft/simd/armsve/t2fv_16.c b/dft/simd/armsve/t2fv_16.c
new file mode 100644
index 0000000..5dc0b8a
--- /dev/null
+++ b/dft/simd/armsve/t2fv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_16.c"
diff --git a/dft/simd/armsve/t2fv_2.c b/dft/simd/armsve/t2fv_2.c
new file mode 100644
index 0000000..ba20710
--- /dev/null
+++ b/dft/simd/armsve/t2fv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_2.c"
diff --git a/dft/simd/armsve/t2fv_20.c b/dft/simd/armsve/t2fv_20.c
new file mode 100644
index 0000000..8120af8
--- /dev/null
+++ b/dft/simd/armsve/t2fv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_20.c"
diff --git a/dft/simd/armsve/t2fv_25.c b/dft/simd/armsve/t2fv_25.c
new file mode 100644
index 0000000..3f1b193
--- /dev/null
+++ b/dft/simd/armsve/t2fv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_25.c"
diff --git a/dft/simd/armsve/t2fv_32.c b/dft/simd/armsve/t2fv_32.c
new file mode 100644
index 0000000..9ea786e
--- /dev/null
+++ b/dft/simd/armsve/t2fv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_32.c"
diff --git a/dft/simd/armsve/t2fv_4.c b/dft/simd/armsve/t2fv_4.c
new file mode 100644
index 0000000..cbf681b
--- /dev/null
+++ b/dft/simd/armsve/t2fv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_4.c"
diff --git a/dft/simd/armsve/t2fv_5.c b/dft/simd/armsve/t2fv_5.c
new file mode 100644
index 0000000..ae1f6b9
--- /dev/null
+++ b/dft/simd/armsve/t2fv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_5.c"
diff --git a/dft/simd/armsve/t2fv_64.c b/dft/simd/armsve/t2fv_64.c
new file mode 100644
index 0000000..47c10e3
--- /dev/null
+++ b/dft/simd/armsve/t2fv_64.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_64.c"
diff --git a/dft/simd/armsve/t2fv_8.c b/dft/simd/armsve/t2fv_8.c
new file mode 100644
index 0000000..72016d4
--- /dev/null
+++ b/dft/simd/armsve/t2fv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2fv_8.c"
diff --git a/dft/simd/armsve/t2sv_16.c b/dft/simd/armsve/t2sv_16.c
new file mode 100644
index 0000000..44fa002
--- /dev/null
+++ b/dft/simd/armsve/t2sv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2sv_16.c"
diff --git a/dft/simd/armsve/t2sv_32.c b/dft/simd/armsve/t2sv_32.c
new file mode 100644
index 0000000..b6d07d3
--- /dev/null
+++ b/dft/simd/armsve/t2sv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2sv_32.c"
diff --git a/dft/simd/armsve/t2sv_4.c b/dft/simd/armsve/t2sv_4.c
new file mode 100644
index 0000000..44da518
--- /dev/null
+++ b/dft/simd/armsve/t2sv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2sv_4.c"
diff --git a/dft/simd/armsve/t2sv_8.c b/dft/simd/armsve/t2sv_8.c
new file mode 100644
index 0000000..853d81d
--- /dev/null
+++ b/dft/simd/armsve/t2sv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t2sv_8.c"
diff --git a/dft/simd/armsve/t3bv_10.c b/dft/simd/armsve/t3bv_10.c
new file mode 100644
index 0000000..56b9522
--- /dev/null
+++ b/dft/simd/armsve/t3bv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_10.c"
diff --git a/dft/simd/armsve/t3bv_16.c b/dft/simd/armsve/t3bv_16.c
new file mode 100644
index 0000000..07205d1
--- /dev/null
+++ b/dft/simd/armsve/t3bv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_16.c"
diff --git a/dft/simd/armsve/t3bv_20.c b/dft/simd/armsve/t3bv_20.c
new file mode 100644
index 0000000..f90d382
--- /dev/null
+++ b/dft/simd/armsve/t3bv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_20.c"
diff --git a/dft/simd/armsve/t3bv_25.c b/dft/simd/armsve/t3bv_25.c
new file mode 100644
index 0000000..62956ea
--- /dev/null
+++ b/dft/simd/armsve/t3bv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_25.c"
diff --git a/dft/simd/armsve/t3bv_32.c b/dft/simd/armsve/t3bv_32.c
new file mode 100644
index 0000000..a2d8cfb
--- /dev/null
+++ b/dft/simd/armsve/t3bv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_32.c"
diff --git a/dft/simd/armsve/t3bv_4.c b/dft/simd/armsve/t3bv_4.c
new file mode 100644
index 0000000..ae41f91
--- /dev/null
+++ b/dft/simd/armsve/t3bv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_4.c"
diff --git a/dft/simd/armsve/t3bv_5.c b/dft/simd/armsve/t3bv_5.c
new file mode 100644
index 0000000..eb1eac4
--- /dev/null
+++ b/dft/simd/armsve/t3bv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_5.c"
diff --git a/dft/simd/armsve/t3bv_8.c b/dft/simd/armsve/t3bv_8.c
new file mode 100644
index 0000000..cd3d079
--- /dev/null
+++ b/dft/simd/armsve/t3bv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3bv_8.c"
diff --git a/dft/simd/armsve/t3fv_10.c b/dft/simd/armsve/t3fv_10.c
new file mode 100644
index 0000000..31cfc67
--- /dev/null
+++ b/dft/simd/armsve/t3fv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_10.c"
diff --git a/dft/simd/armsve/t3fv_16.c b/dft/simd/armsve/t3fv_16.c
new file mode 100644
index 0000000..f34cfb9
--- /dev/null
+++ b/dft/simd/armsve/t3fv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_16.c"
diff --git a/dft/simd/armsve/t3fv_20.c b/dft/simd/armsve/t3fv_20.c
new file mode 100644
index 0000000..3320b5f
--- /dev/null
+++ b/dft/simd/armsve/t3fv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_20.c"
diff --git a/dft/simd/armsve/t3fv_25.c b/dft/simd/armsve/t3fv_25.c
new file mode 100644
index 0000000..850af07
--- /dev/null
+++ b/dft/simd/armsve/t3fv_25.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_25.c"
diff --git a/dft/simd/armsve/t3fv_32.c b/dft/simd/armsve/t3fv_32.c
new file mode 100644
index 0000000..e0156df
--- /dev/null
+++ b/dft/simd/armsve/t3fv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_32.c"
diff --git a/dft/simd/armsve/t3fv_4.c b/dft/simd/armsve/t3fv_4.c
new file mode 100644
index 0000000..864fd98
--- /dev/null
+++ b/dft/simd/armsve/t3fv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_4.c"
diff --git a/dft/simd/armsve/t3fv_5.c b/dft/simd/armsve/t3fv_5.c
new file mode 100644
index 0000000..84e5715
--- /dev/null
+++ b/dft/simd/armsve/t3fv_5.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_5.c"
diff --git a/dft/simd/armsve/t3fv_8.c b/dft/simd/armsve/t3fv_8.c
new file mode 100644
index 0000000..ce0cb7f
--- /dev/null
+++ b/dft/simd/armsve/t3fv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/t3fv_8.c"
diff --git a/dft/simd/avx-128-fma/Makefile.in b/dft/simd/avx-128-fma/Makefile.in
index 44ad068..76713ba 100644
--- a/dft/simd/avx-128-fma/Makefile.in
+++ b/dft/simd/avx-128-fma/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/avx/Makefile.in b/dft/simd/avx/Makefile.in
index a0c50d9..58528a3 100644
--- a/dft/simd/avx/Makefile.in
+++ b/dft/simd/avx/Makefile.in
@@ -273,6 +273,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/avx2-128/Makefile.in b/dft/simd/avx2-128/Makefile.in
index 1b093a5..34a99c3 100644
--- a/dft/simd/avx2-128/Makefile.in
+++ b/dft/simd/avx2-128/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/avx2/Makefile.in b/dft/simd/avx2/Makefile.in
index 7d38017..06b94e3 100644
--- a/dft/simd/avx2/Makefile.in
+++ b/dft/simd/avx2/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/avx512/Makefile.in b/dft/simd/avx512/Makefile.in
index 19ae704..78d70f3 100644
--- a/dft/simd/avx512/Makefile.in
+++ b/dft/simd/avx512/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/common/Makefile.in b/dft/simd/common/Makefile.in
index a7a1856..c34088a 100644
--- a/dft/simd/common/Makefile.in
+++ b/dft/simd/common/Makefile.in
@@ -155,6 +155,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/common/n1bv_10.c b/dft/simd/common/n1bv_10.c
index 788f003..17b7260 100644
--- a/dft/simd/common/n1bv_10.c
+++ b/dft/simd/common/n1bv_10.c
@@ -40,6 +40,7 @@ static void n1bv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -143,6 +144,7 @@ static void n1bv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_11.c b/dft/simd/common/n1bv_11.c
index af83ba8..8936144 100644
--- a/dft/simd/common/n1bv_11.c
+++ b/dft/simd/common/n1bv_11.c
@@ -47,6 +47,7 @@ static void n1bv_11(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP521108558, +0.521108558113202722944698153526659300680427422);
      DVK(KP634356270, +0.634356270682424498893150776899916060542806975);
      DVK(KP342584725, +0.342584725681637509502641509861112333758894680);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -194,6 +195,7 @@ static void n1bv_11(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP989821441, +0.989821441880932732376092037776718787376519372);
      DVK(KP755749574, +0.755749574354258283774035843972344420179717445);
      DVK(KP281732556, +0.281732556841429697711417915346616899035777899);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_12.c b/dft/simd/common/n1bv_12.c
index 8952193..6b7d3b1 100644
--- a/dft/simd/common/n1bv_12.c
+++ b/dft/simd/common/n1bv_12.c
@@ -38,6 +38,7 @@ static void n1bv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -153,6 +154,7 @@ static void n1bv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_128.c b/dft/simd/common/n1bv_128.c
index 2880e73..11ad3b7 100644
--- a/dft/simd/common/n1bv_128.c
+++ b/dft/simd/common/n1bv_128.c
@@ -67,6 +67,7 @@ static void n1bv_128(const R *ri, const R *ii, R *ro, R *io, stride is, stride o
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -1881,6 +1882,7 @@ static void n1bv_128(const R *ri, const R *ii, R *ro, R *io, stride is, stride o
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_13.c b/dft/simd/common/n1bv_13.c
index ac328f5..c7768bc 100644
--- a/dft/simd/common/n1bv_13.c
+++ b/dft/simd/common/n1bv_13.c
@@ -59,6 +59,7 @@ static void n1bv_13(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP226109445, +0.226109445035782405468510155372505010481906348);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -250,6 +251,7 @@ static void n1bv_13(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP300462606, +0.300462606288665774426601772289207995520941381);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_14.c b/dft/simd/common/n1bv_14.c
index fd69328..bc4d18e 100644
--- a/dft/simd/common/n1bv_14.c
+++ b/dft/simd/common/n1bv_14.c
@@ -42,6 +42,7 @@ static void n1bv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -195,6 +196,7 @@ static void n1bv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_15.c b/dft/simd/common/n1bv_15.c
index 0213087..cf77478 100644
--- a/dft/simd/common/n1bv_15.c
+++ b/dft/simd/common/n1bv_15.c
@@ -44,6 +44,7 @@ static void n1bv_15(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -205,6 +206,7 @@ static void n1bv_15(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP484122918, +0.484122918275927110647408174972799951354115213);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_16.c b/dft/simd/common/n1bv_16.c
index 2edbbc4..9c09124 100644
--- a/dft/simd/common/n1bv_16.c
+++ b/dft/simd/common/n1bv_16.c
@@ -39,6 +39,7 @@ static void n1bv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -202,6 +203,7 @@ static void n1bv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_2.c b/dft/simd/common/n1bv_2.c
index 7e0694d..a2073b3 100644
--- a/dft/simd/common/n1bv_2.c
+++ b/dft/simd/common/n1bv_2.c
@@ -36,6 +36,7 @@
 
 static void n1bv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -72,6 +73,7 @@ void XSIMD(codelet_n1bv_2) (planner *p) {
 
 static void n1bv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_20.c b/dft/simd/common/n1bv_20.c
index 52519a3..116f951 100644
--- a/dft/simd/common/n1bv_20.c
+++ b/dft/simd/common/n1bv_20.c
@@ -40,6 +40,7 @@ static void n1bv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -238,6 +239,7 @@ static void n1bv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_25.c b/dft/simd/common/n1bv_25.c
index a50cb4d..226b4eb 100644
--- a/dft/simd/common/n1bv_25.c
+++ b/dft/simd/common/n1bv_25.c
@@ -103,6 +103,7 @@ static void n1bv_25(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -515,6 +516,7 @@ static void n1bv_25(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_3.c b/dft/simd/common/n1bv_3.c
index 6b0d201..48acf47 100644
--- a/dft/simd/common/n1bv_3.c
+++ b/dft/simd/common/n1bv_3.c
@@ -38,6 +38,7 @@ static void n1bv_3(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -81,6 +82,7 @@ static void n1bv_3(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_32.c b/dft/simd/common/n1bv_32.c
index b4d9f13..2920d74 100644
--- a/dft/simd/common/n1bv_32.c
+++ b/dft/simd/common/n1bv_32.c
@@ -43,6 +43,7 @@ static void n1bv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -395,6 +396,7 @@ static void n1bv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_4.c b/dft/simd/common/n1bv_4.c
index c6ed8c7..a3ec38a 100644
--- a/dft/simd/common/n1bv_4.c
+++ b/dft/simd/common/n1bv_4.c
@@ -36,6 +36,7 @@
 
 static void n1bv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -83,6 +84,7 @@ void XSIMD(codelet_n1bv_4) (planner *p) {
 
 static void n1bv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_5.c b/dft/simd/common/n1bv_5.c
index 0e852bd..079e292 100644
--- a/dft/simd/common/n1bv_5.c
+++ b/dft/simd/common/n1bv_5.c
@@ -40,6 +40,7 @@ static void n1bv_5(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -103,6 +104,7 @@ static void n1bv_5(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_6.c b/dft/simd/common/n1bv_6.c
index 763e1ff..b1b4a1a 100644
--- a/dft/simd/common/n1bv_6.c
+++ b/dft/simd/common/n1bv_6.c
@@ -38,6 +38,7 @@ static void n1bv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -102,6 +103,7 @@ static void n1bv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_64.c b/dft/simd/common/n1bv_64.c
index 43a410f..5f5e301 100644
--- a/dft/simd/common/n1bv_64.c
+++ b/dft/simd/common/n1bv_64.c
@@ -51,6 +51,7 @@ static void n1bv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP668178637, +0.668178637919298919997757686523080761552472251);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -855,6 +856,7 @@ static void n1bv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_7.c b/dft/simd/common/n1bv_7.c
index 479aecf..a68a27a 100644
--- a/dft/simd/common/n1bv_7.c
+++ b/dft/simd/common/n1bv_7.c
@@ -42,6 +42,7 @@ static void n1bv_7(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP554958132, +0.554958132087371191422194871006410481067288862);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -122,6 +123,7 @@ static void n1bv_7(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_8.c b/dft/simd/common/n1bv_8.c
index 4f7830d..616c97e 100644
--- a/dft/simd/common/n1bv_8.c
+++ b/dft/simd/common/n1bv_8.c
@@ -37,6 +37,7 @@
 static void n1bv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -116,6 +117,7 @@ void XSIMD(codelet_n1bv_8) (planner *p) {
 static void n1bv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1bv_9.c b/dft/simd/common/n1bv_9.c
index 88b753b..c5c713a 100644
--- a/dft/simd/common/n1bv_9.c
+++ b/dft/simd/common/n1bv_9.c
@@ -55,6 +55,7 @@ static void n1bv_9(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP203604859, +0.203604859554852403062088995281827210665664861);
      DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -175,6 +176,7 @@ static void n1bv_9(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP173648177, +0.173648177666930348851716626769314796000375677);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_10.c b/dft/simd/common/n1fv_10.c
index 320071c..9a9f509 100644
--- a/dft/simd/common/n1fv_10.c
+++ b/dft/simd/common/n1fv_10.c
@@ -40,6 +40,7 @@ static void n1fv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -143,6 +144,7 @@ static void n1fv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_11.c b/dft/simd/common/n1fv_11.c
index ec2427d..e6747e8 100644
--- a/dft/simd/common/n1fv_11.c
+++ b/dft/simd/common/n1fv_11.c
@@ -47,6 +47,7 @@ static void n1fv_11(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP521108558, +0.521108558113202722944698153526659300680427422);
      DVK(KP634356270, +0.634356270682424498893150776899916060542806975);
      DVK(KP342584725, +0.342584725681637509502641509861112333758894680);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -194,6 +195,7 @@ static void n1fv_11(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP281732556, +0.281732556841429697711417915346616899035777899);
      DVK(KP540640817, +0.540640817455597582107635954318691695431770608);
      DVK(KP755749574, +0.755749574354258283774035843972344420179717445);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_12.c b/dft/simd/common/n1fv_12.c
index 1a3b258..fd571e7 100644
--- a/dft/simd/common/n1fv_12.c
+++ b/dft/simd/common/n1fv_12.c
@@ -38,6 +38,7 @@ static void n1fv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -153,6 +154,7 @@ static void n1fv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_128.c b/dft/simd/common/n1fv_128.c
index 180d6c2..da15a22 100644
--- a/dft/simd/common/n1fv_128.c
+++ b/dft/simd/common/n1fv_128.c
@@ -67,6 +67,7 @@ static void n1fv_128(const R *ri, const R *ii, R *ro, R *io, stride is, stride o
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -1881,6 +1882,7 @@ static void n1fv_128(const R *ri, const R *ii, R *ro, R *io, stride is, stride o
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_13.c b/dft/simd/common/n1fv_13.c
index d4c82b5..c307743 100644
--- a/dft/simd/common/n1fv_13.c
+++ b/dft/simd/common/n1fv_13.c
@@ -59,6 +59,7 @@ static void n1fv_13(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP226109445, +0.226109445035782405468510155372505010481906348);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -250,6 +251,7 @@ static void n1fv_13(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP300462606, +0.300462606288665774426601772289207995520941381);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_14.c b/dft/simd/common/n1fv_14.c
index da5e72a..27d1c1c 100644
--- a/dft/simd/common/n1fv_14.c
+++ b/dft/simd/common/n1fv_14.c
@@ -42,6 +42,7 @@ static void n1fv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -195,6 +196,7 @@ static void n1fv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_15.c b/dft/simd/common/n1fv_15.c
index 28ddda4..da19c96 100644
--- a/dft/simd/common/n1fv_15.c
+++ b/dft/simd/common/n1fv_15.c
@@ -44,6 +44,7 @@ static void n1fv_15(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -205,6 +206,7 @@ static void n1fv_15(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP484122918, +0.484122918275927110647408174972799951354115213);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_16.c b/dft/simd/common/n1fv_16.c
index cb7e364..906e13b 100644
--- a/dft/simd/common/n1fv_16.c
+++ b/dft/simd/common/n1fv_16.c
@@ -39,6 +39,7 @@ static void n1fv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -202,6 +203,7 @@ static void n1fv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_2.c b/dft/simd/common/n1fv_2.c
index 79d5f7a..c97ab5b 100644
--- a/dft/simd/common/n1fv_2.c
+++ b/dft/simd/common/n1fv_2.c
@@ -36,6 +36,7 @@
 
 static void n1fv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -72,6 +73,7 @@ void XSIMD(codelet_n1fv_2) (planner *p) {
 
 static void n1fv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_20.c b/dft/simd/common/n1fv_20.c
index 0bb8926..7685d47 100644
--- a/dft/simd/common/n1fv_20.c
+++ b/dft/simd/common/n1fv_20.c
@@ -40,6 +40,7 @@ static void n1fv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -238,6 +239,7 @@ static void n1fv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_25.c b/dft/simd/common/n1fv_25.c
index b7f5b6e..fecb22f 100644
--- a/dft/simd/common/n1fv_25.c
+++ b/dft/simd/common/n1fv_25.c
@@ -103,6 +103,7 @@ static void n1fv_25(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -515,6 +516,7 @@ static void n1fv_25(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_3.c b/dft/simd/common/n1fv_3.c
index b5e5a9c..fb3434d 100644
--- a/dft/simd/common/n1fv_3.c
+++ b/dft/simd/common/n1fv_3.c
@@ -38,6 +38,7 @@ static void n1fv_3(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -81,6 +82,7 @@ static void n1fv_3(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_32.c b/dft/simd/common/n1fv_32.c
index 9c64fb7..e4ea04c 100644
--- a/dft/simd/common/n1fv_32.c
+++ b/dft/simd/common/n1fv_32.c
@@ -43,6 +43,7 @@ static void n1fv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -395,6 +396,7 @@ static void n1fv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_4.c b/dft/simd/common/n1fv_4.c
index 22624eb..f380fde 100644
--- a/dft/simd/common/n1fv_4.c
+++ b/dft/simd/common/n1fv_4.c
@@ -36,6 +36,7 @@
 
 static void n1fv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -83,6 +84,7 @@ void XSIMD(codelet_n1fv_4) (planner *p) {
 
 static void n1fv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_5.c b/dft/simd/common/n1fv_5.c
index 6ee9240..6d0d981 100644
--- a/dft/simd/common/n1fv_5.c
+++ b/dft/simd/common/n1fv_5.c
@@ -40,6 +40,7 @@ static void n1fv_5(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -103,6 +104,7 @@ static void n1fv_5(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_6.c b/dft/simd/common/n1fv_6.c
index 5445792..6a361f1 100644
--- a/dft/simd/common/n1fv_6.c
+++ b/dft/simd/common/n1fv_6.c
@@ -38,6 +38,7 @@ static void n1fv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -102,6 +103,7 @@ static void n1fv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_64.c b/dft/simd/common/n1fv_64.c
index c6157b8..d991171 100644
--- a/dft/simd/common/n1fv_64.c
+++ b/dft/simd/common/n1fv_64.c
@@ -51,6 +51,7 @@ static void n1fv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP668178637, +0.668178637919298919997757686523080761552472251);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -855,6 +856,7 @@ static void n1fv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_7.c b/dft/simd/common/n1fv_7.c
index 7e34acd..fdd0aaf 100644
--- a/dft/simd/common/n1fv_7.c
+++ b/dft/simd/common/n1fv_7.c
@@ -42,6 +42,7 @@ static void n1fv_7(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP554958132, +0.554958132087371191422194871006410481067288862);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -122,6 +123,7 @@ static void n1fv_7(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_8.c b/dft/simd/common/n1fv_8.c
index 70b5607..4085c09 100644
--- a/dft/simd/common/n1fv_8.c
+++ b/dft/simd/common/n1fv_8.c
@@ -37,6 +37,7 @@
 static void n1fv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -116,6 +117,7 @@ void XSIMD(codelet_n1fv_8) (planner *p) {
 static void n1fv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n1fv_9.c b/dft/simd/common/n1fv_9.c
index 7eb2650..eba81ec 100644
--- a/dft/simd/common/n1fv_9.c
+++ b/dft/simd/common/n1fv_9.c
@@ -55,6 +55,7 @@ static void n1fv_9(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP152703644, +0.152703644666139302296566746461370407999248646);
      DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -175,6 +176,7 @@ static void n1fv_9(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
      DVK(KP173648177, +0.173648177666930348851716626769314796000375677);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_10.c b/dft/simd/common/n2bv_10.c
index 405edd3..a068ff7 100644
--- a/dft/simd/common/n2bv_10.c
+++ b/dft/simd/common/n2bv_10.c
@@ -40,6 +40,7 @@ static void n2bv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -164,6 +165,7 @@ static void n2bv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_12.c b/dft/simd/common/n2bv_12.c
index 79f222b..0add278 100644
--- a/dft/simd/common/n2bv_12.c
+++ b/dft/simd/common/n2bv_12.c
@@ -38,6 +38,7 @@ static void n2bv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -177,6 +178,7 @@ static void n2bv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_14.c b/dft/simd/common/n2bv_14.c
index 66496a9..d0bb382 100644
--- a/dft/simd/common/n2bv_14.c
+++ b/dft/simd/common/n2bv_14.c
@@ -42,6 +42,7 @@ static void n2bv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -219,6 +220,7 @@ static void n2bv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_16.c b/dft/simd/common/n2bv_16.c
index 3ab3293..be7385c 100644
--- a/dft/simd/common/n2bv_16.c
+++ b/dft/simd/common/n2bv_16.c
@@ -39,6 +39,7 @@ static void n2bv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -238,6 +239,7 @@ static void n2bv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_2.c b/dft/simd/common/n2bv_2.c
index a7a3412..85fa0c4 100644
--- a/dft/simd/common/n2bv_2.c
+++ b/dft/simd/common/n2bv_2.c
@@ -36,6 +36,7 @@
 
 static void n2bv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -75,6 +76,7 @@ void XSIMD(codelet_n2bv_2) (planner *p) {
 
 static void n2bv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_20.c b/dft/simd/common/n2bv_20.c
index ca4a433..2958b42 100644
--- a/dft/simd/common/n2bv_20.c
+++ b/dft/simd/common/n2bv_20.c
@@ -40,6 +40,7 @@ static void n2bv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -280,6 +281,7 @@ static void n2bv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_32.c b/dft/simd/common/n2bv_32.c
index 2c7e5ef..69dce39 100644
--- a/dft/simd/common/n2bv_32.c
+++ b/dft/simd/common/n2bv_32.c
@@ -43,6 +43,7 @@ static void n2bv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -461,6 +462,7 @@ static void n2bv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_4.c b/dft/simd/common/n2bv_4.c
index bfb70a6..9fc8236 100644
--- a/dft/simd/common/n2bv_4.c
+++ b/dft/simd/common/n2bv_4.c
@@ -36,6 +36,7 @@
 
 static void n2bv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -92,6 +93,7 @@ void XSIMD(codelet_n2bv_4) (planner *p) {
 
 static void n2bv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_6.c b/dft/simd/common/n2bv_6.c
index 303a41c..671daf7 100644
--- a/dft/simd/common/n2bv_6.c
+++ b/dft/simd/common/n2bv_6.c
@@ -38,6 +38,7 @@ static void n2bv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -114,6 +115,7 @@ static void n2bv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_64.c b/dft/simd/common/n2bv_64.c
index d68724d..3c73e8b 100644
--- a/dft/simd/common/n2bv_64.c
+++ b/dft/simd/common/n2bv_64.c
@@ -51,6 +51,7 @@ static void n2bv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP668178637, +0.668178637919298919997757686523080761552472251);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -979,6 +980,7 @@ static void n2bv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2bv_8.c b/dft/simd/common/n2bv_8.c
index 576f81d..df79d88 100644
--- a/dft/simd/common/n2bv_8.c
+++ b/dft/simd/common/n2bv_8.c
@@ -37,6 +37,7 @@
 static void n2bv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -131,6 +132,7 @@ void XSIMD(codelet_n2bv_8) (planner *p) {
 static void n2bv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_10.c b/dft/simd/common/n2fv_10.c
index e5e6042..437397a 100644
--- a/dft/simd/common/n2fv_10.c
+++ b/dft/simd/common/n2fv_10.c
@@ -40,6 +40,7 @@ static void n2fv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -164,6 +165,7 @@ static void n2fv_10(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_12.c b/dft/simd/common/n2fv_12.c
index 15c46d3..e720bd0 100644
--- a/dft/simd/common/n2fv_12.c
+++ b/dft/simd/common/n2fv_12.c
@@ -38,6 +38,7 @@ static void n2fv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -177,6 +178,7 @@ static void n2fv_12(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_14.c b/dft/simd/common/n2fv_14.c
index 19838ea..1cc4f95 100644
--- a/dft/simd/common/n2fv_14.c
+++ b/dft/simd/common/n2fv_14.c
@@ -42,6 +42,7 @@ static void n2fv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -219,6 +220,7 @@ static void n2fv_14(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_16.c b/dft/simd/common/n2fv_16.c
index deb8e38..7b20311 100644
--- a/dft/simd/common/n2fv_16.c
+++ b/dft/simd/common/n2fv_16.c
@@ -39,6 +39,7 @@ static void n2fv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -238,6 +239,7 @@ static void n2fv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_2.c b/dft/simd/common/n2fv_2.c
index a79fcaa..a9b2418 100644
--- a/dft/simd/common/n2fv_2.c
+++ b/dft/simd/common/n2fv_2.c
@@ -36,6 +36,7 @@
 
 static void n2fv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -75,6 +76,7 @@ void XSIMD(codelet_n2fv_2) (planner *p) {
 
 static void n2fv_2(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_20.c b/dft/simd/common/n2fv_20.c
index da51961..a7b2d1e 100644
--- a/dft/simd/common/n2fv_20.c
+++ b/dft/simd/common/n2fv_20.c
@@ -40,6 +40,7 @@ static void n2fv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -280,6 +281,7 @@ static void n2fv_20(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_32.c b/dft/simd/common/n2fv_32.c
index ec759dc..1ea402e 100644
--- a/dft/simd/common/n2fv_32.c
+++ b/dft/simd/common/n2fv_32.c
@@ -43,6 +43,7 @@ static void n2fv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -461,6 +462,7 @@ static void n2fv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_4.c b/dft/simd/common/n2fv_4.c
index a3d664b..18aecd8 100644
--- a/dft/simd/common/n2fv_4.c
+++ b/dft/simd/common/n2fv_4.c
@@ -36,6 +36,7 @@
 
 static void n2fv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -92,6 +93,7 @@ void XSIMD(codelet_n2fv_4) (planner *p) {
 
 static void n2fv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_6.c b/dft/simd/common/n2fv_6.c
index 2a5afad..9dce72a 100644
--- a/dft/simd/common/n2fv_6.c
+++ b/dft/simd/common/n2fv_6.c
@@ -38,6 +38,7 @@ static void n2fv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -114,6 +115,7 @@ static void n2fv_6(const R *ri, const R *ii, R *ro, R *io, stride is, stride os,
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_64.c b/dft/simd/common/n2fv_64.c
index 280f25e..f30be4a 100644
--- a/dft/simd/common/n2fv_64.c
+++ b/dft/simd/common/n2fv_64.c
@@ -51,6 +51,7 @@ static void n2fv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP668178637, +0.668178637919298919997757686523080761552472251);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -979,6 +980,7 @@ static void n2fv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2fv_8.c b/dft/simd/common/n2fv_8.c
index b109c6a..02e7379 100644
--- a/dft/simd/common/n2fv_8.c
+++ b/dft/simd/common/n2fv_8.c
@@ -37,6 +37,7 @@
 static void n2fv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
@@ -131,6 +132,7 @@ void XSIMD(codelet_n2fv_8) (planner *p) {
 static void n2fv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  const R *xi;
diff --git a/dft/simd/common/n2sv_16.c b/dft/simd/common/n2sv_16.c
index 75296a7..2170f25 100644
--- a/dft/simd/common/n2sv_16.c
+++ b/dft/simd/common/n2sv_16.c
@@ -39,6 +39,7 @@ static void n2sv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(64, is), MAKE_VOLATILE_STRIDE(64, os)) {
@@ -363,6 +364,7 @@ static void n2sv_16(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(64, is), MAKE_VOLATILE_STRIDE(64, os)) {
diff --git a/dft/simd/common/n2sv_32.c b/dft/simd/common/n2sv_32.c
index 453828d..d6f798f 100644
--- a/dft/simd/common/n2sv_32.c
+++ b/dft/simd/common/n2sv_32.c
@@ -43,6 +43,7 @@ static void n2sv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(128, is), MAKE_VOLATILE_STRIDE(128, os)) {
@@ -786,6 +787,7 @@ static void n2sv_32(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(128, is), MAKE_VOLATILE_STRIDE(128, os)) {
diff --git a/dft/simd/common/n2sv_4.c b/dft/simd/common/n2sv_4.c
index 6d38c2f..96cf6e1 100644
--- a/dft/simd/common/n2sv_4.c
+++ b/dft/simd/common/n2sv_4.c
@@ -36,6 +36,7 @@
 
 static void n2sv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(16, is), MAKE_VOLATILE_STRIDE(16, os)) {
@@ -110,6 +111,7 @@ void XSIMD(codelet_n2sv_4) (planner *p) {
 
 static void n2sv_4(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(16, is), MAKE_VOLATILE_STRIDE(16, os)) {
diff --git a/dft/simd/common/n2sv_64.c b/dft/simd/common/n2sv_64.c
index 9a84232..c2a7928 100644
--- a/dft/simd/common/n2sv_64.c
+++ b/dft/simd/common/n2sv_64.c
@@ -51,6 +51,7 @@ static void n2sv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(256, is), MAKE_VOLATILE_STRIDE(256, os)) {
@@ -1782,6 +1783,7 @@ static void n2sv_64(const R *ri, const R *ii, R *ro, R *io, stride is, stride os
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(256, is), MAKE_VOLATILE_STRIDE(256, os)) {
diff --git a/dft/simd/common/n2sv_8.c b/dft/simd/common/n2sv_8.c
index 08f61e9..984abc2 100644
--- a/dft/simd/common/n2sv_8.c
+++ b/dft/simd/common/n2sv_8.c
@@ -37,6 +37,7 @@
 static void n2sv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(32, is), MAKE_VOLATILE_STRIDE(32, os)) {
@@ -188,6 +189,7 @@ void XSIMD(codelet_n2sv_8) (planner *p) {
 static void n2sv_8(const R *ri, const R *ii, R *ro, R *io, stride is, stride os, INT v, INT ivs, INT ovs)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT i;
 	  for (i = v; i > 0; i = i - (2 * VL), ri = ri + ((2 * VL) * ivs), ii = ii + ((2 * VL) * ivs), ro = ro + ((2 * VL) * ovs), io = io + ((2 * VL) * ovs), MAKE_VOLATILE_STRIDE(32, is), MAKE_VOLATILE_STRIDE(32, os)) {
diff --git a/dft/simd/common/q1bv_2.c b/dft/simd/common/q1bv_2.c
index 0190a7e..c31a1cb 100644
--- a/dft/simd/common/q1bv_2.c
+++ b/dft/simd/common/q1bv_2.c
@@ -36,6 +36,7 @@
 
 static void q1bv_2(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -80,6 +81,7 @@ void XSIMD(codelet_q1bv_2) (planner *p) {
 
 static void q1bv_2(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1bv_4.c b/dft/simd/common/q1bv_4.c
index 130c203..16f380b 100644
--- a/dft/simd/common/q1bv_4.c
+++ b/dft/simd/common/q1bv_4.c
@@ -36,6 +36,7 @@
 
 static void q1bv_4(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -154,6 +155,7 @@ void XSIMD(codelet_q1bv_4) (planner *p) {
 
 static void q1bv_4(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1bv_5.c b/dft/simd/common/q1bv_5.c
index 012c3c0..4e3f105 100644
--- a/dft/simd/common/q1bv_5.c
+++ b/dft/simd/common/q1bv_5.c
@@ -40,6 +40,7 @@ static void q1bv_5(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT m
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -252,6 +253,7 @@ static void q1bv_5(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT m
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1bv_8.c b/dft/simd/common/q1bv_8.c
index 182332c..18adb1e 100644
--- a/dft/simd/common/q1bv_8.c
+++ b/dft/simd/common/q1bv_8.c
@@ -37,6 +37,7 @@
 static void q1bv_8(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -542,6 +543,7 @@ void XSIMD(codelet_q1bv_8) (planner *p) {
 static void q1bv_8(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1fv_2.c b/dft/simd/common/q1fv_2.c
index c42f9af..f649389 100644
--- a/dft/simd/common/q1fv_2.c
+++ b/dft/simd/common/q1fv_2.c
@@ -36,6 +36,7 @@
 
 static void q1fv_2(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -80,6 +81,7 @@ void XSIMD(codelet_q1fv_2) (planner *p) {
 
 static void q1fv_2(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1fv_4.c b/dft/simd/common/q1fv_4.c
index 1a5a46b..3d99225 100644
--- a/dft/simd/common/q1fv_4.c
+++ b/dft/simd/common/q1fv_4.c
@@ -36,6 +36,7 @@
 
 static void q1fv_4(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -154,6 +155,7 @@ void XSIMD(codelet_q1fv_4) (planner *p) {
 
 static void q1fv_4(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1fv_5.c b/dft/simd/common/q1fv_5.c
index 9bf9c32..773f01e 100644
--- a/dft/simd/common/q1fv_5.c
+++ b/dft/simd/common/q1fv_5.c
@@ -40,6 +40,7 @@ static void q1fv_5(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT m
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -252,6 +253,7 @@ static void q1fv_5(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT m
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/q1fv_8.c b/dft/simd/common/q1fv_8.c
index 2894a80..753ba8d 100644
--- a/dft/simd/common/q1fv_8.c
+++ b/dft/simd/common/q1fv_8.c
@@ -37,6 +37,7 @@
 static void q1fv_8(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -542,6 +543,7 @@ void XSIMD(codelet_q1fv_8) (planner *p) {
 static void q1fv_8(R *ri, R *ii, const R *W, stride rs, stride vs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_10.c b/dft/simd/common/t1buv_10.c
index bcd36b6..ddb3ffb 100644
--- a/dft/simd/common/t1buv_10.c
+++ b/dft/simd/common/t1buv_10.c
@@ -40,6 +40,7 @@ static void t1buv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -166,6 +167,7 @@ static void t1buv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_2.c b/dft/simd/common/t1buv_2.c
index 8054620..48028f1 100644
--- a/dft/simd/common/t1buv_2.c
+++ b/dft/simd/common/t1buv_2.c
@@ -36,6 +36,7 @@
 
 static void t1buv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -75,6 +76,7 @@ void XSIMD(codelet_t1buv_2) (planner *p) {
 
 static void t1buv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_3.c b/dft/simd/common/t1buv_3.c
index 2b4262e..3487fcc 100644
--- a/dft/simd/common/t1buv_3.c
+++ b/dft/simd/common/t1buv_3.c
@@ -38,6 +38,7 @@ static void t1buv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -86,6 +87,7 @@ static void t1buv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_4.c b/dft/simd/common/t1buv_4.c
index a65ac4a..8d2aa1f 100644
--- a/dft/simd/common/t1buv_4.c
+++ b/dft/simd/common/t1buv_4.c
@@ -36,6 +36,7 @@
 
 static void t1buv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -90,6 +91,7 @@ void XSIMD(codelet_t1buv_4) (planner *p) {
 
 static void t1buv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_5.c b/dft/simd/common/t1buv_5.c
index e49e25f..9436a8a 100644
--- a/dft/simd/common/t1buv_5.c
+++ b/dft/simd/common/t1buv_5.c
@@ -40,6 +40,7 @@ static void t1buv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -115,6 +116,7 @@ static void t1buv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_6.c b/dft/simd/common/t1buv_6.c
index 8613487..f341fcf 100644
--- a/dft/simd/common/t1buv_6.c
+++ b/dft/simd/common/t1buv_6.c
@@ -38,6 +38,7 @@ static void t1buv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -116,6 +117,7 @@ static void t1buv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_7.c b/dft/simd/common/t1buv_7.c
index 619e437..18c14df 100644
--- a/dft/simd/common/t1buv_7.c
+++ b/dft/simd/common/t1buv_7.c
@@ -42,6 +42,7 @@ static void t1buv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -143,6 +144,7 @@ static void t1buv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_8.c b/dft/simd/common/t1buv_8.c
index 68e244f..a411ed7 100644
--- a/dft/simd/common/t1buv_8.c
+++ b/dft/simd/common/t1buv_8.c
@@ -37,6 +37,7 @@
 static void t1buv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -134,6 +135,7 @@ void XSIMD(codelet_t1buv_8) (planner *p) {
 static void t1buv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1buv_9.c b/dft/simd/common/t1buv_9.c
index e084c9d..74f0118 100644
--- a/dft/simd/common/t1buv_9.c
+++ b/dft/simd/common/t1buv_9.c
@@ -55,6 +55,7 @@ static void t1buv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
      DVK(KP586256827, +0.586256827714544512072145703099641959914944179);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -194,6 +195,7 @@ static void t1buv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP984807753, +0.984807753012208059366743024589523013670643252);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_10.c b/dft/simd/common/t1bv_10.c
index 94c0afd..4152801 100644
--- a/dft/simd/common/t1bv_10.c
+++ b/dft/simd/common/t1bv_10.c
@@ -40,6 +40,7 @@ static void t1bv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -166,6 +167,7 @@ static void t1bv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_12.c b/dft/simd/common/t1bv_12.c
index 841c3f6..4e001cb 100644
--- a/dft/simd/common/t1bv_12.c
+++ b/dft/simd/common/t1bv_12.c
@@ -38,6 +38,7 @@ static void t1bv_12(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -186,6 +187,7 @@ static void t1bv_12(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_15.c b/dft/simd/common/t1bv_15.c
index 26e3d7e..8c12ecc 100644
--- a/dft/simd/common/t1bv_15.c
+++ b/dft/simd/common/t1bv_15.c
@@ -44,6 +44,7 @@ static void t1bv_15(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -245,6 +246,7 @@ static void t1bv_15(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_16.c b/dft/simd/common/t1bv_16.c
index a0ce402..057e08c 100644
--- a/dft/simd/common/t1bv_16.c
+++ b/dft/simd/common/t1bv_16.c
@@ -39,6 +39,7 @@ static void t1bv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -239,6 +240,7 @@ static void t1bv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_2.c b/dft/simd/common/t1bv_2.c
index 334816a..2c3ef99 100644
--- a/dft/simd/common/t1bv_2.c
+++ b/dft/simd/common/t1bv_2.c
@@ -36,6 +36,7 @@
 
 static void t1bv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -75,6 +76,7 @@ void XSIMD(codelet_t1bv_2) (planner *p) {
 
 static void t1bv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_20.c b/dft/simd/common/t1bv_20.c
index 9e35ac4..1399477 100644
--- a/dft/simd/common/t1bv_20.c
+++ b/dft/simd/common/t1bv_20.c
@@ -40,6 +40,7 @@ static void t1bv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -289,6 +290,7 @@ static void t1bv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_25.c b/dft/simd/common/t1bv_25.c
index dc2a19f..1f2613e 100644
--- a/dft/simd/common/t1bv_25.c
+++ b/dft/simd/common/t1bv_25.c
@@ -103,6 +103,7 @@ static void t1bv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -580,6 +581,7 @@ static void t1bv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_3.c b/dft/simd/common/t1bv_3.c
index 87f61f9..8454d08 100644
--- a/dft/simd/common/t1bv_3.c
+++ b/dft/simd/common/t1bv_3.c
@@ -38,6 +38,7 @@ static void t1bv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -86,6 +87,7 @@ static void t1bv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_32.c b/dft/simd/common/t1bv_32.c
index c977fe0..f9b93ec 100644
--- a/dft/simd/common/t1bv_32.c
+++ b/dft/simd/common/t1bv_32.c
@@ -43,6 +43,7 @@ static void t1bv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -479,6 +480,7 @@ static void t1bv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_4.c b/dft/simd/common/t1bv_4.c
index be69b8c..edf8d05 100644
--- a/dft/simd/common/t1bv_4.c
+++ b/dft/simd/common/t1bv_4.c
@@ -36,6 +36,7 @@
 
 static void t1bv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -90,6 +91,7 @@ void XSIMD(codelet_t1bv_4) (planner *p) {
 
 static void t1bv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_5.c b/dft/simd/common/t1bv_5.c
index 7239148..6aae771 100644
--- a/dft/simd/common/t1bv_5.c
+++ b/dft/simd/common/t1bv_5.c
@@ -40,6 +40,7 @@ static void t1bv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -115,6 +116,7 @@ static void t1bv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_6.c b/dft/simd/common/t1bv_6.c
index 622984e..2d19052 100644
--- a/dft/simd/common/t1bv_6.c
+++ b/dft/simd/common/t1bv_6.c
@@ -38,6 +38,7 @@ static void t1bv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -116,6 +117,7 @@ static void t1bv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_64.c b/dft/simd/common/t1bv_64.c
index 8e6831c..f6fcd3b 100644
--- a/dft/simd/common/t1bv_64.c
+++ b/dft/simd/common/t1bv_64.c
@@ -51,6 +51,7 @@ static void t1bv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -1012,6 +1013,7 @@ static void t1bv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_7.c b/dft/simd/common/t1bv_7.c
index 3fcb905..ee4b43a 100644
--- a/dft/simd/common/t1bv_7.c
+++ b/dft/simd/common/t1bv_7.c
@@ -42,6 +42,7 @@ static void t1bv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -143,6 +144,7 @@ static void t1bv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_8.c b/dft/simd/common/t1bv_8.c
index 8b4929a..5ca64a3 100644
--- a/dft/simd/common/t1bv_8.c
+++ b/dft/simd/common/t1bv_8.c
@@ -37,6 +37,7 @@
 static void t1bv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -134,6 +135,7 @@ void XSIMD(codelet_t1bv_8) (planner *p) {
 static void t1bv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1bv_9.c b/dft/simd/common/t1bv_9.c
index b6cf18c..badeebe 100644
--- a/dft/simd/common/t1bv_9.c
+++ b/dft/simd/common/t1bv_9.c
@@ -55,6 +55,7 @@ static void t1bv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
      DVK(KP586256827, +0.586256827714544512072145703099641959914944179);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -194,6 +195,7 @@ static void t1bv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP984807753, +0.984807753012208059366743024589523013670643252);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_10.c b/dft/simd/common/t1fuv_10.c
index 3a95e85..0d64f68 100644
--- a/dft/simd/common/t1fuv_10.c
+++ b/dft/simd/common/t1fuv_10.c
@@ -40,6 +40,7 @@ static void t1fuv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -166,6 +167,7 @@ static void t1fuv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_2.c b/dft/simd/common/t1fuv_2.c
index 4819035..62c3d10 100644
--- a/dft/simd/common/t1fuv_2.c
+++ b/dft/simd/common/t1fuv_2.c
@@ -36,6 +36,7 @@
 
 static void t1fuv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -75,6 +76,7 @@ void XSIMD(codelet_t1fuv_2) (planner *p) {
 
 static void t1fuv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_3.c b/dft/simd/common/t1fuv_3.c
index 457a2f4..df80cd5 100644
--- a/dft/simd/common/t1fuv_3.c
+++ b/dft/simd/common/t1fuv_3.c
@@ -38,6 +38,7 @@ static void t1fuv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -86,6 +87,7 @@ static void t1fuv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_4.c b/dft/simd/common/t1fuv_4.c
index 740e008..8539456 100644
--- a/dft/simd/common/t1fuv_4.c
+++ b/dft/simd/common/t1fuv_4.c
@@ -36,6 +36,7 @@
 
 static void t1fuv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -90,6 +91,7 @@ void XSIMD(codelet_t1fuv_4) (planner *p) {
 
 static void t1fuv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_5.c b/dft/simd/common/t1fuv_5.c
index a8a6f1c..870640c 100644
--- a/dft/simd/common/t1fuv_5.c
+++ b/dft/simd/common/t1fuv_5.c
@@ -40,6 +40,7 @@ static void t1fuv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -115,6 +116,7 @@ static void t1fuv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_6.c b/dft/simd/common/t1fuv_6.c
index b6a8c01..35fe39e 100644
--- a/dft/simd/common/t1fuv_6.c
+++ b/dft/simd/common/t1fuv_6.c
@@ -38,6 +38,7 @@ static void t1fuv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -116,6 +117,7 @@ static void t1fuv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_7.c b/dft/simd/common/t1fuv_7.c
index 8c1621a..4981637 100644
--- a/dft/simd/common/t1fuv_7.c
+++ b/dft/simd/common/t1fuv_7.c
@@ -42,6 +42,7 @@ static void t1fuv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -143,6 +144,7 @@ static void t1fuv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_8.c b/dft/simd/common/t1fuv_8.c
index c9ffb52..ca95072 100644
--- a/dft/simd/common/t1fuv_8.c
+++ b/dft/simd/common/t1fuv_8.c
@@ -37,6 +37,7 @@
 static void t1fuv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -134,6 +135,7 @@ void XSIMD(codelet_t1fuv_8) (planner *p) {
 static void t1fuv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fuv_9.c b/dft/simd/common/t1fuv_9.c
index 4298940..20a9b68 100644
--- a/dft/simd/common/t1fuv_9.c
+++ b/dft/simd/common/t1fuv_9.c
@@ -55,6 +55,7 @@ static void t1fuv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
      DVK(KP586256827, +0.586256827714544512072145703099641959914944179);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -194,6 +195,7 @@ static void t1fuv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP813797681, +0.813797681349373692844693217248393223289101568);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_10.c b/dft/simd/common/t1fv_10.c
index 8ab77c5..3233216 100644
--- a/dft/simd/common/t1fv_10.c
+++ b/dft/simd/common/t1fv_10.c
@@ -40,6 +40,7 @@ static void t1fv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -166,6 +167,7 @@ static void t1fv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_12.c b/dft/simd/common/t1fv_12.c
index bf5d629..557e85b 100644
--- a/dft/simd/common/t1fv_12.c
+++ b/dft/simd/common/t1fv_12.c
@@ -38,6 +38,7 @@ static void t1fv_12(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -186,6 +187,7 @@ static void t1fv_12(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_15.c b/dft/simd/common/t1fv_15.c
index 6a30208..3cb7725 100644
--- a/dft/simd/common/t1fv_15.c
+++ b/dft/simd/common/t1fv_15.c
@@ -44,6 +44,7 @@ static void t1fv_15(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -245,6 +246,7 @@ static void t1fv_15(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_16.c b/dft/simd/common/t1fv_16.c
index ce559f9..9e8e18b 100644
--- a/dft/simd/common/t1fv_16.c
+++ b/dft/simd/common/t1fv_16.c
@@ -39,6 +39,7 @@ static void t1fv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -239,6 +240,7 @@ static void t1fv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_2.c b/dft/simd/common/t1fv_2.c
index 03d01e6..6747561 100644
--- a/dft/simd/common/t1fv_2.c
+++ b/dft/simd/common/t1fv_2.c
@@ -36,6 +36,7 @@
 
 static void t1fv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -75,6 +76,7 @@ void XSIMD(codelet_t1fv_2) (planner *p) {
 
 static void t1fv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_20.c b/dft/simd/common/t1fv_20.c
index 6dbe156..7ebda68 100644
--- a/dft/simd/common/t1fv_20.c
+++ b/dft/simd/common/t1fv_20.c
@@ -40,6 +40,7 @@ static void t1fv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -289,6 +290,7 @@ static void t1fv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_25.c b/dft/simd/common/t1fv_25.c
index 212e9d3..a7d9880 100644
--- a/dft/simd/common/t1fv_25.c
+++ b/dft/simd/common/t1fv_25.c
@@ -103,6 +103,7 @@ static void t1fv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -580,6 +581,7 @@ static void t1fv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_3.c b/dft/simd/common/t1fv_3.c
index c032720..9725487 100644
--- a/dft/simd/common/t1fv_3.c
+++ b/dft/simd/common/t1fv_3.c
@@ -38,6 +38,7 @@ static void t1fv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -86,6 +87,7 @@ static void t1fv_3(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_32.c b/dft/simd/common/t1fv_32.c
index b371e28..bd7e810 100644
--- a/dft/simd/common/t1fv_32.c
+++ b/dft/simd/common/t1fv_32.c
@@ -43,6 +43,7 @@ static void t1fv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -479,6 +480,7 @@ static void t1fv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_4.c b/dft/simd/common/t1fv_4.c
index c89b950..e00de6b 100644
--- a/dft/simd/common/t1fv_4.c
+++ b/dft/simd/common/t1fv_4.c
@@ -36,6 +36,7 @@
 
 static void t1fv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -90,6 +91,7 @@ void XSIMD(codelet_t1fv_4) (planner *p) {
 
 static void t1fv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_5.c b/dft/simd/common/t1fv_5.c
index d8ecaea..9c89cef 100644
--- a/dft/simd/common/t1fv_5.c
+++ b/dft/simd/common/t1fv_5.c
@@ -40,6 +40,7 @@ static void t1fv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -115,6 +116,7 @@ static void t1fv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_6.c b/dft/simd/common/t1fv_6.c
index 6f74da9..e9ff475 100644
--- a/dft/simd/common/t1fv_6.c
+++ b/dft/simd/common/t1fv_6.c
@@ -38,6 +38,7 @@ static void t1fv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -116,6 +117,7 @@ static void t1fv_6(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_64.c b/dft/simd/common/t1fv_64.c
index 0bb06db..c4ab6cb 100644
--- a/dft/simd/common/t1fv_64.c
+++ b/dft/simd/common/t1fv_64.c
@@ -51,6 +51,7 @@ static void t1fv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -1012,6 +1013,7 @@ static void t1fv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_7.c b/dft/simd/common/t1fv_7.c
index bbe5af3..ce14b97 100644
--- a/dft/simd/common/t1fv_7.c
+++ b/dft/simd/common/t1fv_7.c
@@ -42,6 +42,7 @@ static void t1fv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP900968867, +0.900968867902419126236102319507445051165919162);
      DVK(KP692021471, +0.692021471630095869627814897002069140197260599);
      DVK(KP356895867, +0.356895867892209443894399510021300583399127187);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -143,6 +144,7 @@ static void t1fv_7(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP781831482, +0.781831482468029808708444526674057750232334519);
      DVK(KP974927912, +0.974927912181823607018131682993931217232785801);
      DVK(KP433883739, +0.433883739117558120475768332848358754609990728);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_8.c b/dft/simd/common/t1fv_8.c
index f18f891..5a73afb 100644
--- a/dft/simd/common/t1fv_8.c
+++ b/dft/simd/common/t1fv_8.c
@@ -37,6 +37,7 @@
 static void t1fv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -134,6 +135,7 @@ void XSIMD(codelet_t1fv_8) (planner *p) {
 static void t1fv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1fv_9.c b/dft/simd/common/t1fv_9.c
index 2dddd7e..5d8b01c 100644
--- a/dft/simd/common/t1fv_9.c
+++ b/dft/simd/common/t1fv_9.c
@@ -55,6 +55,7 @@ static void t1fv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP439692620, +0.439692620785908384054109277324731469936208134);
      DVK(KP586256827, +0.586256827714544512072145703099641959914944179);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -194,6 +195,7 @@ static void t1fv_9(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP813797681, +0.813797681349373692844693217248393223289101568);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t1sv_16.c b/dft/simd/common/t1sv_16.c
index f48c086..439a89e 100644
--- a/dft/simd/common/t1sv_16.c
+++ b/dft/simd/common/t1sv_16.c
@@ -39,6 +39,7 @@ static void t1sv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 30); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 30), MAKE_VOLATILE_STRIDE(32, rs)) {
@@ -447,6 +448,7 @@ static void t1sv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 30); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 30), MAKE_VOLATILE_STRIDE(32, rs)) {
diff --git a/dft/simd/common/t1sv_2.c b/dft/simd/common/t1sv_2.c
index 71fba59..bca2468 100644
--- a/dft/simd/common/t1sv_2.c
+++ b/dft/simd/common/t1sv_2.c
@@ -36,6 +36,7 @@
 
 static void t1sv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 2); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 2), MAKE_VOLATILE_STRIDE(4, rs)) {
@@ -82,6 +83,7 @@ void XSIMD(codelet_t1sv_2) (planner *p) {
 
 static void t1sv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 2); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 2), MAKE_VOLATILE_STRIDE(4, rs)) {
diff --git a/dft/simd/common/t1sv_32.c b/dft/simd/common/t1sv_32.c
index 206870d..88ce7af 100644
--- a/dft/simd/common/t1sv_32.c
+++ b/dft/simd/common/t1sv_32.c
@@ -43,6 +43,7 @@ static void t1sv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 62); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 62), MAKE_VOLATILE_STRIDE(64, rs)) {
@@ -994,6 +995,7 @@ static void t1sv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 62); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 62), MAKE_VOLATILE_STRIDE(64, rs)) {
diff --git a/dft/simd/common/t1sv_4.c b/dft/simd/common/t1sv_4.c
index a13e381..e25ef19 100644
--- a/dft/simd/common/t1sv_4.c
+++ b/dft/simd/common/t1sv_4.c
@@ -36,6 +36,7 @@
 
 static void t1sv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 6); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 6), MAKE_VOLATILE_STRIDE(8, rs)) {
@@ -127,6 +128,7 @@ void XSIMD(codelet_t1sv_4) (planner *p) {
 
 static void t1sv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 6); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 6), MAKE_VOLATILE_STRIDE(8, rs)) {
diff --git a/dft/simd/common/t1sv_8.c b/dft/simd/common/t1sv_8.c
index c8b96f0..39b6681 100644
--- a/dft/simd/common/t1sv_8.c
+++ b/dft/simd/common/t1sv_8.c
@@ -37,6 +37,7 @@
 static void t1sv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 14); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 14), MAKE_VOLATILE_STRIDE(16, rs)) {
@@ -220,6 +221,7 @@ void XSIMD(codelet_t1sv_8) (planner *p) {
 static void t1sv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 14); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 14), MAKE_VOLATILE_STRIDE(16, rs)) {
diff --git a/dft/simd/common/t2bv_10.c b/dft/simd/common/t2bv_10.c
index ad23ea4..bcc0035 100644
--- a/dft/simd/common/t2bv_10.c
+++ b/dft/simd/common/t2bv_10.c
@@ -40,6 +40,7 @@ static void t2bv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -166,6 +167,7 @@ static void t2bv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_16.c b/dft/simd/common/t2bv_16.c
index c8e0d25..88a6a73 100644
--- a/dft/simd/common/t2bv_16.c
+++ b/dft/simd/common/t2bv_16.c
@@ -39,6 +39,7 @@ static void t2bv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -239,6 +240,7 @@ static void t2bv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_2.c b/dft/simd/common/t2bv_2.c
index 457d65b..9d75e5a 100644
--- a/dft/simd/common/t2bv_2.c
+++ b/dft/simd/common/t2bv_2.c
@@ -36,6 +36,7 @@
 
 static void t2bv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -75,6 +76,7 @@ void XSIMD(codelet_t2bv_2) (planner *p) {
 
 static void t2bv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_20.c b/dft/simd/common/t2bv_20.c
index 0cfad9b..fb37e4d 100644
--- a/dft/simd/common/t2bv_20.c
+++ b/dft/simd/common/t2bv_20.c
@@ -40,6 +40,7 @@ static void t2bv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -289,6 +290,7 @@ static void t2bv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_25.c b/dft/simd/common/t2bv_25.c
index 8eb2200..8bbf057 100644
--- a/dft/simd/common/t2bv_25.c
+++ b/dft/simd/common/t2bv_25.c
@@ -103,6 +103,7 @@ static void t2bv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -580,6 +581,7 @@ static void t2bv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_32.c b/dft/simd/common/t2bv_32.c
index 671ea04..62c1c09 100644
--- a/dft/simd/common/t2bv_32.c
+++ b/dft/simd/common/t2bv_32.c
@@ -43,6 +43,7 @@ static void t2bv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -479,6 +480,7 @@ static void t2bv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_4.c b/dft/simd/common/t2bv_4.c
index ab9cbaa..f7f4868 100644
--- a/dft/simd/common/t2bv_4.c
+++ b/dft/simd/common/t2bv_4.c
@@ -36,6 +36,7 @@
 
 static void t2bv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -90,6 +91,7 @@ void XSIMD(codelet_t2bv_4) (planner *p) {
 
 static void t2bv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_5.c b/dft/simd/common/t2bv_5.c
index 8eac6a9..f4e10ee 100644
--- a/dft/simd/common/t2bv_5.c
+++ b/dft/simd/common/t2bv_5.c
@@ -40,6 +40,7 @@ static void t2bv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -115,6 +116,7 @@ static void t2bv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_64.c b/dft/simd/common/t2bv_64.c
index 095a1ef..9fc6e2d 100644
--- a/dft/simd/common/t2bv_64.c
+++ b/dft/simd/common/t2bv_64.c
@@ -51,6 +51,7 @@ static void t2bv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -1012,6 +1013,7 @@ static void t2bv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2bv_8.c b/dft/simd/common/t2bv_8.c
index 9c3f796..15c2bbf 100644
--- a/dft/simd/common/t2bv_8.c
+++ b/dft/simd/common/t2bv_8.c
@@ -37,6 +37,7 @@
 static void t2bv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -134,6 +135,7 @@ void XSIMD(codelet_t2bv_8) (planner *p) {
 static void t2bv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_10.c b/dft/simd/common/t2fv_10.c
index 3406ec4..01fb779 100644
--- a/dft/simd/common/t2fv_10.c
+++ b/dft/simd/common/t2fv_10.c
@@ -40,6 +40,7 @@ static void t2fv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -166,6 +167,7 @@ static void t2fv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_16.c b/dft/simd/common/t2fv_16.c
index 9f9f01c..a425b13 100644
--- a/dft/simd/common/t2fv_16.c
+++ b/dft/simd/common/t2fv_16.c
@@ -39,6 +39,7 @@ static void t2fv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -239,6 +240,7 @@ static void t2fv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_2.c b/dft/simd/common/t2fv_2.c
index bc6b093..952bf67 100644
--- a/dft/simd/common/t2fv_2.c
+++ b/dft/simd/common/t2fv_2.c
@@ -36,6 +36,7 @@
 
 static void t2fv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -75,6 +76,7 @@ void XSIMD(codelet_t2fv_2) (planner *p) {
 
 static void t2fv_2(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_20.c b/dft/simd/common/t2fv_20.c
index ca9171a..6d5c151 100644
--- a/dft/simd/common/t2fv_20.c
+++ b/dft/simd/common/t2fv_20.c
@@ -40,6 +40,7 @@ static void t2fv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -289,6 +290,7 @@ static void t2fv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_25.c b/dft/simd/common/t2fv_25.c
index 0b811d7..62246fd 100644
--- a/dft/simd/common/t2fv_25.c
+++ b/dft/simd/common/t2fv_25.c
@@ -103,6 +103,7 @@ static void t2fv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -580,6 +581,7 @@ static void t2fv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_32.c b/dft/simd/common/t2fv_32.c
index 0048014..49d6290 100644
--- a/dft/simd/common/t2fv_32.c
+++ b/dft/simd/common/t2fv_32.c
@@ -43,6 +43,7 @@ static void t2fv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -479,6 +480,7 @@ static void t2fv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_4.c b/dft/simd/common/t2fv_4.c
index 1546a81..ccac2bd 100644
--- a/dft/simd/common/t2fv_4.c
+++ b/dft/simd/common/t2fv_4.c
@@ -36,6 +36,7 @@
 
 static void t2fv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -90,6 +91,7 @@ void XSIMD(codelet_t2fv_4) (planner *p) {
 
 static void t2fv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_5.c b/dft/simd/common/t2fv_5.c
index 4361aa9..dfda501 100644
--- a/dft/simd/common/t2fv_5.c
+++ b/dft/simd/common/t2fv_5.c
@@ -40,6 +40,7 @@ static void t2fv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -115,6 +116,7 @@ static void t2fv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_64.c b/dft/simd/common/t2fv_64.c
index 6ebf507..0ae50ce 100644
--- a/dft/simd/common/t2fv_64.c
+++ b/dft/simd/common/t2fv_64.c
@@ -51,6 +51,7 @@ static void t2fv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -1012,6 +1013,7 @@ static void t2fv_64(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2fv_8.c b/dft/simd/common/t2fv_8.c
index 720208f..1402a77 100644
--- a/dft/simd/common/t2fv_8.c
+++ b/dft/simd/common/t2fv_8.c
@@ -37,6 +37,7 @@
 static void t2fv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -134,6 +135,7 @@ void XSIMD(codelet_t2fv_8) (planner *p) {
 static void t2fv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t2sv_16.c b/dft/simd/common/t2sv_16.c
index 2f65494..31381e9 100644
--- a/dft/simd/common/t2sv_16.c
+++ b/dft/simd/common/t2sv_16.c
@@ -39,6 +39,7 @@ static void t2sv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 8); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 8), MAKE_VOLATILE_STRIDE(32, rs)) {
@@ -458,6 +459,7 @@ static void t2sv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 8); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 8), MAKE_VOLATILE_STRIDE(32, rs)) {
diff --git a/dft/simd/common/t2sv_32.c b/dft/simd/common/t2sv_32.c
index 7677d85..2aaf500 100644
--- a/dft/simd/common/t2sv_32.c
+++ b/dft/simd/common/t2sv_32.c
@@ -43,6 +43,7 @@ static void t2sv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 8); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 8), MAKE_VOLATILE_STRIDE(64, rs)) {
@@ -1031,6 +1032,7 @@ static void t2sv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 8); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 8), MAKE_VOLATILE_STRIDE(64, rs)) {
diff --git a/dft/simd/common/t2sv_4.c b/dft/simd/common/t2sv_4.c
index 970a1a1..834ca74 100644
--- a/dft/simd/common/t2sv_4.c
+++ b/dft/simd/common/t2sv_4.c
@@ -36,6 +36,7 @@
 
 static void t2sv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 4); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 4), MAKE_VOLATILE_STRIDE(8, rs)) {
@@ -131,6 +132,7 @@ void XSIMD(codelet_t2sv_4) (planner *p) {
 
 static void t2sv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 4); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 4), MAKE_VOLATILE_STRIDE(8, rs)) {
diff --git a/dft/simd/common/t2sv_8.c b/dft/simd/common/t2sv_8.c
index 941cbff..1ebde94 100644
--- a/dft/simd/common/t2sv_8.c
+++ b/dft/simd/common/t2sv_8.c
@@ -37,6 +37,7 @@
 static void t2sv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 6); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 6), MAKE_VOLATILE_STRIDE(16, rs)) {
@@ -228,6 +229,7 @@ void XSIMD(codelet_t2sv_8) (planner *p) {
 static void t2sv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + (mb * 6); m < me; m = m + (2 * VL), ri = ri + ((2 * VL) * ms), ii = ii + ((2 * VL) * ms), W = W + ((2 * VL) * 6), MAKE_VOLATILE_STRIDE(16, rs)) {
diff --git a/dft/simd/common/t3bv_10.c b/dft/simd/common/t3bv_10.c
index aaab869..e02ee37 100644
--- a/dft/simd/common/t3bv_10.c
+++ b/dft/simd/common/t3bv_10.c
@@ -40,6 +40,7 @@ static void t3bv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -172,6 +173,7 @@ static void t3bv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_16.c b/dft/simd/common/t3bv_16.c
index 97448e9..8e15b60 100644
--- a/dft/simd/common/t3bv_16.c
+++ b/dft/simd/common/t3bv_16.c
@@ -39,6 +39,7 @@ static void t3bv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -246,6 +247,7 @@ static void t3bv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_20.c b/dft/simd/common/t3bv_20.c
index 11541ef..23f2189 100644
--- a/dft/simd/common/t3bv_20.c
+++ b/dft/simd/common/t3bv_20.c
@@ -40,6 +40,7 @@ static void t3bv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -297,6 +298,7 @@ static void t3bv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_25.c b/dft/simd/common/t3bv_25.c
index 8a95e7a..3b50255 100644
--- a/dft/simd/common/t3bv_25.c
+++ b/dft/simd/common/t3bv_25.c
@@ -103,6 +103,7 @@ static void t3bv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -588,6 +589,7 @@ static void t3bv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_32.c b/dft/simd/common/t3bv_32.c
index 940c246..b87a84a 100644
--- a/dft/simd/common/t3bv_32.c
+++ b/dft/simd/common/t3bv_32.c
@@ -43,6 +43,7 @@ static void t3bv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -488,6 +489,7 @@ static void t3bv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_4.c b/dft/simd/common/t3bv_4.c
index 2c4135e..fe406df 100644
--- a/dft/simd/common/t3bv_4.c
+++ b/dft/simd/common/t3bv_4.c
@@ -36,6 +36,7 @@
 
 static void t3bv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -95,6 +96,7 @@ void XSIMD(codelet_t3bv_4) (planner *p) {
 
 static void t3bv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_5.c b/dft/simd/common/t3bv_5.c
index 17bc3c0..66fc228 100644
--- a/dft/simd/common/t3bv_5.c
+++ b/dft/simd/common/t3bv_5.c
@@ -40,6 +40,7 @@ static void t3bv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -120,6 +121,7 @@ static void t3bv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3bv_8.c b/dft/simd/common/t3bv_8.c
index f754343..6bf547d 100644
--- a/dft/simd/common/t3bv_8.c
+++ b/dft/simd/common/t3bv_8.c
@@ -37,6 +37,7 @@
 static void t3bv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -140,6 +141,7 @@ void XSIMD(codelet_t3bv_8) (planner *p) {
 static void t3bv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_10.c b/dft/simd/common/t3fv_10.c
index 904d3b1..3915d30 100644
--- a/dft/simd/common/t3fv_10.c
+++ b/dft/simd/common/t3fv_10.c
@@ -40,6 +40,7 @@ static void t3fv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -172,6 +173,7 @@ static void t3fv_10(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_16.c b/dft/simd/common/t3fv_16.c
index 0b36767..6809d3f 100644
--- a/dft/simd/common/t3fv_16.c
+++ b/dft/simd/common/t3fv_16.c
@@ -39,6 +39,7 @@ static void t3fv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -246,6 +247,7 @@ static void t3fv_16(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_20.c b/dft/simd/common/t3fv_20.c
index ac02707..1a3e7ad 100644
--- a/dft/simd/common/t3fv_20.c
+++ b/dft/simd/common/t3fv_20.c
@@ -40,6 +40,7 @@ static void t3fv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -297,6 +298,7 @@ static void t3fv_20(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_25.c b/dft/simd/common/t3fv_25.c
index 43f04bc..732cb18 100644
--- a/dft/simd/common/t3fv_25.c
+++ b/dft/simd/common/t3fv_25.c
@@ -103,6 +103,7 @@ static void t3fv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -588,6 +589,7 @@ static void t3fv_25(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_32.c b/dft/simd/common/t3fv_32.c
index 166649d..e612f7c 100644
--- a/dft/simd/common/t3fv_32.c
+++ b/dft/simd/common/t3fv_32.c
@@ -43,6 +43,7 @@ static void t3fv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -488,6 +489,7 @@ static void t3fv_32(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_4.c b/dft/simd/common/t3fv_4.c
index 7ee2dee..239c941 100644
--- a/dft/simd/common/t3fv_4.c
+++ b/dft/simd/common/t3fv_4.c
@@ -36,6 +36,7 @@
 
 static void t3fv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -95,6 +96,7 @@ void XSIMD(codelet_t3fv_4) (planner *p) {
 
 static void t3fv_4(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_5.c b/dft/simd/common/t3fv_5.c
index 5e30f38..2653a5b 100644
--- a/dft/simd/common/t3fv_5.c
+++ b/dft/simd/common/t3fv_5.c
@@ -40,6 +40,7 @@ static void t3fv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -120,6 +121,7 @@ static void t3fv_5(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/common/t3fv_8.c b/dft/simd/common/t3fv_8.c
index aab9e97..88748f6 100644
--- a/dft/simd/common/t3fv_8.c
+++ b/dft/simd/common/t3fv_8.c
@@ -37,6 +37,7 @@
 static void t3fv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
@@ -140,6 +141,7 @@ void XSIMD(codelet_t3fv_8) (planner *p) {
 static void t3fv_8(R *ri, R *ii, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  R *x;
diff --git a/dft/simd/generic-simd128/Makefile.in b/dft/simd/generic-simd128/Makefile.in
index 53995db..aa2af40 100644
--- a/dft/simd/generic-simd128/Makefile.in
+++ b/dft/simd/generic-simd128/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/generic-simd256/Makefile.in b/dft/simd/generic-simd256/Makefile.in
index 685fbac..a77e4c0 100644
--- a/dft/simd/generic-simd256/Makefile.in
+++ b/dft/simd/generic-simd256/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/kcvi/Makefile.in b/dft/simd/kcvi/Makefile.in
index a3bb919..17f3e3a 100644
--- a/dft/simd/kcvi/Makefile.in
+++ b/dft/simd/kcvi/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/neon/Makefile.in b/dft/simd/neon/Makefile.in
index b0a9b53..88faa26 100644
--- a/dft/simd/neon/Makefile.in
+++ b/dft/simd/neon/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/sse2/Makefile.in b/dft/simd/sse2/Makefile.in
index 8d35ebc..b761584 100644
--- a/dft/simd/sse2/Makefile.in
+++ b/dft/simd/sse2/Makefile.in
@@ -275,6 +275,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/dft/simd/vsx/Makefile.in b/dft/simd/vsx/Makefile.in
index 11cceab..3aa45c9 100644
--- a/dft/simd/vsx/Makefile.in
+++ b/dft/simd/vsx/Makefile.in
@@ -273,6 +273,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/doc/FAQ/Makefile.in b/doc/FAQ/Makefile.in
index c525620..df4bb83 100644
--- a/doc/FAQ/Makefile.in
+++ b/doc/FAQ/Makefile.in
@@ -135,6 +135,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/doc/Makefile.in b/doc/Makefile.in
index 4c5d971..d757e52 100644
--- a/doc/Makefile.in
+++ b/doc/Makefile.in
@@ -264,6 +264,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/genfft/Makefile.in b/genfft/Makefile.in
index 48fc99e..2650719 100644
--- a/genfft/Makefile.in
+++ b/genfft/Makefile.in
@@ -137,6 +137,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/kernel/Makefile.in b/kernel/Makefile.in
index 7672029..7cd9fff 100644
--- a/kernel/Makefile.in
+++ b/kernel/Makefile.in
@@ -191,6 +191,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/kernel/ifftw.h b/kernel/ifftw.h
index 0733e75..9e8d0ad 100644
--- a/kernel/ifftw.h
+++ b/kernel/ifftw.h
@@ -103,7 +103,7 @@ extern void X(extract_reim)(int sign, R *c, R **r, R **i);
       defined(HAVE_AVX2) || defined(HAVE_AVX512) || \
       defined(HAVE_KCVI) || \
       defined(HAVE_ALTIVEC) || defined(HAVE_VSX) || \
-      defined(HAVE_MIPS_PS) || \
+      defined(HAVE_MIPS_PS) || defined(HAVE_NEON) || defined(HAVE_ARMSVE) || \
       defined(HAVE_GENERIC_SIMD128) || defined(HAVE_GENERIC_SIMD256)
 #define HAVE_SIMD 1
 #else
@@ -119,6 +119,7 @@ extern int X(have_simd_avx512)(void);
 extern int X(have_simd_altivec)(void);
 extern int X(have_simd_vsx)(void);
 extern int X(have_simd_neon)(void);
+extern int X(have_simd_armsve)(void);
 
 /* forward declarations */
 typedef struct problem_s problem;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index e42f6f3..a250435 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -131,6 +131,9 @@ void *X(kernel_malloc)(size_t n)
 #    error "Don't know how to malloc() aligned memory ... try configuring --with-our-malloc"
 #  endif
 
+#  elif defined(__FUJITSU) /* FUJITSU COMPILER for ARM-SVE */
+     p = (void *) malloc(n);
+
 #else /* !defined(MIN_ALIGNMENT) */
      p = malloc(n);
 #endif
diff --git a/libbench2/Makefile.in b/libbench2/Makefile.in
index 320c81b..deb0b3d 100644
--- a/libbench2/Makefile.in
+++ b/libbench2/Makefile.in
@@ -202,6 +202,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/m4/Makefile.in b/m4/Makefile.in
index 0ce8f9d..1592a13 100644
--- a/m4/Makefile.in
+++ b/m4/Makefile.in
@@ -135,6 +135,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/mpi/Makefile.in b/mpi/Makefile.in
index a387b97..7fcb084 100644
--- a/mpi/Makefile.in
+++ b/mpi/Makefile.in
@@ -253,6 +253,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/Makefile.in b/rdft/Makefile.in
index 7ec149a..753d4d1 100644
--- a/rdft/Makefile.in
+++ b/rdft/Makefile.in
@@ -236,6 +236,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/codelet-rdft.h b/rdft/codelet-rdft.h
index 789040f..497a220 100644
--- a/rdft/codelet-rdft.h
+++ b/rdft/codelet-rdft.h
@@ -145,6 +145,7 @@ extern const solvtab X(solvtab_rdft_kcvi);
 extern const solvtab X(solvtab_rdft_altivec);
 extern const solvtab X(solvtab_rdft_vsx);
 extern const solvtab X(solvtab_rdft_neon);
+extern const solvtab X(solvtab_rdft_armsve);
 extern const solvtab X(solvtab_rdft_generic_simd128);
 extern const solvtab X(solvtab_rdft_generic_simd256);
 
diff --git a/rdft/conf.c b/rdft/conf.c
index 5fe8d66..aa8362f 100644
--- a/rdft/conf.c
+++ b/rdft/conf.c
@@ -96,6 +96,10 @@ void X(rdft_conf_standard)(planner *p)
      if (X(have_simd_neon)())
 	  X(solvtab_exec)(X(solvtab_rdft_neon), p);
 #endif
+#if HAVE_ARMSVE
+     if (X(have_simd_armsve)())
+	  X(solvtab_exec)(X(solvtab_rdft_armsve), p);
+#endif
 #if HAVE_GENERIC_SIMD128
      X(solvtab_exec)(X(solvtab_rdft_generic_simd128), p);
 #endif
diff --git a/rdft/scalar/Makefile.in b/rdft/scalar/Makefile.in
index 77a39ac..7dd4ee8 100644
--- a/rdft/scalar/Makefile.in
+++ b/rdft/scalar/Makefile.in
@@ -226,6 +226,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/scalar/r2cb/Makefile.in b/rdft/scalar/r2cb/Makefile.in
index 9a077ac..bbd8385 100644
--- a/rdft/scalar/r2cb/Makefile.in
+++ b/rdft/scalar/r2cb/Makefile.in
@@ -228,6 +228,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/scalar/r2cf/Makefile.in b/rdft/scalar/r2cf/Makefile.in
index 31c1135..f83c171 100644
--- a/rdft/scalar/r2cf/Makefile.in
+++ b/rdft/scalar/r2cf/Makefile.in
@@ -228,6 +228,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/scalar/r2r/Makefile.in b/rdft/scalar/r2r/Makefile.in
index 65820cb..e8dc159 100644
--- a/rdft/scalar/r2r/Makefile.in
+++ b/rdft/scalar/r2r/Makefile.in
@@ -209,6 +209,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/Makefile.am b/rdft/simd/Makefile.am
index 53de164..537596a 100644
--- a/rdft/simd/Makefile.am
+++ b/rdft/simd/Makefile.am
@@ -1,4 +1,4 @@
 
 AM_CPPFLAGS = -I $(top_srcdir)
-SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon generic-simd128 generic-simd256
+SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon armsve generic-simd128 generic-simd256
 EXTRA_DIST = hc2cbv.h hc2cfv.h codlist.mk simd.mk
diff --git a/rdft/simd/Makefile.in b/rdft/simd/Makefile.in
index 863f260..9bc85d7 100644
--- a/rdft/simd/Makefile.in
+++ b/rdft/simd/Makefile.in
@@ -195,6 +195,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
@@ -342,7 +343,7 @@ top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 AM_CPPFLAGS = -I $(top_srcdir)
-SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon generic-simd128 generic-simd256
+SUBDIRS = common sse2 avx avx-128-fma avx2 avx2-128 avx512 kcvi altivec vsx neon armsve generic-simd128 generic-simd256
 EXTRA_DIST = hc2cbv.h hc2cfv.h codlist.mk simd.mk
 all: all-recursive
 
diff --git a/rdft/simd/altivec/Makefile.in b/rdft/simd/altivec/Makefile.in
index ae4bcaf..16fc44a 100644
--- a/rdft/simd/altivec/Makefile.in
+++ b/rdft/simd/altivec/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/armsve/Makefile.am b/rdft/simd/armsve/Makefile.am
new file mode 100644
index 0000000..1e64d42
--- /dev/null
+++ b/rdft/simd/armsve/Makefile.am
@@ -0,0 +1,13 @@
+AM_CFLAGS = $(ARMSVE_CFLAGS)
+SIMD_HEADER=simd-support/simd-armsve.h
+
+include $(top_srcdir)/rdft/simd/codlist.mk
+include $(top_srcdir)/rdft/simd/simd.mk
+
+if HAVE_ARMSVE
+
+noinst_LTLIBRARIES = librdft_armsve_codelets.la
+BUILT_SOURCES = $(EXTRA_DIST)
+librdft_armsve_codelets_la_SOURCES = $(BUILT_SOURCES)
+
+endif
diff --git a/rdft/simd/armsve/Makefile.in b/rdft/simd/armsve/Makefile.in
new file mode 100644
index 0000000..4bdd2dc
--- /dev/null
+++ b/rdft/simd/armsve/Makefile.in
@@ -0,0 +1,706 @@
+# Makefile.in generated by automake 1.15 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+
+# This file contains a standard list of RDFT SIMD codelets.  It is
+# included by common/Makefile to generate the C files with the actual
+# codelets in them.  It is included by {sse,sse2,...}/Makefile to
+# generate and compile stub files that include common/*.c
+
+# You can customize FFTW for special needs, e.g. to handle certain
+# sizes more efficiently, by adding new codelets to the lists of those
+# included by default.  If you change the list of codelets, any new
+# ones you added will be automatically generated when you run the
+# bootstrap script (see "Generating your own code" in the FFTW
+# manual).
+
+VPATH = @srcdir@
+am__is_gnu_make = { \
+  if test -z '$(MAKELEVEL)'; then \
+    false; \
+  elif test -n '$(MAKE_HOST)'; then \
+    true; \
+  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
+    true; \
+  else \
+    false; \
+  fi; \
+}
+am__make_running_with_option = \
+  case $${target_option-} in \
+      ?) ;; \
+      *) echo "am__make_running_with_option: internal error: invalid" \
+              "target option '$${target_option-}' specified" >&2; \
+         exit 1;; \
+  esac; \
+  has_opt=no; \
+  sane_makeflags=$$MAKEFLAGS; \
+  if $(am__is_gnu_make); then \
+    sane_makeflags=$$MFLAGS; \
+  else \
+    case $$MAKEFLAGS in \
+      *\\[\ \	]*) \
+        bs=\\; \
+        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
+          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
+    esac; \
+  fi; \
+  skip_next=no; \
+  strip_trailopt () \
+  { \
+    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
+  }; \
+  for flg in $$sane_makeflags; do \
+    test $$skip_next = yes && { skip_next=no; continue; }; \
+    case $$flg in \
+      *=*|--*) continue;; \
+        -*I) strip_trailopt 'I'; skip_next=yes;; \
+      -*I?*) strip_trailopt 'I';; \
+        -*O) strip_trailopt 'O'; skip_next=yes;; \
+      -*O?*) strip_trailopt 'O';; \
+        -*l) strip_trailopt 'l'; skip_next=yes;; \
+      -*l?*) strip_trailopt 'l';; \
+      -[dEDm]) skip_next=yes;; \
+      -[JT]) skip_next=yes;; \
+    esac; \
+    case $$flg in \
+      *$$target_option*) has_opt=yes; break;; \
+    esac; \
+  done; \
+  test $$has_opt = yes
+am__make_dryrun = (target_option=n; $(am__make_running_with_option))
+am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+subdir = rdft/simd/armsve
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/acx_mpi.m4 \
+	$(top_srcdir)/m4/acx_pthread.m4 \
+	$(top_srcdir)/m4/ax_cc_maxopt.m4 \
+	$(top_srcdir)/m4/ax_check_compiler_flags.m4 \
+	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
+	$(top_srcdir)/m4/ax_gcc_aligns_stack.m4 \
+	$(top_srcdir)/m4/ax_gcc_version.m4 \
+	$(top_srcdir)/m4/ax_openmp.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
+mkinstalldirs = $(install_sh) -d
+CONFIG_HEADER = $(top_builddir)/config.h
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+LTLIBRARIES = $(noinst_LTLIBRARIES)
+librdft_armsve_codelets_la_LIBADD =
+am__librdft_armsve_codelets_la_SOURCES_DIST = hc2cfdftv_2.c \
+	hc2cfdftv_4.c hc2cfdftv_6.c hc2cfdftv_8.c hc2cfdftv_10.c \
+	hc2cfdftv_12.c hc2cfdftv_16.c hc2cfdftv_32.c hc2cfdftv_20.c \
+	hc2cbdftv_2.c hc2cbdftv_4.c hc2cbdftv_6.c hc2cbdftv_8.c \
+	hc2cbdftv_10.c hc2cbdftv_12.c hc2cbdftv_16.c hc2cbdftv_32.c \
+	hc2cbdftv_20.c genus.c codlist.c
+am__objects_1 = hc2cfdftv_2.lo hc2cfdftv_4.lo hc2cfdftv_6.lo \
+	hc2cfdftv_8.lo hc2cfdftv_10.lo hc2cfdftv_12.lo hc2cfdftv_16.lo \
+	hc2cfdftv_32.lo hc2cfdftv_20.lo
+am__objects_2 = hc2cbdftv_2.lo hc2cbdftv_4.lo hc2cbdftv_6.lo \
+	hc2cbdftv_8.lo hc2cbdftv_10.lo hc2cbdftv_12.lo hc2cbdftv_16.lo \
+	hc2cbdftv_32.lo hc2cbdftv_20.lo
+am__objects_3 = $(am__objects_1) $(am__objects_2)
+am__objects_4 = $(am__objects_3) genus.lo codlist.lo
+@HAVE_ARMSVE_TRUE@am__objects_5 = $(am__objects_4)
+@HAVE_ARMSVE_TRUE@am_librdft_armsve_codelets_la_OBJECTS =  \
+@HAVE_ARMSVE_TRUE@	$(am__objects_5)
+librdft_armsve_codelets_la_OBJECTS =  \
+	$(am_librdft_armsve_codelets_la_OBJECTS)
+AM_V_lt = $(am__v_lt_@AM_V@)
+am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
+am__v_lt_0 = --silent
+am__v_lt_1 = 
+@HAVE_ARMSVE_TRUE@am_librdft_armsve_codelets_la_rpath =
+AM_V_P = $(am__v_P_@AM_V@)
+am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
+am__v_P_0 = false
+am__v_P_1 = :
+AM_V_GEN = $(am__v_GEN_@AM_V@)
+am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
+am__v_GEN_0 = @echo "  GEN     " $@;
+am__v_GEN_1 = 
+AM_V_at = $(am__v_at_@AM_V@)
+am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
+am__v_at_0 = @
+am__v_at_1 = 
+DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
+depcomp = $(SHELL) $(top_srcdir)/depcomp
+am__depfiles_maybe = depfiles
+am__mv = mv -f
+COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
+	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
+LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
+	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
+	$(AM_CFLAGS) $(CFLAGS)
+AM_V_CC = $(am__v_CC_@AM_V@)
+am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
+am__v_CC_0 = @echo "  CC      " $@;
+am__v_CC_1 = 
+CCLD = $(CC)
+LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
+	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
+	$(AM_LDFLAGS) $(LDFLAGS) -o $@
+AM_V_CCLD = $(am__v_CCLD_@AM_V@)
+am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
+am__v_CCLD_0 = @echo "  CCLD    " $@;
+am__v_CCLD_1 = 
+SOURCES = $(librdft_armsve_codelets_la_SOURCES)
+DIST_SOURCES = $(am__librdft_armsve_codelets_la_SOURCES_DIST)
+am__can_run_installinfo = \
+  case $$AM_UPDATE_INFO_DIR in \
+    n|no|NO) false;; \
+    *) (install-info --version) >/dev/null 2>&1;; \
+  esac
+am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
+# Read a list of newline-separated strings from the standard input,
+# and print each of them once, without duplicates.  Input order is
+# *not* preserved.
+am__uniquify_input = $(AWK) '\
+  BEGIN { nonempty = 0; } \
+  { items[$$0] = 1; nonempty = 1; } \
+  END { if (nonempty) { for (i in items) print i; }; } \
+'
+# Make sure the list of sources is unique.  This is necessary because,
+# e.g., the same source file might be shared among _SOURCES variables
+# for different programs/libraries.
+am__define_uniq_tagged_files = \
+  list='$(am__tagged_files)'; \
+  unique=`for i in $$list; do \
+    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
+  done | $(am__uniquify_input)`
+ETAGS = etags
+CTAGS = ctags
+am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
+	$(top_srcdir)/rdft/simd/codlist.mk \
+	$(top_srcdir)/rdft/simd/simd.mk
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+ALLOCA = @ALLOCA@
+ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
+AMTAR = @AMTAR@
+AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
+AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
+AS = @AS@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AVX2_CFLAGS = @AVX2_CFLAGS@
+AVX512_CFLAGS = @AVX512_CFLAGS@
+AVX_128_FMA_CFLAGS = @AVX_128_FMA_CFLAGS@
+AVX_CFLAGS = @AVX_CFLAGS@
+AWK = @AWK@
+CC = @CC@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CHECK_PL_OPTS = @CHECK_PL_OPTS@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CYGPATH_W = @CYGPATH_W@
+C_FFTW_R2R_KIND = @C_FFTW_R2R_KIND@
+C_MPI_FINT = @C_MPI_FINT@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DLLTOOL = @DLLTOOL@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+F77 = @F77@
+FFLAGS = @FFLAGS@
+FGREP = @FGREP@
+FLIBS = @FLIBS@
+GREP = @GREP@
+INDENT = @INDENT@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+KCVI_CFLAGS = @KCVI_CFLAGS@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBQUADMATH = @LIBQUADMATH@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LTLIBOBJS = @LTLIBOBJS@
+LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
+MAINT = @MAINT@
+MAKEINFO = @MAKEINFO@
+MANIFEST_TOOL = @MANIFEST_TOOL@
+MKDIR_P = @MKDIR_P@
+MPICC = @MPICC@
+MPILIBS = @MPILIBS@
+MPIRUN = @MPIRUN@
+NEON_CFLAGS = @NEON_CFLAGS@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OCAMLBUILD = @OCAMLBUILD@
+OPENMP_CFLAGS = @OPENMP_CFLAGS@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+POW_LIB = @POW_LIB@
+PRECISION = @PRECISION@
+PREC_SUFFIX = @PREC_SUFFIX@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHARED_VERSION_INFO = @SHARED_VERSION_INFO@
+SHELL = @SHELL@
+SSE2_CFLAGS = @SSE2_CFLAGS@
+STACK_ALIGN_CFLAGS = @STACK_ALIGN_CFLAGS@
+STRIP = @STRIP@
+THREADLIBS = @THREADLIBS@
+VERSION = @VERSION@
+VSX_CFLAGS = @VSX_CFLAGS@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_AR = @ac_ct_AR@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+ac_ct_F77 = @ac_ct_F77@
+acx_pthread_config = @acx_pthread_config@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+runstatedir = @runstatedir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+AM_CFLAGS = $(ARMSVE_CFLAGS)
+SIMD_HEADER = simd-support/simd-armsve.h
+HC2CFDFTV = hc2cfdftv_2.c hc2cfdftv_4.c hc2cfdftv_6.c hc2cfdftv_8.c	\
+hc2cfdftv_10.c hc2cfdftv_12.c hc2cfdftv_16.c hc2cfdftv_32.c		\
+hc2cfdftv_20.c
+
+HC2CBDFTV = hc2cbdftv_2.c hc2cbdftv_4.c hc2cbdftv_6.c hc2cbdftv_8.c	\
+hc2cbdftv_10.c hc2cbdftv_12.c hc2cbdftv_16.c hc2cbdftv_32.c		\
+hc2cbdftv_20.c
+
+
+###########################################################################
+SIMD_CODELETS = $(HC2CFDFTV) $(HC2CBDFTV)
+AM_CPPFLAGS = -I $(top_srcdir)
+EXTRA_DIST = $(SIMD_CODELETS) genus.c codlist.c
+@HAVE_ARMSVE_TRUE@noinst_LTLIBRARIES = librdft_armsve_codelets.la
+@HAVE_ARMSVE_TRUE@BUILT_SOURCES = $(EXTRA_DIST)
+@HAVE_ARMSVE_TRUE@librdft_armsve_codelets_la_SOURCES = $(BUILT_SOURCES)
+all: $(BUILT_SOURCES)
+	$(MAKE) $(AM_MAKEFLAGS) all-am
+
+.SUFFIXES:
+.SUFFIXES: .c .lo .o .obj
+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/rdft/simd/codlist.mk $(top_srcdir)/rdft/simd/simd.mk $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu rdft/simd/armsve/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --gnu rdft/simd/armsve/Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+$(top_srcdir)/rdft/simd/codlist.mk $(top_srcdir)/rdft/simd/simd.mk $(am__empty):
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+
+clean-noinstLTLIBRARIES:
+	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
+	@list='$(noinst_LTLIBRARIES)'; \
+	locs=`for p in $$list; do echo $$p; done | \
+	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
+	      sort -u`; \
+	test -z "$$locs" || { \
+	  echo rm -f $${locs}; \
+	  rm -f $${locs}; \
+	}
+
+librdft_armsve_codelets.la: $(librdft_armsve_codelets_la_OBJECTS) $(librdft_armsve_codelets_la_DEPENDENCIES) $(EXTRA_librdft_armsve_codelets_la_DEPENDENCIES) 
+	$(AM_V_CCLD)$(LINK) $(am_librdft_armsve_codelets_la_rpath) $(librdft_armsve_codelets_la_OBJECTS) $(librdft_armsve_codelets_la_LIBADD) $(LIBS)
+
+mostlyclean-compile:
+	-rm -f *.$(OBJEXT)
+
+distclean-compile:
+	-rm -f *.tab.c
+
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/codlist.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/genus.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cbdftv_8.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_10.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_12.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_16.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_32.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_4.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hc2cfdftv_8.Plo@am__quote@
+
+.c.o:
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<
+
+.c.obj:
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`
+
+.c.lo:
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+
+ID: $(am__tagged_files)
+	$(am__define_uniq_tagged_files); mkid -fID $$unique
+tags: tags-am
+TAGS: tags
+
+tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
+	set x; \
+	here=`pwd`; \
+	$(am__define_uniq_tagged_files); \
+	shift; \
+	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
+	  test -n "$$unique" || unique=$$empty_fix; \
+	  if test $$# -gt 0; then \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      "$$@" $$unique; \
+	  else \
+	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
+	      $$unique; \
+	  fi; \
+	fi
+ctags: ctags-am
+
+CTAGS: ctags
+ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
+	$(am__define_uniq_tagged_files); \
+	test -z "$(CTAGS_ARGS)$$unique" \
+	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
+	     $$unique
+
+GTAGS:
+	here=`$(am__cd) $(top_builddir) && pwd` \
+	  && $(am__cd) $(top_srcdir) \
+	  && gtags -i $(GTAGS_ARGS) "$$here"
+cscopelist: cscopelist-am
+
+cscopelist-am: $(am__tagged_files)
+	list='$(am__tagged_files)'; \
+	case "$(srcdir)" in \
+	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
+	  *) sdir=$(subdir)/$(srcdir) ;; \
+	esac; \
+	for i in $$list; do \
+	  if test -f "$$i"; then \
+	    echo "$(subdir)/$$i"; \
+	  else \
+	    echo "$$sdir/$$i"; \
+	  fi; \
+	done >> $(top_builddir)/cscope.files
+
+distclean-tags:
+	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: $(BUILT_SOURCES)
+	$(MAKE) $(AM_MAKEFLAGS) check-am
+all-am: Makefile $(LTLIBRARIES)
+installdirs:
+install: $(BUILT_SOURCES)
+	$(MAKE) $(AM_MAKEFLAGS) install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	if test -z '$(STRIP)'; then \
+	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	      install; \
+	else \
+	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
+	fi
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
+clean: clean-am
+
+clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
+	mostlyclean-am
+
+distclean: distclean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+distclean-am: clean-am distclean-compile distclean-generic \
+	distclean-tags
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am:
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am:
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -rf ./$(DEPDIR)
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-compile mostlyclean-generic \
+	mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am:
+
+.MAKE: all check install install-am install-strip
+
+.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \
+	clean-libtool clean-noinstLTLIBRARIES cscopelist-am ctags \
+	ctags-am distclean distclean-compile distclean-generic \
+	distclean-libtool distclean-tags distdir dvi dvi-am html \
+	html-am info info-am install install-am install-data \
+	install-data-am install-dvi install-dvi-am install-exec \
+	install-exec-am install-html install-html-am install-info \
+	install-info-am install-man install-pdf install-pdf-am \
+	install-ps install-ps-am install-strip installcheck \
+	installcheck-am installdirs maintainer-clean \
+	maintainer-clean-generic mostlyclean mostlyclean-compile \
+	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
+	tags tags-am uninstall uninstall-am
+
+.PRECIOUS: Makefile
+
+
+@MAINTAINER_MODE_TRUE@$(EXTRA_DIST): Makefile
+@MAINTAINER_MODE_TRUE@	(							\
+@MAINTAINER_MODE_TRUE@	echo "/* Generated automatically.  DO NOT EDIT! */";	\
+@MAINTAINER_MODE_TRUE@	echo "#define SIMD_HEADER \"$(SIMD_HEADER)\"";		\
+@MAINTAINER_MODE_TRUE@	echo "#include \"../common/"$*".c\"";			\
+@MAINTAINER_MODE_TRUE@	) >$@
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff --git a/rdft/simd/armsve/codlist.c b/rdft/simd/armsve/codlist.c
new file mode 100644
index 0000000..e9619b7
--- /dev/null
+++ b/rdft/simd/armsve/codlist.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/codlist.c"
diff --git a/rdft/simd/armsve/genus.c b/rdft/simd/armsve/genus.c
new file mode 100644
index 0000000..c966f81
--- /dev/null
+++ b/rdft/simd/armsve/genus.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/genus.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_10.c b/rdft/simd/armsve/hc2cbdftv_10.c
new file mode 100644
index 0000000..0bcea1e
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_10.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_12.c b/rdft/simd/armsve/hc2cbdftv_12.c
new file mode 100644
index 0000000..8406cf4
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_12.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_16.c b/rdft/simd/armsve/hc2cbdftv_16.c
new file mode 100644
index 0000000..46d8ae6
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_16.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_2.c b/rdft/simd/armsve/hc2cbdftv_2.c
new file mode 100644
index 0000000..0c59102
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_2.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_20.c b/rdft/simd/armsve/hc2cbdftv_20.c
new file mode 100644
index 0000000..123a97d
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_20.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_32.c b/rdft/simd/armsve/hc2cbdftv_32.c
new file mode 100644
index 0000000..9327af5
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_32.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_4.c b/rdft/simd/armsve/hc2cbdftv_4.c
new file mode 100644
index 0000000..1466022
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_4.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_6.c b/rdft/simd/armsve/hc2cbdftv_6.c
new file mode 100644
index 0000000..331784e
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_6.c"
diff --git a/rdft/simd/armsve/hc2cbdftv_8.c b/rdft/simd/armsve/hc2cbdftv_8.c
new file mode 100644
index 0000000..080f7d9
--- /dev/null
+++ b/rdft/simd/armsve/hc2cbdftv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cbdftv_8.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_10.c b/rdft/simd/armsve/hc2cfdftv_10.c
new file mode 100644
index 0000000..fd8b16c
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_10.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_10.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_12.c b/rdft/simd/armsve/hc2cfdftv_12.c
new file mode 100644
index 0000000..efb6190
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_12.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_12.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_16.c b/rdft/simd/armsve/hc2cfdftv_16.c
new file mode 100644
index 0000000..68f3bd6
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_16.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_16.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_2.c b/rdft/simd/armsve/hc2cfdftv_2.c
new file mode 100644
index 0000000..4b9762c
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_2.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_2.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_20.c b/rdft/simd/armsve/hc2cfdftv_20.c
new file mode 100644
index 0000000..7148993
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_20.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_20.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_32.c b/rdft/simd/armsve/hc2cfdftv_32.c
new file mode 100644
index 0000000..af2736f
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_32.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_32.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_4.c b/rdft/simd/armsve/hc2cfdftv_4.c
new file mode 100644
index 0000000..d7cf66c
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_4.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_4.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_6.c b/rdft/simd/armsve/hc2cfdftv_6.c
new file mode 100644
index 0000000..a6fd918
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_6.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_6.c"
diff --git a/rdft/simd/armsve/hc2cfdftv_8.c b/rdft/simd/armsve/hc2cfdftv_8.c
new file mode 100644
index 0000000..aa8a8db
--- /dev/null
+++ b/rdft/simd/armsve/hc2cfdftv_8.c
@@ -0,0 +1,3 @@
+/* Generated automatically.  DO NOT EDIT! */
+#define SIMD_HEADER "simd-support/simd-armsve.h"
+#include "../common/hc2cfdftv_8.c"
diff --git a/rdft/simd/avx-128-fma/Makefile.in b/rdft/simd/avx-128-fma/Makefile.in
index cb91df4..a9aa5a0 100644
--- a/rdft/simd/avx-128-fma/Makefile.in
+++ b/rdft/simd/avx-128-fma/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/avx/Makefile.in b/rdft/simd/avx/Makefile.in
index 9def259..e907ff8 100644
--- a/rdft/simd/avx/Makefile.in
+++ b/rdft/simd/avx/Makefile.in
@@ -215,6 +215,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/avx2-128/Makefile.in b/rdft/simd/avx2-128/Makefile.in
index d477c23..c44ec44 100644
--- a/rdft/simd/avx2-128/Makefile.in
+++ b/rdft/simd/avx2-128/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/avx2/Makefile.in b/rdft/simd/avx2/Makefile.in
index fe5116c..1e7ef6b 100644
--- a/rdft/simd/avx2/Makefile.in
+++ b/rdft/simd/avx2/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/avx512/Makefile.in b/rdft/simd/avx512/Makefile.in
index 9a2865d..d23ddca 100644
--- a/rdft/simd/avx512/Makefile.in
+++ b/rdft/simd/avx512/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/common/Makefile.in b/rdft/simd/common/Makefile.in
index a3b8412..23a83e9 100644
--- a/rdft/simd/common/Makefile.in
+++ b/rdft/simd/common/Makefile.in
@@ -155,6 +155,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/common/hc2cbdftv_10.c b/rdft/simd/common/hc2cbdftv_10.c
index 5d2e133..49354dd 100644
--- a/rdft/simd/common/hc2cbdftv_10.c
+++ b/rdft/simd/common/hc2cbdftv_10.c
@@ -40,6 +40,7 @@ static void hc2cbdftv_10(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 18)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 18), MAKE_VOLATILE_STRIDE(40, rs)) {
@@ -172,6 +173,7 @@ static void hc2cbdftv_10(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 18)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 18), MAKE_VOLATILE_STRIDE(40, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_12.c b/rdft/simd/common/hc2cbdftv_12.c
index 0de7fbc..c579e18 100644
--- a/rdft/simd/common/hc2cbdftv_12.c
+++ b/rdft/simd/common/hc2cbdftv_12.c
@@ -38,6 +38,7 @@ static void hc2cbdftv_12(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 22)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 22), MAKE_VOLATILE_STRIDE(48, rs)) {
@@ -189,6 +190,7 @@ static void hc2cbdftv_12(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 22)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 22), MAKE_VOLATILE_STRIDE(48, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_16.c b/rdft/simd/common/hc2cbdftv_16.c
index 9aeee56..1f8863e 100644
--- a/rdft/simd/common/hc2cbdftv_16.c
+++ b/rdft/simd/common/hc2cbdftv_16.c
@@ -39,6 +39,7 @@ static void hc2cbdftv_16(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 30)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 30), MAKE_VOLATILE_STRIDE(64, rs)) {
@@ -235,6 +236,7 @@ static void hc2cbdftv_16(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 30)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 30), MAKE_VOLATILE_STRIDE(64, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_2.c b/rdft/simd/common/hc2cbdftv_2.c
index 16f6e5f..d8dc09f 100644
--- a/rdft/simd/common/hc2cbdftv_2.c
+++ b/rdft/simd/common/hc2cbdftv_2.c
@@ -36,6 +36,7 @@
 
 static void hc2cbdftv_2(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 2)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 2), MAKE_VOLATILE_STRIDE(8, rs)) {
@@ -77,6 +78,7 @@ void XSIMD(codelet_hc2cbdftv_2) (planner *p) {
 
 static void hc2cbdftv_2(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 2)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 2), MAKE_VOLATILE_STRIDE(8, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_20.c b/rdft/simd/common/hc2cbdftv_20.c
index 4409068..6101ac9 100644
--- a/rdft/simd/common/hc2cbdftv_20.c
+++ b/rdft/simd/common/hc2cbdftv_20.c
@@ -40,6 +40,7 @@ static void hc2cbdftv_20(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 38)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 38), MAKE_VOLATILE_STRIDE(80, rs)) {
@@ -294,6 +295,7 @@ static void hc2cbdftv_20(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP559016994, +0.559016994374947424102293417182819058860154590);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 38)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 38), MAKE_VOLATILE_STRIDE(80, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_32.c b/rdft/simd/common/hc2cbdftv_32.c
index 4a5905a..0a90a92 100644
--- a/rdft/simd/common/hc2cbdftv_32.c
+++ b/rdft/simd/common/hc2cbdftv_32.c
@@ -43,6 +43,7 @@ static void hc2cbdftv_32(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 62)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 62), MAKE_VOLATILE_STRIDE(128, rs)) {
@@ -456,6 +457,7 @@ static void hc2cbdftv_32(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 62)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 62), MAKE_VOLATILE_STRIDE(128, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_4.c b/rdft/simd/common/hc2cbdftv_4.c
index 1e6d791..f266a57 100644
--- a/rdft/simd/common/hc2cbdftv_4.c
+++ b/rdft/simd/common/hc2cbdftv_4.c
@@ -36,6 +36,7 @@
 
 static void hc2cbdftv_4(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 6)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 6), MAKE_VOLATILE_STRIDE(16, rs)) {
@@ -94,6 +95,7 @@ void XSIMD(codelet_hc2cbdftv_4) (planner *p) {
 
 static void hc2cbdftv_4(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 6)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 6), MAKE_VOLATILE_STRIDE(16, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_6.c b/rdft/simd/common/hc2cbdftv_6.c
index fd67b38..3af4d4d 100644
--- a/rdft/simd/common/hc2cbdftv_6.c
+++ b/rdft/simd/common/hc2cbdftv_6.c
@@ -38,6 +38,7 @@ static void hc2cbdftv_6(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT m
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 10)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 10), MAKE_VOLATILE_STRIDE(24, rs)) {
@@ -119,6 +120,7 @@ static void hc2cbdftv_6(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT m
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 10)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 10), MAKE_VOLATILE_STRIDE(24, rs)) {
diff --git a/rdft/simd/common/hc2cbdftv_8.c b/rdft/simd/common/hc2cbdftv_8.c
index 56b26fe..54d54a6 100644
--- a/rdft/simd/common/hc2cbdftv_8.c
+++ b/rdft/simd/common/hc2cbdftv_8.c
@@ -37,6 +37,7 @@
 static void hc2cbdftv_8(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 14)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 14), MAKE_VOLATILE_STRIDE(32, rs)) {
@@ -136,6 +137,7 @@ void XSIMD(codelet_hc2cbdftv_8) (planner *p) {
 static void hc2cbdftv_8(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 14)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 14), MAKE_VOLATILE_STRIDE(32, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_10.c b/rdft/simd/common/hc2cfdftv_10.c
index 4edf0a7..4048687 100644
--- a/rdft/simd/common/hc2cfdftv_10.c
+++ b/rdft/simd/common/hc2cfdftv_10.c
@@ -41,6 +41,7 @@ static void hc2cfdftv_10(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 18)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 18), MAKE_VOLATILE_STRIDE(40, rs)) {
@@ -174,6 +175,7 @@ static void hc2cfdftv_10(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 18)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 18), MAKE_VOLATILE_STRIDE(40, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_12.c b/rdft/simd/common/hc2cfdftv_12.c
index 65aba33..118508e 100644
--- a/rdft/simd/common/hc2cfdftv_12.c
+++ b/rdft/simd/common/hc2cfdftv_12.c
@@ -38,6 +38,7 @@ static void hc2cfdftv_12(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 22)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 22), MAKE_VOLATILE_STRIDE(48, rs)) {
@@ -186,6 +187,7 @@ static void hc2cfdftv_12(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 22)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 22), MAKE_VOLATILE_STRIDE(48, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_16.c b/rdft/simd/common/hc2cfdftv_16.c
index afc57a2..bbc6cb7 100644
--- a/rdft/simd/common/hc2cfdftv_16.c
+++ b/rdft/simd/common/hc2cfdftv_16.c
@@ -40,6 +40,7 @@ static void hc2cfdftv_16(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 30)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 30), MAKE_VOLATILE_STRIDE(64, rs)) {
@@ -239,6 +240,7 @@ static void hc2cfdftv_16(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP382683432, +0.382683432365089771728459984030398866761344562);
      DVK(KP923879532, +0.923879532511286756128183189396788286822416626);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 30)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 30), MAKE_VOLATILE_STRIDE(64, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_2.c b/rdft/simd/common/hc2cfdftv_2.c
index 3e8dcf3..e223cb3 100644
--- a/rdft/simd/common/hc2cfdftv_2.c
+++ b/rdft/simd/common/hc2cfdftv_2.c
@@ -37,6 +37,7 @@
 static void hc2cfdftv_2(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 2)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 2), MAKE_VOLATILE_STRIDE(8, rs)) {
@@ -79,6 +80,7 @@ void XSIMD(codelet_hc2cfdftv_2) (planner *p) {
 static void hc2cfdftv_2(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 2)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 2), MAKE_VOLATILE_STRIDE(8, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_20.c b/rdft/simd/common/hc2cfdftv_20.c
index 32a6c85..d381fc3 100644
--- a/rdft/simd/common/hc2cfdftv_20.c
+++ b/rdft/simd/common/hc2cfdftv_20.c
@@ -41,6 +41,7 @@ static void hc2cfdftv_20(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP618033988, +0.618033988749894848204586834365638117720309180);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 38)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 38), MAKE_VOLATILE_STRIDE(80, rs)) {
@@ -300,6 +301,7 @@ static void hc2cfdftv_20(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP587785252, +0.587785252292473129168705954639072768597652438);
      DVK(KP951056516, +0.951056516295153572116439333379382143405698634);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 38)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 38), MAKE_VOLATILE_STRIDE(80, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_32.c b/rdft/simd/common/hc2cfdftv_32.c
index 00685eb..4e95bd0 100644
--- a/rdft/simd/common/hc2cfdftv_32.c
+++ b/rdft/simd/common/hc2cfdftv_32.c
@@ -44,6 +44,7 @@ static void hc2cfdftv_32(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP414213562, +0.414213562373095048801688724209698078569671875);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 62)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 62), MAKE_VOLATILE_STRIDE(128, rs)) {
@@ -459,6 +460,7 @@ static void hc2cfdftv_32(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP353553390, +0.353553390593273762200422181052424519642417969);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 62)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 62), MAKE_VOLATILE_STRIDE(128, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_4.c b/rdft/simd/common/hc2cfdftv_4.c
index d7e1b09..533c498 100644
--- a/rdft/simd/common/hc2cfdftv_4.c
+++ b/rdft/simd/common/hc2cfdftv_4.c
@@ -37,6 +37,7 @@
 static void hc2cfdftv_4(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 6)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 6), MAKE_VOLATILE_STRIDE(16, rs)) {
@@ -96,6 +97,7 @@ void XSIMD(codelet_hc2cfdftv_4) (planner *p) {
 static void hc2cfdftv_4(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT mb, INT me, INT ms)
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 6)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 6), MAKE_VOLATILE_STRIDE(16, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_6.c b/rdft/simd/common/hc2cfdftv_6.c
index 4c3508b..5ec62ff 100644
--- a/rdft/simd/common/hc2cfdftv_6.c
+++ b/rdft/simd/common/hc2cfdftv_6.c
@@ -38,6 +38,7 @@ static void hc2cfdftv_6(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT m
 {
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 10)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 10), MAKE_VOLATILE_STRIDE(24, rs)) {
@@ -120,6 +121,7 @@ static void hc2cfdftv_6(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT m
      DVK(KP250000000, +0.250000000000000000000000000000000000000000000);
      DVK(KP866025403, +0.866025403784438646763723170752936183471402627);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 10)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 10), MAKE_VOLATILE_STRIDE(24, rs)) {
diff --git a/rdft/simd/common/hc2cfdftv_8.c b/rdft/simd/common/hc2cfdftv_8.c
index e3e0fba..ea96550 100644
--- a/rdft/simd/common/hc2cfdftv_8.c
+++ b/rdft/simd/common/hc2cfdftv_8.c
@@ -38,6 +38,7 @@ static void hc2cfdftv_8(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT m
 {
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 14)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 14), MAKE_VOLATILE_STRIDE(32, rs)) {
@@ -139,6 +140,7 @@ static void hc2cfdftv_8(R *Rp, R *Ip, R *Rm, R *Im, const R *W, stride rs, INT m
      DVK(KP707106781, +0.707106781186547524400844362104849039284835938);
      DVK(KP353553390, +0.353553390593273762200422181052424519642417969);
      DVK(KP500000000, +0.500000000000000000000000000000000000000000000);
+     VENTER();
      {
 	  INT m;
 	  for (m = mb, W = W + ((mb - 1) * ((TWVL / VL) * 14)); m < me; m = m + VL, Rp = Rp + (VL * ms), Ip = Ip + (VL * ms), Rm = Rm - (VL * ms), Im = Im - (VL * ms), W = W + (TWVL * 14), MAKE_VOLATILE_STRIDE(32, rs)) {
diff --git a/rdft/simd/generic-simd128/Makefile.in b/rdft/simd/generic-simd128/Makefile.in
index 1e2e027..bbf0710 100644
--- a/rdft/simd/generic-simd128/Makefile.in
+++ b/rdft/simd/generic-simd128/Makefile.in
@@ -217,6 +217,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/generic-simd256/Makefile.in b/rdft/simd/generic-simd256/Makefile.in
index f568f76..6080432 100644
--- a/rdft/simd/generic-simd256/Makefile.in
+++ b/rdft/simd/generic-simd256/Makefile.in
@@ -217,6 +217,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/kcvi/Makefile.in b/rdft/simd/kcvi/Makefile.in
index 7cc20d3..2cbe63a 100644
--- a/rdft/simd/kcvi/Makefile.in
+++ b/rdft/simd/kcvi/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/neon/Makefile.in b/rdft/simd/neon/Makefile.in
index 7fed8e0..cf6a73f 100644
--- a/rdft/simd/neon/Makefile.in
+++ b/rdft/simd/neon/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/sse2/Makefile.in b/rdft/simd/sse2/Makefile.in
index 19e2b02..779b1b5 100644
--- a/rdft/simd/sse2/Makefile.in
+++ b/rdft/simd/sse2/Makefile.in
@@ -216,6 +216,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/rdft/simd/vsx/Makefile.in b/rdft/simd/vsx/Makefile.in
index 4673c3d..3766afe 100644
--- a/rdft/simd/vsx/Makefile.in
+++ b/rdft/simd/vsx/Makefile.in
@@ -215,6 +215,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/reodft/Makefile.in b/reodft/Makefile.in
index a1e3c71..b0c5e8b 100644
--- a/reodft/Makefile.in
+++ b/reodft/Makefile.in
@@ -228,6 +228,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/simd-support/Makefile.am b/simd-support/Makefile.am
index 26db46e..1f9a1ad 100644
--- a/simd-support/Makefile.am
+++ b/simd-support/Makefile.am
@@ -10,6 +10,6 @@ avx2.c simd-avx2.h simd-avx2-128.h \
 avx512.c simd-avx512.h \
 kcvi.c simd-kcvi.h \
 altivec.c simd-altivec.h vsx.c simd-vsx.h \
-neon.c simd-neon.h \
+neon.c simd-neon.h armsve.c simd-armsve.h \
 simd-generic128.h simd-generic256.h
 
diff --git a/simd-support/Makefile.in b/simd-support/Makefile.in
index 5e7e625..705fb1b 100644
--- a/simd-support/Makefile.in
+++ b/simd-support/Makefile.in
@@ -111,7 +111,7 @@ CONFIG_CLEAN_VPATH_FILES =
 LTLIBRARIES = $(noinst_LTLIBRARIES)
 libsimd_support_la_LIBADD =
 am_libsimd_support_la_OBJECTS = taint.lo sse2.lo avx.lo avx-128-fma.lo \
-	avx2.lo avx512.lo kcvi.lo altivec.lo vsx.lo neon.lo
+	avx2.lo avx512.lo kcvi.lo altivec.lo vsx.lo neon.lo armsve.lo
 libsimd_support_la_OBJECTS = $(am_libsimd_support_la_OBJECTS)
 AM_V_lt = $(am__v_lt_@AM_V@)
 am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
@@ -185,6 +185,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
@@ -342,7 +343,7 @@ avx2.c simd-avx2.h simd-avx2-128.h \
 avx512.c simd-avx512.h \
 kcvi.c simd-kcvi.h \
 altivec.c simd-altivec.h vsx.c simd-vsx.h \
-neon.c simd-neon.h \
+neon.c simd-neon.h armsve.c simd-armsve.h \
 simd-generic128.h simd-generic256.h
 
 all: all-am
@@ -406,6 +407,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/avx512.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kcvi.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/neon.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/armsve.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sse2.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/taint.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vsx.Plo@am__quote@
diff --git a/simd-support/armsve.c b/simd-support/armsve.c
new file mode 100644
index 0000000..4f6bb1b
--- /dev/null
+++ b/simd-support/armsve.c
@@ -0,0 +1,18 @@
+/* 
+ * armsve.c
+ * for Fujitsu post-K supercomputer SIMD instruction support
+ * subject to FFTW's license
+ * implemented by Tetsuzo Usui 2018.8
+*/
+
+#include "kernel/ifftw.h"
+
+#if HAVE_ARMSVE
+
+/* assume it is present */
+  int X(have_simd_armsve)(void)
+  {
+       return 1;
+  }
+
+#endif
diff --git a/simd-support/simd-altivec.h b/simd-support/simd-altivec.h
index 519f64b..1e7ad99 100644
--- a/simd-support/simd-altivec.h
+++ b/simd-support/simd-altivec.h
@@ -292,6 +292,7 @@ static inline V BYTWJ2(const R *t, V sr)
   {TW_SIN, v, x}, {TW_SIN, v+1, x}, {TW_SIN, v+2, x}, {TW_SIN, v+3, x}
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-armsve.h b/simd-support/simd-armsve.h
new file mode 100644
index 0000000..4617445
--- /dev/null
+++ b/simd-support/simd-armsve.h
@@ -0,0 +1,237 @@
+/* 
+ * simd-armsve.h
+ * for Fujitsu post-K supercomputer SIMD instruction support
+ * subject to FFTW's license
+ * implemented by Tetsuzo Usui 2018.11
+*/
+
+#if defined(FFTW_LDOUBLE) || defined(FFTW_QUAD)
+#error "ARM-SVE vector instructions only works in single or double precision"
+#endif
+
+#include <arm_sve.h>
+#define SIMD_SUFFIX _armsve  /* for renaming */
+
+#ifdef FFTW_SINGLE
+#define DS(d,s) s /* single-precision option */
+#define SUFF(name) name ## _f32
+#define SUFFx(name) name ## _f32_x
+#define VZERO svdup_n_f32(0.0)
+#define PTRUE svptrue_b32
+#else
+#define DS(d,s) d /* double-precision option */
+#define SUFF(name) name ## _f64
+#define SUFFx(name) name ## _f64_x
+#define VZERO svdup_n_f64(0.0)
+#define PTRUE svptrue_b64
+#endif
+
+#define VL DS(4, 8) /* SIMD complex vector length (512bit) */
+#define SIMD_VSTRIDE_OKA(x) ((x) == 2) 
+#define SIMD_STRIDE_OKPAIR SIMD_STRIDE_OK
+
+typedef DS(svfloat64_t, svfloat32_t) V;
+
+#define LDK(x) x
+#define DVK(var, val) V var = SUFF(svdup_n)(val)
+
+#define FLIP_RI(x) SUFF(svzip1)(SUFF(svuzp2)(x,x),SUFF(svuzp1)(x,x))
+#define VCONJ(x) DS(svneg_f64_m,svneg_f32_m)(x,pgi,x)
+#define VBYI(x) SUFFx(svcadd)(pg,VZERO,x,90)
+
+#define VADD(a,b) SUFFx(svadd)(pg, a, b)
+#define VSUB(a,b) SUFFx(svsub)(pg, a, b)
+#define VMUL(a,b) SUFFx(svmul)(pg, a, b)
+#define VFMA(a, b, c) SUFFx(svmla)(pg, c, a, b)
+#define VFMS(a, b, c) SUFFx(svnmls)(pg, c, a, b)
+#define VFNMS(a, b, c) SUFFx(svmls)(pg, c, a, b)
+
+#define VFMAI(b, c) SUFFx(svcadd)(pg, c, b, 90)
+#define VFNMSI(b, c) SUFFx(svcadd)(pg, c, b, 270)
+#define VFMACONJ(b,c)  VADD(VCONJ(b),c)
+#define VFMSCONJ(b,c)  VSUB(VCONJ(b),c)
+#define VFNMSCONJ(b,c) VSUB(c, VCONJ(b))
+
+static inline V LDA(const R *x, INT ivs, const R *aligned_like) {
+  (void)aligned_like; /* UNUSED */
+  (void)ivs; /* UNUSED */
+  svbool_t pg = PTRUE();
+  return SUFF(svld1)(pg, x);
+}
+static inline void STA(R *x, V v, INT ovs, const R *aligned_like) {
+  (void)aligned_like; /* UNUSED */
+  (void)ovs; /* UNUSED */
+  svbool_t pg = PTRUE();
+  SUFF(svst1)(pg, x, v);
+}
+
+#ifdef FFTW_SINGLE
+static inline V LD(const R *x, INT ivs, const R *aligned_like)
+{
+  (void)aligned_like; /* UNUSED */
+  svbool_t pgp = (ivs) ? svptrue_b32() : svptrue_pat_b32(SV_VL2);
+  svint32_t vidxc = svzip1_s32(svindex_s32(0,ivs),svindex_s32(1,ivs));
+  return svld1_gather_s32index_f32(pgp, x, vidxc);
+}
+static inline void ST(R *x, V v, INT ovs, const R *aligned_like)
+{
+  (void)aligned_like; /* UNUSED */
+  svbool_t pgp = (ovs) ? svptrue_b32() : svptrue_pat_b32(SV_VL2);
+  svint32_t vidxc = svzip1_s32(svindex_s32(0,ovs),svindex_s32(1,ovs));
+  svst1_scatter_s32index_f32(pgp, x, vidxc, v);
+}
+#else /* !FFTW_SINGLE */
+static inline V LD(const R *x, INT ivs, const R *aligned_like)
+{
+  (void)aligned_like; /* UNUSED */
+  svbool_t pgp = (ivs) ? svptrue_b64() : svptrue_pat_b64(SV_VL2);
+  svint64_t vidxc = svzip1_s64(svindex_s64(0,ivs),svindex_s64(1,ivs));
+  return svld1_gather_s64index_f64(pgp, x, vidxc);
+}
+static inline void ST(R *x, V v, INT ovs, const R *aligned_like)
+{
+  (void)aligned_like; /* UNUSED */
+  svbool_t pgp = (ovs) ? svptrue_b64() : svptrue_pat_b64(SV_VL2);
+  svint64_t vidxc = svzip1_s64(svindex_s64(0,ovs),svindex_s64(1,ovs));
+  svst1_scatter_s64index_f64(pgp, x, vidxc, v);
+}
+#endif /* FFTW_SINGLE */
+
+#define STM2(x, v, ovs, a) ST(x, v, ovs, a)
+#define STN2(x, v0, v1, ovs) /* nop */
+
+#ifdef FFTW_SINGLE
+static inline void STM4(R *x, V v, INT ovs, const R *aligned_like)
+{
+  (void)aligned_like; /* UNUSED */
+  svbool_t pg = svptrue_b32();
+  svint32_t vidx = svindex_s32(0,ovs);
+  svst1_scatter_s32index_f32(pg, x, vidx, v);
+}
+#else /* !FFTW_SINGLE */
+static inline void STM4(R *x, V v, INT ovs, const R *aligned_like)
+{
+  (void)aligned_like; /* UNUSED */
+  svbool_t pg = svptrue_b64();
+  svint64_t vidx = svindex_s64(0,ovs);
+  svst1_scatter_s64index_f64(pg, x, vidx, v);
+}
+#endif /* FFTW_SINGLE */
+#define STN4(x, v0, v1, v2, v3, ovs)  /* no-op */
+
+static inline V VZMUL(V tx, V sr)
+{
+  svbool_t pg = PTRUE();
+  return SUFFx(svcmla)(pg, SUFFx(svcmla)(pg,VZERO,tx,sr,0), tx, sr, 90);
+}
+static inline V VZMULJ(V tx, V sr)
+{
+  svbool_t pg = PTRUE();
+  return SUFFx(svcmla)(pg, SUFFx(svcmla)(pg,VZERO,tx,sr,0), tx, sr, 270);
+}
+static inline V VZMULI(V tx, V sr)
+{
+  svbool_t pg = PTRUE();
+  V tmp = SUFFx(svcmla)(pg, SUFFx(svcmla)(pg,VZERO,tx,sr,0), tx, sr, 90);
+  return VBYI(tmp);
+}
+static inline V VZMULIJ(V tx, V sr)
+{
+  svbool_t pg = PTRUE();
+  V tmp = SUFFx(svcmla)(pg, SUFFx(svcmla)(pg,VZERO,tx,sr,0), tx, sr, 270);
+  return VBYI(tmp);
+}
+
+/* twiddle storage #1: compact, slower */
+#ifdef FFTW_SINGLE
+# define VTW1(v,x) {TW_CEXP, v, x}, {TW_CEXP, v+1, x}, {TW_CEXP, v+2, x}, {TW_CEXP, v+3, x}, {TW_CEXP, v+4, x}, {TW_CEXP, v+5, x}, {TW_CEXP, v+6, x}, {TW_CEXP, v+7, x}
+#else /* !FFTW_SINGLE */
+# define VTW1(v,x) {TW_CEXP, v, x}, {TW_CEXP, v+1, x}, {TW_CEXP, v+2, x}, {TW_CEXP, v+3, x}
+#endif /* FFTW_SINGLE */
+#define TWVL1 (VL)
+
+static inline V BYTW1(const R *t, V sr)
+{
+  svbool_t pg = PTRUE();
+  return VZMUL(LDA(t, 2, t), sr);
+}
+
+static inline V BYTWJ1(const R *t, V sr)
+{
+  svbool_t pg = PTRUE();
+  return VZMULJ(LDA(t, 2, t), sr);
+}
+
+/* twiddle storage #2: twice the space, faster (when in cache) */
+#ifdef FFTW_SINGLE
+# define VTW2(v,x)							     \
+   {TW_COS, v  ,  x}, {TW_COS, v  , x}, {TW_COS, v+1,  x}, {TW_COS, v+1, x}, \
+   {TW_COS, v+2,  x}, {TW_COS, v+2, x}, {TW_COS, v+3,  x}, {TW_COS, v+3, x}, \
+   {TW_COS, v+4,  x}, {TW_COS, v+4, x}, {TW_COS, v+5,  x}, {TW_COS, v+5, x}, \
+   {TW_COS, v+6,  x}, {TW_COS, v+6, x}, {TW_COS, v+7,  x}, {TW_COS, v+7, x}, \
+   {TW_SIN, v  , -x}, {TW_SIN, v  , x}, {TW_SIN, v+1, -x}, {TW_SIN, v+1, x}, \
+   {TW_SIN, v+2, -x}, {TW_SIN, v+2, x}, {TW_SIN, v+3, -x}, {TW_SIN, v+3, x}, \
+   {TW_SIN, v+4, -x}, {TW_SIN, v+4, x}, {TW_SIN, v+5, -x}, {TW_SIN, v+5, x}, \
+   {TW_SIN, v+6, -x}, {TW_SIN, v+6, x}, {TW_SIN, v+7, -x}, {TW_SIN, v+7, x}
+#else /* !FFTW_SINGLE */
+# define VTW2(v,x)							     \
+   {TW_COS, v  ,  x}, {TW_COS, v  , x}, {TW_COS, v+1,  x}, {TW_COS, v+1, x}, \
+   {TW_COS, v+2,  x}, {TW_COS, v+2, x}, {TW_COS, v+3,  x}, {TW_COS, v+3, x}, \
+   {TW_SIN, v  , -x}, {TW_SIN, v  , x}, {TW_SIN, v+1, -x}, {TW_SIN, v+1, x}, \
+   {TW_SIN, v+2, -x}, {TW_SIN, v+2, x}, {TW_SIN, v+3, -x}, {TW_SIN, v+3, x}
+#endif /* FFTW_SINGLE */
+#define TWVL2 (2 * VL)
+
+static inline V BYTW2(const R *t, V sr)
+{
+  svbool_t pg = PTRUE();
+  V si = FLIP_RI(sr);
+  V tr = LDA(t, 2, 0), ti = LDA(t + 2*VL, 2, 0);
+  return VFMA(tr, sr, VMUL(ti, si));
+}
+
+static inline V BYTWJ2(const R *t, V sr)
+{
+  svbool_t pg = PTRUE();
+  V si = FLIP_RI(sr);
+  V tr = LDA(t, 2, 0), ti = LDA(t + 2*VL, 2, 0);
+  return VFNMS(ti, si, VMUL(tr, sr));
+}
+
+/* twiddle storage #3 */
+#define VTW3(v,x) VTW1(v,x)
+#define TWVL3 TWVL1
+
+/* twiddle storage for split arrays */
+#ifdef FFTW_SINGLE
+# define VTWS(v,x)                                                            \
+  {TW_COS, v   , x}, {TW_COS, v+1 , x}, {TW_COS, v+2 , x}, {TW_COS, v+3 , x}, \
+  {TW_COS, v+4 , x}, {TW_COS, v+5 , x}, {TW_COS, v+6 , x}, {TW_COS, v+7 , x}, \
+  {TW_COS, v+8 , x}, {TW_COS, v+9 , x}, {TW_COS, v+10, x}, {TW_COS, v+11, x}, \
+  {TW_COS, v+12, x}, {TW_COS, v+13, x}, {TW_COS, v+14, x}, {TW_COS, v+15, x}, \
+  {TW_SIN, v   , x}, {TW_SIN, v+1 , x}, {TW_SIN, v+2 , x}, {TW_SIN, v+3 , x}, \
+  {TW_SIN, v+4 , x}, {TW_SIN, v+5 , x}, {TW_SIN, v+6 , x}, {TW_SIN, v+7 , x}, \
+  {TW_SIN, v+8 , x}, {TW_SIN, v+9 , x}, {TW_SIN, v+10, x}, {TW_SIN, v+11, x}, \
+  {TW_SIN, v+12, x}, {TW_SIN, v+13, x}, {TW_SIN, v+14, x}, {TW_SIN, v+15, x}
+#else /* !FFTW_SINGLE */
+# define VTWS(v,x)							  \
+  {TW_COS, v  , x}, {TW_COS, v+1, x}, {TW_COS, v+2, x}, {TW_COS, v+3, x}, \
+  {TW_COS, v+4, x}, {TW_COS, v+5, x}, {TW_COS, v+6, x}, {TW_COS, v+7, x}, \
+  {TW_SIN, v  , x}, {TW_SIN, v+1, x}, {TW_SIN, v+2, x}, {TW_SIN, v+3, x}, \
+  {TW_SIN, v+4, x}, {TW_SIN, v+5, x}, {TW_SIN, v+6, x}, {TW_SIN, v+7, x}
+#endif /* FFTW_SINGLE */
+#define TWVLS (2 * VL)
+
+#ifdef FFTW_SINGLE
+#define VENTER() \
+  svbool_t pg = svptrue_b32(); \
+  svbool_t pgi = svtrn1_b32(svpfalse_b(),svptrue_b32())
+#else /* !FFTW_SINGLE */
+#define VENTER() \
+  svbool_t pg = svptrue_b64(); \
+  svbool_t pgi = svtrn1_b64(svpfalse_b(),svptrue_b64())
+#endif /* FFTW_SINGLE */
+
+#define VLEAVE() /* nothing */
+
+#include "simd-common.h"
diff --git a/simd-support/simd-avx-128-fma.h b/simd-support/simd-avx-128-fma.h
index 5dcd963..3920377 100644
--- a/simd-support/simd-avx-128-fma.h
+++ b/simd-support/simd-avx-128-fma.h
@@ -327,6 +327,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-avx.h b/simd-support/simd-avx.h
index 7ca6363..543c188 100644
--- a/simd-support/simd-avx.h
+++ b/simd-support/simd-avx.h
@@ -399,6 +399,7 @@ static inline V BYTWJ2(const R *t, V sr)
 /* Use VZEROUPPER to avoid the penalty of switching from AVX to SSE.
    See Intel Optimization Manual (April 2011, version 248966), Section
    11.3 */
+#define VENTER() /* nothing */
 #define VLEAVE _mm256_zeroupper
 
 #include "simd-common.h"
diff --git a/simd-support/simd-avx2-128.h b/simd-support/simd-avx2-128.h
index c1ab7ff..46cde66 100644
--- a/simd-support/simd-avx2-128.h
+++ b/simd-support/simd-avx2-128.h
@@ -337,6 +337,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-avx2.h b/simd-support/simd-avx2.h
index 5217026..436cd7a 100644
--- a/simd-support/simd-avx2.h
+++ b/simd-support/simd-avx2.h
@@ -409,6 +409,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE _mm256_zeroupper
 
 #include "simd-common.h"
diff --git a/simd-support/simd-avx512.h b/simd-support/simd-avx512.h
index 47b60e9..b11ca31 100644
--- a/simd-support/simd-avx512.h
+++ b/simd-support/simd-avx512.h
@@ -311,6 +311,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif /* FFTW_SINGLE */
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE _mm256_zeroupper
 
 #include "simd-common.h"
diff --git a/simd-support/simd-common.h b/simd-support/simd-common.h
index 90031fd..7a1f038 100644
--- a/simd-support/simd-common.h
+++ b/simd-support/simd-common.h
@@ -45,6 +45,9 @@
 #elif defined(HAVE_NEON) || defined(HAVE_VSX)
 #  define ALIGNMENT 8     /* Alignment for the LD/ST macros */
 #  define ALIGNMENTA 8    /* Alignment for the LDA/STA macros */
+#elif defined(HAVE_ARMSVE)
+#  define ALIGNMENT 8     /* Alignment for the LD/ST macros */
+#  define ALIGNMENTA 8    /* Alignment for the LDA/STA macros */
 #elif defined(HAVE_KCVI)
 #  if defined(FFTW_SINGLE)
 #    define ALIGNMENT 8     /* Alignment for the LD/ST macros */
diff --git a/simd-support/simd-generic128.h b/simd-support/simd-generic128.h
index 6ac33ea..24fd9f8 100644
--- a/simd-support/simd-generic128.h
+++ b/simd-support/simd-generic128.h
@@ -283,6 +283,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-generic256.h b/simd-support/simd-generic256.h
index a439cba..0434030 100644
--- a/simd-support/simd-generic256.h
+++ b/simd-support/simd-generic256.h
@@ -328,6 +328,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-kcvi.h b/simd-support/simd-kcvi.h
index 40d525e..4a9bed1 100644
--- a/simd-support/simd-kcvi.h
+++ b/simd-support/simd-kcvi.h
@@ -456,6 +456,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif /* FFTW_SINGLE */
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-neon.h b/simd-support/simd-neon.h
index 1440042..a68f10f 100644
--- a/simd-support/simd-neon.h
+++ b/simd-support/simd-neon.h
@@ -330,6 +330,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE()		/* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-sse2.h b/simd-support/simd-sse2.h
index 44b11b7..436b16a 100644
--- a/simd-support/simd-sse2.h
+++ b/simd-support/simd-sse2.h
@@ -375,6 +375,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/simd-support/simd-vsx.h b/simd-support/simd-vsx.h
index 12b7dad..c57d3e2 100644
--- a/simd-support/simd-vsx.h
+++ b/simd-support/simd-vsx.h
@@ -294,6 +294,7 @@ static inline V BYTWJ2(const R *t, V sr)
 #endif
 #define TWVLS (2 * VL)
 
+#define VENTER() /* nothing */
 #define VLEAVE() /* nothing */
 
 #include "simd-common.h"
diff --git a/support/Makefile.in b/support/Makefile.in
index ae4b508..7bbc621 100644
--- a/support/Makefile.in
+++ b/support/Makefile.in
@@ -135,6 +135,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/tests/Makefile.in b/tests/Makefile.in
index b66561a..1731b51 100644
--- a/tests/Makefile.in
+++ b/tests/Makefile.in
@@ -192,6 +192,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/threads/Makefile.in b/threads/Makefile.in
index a332b44..5e6d27a 100644
--- a/threads/Makefile.in
+++ b/threads/Makefile.in
@@ -237,6 +237,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
diff --git a/tools/Makefile.in b/tools/Makefile.in
index 3fc6a63..b9d13bc 100644
--- a/tools/Makefile.in
+++ b/tools/Makefile.in
@@ -214,6 +214,7 @@ ALTIVEC_CFLAGS = @ALTIVEC_CFLAGS@
 AMTAR = @AMTAR@
 AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
 AR = @AR@
+ARMSVE_CFLAGS = @ARMSVE_CFLAGS@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
 AUTOHEADER = @AUTOHEADER@
